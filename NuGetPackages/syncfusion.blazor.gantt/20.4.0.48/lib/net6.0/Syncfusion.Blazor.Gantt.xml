<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor.Gantt</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Gantt.ViewType">
            <summary>
            Defines whether to show only grid section or chart section or both sections in Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ViewType.ProjectView">
            <summary>
             Defines project view type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TimelineViewMode">
            <summary>
            Defines the schedule header mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.None">
            <summary>
            Defines the default mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Year">
            <summary>
            Defines the year mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Month">
            <summary>
            Defines the month mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Week">
            <summary>
            Defines the week mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Day">
            <summary>
            Defines the day mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Hour">
            <summary>
            Defines the hour mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Minutes">
            <summary>
            Defines the minutes mode header.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ScheduleMode">
            <summary>
            Defines schedule mode of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ScheduleMode.Auto">
            <summary>
            Tasks are displayed in auto scheduled mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ScheduleMode.Manual">
            <summary>
            Tasks are displayed in manual scheduled mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ScheduleMode.Custom">
            <summary>
            Both Auto and Manual tasks are render by mapped from data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.SplitterView">
            <summary>
            Defines initial view of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SplitterView.Default">
            <summary>
            Shows both grid and chart side of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SplitterView.Grid">
            <summary>
            Shows grid side alone in Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SplitterView.Chart">
            <summary>
            Shows chart side alone in Gantt.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.WorkUnit">
            <summary>
            Defines work unit for whole project.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.WorkUnit.Hour">
            <summary>
            Defines unit value of duration as hour.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.WorkUnit.Minute">
            <summary>
            Defines unit value of duration as minute.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.WorkUnit.Day">
            <summary>
            Defines unit value of duration as day.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.DurationUnit">
            <summary>
            Defines duration unit for whole project.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DurationUnit.Day">
            <summary>
            Defines unit value of duration as day.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DurationUnit.Minute">
            <summary>
            Defines unit value of duration as minute.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DurationUnit.Hour">
            <summary>
            Defines unit value of duration as hour.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GridLine">
            <summary>
            To define grid lines in Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GridLine.Horizontal">
            <summary>
            Define horizontal lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GridLine.Vertical">
            <summary>
            Define vertical lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GridLine.Both">
            <summary>
            Define both horizontal and vertical lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GridLine.None">
            <summary>
            Define no lines
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.FilterHierarchyMode">
            <summary>
            Defines hierarchy mode on filter action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.FilterHierarchyMode.Parent">
            <summary>
             Filtered records are displayed with its parent records.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.FilterHierarchyMode.Child">
            <summary>
             Filtered records are displayed with its child record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.FilterHierarchyMode.Both">
            <summary>
             Filtered records are displayed with its both parent and child record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.FilterHierarchyMode.None">
            <summary>
             Only the filtered records are displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TooltipTarget">
            <summary>
            Defines tooltip target value.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Timeline">
            <summary>
             Timeline target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Notes">
            <summary>
             Notes target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Taskbar">
            <summary>
             Taskbar target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.MileStone">
            <summary>
             MileStone target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Baseline">
            <summary>
             Baseline target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.ManualTaskbar">
            <summary>
             ManualTaskbar target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.ManualParentTaskbar">
            <summary>
             ManualParentTaskbar target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.PredecessorLine">
            <summary>
            PredecessorLine target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.EventMarker">
            <summary>
             EventMarker target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Indicator">
            <summary>
            DataMarker target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.EditMode">
            <summary>
            Defines modes of editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.EditMode.Auto">
            <summary>
            Defines Cell editing in TreeGrid and dialog in chart side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.EditMode.Dialog">
            <summary>
            Defines EditMode as Dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.RowPosition">
            <summary>
            Defines row position for newly added record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Top">
            <summary>
            Defines new row position as top of all rows.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Bottom">
            <summary>
            Defines new row position as bottom of all rows.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Above">
            <summary>
            Defines new row position as above the selected row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Below">
            <summary>
            Defines new row position as below the selected row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Child">
            <summary>
            Defines new row position as child to the selected row.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.PredecessorType">
            <summary>
            Defines dependency types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FSType1">
            <summary>
            FSType1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FSType2">
            <summary>
            FSType2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FSType3">
            <summary>
            FSType3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FSType4">
            <summary>
            FSType4.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SSType1">
            <summary>
            SSType1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SSType2">
            <summary>
            SSType2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SSType3">
            <summary>
            SSType3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SSType4">
            <summary>
            SSType4.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FFType1">
            <summary>
            FFType1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FFType2">
            <summary>
            FFType2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FFType3">
            <summary>
            FFType3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FFType4">
            <summary>
            FFType4.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SFType1">
            <summary>
            SFType1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SFType2">
            <summary>
            SFType2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SFType3">
            <summary>
            SFType3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SFType4">
            <summary>
            SFType4.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDialogFieldType">
            <summary>
            Defines Dialog Field Type of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttDialogFieldType.General">
            <summary>
            Tasks are displayed in auto scheduled mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttDialogFieldType.Resources">
            <summary>
            Tasks are displayed in manual scheduled mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttDialogFieldType.Dependency">
            <summary>
            Both Auto and Manual tasks are render by mapped from data source.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttDialogFieldType.Notes">
            <summary>
            Both Auto and Manual tasks are render by mapped from data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimeSpan">
            <summary>
            Defines TimeSpan Action Type of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttTimeSpan.Previoustimespan">
            <summary>
            To update timeline at start point with one unit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttTimeSpan.Nexttimespan">
            <summary>
            To update timeline at end point with one unit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttTimeSpan.Both">
            <summary>
            To update timeline at both start and end point while edit the start date and end date
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttTimeSpan.None">
            <summary>
            In editing action, timeline will not update if start date and end date are with in the previous dates Range.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Action">
            <summary>
            Defines Actions of the Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Refresh">
            <summary>
            Specifies grid refresh.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Sorting">
            <summary>
            Specifies sorting action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Selection">
            <summary>
            Specifies selection action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Filtering">
            <summary>
            Specifies filtering action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ClearFiltering">
            <summary>
            Specifies clear filtering action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Searching">
            <summary>
            Specifies searching action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.RowDragAndDrop">
            <summary>
            Specifies row drag and drop action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Reorder">
            <summary>
            Specifies reorder action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.VirtualScroll">
            <summary>
            Specifies virtual scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeginEdit">
            <summary>
            Specifies edit begin action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Save">
            <summary>
            Specifies save action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Delete">
            <summary>
            Specifies delete action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Cancel">
            <summary>
            Specifies cancel action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Add">
            <summary>
            Specifies add action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.FilterBeforeOpen">
            <summary>
            Specifies filter pop opening.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.FilterChoiceRequest">
            <summary>
            Specifies filter choice request action is initiated in checkbox and excel filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.FilterAfterOpen">
            <summary>
            Specifies filter pop is opened.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.FilterSearchBegin">
            <summary>
            Specifies search action in checkbox and excel filter search textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ColumnState">
            <summary>
            Specifies column visibility changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ExpandAllComplete">
            <summary>
            Specifies expand all action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.CollapseAllComplete">
            <summary>
            Specifies collapse all action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeOpenColumnChooser">
            <summary>
            Specifies column chooser is opening.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeZoomIn">
            <summary>
            Specifies BeforeZoomIn action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeZoomOut">
            <summary>
            Specifies BeforeZoomOut action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeZoomToFit">
            <summary>
            Specifies BeforeZoomToFit action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.AfterZoomIn">
            <summary>
            Specifies AfterZoomIn action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.AfterZoomOut">
            <summary>
            Specifies BeforeZoomOut action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.AfterZoomToFit">
            <summary>
            Specifies BeforeZoomToFit action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ValidateLinkedTask">
            <summary>
            Specifies ValidateLinkedTask action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeSave">
            <summary>
            Specifies BeforeSave action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeOpenEditDialog">
            <summary>
            Specifies BeforeOpenEditDialog action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeOpenAddDialog">
            <summary>
            Specifies BeforeOpenAddDialog action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.OpenEditDialog">
            <summary>
            Specifies OpenEditDialog action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.OpenAddDialog">
            <summary>
            Specifies OpenAddDialog action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeAdd">
            <summary>
            Specifies BeforeAdd action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.DialogEditing">
            <summary>
            Specifies DialogEditing action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ActionComplete">
            <summary>
            Specifies ActionComplete action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TaskType">
            <summary>
            Defines TaskType of the Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TaskType.None">
            <summary>
            Fields are None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TaskType.FixedDuration">
            <summary>
            Duration task field will remain constant while updating resource unit or work field
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TaskType.FixedWork">
            <summary>
            Work field will remain constant while updating resource unit or duration fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TaskType.FixedUnit">
            <summary>
            Resource units will remain constant while updating duration or work field.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.DependencyType">
            <summary>
            Defines predecessors type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DependencyType.FS">
            <summary>
             Finish to Start type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DependencyType.SS">
            <summary>
             Start to Start type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DependencyType.FF">
            <summary>
             Finish to Finish type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DependencyType.SF">
            <summary>
             Start to Finish type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttIndicator">
            <summary>
            Class that defines indicator details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttIndicator.Date">
            <summary>
            Defines the date of indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttIndicator.IconClass">
            <summary>
            Defines the icon class of indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttIndicator.Name">
            <summary>
            Defines the name of indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttIndicator.Tooltip">
            <summary>
            Defines the tooltip of indicator.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTaskModel">
            <summary>
            Class that defines the taskdata details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoDuration">
            <summary>
            Defines the auto scheduled task's duration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoEndDate">
            <summary>
            Defines the auto scheduled task's end date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoLeft">
            <summary>
            Defines the auto scheduled task's left.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoStartDate">
            <summary>
            Defines the auto scheduled task's start date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoWidth">
            <summary>
            Defines the auto scheduled task's width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.BaselineEndDate">
            <summary>
            Defines the baseline enddate of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.BaselineLeft">
            <summary>
            Defines the baselineleft of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.BaselineStartDate">
            <summary>
            Defines the baseline startdate of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.BaselineWidth">
            <summary>
            Defines the baseline width of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.CssClass">
            <summary>
            Defines the css class of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Duration">
            <summary>
            Defines the duration of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.DurationUnit">
            <summary>
            Defines the duration unit of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.DurationString">
            <summary>
            Defines the duration unit string of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.EndDate">
            <summary>
            Defines the end date of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Indicators">
            <summary>
            Defines the indicators of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.IsAutoSchedule">
            <summary>
            Defines the task is auto schedule-able or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.IsMilestone">
            <summary>
            Defines the task is milestone or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Left">
            <summary>
            Defines the left of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Notes">
            <summary>
            Defines the notes of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.IsExpanded">
            <summary>
            Defines the IsExpanded of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.IsSelected">
            <summary>
            Defines the selected state of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ParentId">
            <summary>
            Defines the parent id of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.PredecessorsName">
            <summary>
            Defines the predecessors name of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Predecessor">
            <summary>
            Defines the predecessor of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Progress">
            <summary>
            Defines the progress of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ProgressWidth">
            <summary>
            Defines the progress width of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ResourceInfo">
            <summary>
            Defines the resource info of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ResourceNames">
            <summary>
            Defines the resource names of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Row">
            <summary>
            Defines chart row.
            </summary>
            <value>Gantt chart row container.</value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.RowUniqueID">
            <summary>
            It have taskId for ProjectView and uniqueID for resourceView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.StartDate">
            <summary>
            Defines the start date of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TaskId">
            <summary>
            Defines the id of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TaskName">
            <summary>
            Defines the name of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TotalDuration">
            <summary>
            Defines the total duration of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TotalProgress">
            <summary>
            Defines the total progress of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.UniqueID">
            <summary>
            Defines the unique id of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Width">
            <summary>
            Defines the width of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Work">
            <summary>
            Defines the work of the task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TaskType">
            <summary>
            Defines the type of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.WorkUnit">
            <summary>
            Defines the work unit of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.UID">
            <summary>
            Defines the unique id of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TaskMode">
            <summary>
            Defines the mode of task.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTaskResourceData">
            <summary>
            Class that defines resource details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskResourceData.ID">
            <summary>
            Defines the id of resource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskResourceData.Name">
            <summary>
            Defines the name of resource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskResourceData.Unit">
            <summary>
            Defines the unit of resource.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimelineFormatter">
            <summary>
            Defines timeline format details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormatter.Date">
            <summary>
            Defines date to be format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormatter.Format">
            <summary>
            Defines the format of the date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormatter.Tier">
            <summary>
            Defines the tier to be format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormatter.Mode">
            <summary>
            Defines the timeline mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimelineFormat">
            <summary>
            Defines the timeline format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.EndDate">
            <summary>
            Defines end date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.Height">
            <summary>
            Defines height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.IsWeekend">
            <summary>
            Defines weekend status of timeline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.StartDate">
            <summary>
            Defines start date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.Value">
            <summary>
            Defines value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.Width">
            <summary>
            Defines width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.Date">
            <summary>
            Defines Date.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1">
            <summary>
            Class that defines beforeTooltipRenderEventArgs.
            </summary>
            <typeparam name="TValue">Specifies the type of BeforeTooltipRenderEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Data">
            <summary>
            Defines the data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Target">
            <summary>
            Defines the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Content">
            <summary>
            Defines the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Cancel">
            <summary>
            Cancel the tooltip.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1">
            <summary>
            Defines the event arguments of taskbar edited action.
            </summary>
            <typeparam name="T">Specifies the type of TaskbarEditedEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.Action">
            <summary>
            Defines the current action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.ColumnName">
            <summary>
            Defines the column name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.Cancel">
            <summary>
            Defines the event cancel status.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.Data">
            <summary>
            Defines the data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.EditingFields">
            <summary>
            Defines the editingFields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.PreviousData">
            <summary>
            Defines the previous value of editing task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.RecordIndex">
            <summary>
            Defines the index of edited task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.RoundOffDuration">
            <summary>
            Defines the duration roundoff.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.TaskBarEditAction">
            <summary>
            Defines the type of taskbar edit action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.RowDOM">
            <summary>
            Handles chart row customization.
            </summary>
            <remarks>
            An instance of this class is passed in QueryChartRowInfo events as argument
            through which the conditional class can be added to chart row.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.RowDOM.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Gantt.RowDOM"/> class.
            </summary>
            <param name="classList">class list.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.RowDOM.ClassList">
            <summary>
            Defines class List.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.RowDOM.AddClass(System.String[])">
            <summary>
            Add multiple class names to the specific cell.
            </summary>
            <param name="classList">List of class names.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.RowDOM.AddItem(System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            Add array of values to the list.
            </summary>
            <param name="addTo">Source list to be added.</param>
            <param name="values">Array values to be added to the list.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ConnectorLine">
            <summary>
            Class that defines connector line object details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ChildIndex">
            <summary>
            Defines the child index value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ChildLeft">
            <summary>
            Defines the child left value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ChildWidth">
            <summary>
            Defines the child width value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ConnectorLineId">
            <summary>
            Defines the connector line ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.MilestoneChild">
            <summary>
            Defines the milestone child.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.MilestoneParent">
            <summary>
            Defines the milestone parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ParentIndex">
            <summary>
            Defines the parent index value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ParentLeft">
            <summary>
            Defines the parent left value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ParentWidth">
            <summary>
            Defines the parent width value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.RowHeight">
            <summary>
            Defines the row height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.Type">
            <summary>
            Defines the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ParentIndexInCurrentView">
            <summary>
            Gets or sets the Parent index value in current view data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ChildIndexInCurrentView">
            <summary>
            Gets or sets the Parent index value in current view data
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTaskPredecessor">
            <summary>
            Class that defines predecessor details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.From">
            <summary>
            Defines the from value of predecessor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.IsDrawn">
            <summary>
            Defines the predecessor is drawn-able or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.Offset">
            <summary>
            Defines the offset value of predecessor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.OffsetUnit">
            <summary>
            Defines the offset unit of predecessor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.To">
            <summary>
            Defines the to value of predecessor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.Type">
            <summary>
            Defines the type of predecessor.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1">
            <summary>
            Class that Gantt Action Event details.
            </summary>
            <typeparam name="TValue">Specifies the type of DateValidation.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Action">
            <summary>
            Defines the current action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Cancel">
            <summary>
            Cancel the print action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ColumnName">
            <summary>
            Defines the field name of the currently grouped columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.VisibleColumns">
            <summary>
            Specifies the list of visible columns in column chooser.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.FromColumns">
            <summary>
            Defines the collection of columns to be moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ToColumn">
            <summary>
            Defines the destination column to place reordered columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Columns">
            <summary>
            Defines the collection of filtered columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.CurrentFilterObject">
            <summary>
            Defines the object that is currently filtered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.CurrentFilteringColumn">
            <summary>
            Defines the column name that is currently filtered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.CurrentPage">
            <summary>
            Defines the current page number.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Data">
            <summary>
            Defines the record objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Direction">
            <summary>
            Defines the direction of sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.EditEventArgs">
            <summary>
            Defines the edited event args.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ExcelSearchOperator">
            <summary>
            Defines the excel search operator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.FilterChoiceCount">
            <summary>
            Defines take number of data while Filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ForeignKeyData">
            <summary>
            Defines foreign data object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.FilterOperators">
            <summary>
            Defines the custom filter operators.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Form">
            <summary>
            Define the form element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Index">
            <summary>
            Added row index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ModifiedRecords">
            <summary>
            Define the modified records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ModifiedTaskData">
            <summary>
            Define the modified taskdata.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.MovableForm">
            <summary>
            Define the movable table form element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PreviousData">
            <summary>
            Defines the previous data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PreviousPage">
            <summary>
            Defines the previous page number.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PrimaryKeyValue">
            <summary>
            Defines the primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PrimaryKeys">
            <summary>
            Defines the primary keys.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.RequestType">
            <summary>
            Defines the current action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Row">
            <summary>
            Defines the added row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.RowData">
            <summary>
            Defines the record objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.RowIndex">
            <summary>
            Defines the edited rowIndex.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.SearchString">
            <summary>
            Defines the string value to search.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.SelectedRow">
            <summary>
            Defines the selected row index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Target">
            <summary>
            Defines the target for dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Tr">
            <summary>
            Defines the selected rows for delete.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Type">
            <summary>
            Defines the type of event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.EditContext">
            <summary>
            Defines the current <c>EditContext</c> instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.CurrentZoomingLevel">
            <summary>
            Defines the current Zooming Level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ValidateMode">
            <summary>
            Defines the validate mode for predecessor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.EnableAutoLinkValidation">
            <summary>
            Gets or sets whether to enable or disable validation on drawing predecessor (connector) via user interaction.
            </summary>
            <value>
            <b>true</b> if need to validate drawing of predecessor (connector) via user interaction; otherwise,<b>false</b>. The default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PredecessorOffSetValidation">
            <summary>
            Gets or sets whether to restrict taskbar dragging beyond a predecessor value.
            </summary>
            <value>
            <b>true</b> if need to restrict taskbar dragging to a date less than the predecessor value; otherwise, <b>false</b>. The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.TaskBarEditAction">
            <summary>
            Defines the TaskBar Edit Action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1">
            <summary>
            To maintain QueryChartRowInfoEventArgs.
            </summary>
            <typeparam name="TValue">Specifies the type of QueryChartRowInfoEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.Data">
            <summary>
            To set Data in QueryChartRowInfoEventArgs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.TaskbarType">
            <summary>
            To set TaskbarType in QueryChartRowInfoEventArgs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.Row">
            <summary>
            To set Row in QueryChartRowInfoEventArgs.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ValidateMode">
            <summary>
            To maintain ValidateMode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ValidateMode.RespectLink">
            <summary>
            To set RespectLink in ValidateMode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ValidateMode.RemoveLink">
            <summary>
            To set RemoveLink in ValidateMode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ValidateMode.PreserveLinkWithEditing">
            <summary>
            To set PreserveLinkWithEditing in ValidateMode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttHolidayRange">
            <summary>
            GanttHolidayRange for SfGantt component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.From">
            <summary>
            To set From in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.To">
            <summary>
            To set To in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.NextWorking">
            <summary>
            To set NextWorking in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.PrevWorking">
            <summary>
            To set PrevWorking in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.Interval">
            <summary>
            To set Interval in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.Width">
            <summary>
            To set Width in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.Left">
            <summary>
            To set Left in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.Label">
            <summary>
            To set Label in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.CssClass">
            <summary>
            To set CssClass in GanttHolidayRange.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1">
            <summary>
            Provides information about the TaskbarEditing event.
            </summary>
            <typeparam name="TValue">TValue of the Gantt Chart component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.Action">
            <summary>
            Returns taskbar editing action. The available taskbar editing actions are,
            *`ParentDrag`
            *`ChildDrag`
            *`RightResizing`
            *`LeftResizing`
            *`ProgressResizing`
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.Cancel">
            <summary>
            Cancels the taskbar edit action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.Data">
            <summary>
            Define the data of task being edited.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.BeforeCopyEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.BeforeCopy"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeCopyEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel the entire copy action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeCopyEventArgs.ClipboardText">
            <summary>
            Gets or sets the copied selected cells/rows content.
            </summary>  
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttAddDialogField">
            <summary>
            Defines the tabs and fields to be included in the add dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogField.Type">
            <summary>
            Defines types of tab which contains editor for columns.
             `General` - Defines tab container type as general.
             `Dependency` - Defines tab as dependency editor.
             `Resources` - Defines tab as resources editor.
             `Notes` - Defines tab as notes editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogField.Fields">
            <summary>
            Defines edited column fields placed inside the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogField.HeaderText">
            <summary>
            Defines header text of tab item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttAddDialogFields">
            <summary>
            Configure Gantt Add dialog fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogFields.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogFields.AddDialogFields">
            <summary>
            Defines the tabs and fields to be included in the add dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttBottomTierSettings">
            <summary>
            Defines bottom tier settings in timeline.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttColumn">
            <summary>
            Defines column collection displayed in grid If the columns declaration was empty then columns are automatically populated from taskSettings value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowEditing">
            <summary>
            If AllowEditing set to false, then it disables editing of a particular column.
            By default all columns are editable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowFiltering">
            <summary>
            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.
            By default all columns are filterable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowReordering">
            <summary> 
            Gets or sets whether to enable or disable reordering of columns. 
            Reordering can be done by drag and drop of a particular column from one index to another index. 
            </summary> 
            <value> 
            <b>true</b> if need to allow reordering of columns; otherwise, <b>false</b>. The default value is <b>true</b>. 
            </value> 
            <remarks> 
            Determines whether to allow or restrict reordering for specific column. 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" > 
                    <GanttColumns> 
                        <GanttColumn Field = "TaskId" AllowReordering="false"></GanttColumn> 
                    </GanttColumns> 
                </SfGantt> 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowResizing">
            <summary> 
            Gets or sets whether to enable or disable resizing of columns. 
            </summary> 
            <value> 
            <b>true</b> if need to allow resizing of columns; otherwise, <b>false</b>. The default value is <b>true</b>. 
            </value> 
            <remarks> 
            Determines whether to allow or restrict resizing for specific column. 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" > 
                    <GanttColumns> 
                        <GanttColumn Field = "TaskId" AllowResizing="false"></GanttColumn> 
                    </GanttColumns> 
                </SfGantt> 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowSorting">
            <summary>
            If AllowSorting set to false, then it disables sorting option of a particular column.
            By default all columns are sortable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ClipMode">
            <summary>
            Defines the cell content's overflow mode. The available modes are
             Clip -  Truncates the cell content when it overflows its area.
             Ellipsis -  Displays ellipsis when the cell content overflows its area.
             EllipsisWithTooltip - Displays ellipsis when the cell content overflows its area
            also it will display tooltip while hover on ellipsis applied cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.DefaultValue">
            <summary>
            Defines default values for the component when adding a new record to the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.DisableHtmlEncode">
            <summary>
            If DisableHtmlEncode is set to true, it encodes the HTML of the header and content cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.DisplayAsCheckBox">
            <summary>
            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.EditorSettings">
            <summary>
            Defines the object to customize default cell editors. The following types can be used to customize default
            editors.
            <list type="bullet">
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.NumericEditCellParams"/></term>
            <description>Customizes the default numerictextbox editor.</description>
            </item>
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.DropDownEditCellParams"/></term>
            <description>Customizes the default dropdown editor.</description>
            </item>
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.DateEditCellParams"/></term>
            <description>Customizes the default datepicker editor.</description>
            </item>
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.BooleanEditCellParams"/></term>
            <description>Customizes the default checkbox editor.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.EditTemplate">
            <summary>
            Defines the cell edit template that is used as editor for a particular column.
            It accepts either template string or HTML element ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.EditType">
            <summary>
            Defines the type of component for editing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Field">
            <summary>
            Defines the field name of column which is mapped with mapping name of DataSource.
            The bounded columns can be sort, filter etc.,
            The Field name must be a valid JavaScript identifier,
            the first character must be an alphabet and should not contain spaces and special characters.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.FilterSettings">
            <summary>
             Defines the filter options to customize filtering for the particular column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.FilterTemplate">
            <summary>
            Defines the filter template/UI that is used as filter for a particular column.
            It accepts either template string or HTML element ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Format">
            <summary>
            It is used to change display value with the given format and does not affect the original data.
            Gets the format from the user which can be standard or custom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Formatter">
            <summary>
            Defines the method which is used to achieve custom formatting from an external function.
            This function triggers before rendering of each cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderTemplate">
            <summary>
            Defines the header template as string or HTML element ID which is used to add customized element in the column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText">
            <summary>
            Defines the header text of column which is used to display in column header.
            If HeaderText is not defined, then field name value will be assigned to header text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderTextAlign">
            <summary>
            Define the alignment of column header which is used to align the text of column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.HideAtMedia">
            <summary>
            Column visibility can change based on [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html).
            HideAtMedia accepts only valid Media Queries.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.IsFrozen">
            <summary>
            Gets or sets whether to freeze the gantt column.
            </summary>
            <value>
            <b>true</b> If need to freeze the column and prevent from scrolling; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.IsIdentity">
            <summary>
            Gets or sets whether the column is considered as identity column. If <c>IsIdentity</c> property is set to true, then the primary key value for the new record is auto generated by database.  
            </summary>
            <remarks>
            When you set <c>IsIdentity</c> property to true, set <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.IsPrimaryKey"/> property as true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.IsPrimaryKey">
            <summary>
            If IsPrimaryKey is set to true, considers this column as the primary key constraint.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.MaxWidth">
            <summary>
            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.MinWidth">
            <summary>
            Defines the minimum width of the column in pixels or percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ShowCheckbox">
            <summary>
            If ShowCheckbox is set to true, then the checkboxes will be displayed in particular column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ShowColumnMenu">
            <summary>  
            Gets or sets whether to display the menu options in each column.  
            </summary>  
            <value>  
            <b>true</b> if need to enable column menu options; otherwise, <b>false</b>. The default value is <b>true</b>.  
            </value> 
            <remarks> 
            Determines whether the columns should display the menu options. 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" > 
                    <GanttColumns> 
                        <GanttColumn Field = "TaskId" ShowColumnMenu="false"></GanttColumn> 
                    </GanttColumns> 
                </SfGantt> 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ShowInColumnChooser">
            <summary> 
            Gets or sets whether to display the column chooser to dynamically show or hide columns. 
            </summary> 
            <value> 
            <b>true</b> if need to show column chooser options; otherwise, <b>false</b>. The default value is <b>true</b>. 
            </value> 
            <remarks> 
            Determines which columns should display the column chooser. 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" > 
                    <GanttColumns> 
                        <GanttColumn Field = "TaskId" ShowInColumnChooser="false"></GanttColumn> 
                    </GanttColumns> 
                </SfGantt> 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Template">
            <summary>
            Defines the column template that renders customized element in each cell of the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.TextAlign">
            <summary>
            Defines the alignment of the column in both header and content cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Type">
            <summary>
            Defines the data type of the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Visible">
            <summary>
            If Visible is set to false, hides the particular column. By default, columns are displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Width">
            <summary>
            Defines the width of the column in pixels or percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Uid">
            <summary>
            Gets or sets the unique identifier value of the column. It is used to get the column object from the column collection.
            </summary>
            <value>The unique identifier value of the column.</value>
            <remarks>
            Unique id helps to get the particular column object for customizations.
            </remarks>
            <example>
            <code>
            <![CDATA[
                <SfGantt DataSource="@TaskCollection" >
                    <GanttColumns>
                        <GanttColumn Field = "TaskId" Uid="Gantt-Column1"></GanttColumn>
                    </GanttColumns>
                </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttColumn.SetWidth(System.String)">
            <summary>
            Update the width of the column.
            </summary>
            <param name="_width">sets the width of the column.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttColumn.SetUid(System.String)">
            <summary>
            Update the unique id of the column.
            </summary>
            <param name="_uid">sets the Uid of the column.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttColumn.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttColumnChooserSettings">
            <summary>
            Configures gantt Column chooser settings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumnChooserSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumnChooserSettings.Template">
            <summary>
            Defines the custom content for the ColumnChooser.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumnChooserSettings.FooterTemplate">
            <summary>
            Defines the custom footer content for the ColumnChooser.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the grid.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttColumns">
            <summary>
            Configures gantt column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumns.Columns">
            <summary>
            Class that defines the Gantt column details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDataOperations">
            <summary>
            GanttDataOperation class to update parent, child and other dependent records on CRUD operations.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttDataOperations.UpdateDependentRecords``1(Syncfusion.Blazor.Gantt.SfGantt{``0},System.Linq.IQueryable{``0},``0)">
            <summary>
            Validates the start date and end date of dependent tasks with current edited task data and returns the collection of resultant data.
            </summary>
            <remarks>
            When data is loaded on demand in gantt chart, only current view port data is available to Gantt Chart.
            Hence during CRUD operations, Gantt Chart cannot identify the dependent tasks which edited data affects. Using this method,
            we can identify the dependent tasks data in server end and update it.
            </remarks>
            <param name="parent">Instance of Gantt chart.</param>
            <param name="datasource">Input data source against which dependent tasks needs to be validated.</param>
            <param name="updatedData">Edited task data.</param>
            <returns>List - updated records.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime">
            <summary>
            Gantt DayWorkingTime collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTime.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTime.From">
            <summary>
            Defines start time of working time range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTime.To">
            <summary>
            Defines end time of working time range.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTimeCollection">
            <summary>
            Configures gantt dayworking time collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTimeCollection.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTimeCollection.DayWorkingTime">
            <summary>
            Defines the customized working time of project.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEditDialogField">
            <summary>
            Configure edit dialog field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditDialogField.Type">
            <summary>
            Defines types of tab which contains editor for columns.
             `General` - Defines tab container type as general.
             `Dependency` - Defines tab as dependency editor.
             `Resources` - Defines tab as resources editor.
             `Notes` - Defines tab as notes editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditDialogField.Fields">
            <summary>
            Defines edited column fields placed inside the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditDialogField.HeaderText">
            <summary>
            Defines header text of tab item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEditDialogFields">
            <summary>
            Defines the tabs and fields to be included in the edit dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditDialogFields.EditDialogFields">
            <summary>
            Defines the tabs and fields to be included in the edit dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEditSettings">
            <summary>
             Class that defines the edit settings property in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowAdding">
            <summary>
            If `AllowAdding` is set to true, new records can be added to the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowDeleting">
            <summary>
            If `AllowDeleting` is set to true, existing record can be deleted from the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing">
            <summary>
            If `AllowEditing` is set to true, values can be updated in the existing record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowTaskbarEditing">
            <summary>
            Gets or sets whether to enable or disable taskbar resizing, taskbar dragging, progress bar resizing and
            predecessor draw action in gantt chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.Mode">
            <summary>
            Defines edit mode in Gantt.
             `Auto` - Defines cell edit mode in grid side and dialog mode in chart side.
             `Dialog` - Defines dialog edit mode on both sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.NewRowPosition">
            <summary>
            Defines the row position for new records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.ShowDeleteConfirmDialog">
            <summary>
            If `ShowDeleteConfirmDialog` is set to true, confirm dialog will show delete action. You can also cancel delete command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowSchedulingOnDrag">
            <summary>  
            Gets or sets whether to allow click and drag action on chart area of gantt to schedule dates and create a taskbar.   
            </summary>  
            <value>  
            <b>true</b> If need to allow scheduling dates by click and drag action; otherwise, <b>false</b>. The default value is <b>false</b>. 
            </value>  
            <remarks>  
            Users can interact on gantt chart rows and schedule the task on their desired dates. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.allowSchedulingOnDrag">
            <b>true</b> If need to allow scheduling dates by click and drag action; otherwise, <b>false</b>. The default value is <b>false</b>. 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEventMarker">
            <summary>
            Configure event marker.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarker.CssClass">
            <summary>
            Defines custom css class of Gantt EventMarker to customize background and label.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarker.Day">
            <summary>
            Defines  date of Gantt EventMarker.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarker.Label">
            <summary>
            Defines label of Gantt EventMarker.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEventMarkers">
            <summary>
            Defines events and status of project throughout the timeline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarkers.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarkers.EventMarkers">
            <summary>
            Defines the Gantt Eventsmarkers.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEvents`1">
            <summary>
            Configures gantt events.
            </summary>
            <typeparam name="TValue">Specifies the type of GanttEvents.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Created">
            <summary>
            An event that is raised when the component is generated.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:System.Object"/> object which provides the details of created component.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Created="CreateHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CreateHandler(System.Object args)
                {   
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnLoad">
            <summary>
            An event that is raised before rendering of Gantt Component.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:System.Object"/> object which provides the details of the gantt before initial rendering.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnLoad="OnLoadHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnLoadHandler(System.Object args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Destroyed">
            <summary>
            An event that is raised when the component is destroyed.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:System.Object"/> object which provides the details when the component is detroyed.
            /// </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Destroyed = "DestroyHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void DestroyHandler(System.Object args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.SplitterResizeStart">
            <summary>
            An event that is raised when the splitter pane resize starts.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Layouts.ResizeEventArgs"/> object which provides the details of resize action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents SplitterResizeStart="SplitterResizeStartHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void SplitterResizeStartHandler(Syncfusion.Blazor.Layouts.ResizeEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.SplitterResized">
            <summary>
            An event that is raised when finished resizing splitter pane.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Layouts.ResizingEventArgs"/> object which provides the details of splitter resize action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents SplitterResized="SplitterResizeHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void SplitterResizeHandler(Syncfusion.Blazor.Layouts.ResizingEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.SplitterResizing">
            <summary>
            An event that is raised when splitter pane is being resized.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Layouts.ResizingEventArgs"/> object which provides the details of splitter resize action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents SplitterResizing="SplitterResizingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void SplitterResizingHandler(Syncfusion.Blazor.Layouts.ResizingEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.SplitterCreated">
            <summary>
            An event that is raised when splitter is created in Gantt.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:System.Object"/> object which provides the details of splitter.
            </remarks>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Gantt
            <SfGantt>
            <GanttEvents TValue="TaskData" SplitterCreated="SplitterCreatedHandler"></GanttEvents>
            </SfGantt>
            @code{
            public void SplitterCreatedHandler(System.Object args)
            {
               Console.WriteLine("Callback for splitter created event");
            }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionFailure">
            <summary>
            An event that is raised when any Gantt action failed to achieve the desired results.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FailureEventArgs"/> object which provides the details of action failure in Gantt Chart. Stack trace of exceptions, if any, can also be obtained here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt >
                <GanttEvents OnActionFailure="OnActionFailureHandler" TValue="TaskData"></GanttEvents>
            </SfGantt
            @code{
                private void OnActionFailureHandler(Syncfusion.Blazor.Grids.FailureEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnToolbarClick">
            <summary>
            An event that is raised when toolbar item is clicked.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Navigations.ClickEventArgs"/> object which provides the details about the toolbar item. Custom actions for custom toolbar items can be performed using this event.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnToolbarClick="OnToolbarClickHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.TaskbarEdited">
            <summary>
            An event that is raised when taskbar was dragged and dropped on new position.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1"/> object which provides the details about the taskbar current position.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents TaskbarEdited="TaskbarEditHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void TaskbarEditHandler(TaskbarEditedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.EndEdit">
            <summary>
            An event that is raised when a task is updated with new data.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1"/> object which provides the details aboud the updated task data.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents EndEdit="EndEditHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void EndEditHandler(TaskbarEditedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnCellEdit">
            <summary>
            An event that is raised while being editing a cell.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellEditArgs`1"/> object which provides the details of the cell to be edited. Cell edit action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Cancel"/> argument proprety.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnCellEdit="OnCellEditHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnCellEditHandler(Syncfusion.Blazor.Grids.CellEditArgs<TValue> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnCellSave">
            <summary>
            An event that is raised before a cell is updated with new data.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSaveArgs`1"/> object which provides the details about the cell to be saved.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnCellSave="OnCellSaveHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnCellSaveHandler(Syncfusion.Blazor.Grids.CellSaveArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.CellSelected">
            <summary>
            An event that is raised after a cell is selected.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSelectEventArgs`1"/> object which provides the details of the selected cell.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents CellSelected="CellSelectedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CellSelectedHandler(Syncfusion.Blazor.Grids.CellSelectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.CellSelecting">
            <summary>
            An event that is raised before any cell selection occurs.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1"/> object which provides the details of the cell to be selected. Cell selection action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.Cancel"/> argument proprety.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents CellSelecting="CellSelectingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CellSelectingHandler(Syncfusion.Blazor.Grids.CellSelectingEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.CellDeselecting">
            <summary>
            An event that is raised before any cell deselection occurs.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1"/> object which provides the details of the cell to be deselected.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt TValue="TaskData">
                <GanttEvents CellDeselecting="CellDeselectingHandler"></GanttEvents>
            </SfGantt>
            @code{
                private void CellDeselectingHandler(Syncfusion.Blazor.Grids.CellDeselectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.CellDeselected">
            <summary>
            An event that is raised after a cell is deselected.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1"/> object which provides the details of the deselected cell.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents CellDeselected="CellDeselectedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CellDeselectedHandler(Syncfusion.Blazor.Grids.CellDeselectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDeselected">
            <summary>
            An event that is raised when a selected row is deselected.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1"/> object which provides the details of the deselected row.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowDeselected="RowDeselectedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowDeselectedHandler(Syncfusion.Blazor.Grids.RowDeselectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDeselecting">
            <summary>
            An event that is raised before deselecting the selected row.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1"/> object which provides the details of the row to be deselected.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowDeselecting="RowDeselectingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowDeselectingHandler(Syncfusion.Blazor.Grids.RowDeselectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowSelected">
            <summary>
            An event that is raised after a row is selected.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowSelectEventArgs`1"/> object which provides the details of the selected row.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowSelected="RowSelectedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowSelectedHandler(Syncfusion.Blazor.Grids.RowSelectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowSelecting">
            <summary>
            An event that is raised before row selection occurs.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1"/> object which provides the details of the row to be selected. Row selection action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.Cancel"/> argument proprety.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowSelecting="RowSelectingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowSelectingHandler(Syncfusion.Blazor.Grids.RowSelectingEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin">
            <summary>
            An event that is raised when Gantt actions such as sorting, filtering, searching etc., begins.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1"/> object which provides the details about the current action to be performed in Gantt. Current action can be cancelled using <see cref="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Cancel"/> argument proprety.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnActionBegin="OnActionBeginHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnActionBeginHandler(GanttActionEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionComplete">
            <summary>
            An event that is raised when Gantt actions such as sorting, filtering, searching, etc. are completed.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1"/> object which provides the details about the current action performed in Gantt.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnActionComplete="OnActionCompleteHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnActionCompleteHandler(GanttActionEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.BeforeTooltipRender">
            <summary>
            An event that is raised everytime before the tooltip appears in Gantt Chart.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1"/> object which provides the details of the target element. Rendering tooltip can be cancelled using <see cref="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Cancel"/> argument proprety.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt TValue="TaskData">
                <GanttEvents BeforeTooltipRender="BeforeTooltipRenderHandler"></GanttEvents>
            </SfGantt>
            @code{
                private void BeforeTooltipRenderHandler(BeforeTooltipRenderEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.QueryChartRowInfo">
            <summary>
            An event that is raised every time a chart row is rendered or refreshed in Gantt.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1"/> object which provides the details about the chart row. Customizations for chart row element can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents QueryChartRowInfo="QueryChartRowInfoHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void QueryChartRowInfoHandler(QueryChartRowInfoEventArgs<TValue> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.QueryCellInfo">
            <summary>
            An event that is raised every time a grid cell is rendered or refreshed in Gantt.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1"/> object which provides the details of the grid cell. Customizations for grid cell element can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents QueryCellInfo="QueryCellInfoHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void QueryCellInfoHandler(Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDataBound">
            <summary>
            An event that is raised every time a grid row is rendered or refreshed in Gantt.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDataBoundEventArgs`1"/> object which provides the details of the grid row. Customizations for grid row element can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowDataBound="RowDataBoundHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowDataBoundHandler(Syncfusion.Blazor.Grids.RowDataBoundEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ContextMenuItemClicked">
            <summary>
            An event that is raised after a context menu items is clicked.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1"/> object which provides the details about the conetxt menu item. Custom actions for custom context menu items can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ContextMenuItemClicked="ContextMenuItemClickedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ContextMenuItemClickedHandler(Syncfusion.Blazor.Grids.ContextMenuClickEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ContextMenuOpen">
            <summary>
            An event that is raised before the context menu is opened.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1"/> object which provides the details about the context menu.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ContextMenuOpen="ContextMenuOpenHandler" TValue="TaskData"></GanttEvents>
            </ SfGantt >
            @code{
                private void ContextMenuOpenHandler(Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnMenuClicked">
            <summary>
            An event that is raised when a column menu is clicked.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs"/> object which provides the details the column menu item.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ColumnMenuClicked="ColumnMenuClickedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ColumnMenuClickedHandler(Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDropped">
            <summary>
            An event that is raised when the dragged row elements are dropped on a target row.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDroppedEventArgs`1"/> object which provides the details of dragged and dropped target rows.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowDropped="RowDroppedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowDroppedHandler(Syncfusion.Blazor.Grids.RowDroppedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnRowDragStart">
            <summary>
            Gets or sets the event callback that is raised when we start dragging the rows to perform reorder.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDragEventArgs`1"/> object which provides the details of the rows from which it is dragged.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnRowDragStart="OnRowDragStartHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnRowDragStartHandler(Syncfusion.Blazor.Grids.RowDragEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDropping">
            <summary>
            Gets or sets the event callback that is raised when the row elements are dropping on the target element. You can cancel the dropping action using this event.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1"/> object which provides the details of the rows which are dropping and the target where the rows are dropping.
            If the dropping action is prevented using the <c>Cancel</c> argument, then the RowDropped event doesn't trigger.
            </remarks>
            <example>
            <code><![CDATA[
            <SfGantt>
                <GanttEvents RowDropping="OnRowDroppingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
            private void RowDroppingHandler(RowDroppingEventArgs<BusinessObject> args)
            {
                 //you can cancel the dropping action here
                 args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Expanding">
            <summary>
            An event that is raised when begin expanding a parent row to show its child rows.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1"/> object which provides the details of parent and child rows. Row expand action can be cancelled using <see cref="P:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1.Cancel"/> argument proprety.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Expanding="ExpandingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ExpandingHandler(Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Expanded">
            <summary>
            An event that is raised after a parent row is expanded to show is child rows.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowExpandedEventArgs`1"/> object which provides the details of parent and child rows.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Expanded="ExpandHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ExpandHandler(Syncfusion.Blazor.TreeGrid.RowExpandedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Collapsing">
            <summary>
            An event that is raised a row begings collapsing to hide its child rows.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1"/> object which provides the details of parent and child rows. Row collapse action can be cancelled using <see cref="P:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1.Cancel"/> argument proprety.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Collapsing="CollapseHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CollapseHandler(Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Collapsed">
            <summary>
            An event that is raised after the row is collapsed to hide its child rows.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowCollapsedEventArgs`1"/> object which provides the details of parent and child rows.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Collapsed ="CollapseHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CollapseHandler(Syncfusion.Blazor.TreeGrid.RowCollapsedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnResizeStart">
            <summary>
            An event is raised when begin resizing a grid column.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ResizeArgs"/> object which provides the details of the resizing column.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ColumnResizeStart ="ColumnResizeStartHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ColumnResizeStartHandler(Syncfusion.Blazor.Grids.ResizeArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnResized">
            <summary>
            An event that is raised when column resize action ends.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ResizeArgs"/> object which provides the details of the resized column.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ColumnResized ="ColumnResizedHandler" TValue="TaskData" ></GanttEvents>
            </ SfGantt >
            @code{
                private void ColumnResizedHandler(Syncfusion.Blazor.Grids.ResizeArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.TaskbarEditing">
            <summary>
            An event that is raised when the user begins editing the taskbar.
            </summary>
            <remarks>
            This event handler recevies a <see cref="T:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1"/> object which provides the taskbar editing information and an option to cancel the taskbar edit action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource = "@TaskCollection" Height="450px" Width="700px">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId" Dependency="Predecessor">
            </GanttTaskFields>
            <GanttEditSettings AllowTaskbarEditing = "true" ></ GanttEditSettings >
            < GanttEvents TaskbarEditing="TaskbarEditingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
            private void TaskbarEditingHandler(TaskbarEditingEventArgs<TValue> args)
            {
              TaskData record = args.Data;
              string actionName = args.Action;
              args.Cancel = true;
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.DataBound">
            <summary> 
            An event that is raised when data source populated in Gantt Chart. 
            </summary> 
            <example>
            <code>
            <![CDATA[ 
            <SfGantt @ref=”Gantt” DataSource=”GanttData”> 
            <GanttEditSettings AllowEditing = "true" ></GanttEditSettings> 
            <GanttEvents DataBound="DataBoundHandler" TValue="TaskData"></GanttEvents>
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private void DataBoundHandler(){ 
             … 
            } 
            } 
            ]]>
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.BeforeCopy">
            <summery> 
            An event that is raised before copy action in the Grid cells. You can cancel the copy action by cancelling this event. 
            </summery> 
            <remarks> 
            This event triggers before <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.BeforeCopy"/> event, so you can cancel copy operation by using this event.
            Also, this event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.BeforeCopyEventArgs"/> object which provides the details of before copy action. 
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt> 
            <GanttEvents BeforeCopy=”BeforeCopyHandler”></GanttEvents> 
            </SfGantt> 
            @Code { 
            private void BeforeCopyHandler (Syncfusion.Blazor.Gantt.BeforeCopyEventArgs args){ 
             … 
            } 
            } 
            ]]> 
            </code> 
            </example> 
            
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttFilterSettings">
            <summary>
            Configures the filter settings for Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.Columns">
            <summary>
            Specifies the columns to be filtered at initial rendering of the Gantt.
            You can also get the columns that were currently filtered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.HierarchyMode">
            <summary>
            Defines the filter types. The available options are,
            `Parent`: Shows the filtered record with parent record.
            `Child`: Shows the filtered record with child record.
            `Both` : shows the filtered record with both parent and child record.
            `None` : Shows only filtered record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.IgnoreAccent">
            <summary>
            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.Operators">
            <summary>
            The `Operators` is used to override the default operators in filter menu. This should be defined by type wise
            (string, number, date and boolean). Based on the column type, this customize operator list will render in filter menu.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttHoliday">
            <summary>
            Gantt Holiday collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.CssClass">
            <summary>
            Defines custom css class of holiday to customize background and label.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.From">
            <summary>
            Defines start date of holiday.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.Label">
            <summary>
            Defines label of holiday.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.To">
            <summary>
            Defines end date of holiday.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttHoliday.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttHolidays">
            <summary>
            Configures gantt holidays collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidays.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidays.Holidays">
            <summary>
            Defines the Gantt holiday.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttKeySettings">
            <summary>
            Configures Gantt key settings.
            </summary>
            <remarks>
            The properties set to GanttKeySettings will handle the hot key's default action.
            </remarks>
            <Exceptions>
            </Exceptions>
            <example>
            <code><![CDATA[
            <SfGantt @ref="Gantt" DataSource="@GanttData">
            <GanttKeySettings MoveLeftCell="Shift+LeftArrow" MoveRightCell="Tab" MoveUpCell="UpArrow" MoveDownCell=""></GanttKeySettings>
            ........
            </SfGantt>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.MoveLeftCell">
            <summary>
            Gets or sets any or all of the following hot keys for the left cell movement.
            <list type="bullet">
            <item>
            <term>Shift+Tab</term>
            <description>Moves to left cell on pressing Shift+Tab key</description>
            </item>
            <item>
            <term>LeftArrow</term>
            <description>Moves to left cell on pressing LeftArrow key</description>
            </item>
            <item>
            <term>Shift+LeftArrow</term>
            <description>Moves to left cell on pressing Shift+LeftArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Shift+Tab,LeftArrow,Shift+LeftArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.MoveRightCell">
            <summary>
            Gets or sets any or all of the following hot keys for the right cell movement.
            <list type="bullet">
            <item>
            <term>Tab</term>
            <description>Moves to right cell on pressing Tab key</description>
            </item>
            <item>
            <term>RightArrow</term>
            <description>Moves to right cell on pressing RightArrow key</description>
            </item>
            <item>
            <term>Shift+RightArrow</term>
            <description>Moves to right cell on pressing Shift+RightArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Tab,RightArrow,Shift+RightArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.MoveUpCell">
            <summary>
            Gets or sets any or all of the following hot keys for the up cell movement.
            <list type="bullet">
            <item>
            <term>Shift+Enter</term>
            <description>Moves to top cell on pressing Shit+Enter key</description>
            </item>
            <item>
            <term>UpArrow</term>
            <description>Moves to top cell on pressing UpArrow key</description>
            </item>
            <item>
            <term>Shift+UpArrow</term>
            <description>Moves to top cell on pressing Shift+UpArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Shift+Enter,UpArrow,Shift+UpArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.MoveDownCell">
            <summary>
            Gets or sets any or all of the following hot for the down cell movement.
            <list type="bullet">
            <item>
            <term>Enter</term>
            <description>Moves to down cell on pressing Enter key</description>
            </item>
            <item>
            <term>DownArrow</term>
            <description>Moves to down cell on pressing DowArrow key</description>
            </item>
            <item>
            <term>Shift+DownArrow</term>
            <description>Moves to down cell on pressing Shift+DownArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Enter,DownArrow,Shift+DownArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.IndentRow">
            <summary>
            Gets or sets any hot keys combination for indenting the row.
            <list type="bullet">
            <item>
            <term>Alt+Shift+RightArrow</term>
            <description>Indent the row on pressing Alt+Shift+RightArrow keys</description>
            </item>
            </list>
            <value>
            The default value is <b>Alt+Shift+RightArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.OutdentRow">
            <summary>
            Gets or sets any hot keys combination for outdenting the row.
            <list type="bullet">
            <item>
            <term>Alt+Shift+LeftArrow</term>
            <description>Indent the row on pressing Alt+Shift+LeftArrow keys</description>
            </item>
            </list>
            <value>
            The default value is <b>Alt+Shift+LeftArrow</b>.
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttLabelSettings`1">
            <summary>
            Configures Gantt Label settings.
            </summary>
            <typeparam name="TValue">Specifies the type of GanttLabelSettings.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.Parent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.RightLabel">
            <summary>
            Defines right side label of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.LeftLabel">
            <summary>
            Defines left side label of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.TaskLabel">
            <summary>
            Defines label which is placed inside the taskbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.RightLabelTemplate">
            <summary>
            Defines template for right label.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.LeftLabelTemplate">
            <summary>
            Defines template for left label.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.TaskLabelTemplate">
            <summary>
            Defines template for task label.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.SfGantt`1">
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
            <typeparam name="TValue">The second generic type parameter.</typeparam>
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
            <remarks><c>TValue</c> is inferred from value of <c>DataSource</c> property if it is bounded with IEnumerable.
            If data is consumed using <c>SfDataManager</c> then TValue must be assigned explicitly.</remarks>
            <seealso cref="T:Syncfusion.Blazor.Data.SfDataManager"/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OnInitializedBase">
            <summary>
            Receive its initial parameters from its parent in the render tree.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OnParametersSetBase">
            <summary>
            Incoming changedValues have been assigned to properties.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
             Incoming changedValues have been assigned to child properties.
            </summary>
            <param name="key">Specifies the Key.</param>
            <param name="changedValue">Specifies the changedValue.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ShouldRender">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GanttPersistProperties(System.String)">
            <summary>
            Update Gantt properties based on persisted values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ComponentDispose">
            <summary>
            Handles dispose component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AddDialogFields">
             <summary>
             Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttAddDialogField"/> collection which provides the details of tab sections inside dialog for adding new record and also the column fields of Grid inside tab section.
             </summary>
             <value>
             A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttAddDialogField"/>.
             </value>
             <remarks>
             Types of the tab which contains editor for columns are,
                <b>General</b>: Tab for populating valuues fo gantt columns of new record.
                <b>Dependency</b>: Tab for dependency edit.
                <b>Resources</b>: Tab for resources edit. 
                <b>Notes</b>: Tab for notes edit.
             </remarks>
             <example>
             <code>
             <![CDATA[
             <SfGantt DataSource="@TaskCollection" AddDialogFields=@addDialogFields Toolbar="@(new List<string>(){ "Add"})">
             <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"  Dependency="Predecessor" ParentID="ParentId">
             </GanttTaskFields>
             <GanttEditSettings AllowAdding="true"></GanttEditSettings>
             </SfGantt>
             @code{
             private List<TaskData> TaskCollection { get; set; }
             private List<GanttAddDialogField> addDialogFields { get; set; } = new List<GanttAddDialogField>()
             {
               new GanttAddDialogField(){ Fields = new string[]{"TaskId","TaskName","EndDate","Duration"}, HeaderText = "General" , Type = GanttDialogFieldType.General},
               new GanttAddDialogField(){ Fields = new string[]{"Dependency"}, HeaderText="Predecessor" ,Type = GanttDialogFieldType.Dependency }
             };
             }
            ]]> 
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowExcelExport">
            <summary>
            Gets or sets whether to allow exporting Gantt data to excel and csv.
            </summary>
            <value>
            <b>true</b> If need to allow exporting to excel and csv; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            Exporting can be customized using <see cref="T:Syncfusion.Blazor.Grids.ExcelExportProperties" /> type parameter of <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToCsvAsync" /> method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowFiltering">
            <summary>
            Gets or sets whether to allow filtering.
            </summary>
            <value>
            <b>true</b> If need to allow Filtering; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            You can cancel or customize the filtering action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowReordering">
            <summary> 
            Gets or sets whether to allow reordering of Gantt columns. 
            </summary> 
            <value> 
            <b>true</b> If need to allow reordering of columns; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value> 
            <remarks> 
            Reordering can be done by drag and drop of a particular column from one index to another index. 
            You can cancel or customize the column reordering action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowResizing">
            <summary> 
            Gets or sets whether to allow resizing of Gantt columns.  
            </summary> 
            <value> 
            <b>true</b> If need to allow resizing of columns; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value> 
            <remarks> 
            You can cancel or customize the resizing action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnResizeStart" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowRowDragAndDrop">
            <summary> 
            Gets or sets whether to allow row reordering in Gantt.  
            </summary> 
            <value> 
            <b>true</b> If need to allow row drag and drop in Gantt; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value> 
            <remarks> 
            You can cancel or customize the row reorder action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnRowDragStart" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection">
            <summary> 
            Gets or sets whether to allow row and cell selection in Gantt.  
            </summary> 
            <value> 
            <b>true</b> If need to allow selection of Gantt Record; otherwise, <b>false</b>. The default value is <b>true</b>. 
            </value> 
            <remarks>
            To perform the multi-selection, hold CTRL key and click the desired rows/cells.
            To select range of rows/cells, hold SHIFT key and click the rows/cells.The default value is false.
            You can cancel or customize the selection action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowSelecting" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSorting">
            <summary> 
            Gets or sets whether to allow sorting of records when column header is clicked.  
            </summary> 
            <value> 
            <b>true</b> If need to allow sorting of records; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value> 
            <remarks> 
            You can cancel or customize the sorting action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowUnscheduledTasks">
            <summary>
            Gets or sets whether to allow rendering of unscheduled tasks in Gantt.
            </summary>
            <value> 
            <b>true</b> If need to render unscheduled tasks in gantt; otherwise, <b>false</b>. The default value is <b>false</b>. 
            </value> 
            <remarks> 
            You can create or update the tasks with anyone of start date, end date, and duration values or none.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.BaselineColor">
            <summary> 
            Gets or sets the background color for baseline taskbar.
            </summary> 
            <value> 
            Color name, for example "Orange" or its hex value.
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.CollapseAllParentTasks">
            <summary>
            Gets or sets whether to render root tasks in collapsed state at initial rendering of Gantt Chart.
            </summary>
            <value> 
            <b>true</b> if root tasks are rendered in collapsed state; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value> 
            <remarks> 
            You can use <see href="Syncfusion.Blazor.Gantt.SfGantt.CollapseAllAsync" /> method for dynamic collapsing of all parent tasks.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ColumnMenuItems">
             <summary>
             Gets or Sets bulit-in menu items of Gantt columns..
             </summary>
             <value> 
             Column menu items, for example ColumnMenuItems = "@(new string[] { "AutoFillColumns","AutoFitThisColumn"})".
             The available built-in Column menu items are,
               <list type="bullet">
               <item>
               <term>AutoFitAllColumns
               </term>
               <description>Auto fit all columns
               </description>
               </item>
               <item>
               <term>AutoFitThisColumn
               </term>
               <description>Auto fit the current column
               </description>
               </item>
               <item>
               <term>SortAscending
               </term>
               <description>Sort the current column in ascending order
               </description>
               </item>
               <item>
               <term>SortDescending
               </term>
               <description>Sort the current column in descending order
               </description>
               </item>
               <item>
               <term>ColumnChooser
               </term>
               <description>To show/hide the TreeGrid columns
               </description>
               </item>
               <item>
               <term>Filter
               </term>
               <description>Filter options will show based on filterSettings property
               </description>
               </item>
               </list>
             </value> 
             <remarks>
             Displays the column menu items when clicking the menu icon on column headers. <see href="Syncfusion.Blazor.Gantt.ShowColumnMenu">ShowColumnMenu</see> should be enabled.
             </remarks>
             <example>
             <code>
             <![CDATA[
             <SfGantt DataSource = "@TaskCollection" ShowColumnMenu="true" AllowSorting="true">
             <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                Duration="Duration" Progress="Progress" ParentID="ParentId">
             </GanttTaskFields>
             </SfGantt>
             @code{
             private List<TaskData> TaskCollection { get; set; }
             private string[] columnMenuItems = new string[] { "AutoFitAll", "AutoFit", "SortAscending" };
             }
            ]]> 
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Columns">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> collection which provides details of grid's columns in Gantt Chart.
            </summary>
            <value> 
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/>.
            </value> 
            <remarks> 
            Displays values of fields from the records of bound data source. If this property is not set, then the columns are automatically populated based on <see cref="T:Syncfusion.Blazor.Gantt.GanttTaskFields" /> property.
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" Columns=columns>
                    <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" ParentID="ParentId">
                    </GanttTaskFields>
                </SfGantt>
                @code{
                private List<TaskData> TaskCollection { get; set; }
                private List<GanttColumn> columns { get; set; } = new List<GanttColumn>()
                {
                    new GanttColumn() { Field = "TaskId", HeaderText = "ID", Width = "150" },
                    new GanttColumn() { Field = "TaskName", HeaderText = "Task Name", Width = "300" },
                    new GanttColumn() { Field = "Duration", HeaderText = "Duration", Width = "200" }
                };
                }
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ConnectorLineBackground">
            <summary> 
            Gets or sets the background color for connector line.  
            </summary> 
            <value> 
            Color name, for example "Red" or its hex value.
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ConnectorLineWidth">
            <summary>
            Gets or sets the width of the connector line.
            </summary>
            <value>
            Pixel value in number. The default connector line width is 1.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ContextMenuItems">
            <summary>
            Gets or sets both built-in and custom context menu items.
            </summary>
            <value>
            A list of built-in context menu items names or instance of <see cref="T:Syncfusion.Blazor.Grids.ContextMenuItemModel" /> for custom items.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt @ref="Gantt" DataSource="@TaskCollection" ContextMenuItems=contextMenuItems EnableContextMenu="true">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                    Dependency="Predecessor" ParentID="ParentId"></GanttTaskFields>
               <GanttEditSettings AllowAdding = "true"></GanttEditSettings>
                <GanttEvents ContextMenuItemClicked = "ContextMenuItemClickedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
             private SfGantt<TaskData> Gantt;
             private object contextMenuItems = new List<object> { "Add", "TaskInformation", new Syncfusion.Blazor.Grids.ContextMenuItemModel { Text = "Refresh", Target = ".e-content", Id = "refresh" } };
             private List<TaskData> TaskCollection { get; set; }
             private async Task ContextMenuItemClickedHandler(ContextMenuClickEventArgs<TaskData> args)
             {
               if (args.Item.Id == "refresh")
               {
                  await Gantt.RefreshAsync();
               }
             }
             }
            ]]>
            </code>
            </example>
            <remarks>
            The available built-in items are,
            <list type="bullet">
            <item>
                <term>AutoFitAll</term>
                <description>Auto fit the size of all columns</description>
            </item>
            <item>
                <term>AutoFit</term>
                <description>Auto fit the current column</description>
            </item>
            <item>
                <term>SortAscending</term>
                <description>Sort the current column in ascending order</description>
            </item>
            <item>
                <term>SortDescending</term>
                <description>Sort the current column in descending order</description>
            </item>
            <item>
                <term>TaskInformation</term>
                <description>Displays the current task.</description>
            </item>
            <item>
                <term>Save</term>
                <description>Saves the edited Task</description>
            </item>
            <item>
                <term>Cancel</term>
                <description>Cancels the edited Task</description>
            </item>
            <item>
                <term>DeleteTask</term>
                <description>Deletes the current Task</description>
            </item>
            <item>
                <term>Add</term>
                <description>Adds a new row to the Gantt</description>
            </item>
            <item>
                <term>Convert</term>
                <description>Convert Current Task to Milestone or vice-versa</description>
            </item>
            <item>
                <term>Indent</term>
                <description>Indent the selected record to one level</description>
            </item>
            <item>
                <term>Outdent</term>
                <description>Outdent the selected record to one level</description>
            </item>
            <item>
                <term>DeleteDependency</term>
                <description>Deletes the current dependency task link.</description>
            </item>
            </list>
            Context menu items display when clicking mouse right. Enable the built in context menu item using <see href="Syncfusion.Blazor.Gantt.EnableContextMenuItems">EnableContextMenuItems</see>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DataSource">
            <summary>
            Gets or sets the data source for rendering gantt rows.
            </summary>
            <value>
            The data source value can be of any type that implements IEnumerable.
            </value>
            <remarks>
            To consume data from remote service or custom adaptor,
            <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> component has to be used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DataSourceChanged">
            <summary>
            An event that is raised when data source is updated in Gantt Chart.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:System.Collections.Generic.IEnumerable`1"/> object which provides updated data.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
                <TreeGridEvents DataSourceChanged="DataUpdateHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
                public void DataUpdateHandler(IEnumerable<TValue> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DateFormat">
            <summary>
            Gets or sets the format of date values in Gantt.
            </summary>
            <value>
            Date format for example "MM/dd/YYYY". The default format is based on the culture.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DayWorkingTime">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime"/> which decides the working time of a project.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime"/> provides various properties to customize the working time. The default day working time from 8.00 To 17.00.
            </remarks>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime"/>.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" DayWorkingTime=ganttDayWorkingTimes>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private List<GanttDayWorkingTime> ganttDayWorkingTimes = new List<GanttDayWorkingTime>()
            {
                new GanttDayWorkingTime(){From= 9, To= 13},
                new GanttDayWorkingTime(){From =14, To= 20}
            };
            private List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DisableHtmlEncode">
            <summary>
            Gets or sets whether to encode HTML of the header and content cells.
            </summary>
            <value> 
            <b>true</b> If need to disable html encode; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value>
            <remarks> 
            If 'DisableHtmlEncode' is set to false, it encodes the HTML of the header and content cells.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DurationUnit">
            <summary>
            Gets or sets the unit for duration field.
            </summary>
            <value>
            The available duration units are,
             <list>
             <item>
             <term>Day</term>
             <description>Unit value of duration is measured as day.</description>
             </item>
             <item>
             <term>Minute</term>
             <description>Unit value of duration is measured  as minute.</description>
             </item>
             <item>
             <term>Hour</term>
             <description>Unit value of duration is measured  as hour.</description>
             </item>
             </list>
            </value>
            <remarks>
            Used to map duration unit of all tasks from data source.
            </remarks>
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DurationUnit="DurationUnit.Day">  
                </SfGantt> 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EditDialogFields">
             <summary>
             Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEditDialogField"/> collection which provides the details of tab sections inside dialog for editing a record and also the column fields of Grid inside tab section.
             </summary>
             <value>
             A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEditDialogField"/>.
             </value>
             <remarks>
             Types of the tab which contains editor for columns are,
                <b>General</b>: Tab for populating valuues fo gantt columns of new record.
                <b>Dependency</b>: Tab for dependency edit.
                <b>Resources</b>: Tab for resources edit. 
                <b>Notes</b>: Tab for notes edit.
             </remarks>
             <example>
             <code>
             <![CDATA[
             <SfGantt DataSource="@TaskCollection" EditDialogFields=@editDialogFields Toolbar="@(new List<string>(){ "Edit"})">
             <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"  Dependency="Predecessor" ParentID="ParentId">
             </GanttTaskFields>
             <GanttEditSettings AllowEditing="true"></GanttEditSettings>
             </SfGantt>
             @code{
             private List<TaskData> TaskCollection { get; set; }
             private List<GanttEditDialogField> editDialogFields { get; set; } = new List<GanttEditDialogField>()
             {
               new GanttEditDialogField(){ Fields = new string[]{"TaskId","TaskName","EndDate","Duration"}, HeaderText = "General" , Type = GanttDialogFieldType.General},
               new GanttEditDialogField(){ Fields = new string[]{"Dependency"}, HeaderText="Predecessor" ,Type = GanttDialogFieldType.Dependency }
             };
             }
            ]]> 
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EditSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEditSettings"/> which configures CRUD action behavior in Gannt Chart.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEditSettings"/>.
            </value>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Gantt.GanttEditSettings"/> class provides various properties to customize editing operations.
            </remarks>
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt DataSource = "@TaskCollection" EditSettings=ganttEditSettings Toolbar = "@(new List<string>() { "Add", "Delete", "Edit"})">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private List<TaskData> TaskCollection { get; set; }
            private GanttEditSettings ganttEditSettings { get; set; } = new GanttEditSettings()
            {
                AllowAdding = true,AllowEditing= true, AllowDeleting= true
            };
            }
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableContextMenu">
            <summary>
            Gets or sets whether to enable all built-in context menu Items.
            </summary>
            <value>
            <b>true</b> if need to enable all built-in Context menu items; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value>
            <remarks>
            You can customize the context menu actions through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ContextMenuOpen" /> and <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ContextMenuItemClicked" /> event handlers.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableVirtualization">
            <summary>
            Gets or sets whether to render only the rows visible within the view-port and render timeline cells twice the width of the gantt element.
            Gantt load subsequent rows on vertical scrolling and timeline cells on horizontal scrolling.
            </summary>
            <value>
            <b>true</b> if need to enable virtualization; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            If 'EnableVirtualization' set to true, then the Gantt will render only the rows visible within the view-port and also loads project with large time span with better performance.
            Subsequent rows and timeline cells are loaded on vertical scrolling and horizontal scrolling respectively.This helps to load large dataset with large timespan in Gantt.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableColumnVirtualization">
             <summary> 
             Gets or sets whether to enable virtual loading of column cells.
             </summary> 
            <value> 
             <b>true</b> if need to enable column virtualization; otherwise, <b>false</b>. The default value is <b>false</b>.
             </value> 
             <remarks>
             Loads large dataset of columns in grid part of Gantt with better performance. Initially, renders only the columns that are in current viewport and load subsequent columns on horizontal scrolling. 
             </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.LoadChildOnDemand">
            <summary> 
            Gets or sets whether to load child record on demand in remote data binding. Initially parent records are rendered in collapsed state. 
            </summary> 
            <value> 
            <b>true</b> If need to load only parent records at initial load, otherwise, <b>false</b>. The default value is <b>false</b>. 
            </value> 
            <remarks>   
            Boosts the performance of component by loading data on-demand.   
            </remarks>   
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnablePersistence">
            <summary>
            Gets or sets whether to persist the Gantt state while refreshing the web page.
            </summary>
            <value>
            <b>true</b> If need to persist Gantt state, otherwise, <b>false</b>. The default value is <b>false</b>.
            </value>
            <remarks>
            Gantt state is saved in the browser local storage by which the properties of the Gantt will be retained even after refreshing the page.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnablePredecessorValidation">
            <summary>
            Gets or sets whether to validate the predecessor.
            </summary>
            <value>
            <b>true</b> if need to enable predecessor validation; otherwise, <b>false</b>. The default value is <b>true</b>.
            </value>
            <remarks>
            You can perform custom validations through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DependencyTypes">
            <summary>   
            Gets or sets the dependency types in Gantt.   
            </summary>   
            <value>  
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.DependencyType"/>.
            </value>   
            <remarks>   
            Configured specific dependency types only are allowed for dependency mapping between multiple tasks in Gantt Chart. The type mentioned in the first index of the DependencyTypes property will be the default type.
            </remarks>   
            <example>   
            <code>   
            <![CDATA[   
                <SfGantt DataSource="@TaskCollection" DependencyTypes="@(new List<DependencyType>() { DependencyType.FS })" >  
                </SfGantt>   
            ]]>   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AutoCalculateDateScheduling">
             <summary>  
             Gets or sets whether to auto calculate start and end-date by using the cases mentioned in <seealso href="https://blazor.syncfusion.com/documentation/gantt-chart/scheduling-tasks#automatically-scheduled-tasks">this UG</seealso>. 
             </summary>  
            <value>  
             <b>false</b> to skip the auto calculation of scheduling dates; otherwise, <b>true</b>.  By default, the property value is true. 
             </value>  
             <remarks>  
             Disable the scheduling date validation, it will not change the dates value available in the data source. Also, it will improve the load time performance for the valid data source.  
             </remarks>  
             <example>  
             <code>  
             <![CDATA[  
                 <SfGantt DataSource="@TaskCollection" AutoCalculateDateScheduling="false">  
                 </SfGantt>  
             ]]>  
             </code>  
             </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableRtl">
            <summary>
            Gets or sets whether to render Gantt Chart component in right to left direction, and fields are accessible in right to left
            </summary>
            <value>
            <b>true</b> if need to enable rendering component in right to left direction; otherwise, <b>false</b>. The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskType">
            <summary>
            Defines the behavior of tasks in Gantt Chart.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Gantt.TaskType"/> enumeration that specifies task behavior.
            The default type is <b>Syncfusion.Blazor.Gantt.TaskType.FixedUnit</b>. 
            </value> 
            <remarks>
            The availble Task types are,
            <list>
            <item>
            <term>None</term>
            <description>Fields are None.</description>
            </item>
            <item>
            <term>FixedDuration</term>
            <description>Duration task field will remain constant while updating resource unit or work field.</description>
            </item>
            <item>
            <term>FixedWork</term>
            <description>Work field will remain constant while updating resource unit or duration field.</description>
            </item>
            <item>
            <term>FixedUnit</term>
            <description>Resource units will remain constant while updating duration or work field.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EventMarkers">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEventMarker"/> collection which configures the the events displayed in Gantt Chart.
            </summary>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEventMarker"/>.
            </value>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Gantt.GanttEventMarker"/> class provides various properties to customize event markers in Gantt Chart.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" EventMarkers=events>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
               Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            public List<TaskData> TaskCollection { get; set; }
            private List<GanttEventMarker> events { get; set; } = new List<GanttEventMarker>()
            {
               new GanttEventMarker(){ Day = new DateTime(2019, 04, 11), Label = "Project approval and kick-off", CssClass = "e-custom-event-marker" }
            };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.FilterSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttFilterSettings"/> which configures filter action in Gannt Chart.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttFilterSettings"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.FilterSettings"/> enum class provides various options to customize the filter action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" AllowFiltering="true" FilterSettings=ganttFilterSettings>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttFilterSettings ganttFilterSettings = new GanttFilterSettings()
            {
                HierarchyMode = FilterHierarchyMode.None
            }
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.GridLines">
            <summary>
            Defines how to show borders of row and cells in Gantt Chart.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.GridLine"/> enumeration that specifies whether to render horizontal and vertical border lines.
            The default value is <b>yncfusion.Blazor.Grids.GridLine.Horizontal</b>. 
            </value>
            <remarks>
            The availble grid lines are,
            <list type="bullet">
            <item>
            <term>Both</term>
            <description>Displays both the horizontal and vertical grid lines.</description>
            </item>
            <item>
            <term>None</term>
            <description>No grid lines are displayed.</description>
            </item>
            <item>
            <term>Horizontal</term>
            <description>Displays the horizontal grid lines only.</description>
            </item>
            <item>
            <term>Vertical</term>
            <description>Displays grid lines based on the theme.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.KeySettings">
            <summary>
            Gets or Sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.KeySettings"/> to configure the hot keys of Gantt Chart.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.KeySettings"/>             
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.KeySettings"/> class provides the properties to customize the hot keys.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" KeySettings=ganttkeySettings>
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            <GanttSelectionSettings Mode = "Syncfusion.Blazor.Grids.SelectionMode.Cell" ></ GanttSelectionSettings >
            </ SfGantt >
            @code{
            private GanttKeySettings ganttkeySettings = new GanttKeySettings()
            {
                MoveLeftCell = "Shift+LeftArrow"
            };
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Height">
            <summary>
            Gets or sets the height of the Gantt component container.
            </summary>
            <value>
            The Gantt Chart height in pixel or percentage or auto, for example "500px". The default value is "auto".
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.HighlightWeekends">
            <summary>
            Gets or sets whether to highlight all the weekend days. It is applicable only on day timeline mode. 
            </summary>
            <value>
            <b>true</b> if need to enable the weekend highlights; otherwise, <b>false</b>.The default value is <b>fasle</b>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Holidays">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttHoliday"/> collection in Gantt chart to display holidays in Gantt Chart.
            </summary>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttHoliday"/>.
            </value>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Gantt.GanttHoliday"/> class provides various properties to customize the appearance of holidays.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" Holidays=holidays >
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </ SfGantt >
            @code{
            private List<GanttHoliday> holidays = new List<GanttHoliday>()
            {
                new GanttHoliday(){ From = new DateTime(2022, 04, 11), To = new DateTime(2022, 04, 12), Label = "Public holidays"},
            };
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ID">
            <summary>
            Gets or sets the Gantt DOM element's Id.
            </summary>
            <value>
            HtmlElement ID, for example "GanttEditing".
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.IncludeWeekend">
            <summary>
            Gets or sets whether to consider weekend days as working day or not.
            </summary>
            <value>
            <b>true</b> if need to include weekend as working days; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Locale">
            <summary>
            Gets or sets the culture name for displaying localized content in Gantt Chart.
            </summary>
            <value>
            The default value is "en-US"
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ProjectEndDate">
            <summary>
            Gets or sets the end date of the project.
            </summary>
            <value>
            Project end date value in DateTime. The default value is null.
            </value>
            <remark>
            If `ProjectEndDate` value not set then it will be calculated from data source.
            </remark>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ProjectStartDate">
            <summary>
            Gets or sets the start date of the project.
            </summary>
            <value>
            Project start date value in DateTime. The default value is null.
            </value>
            <remark>
            If `ProjectStartDate` value not set then it will be calculated from data source.
            </remark>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Query">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Data.Query"/> which process the data based on query provided.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Data.Query"/> class provides various options for doing data operations in Gantt Chart.
            </remarks>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Data.Query"/>.
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.RenderBaseline">
            <summary>
            Gets or sets whether to render of baseline in Gantt.
            </summary>
            <value>
            <b>true</b> if need to render the baseline in gantt; otherwise, <b>false</b>.The default value is <b>true</b>.
            </value>
            <remarks>
            If 'RenderBaseline' is set to true, it allows rendering of baseline. The baseline start and end date values should be mapped from data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ResourceFields">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttResourceFields`1"/> that allocates the resources (human resources) for each task.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Gantt.GanttResourceFields`1"/> class provides various properties to customizes the resource allocations.
            </remarks>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttResourceFields`1"/>.
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.RowHeight">
            <summary>
            Gets or sets the height value for the grid rows and chart rows of Gantt chart.
            </summary>
            <value>
            HtmlElement row height in pixel. The default value is 36 pixel.
            </value>
            <remarks>
            Row height can be changed by using 'RowHeight' property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SearchSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttSearchSettings"/> which configures searching behavior in Gannt Chart.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttSearchSettings"/>.
            </value>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Gantt.GanttSearchSettings"/> class provides various properties to customize searching operations.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" SearchSettings=ganttSearchSettings Toolbar="@(new List<string>() { "Search" })">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttSearchSettings ganttSearchSettings = new GanttSearchSettings()
            {
              Fields = new string[] { "TaskName" },
              Operator = Operator.Contains,
            };
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectedRowIndex">
            <summary>
            Gets or sets the selected row index in Gantt.
            </summary>
            <value>
            Row index of selected row.
            </value>
            <remarks>
            The `SelectedRowIndex` allows you to select a row at initial rendering.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectionSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectionSettings"/> to configure the selection behavior.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectionSettings"/>
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectionSettings"/> class provides the properties to customize the selection action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" SelectionSettings = ganttSelectionSettings >
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttSelectionSettings ganttSelectionSettings = new GanttSelectionSettings()
            {
                Mode = Syncfusion.Blazor.Grids.SelectionMode.Both
            };
            private List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ShowColumnMenu">
            <summary>
            Gets or sets whether to render the column menu option in each column with default items.
            </summary>
            <value>
            <b>true</b> if need to enable column menu; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            If 'ShowColumnMenu' set to true, then it will enable all the build in column menu items. You can customize the column menu items using <seealso href="Syncfusion.Blazor.Gantt.SfGantt.ColumnMenuItems"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ShowColumnChooser">
            <summary>
            Gets or sets whether to render column chooser in Gantt.
            </summary>
            <value>
            <b>true</b> if need to enable the column chooser; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            It allows you to dynamically show or hide columns.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SortSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SortSettings"/> to configure the sorting behavior.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SortSettings"/>
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SortSettings"/> class provides the properties to customize the sort action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            SfGantt DataSource="@TaskCollection" AllowSorting="true" SortSettings=ganttSortSettings>
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttSortSettings ganttSortSettings = new GanttSortSettings()
            {
              Columns = new List<GanttSortDescriptor>()
              {
                  new GanttSortDescriptor(){ Field="TaskId", Direction=Syncfusion.Blazor.Grids.SortDirection.Descending},
              }
            };
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SplitterSettings">
            <summary>
            Gets or Sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SplitterSettings"/> to configure the splitter panes in Gantt.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SplitterSettings"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SplitterSettings"/> class provides the properties to customize the splitter.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" SplitterSettings=ganttSplitterSettings Height="300px" Width="500px">
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            public List<TaskData> TaskCollection { get; set; }
            private GanttSplitterSettings ganttSplitterSettings = new GanttSplitterSettings()
            {
              Position = "20%"
            };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskbarHeight">
            <summary>
            Gets or sets the taskbar height of Gantt.
            </summary>
            <value>
            Taskbar HtmlElement height in pixel.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskFields">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskFields"/> to configure the Task fields in Gantt.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskFields"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskFields"/> class provides an properties to customize the Task fields.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" TaskFields=taskFields>
            </SfGantt>
            @code{
            public List<TaskData> TaskCollection { get; set; }
            private GanttTaskFields taskFields = new GanttTaskFields()
            {
              Id = "TaskId",
              Name = "TaskName",
              StartDate = "StartDate",
              EndDate = "EndDate",
              Duration = "Duration",
              Progress = "Progress",
               ParentID = "ParentId"
            };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskMode">
            <summary>
            Defined how to validate the task values in Gantt.
            </summary>
            <value>
            The available scheduling mode are,
            <list type="bullet">
            <item>
            <term>Auto</term>
            <description>Tasks are displayed in auto scheduled mode.</description>
            </item>
            <item>
            <term>Manual</term>
            <description>Tasks are displayed in manual scheduled mode.</description>
            </item>
            <item>
            <term>Custom</term>
            <description>Both Auto and Manual tasks are render by mapped from data source.</description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings"/> which configures the Gannt chart timeline.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings"/>.
            </value>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings"/> class provides various properties to customize Gantt chart timeline.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" TimelineSettings=ganttTimelineSettings Height="450px" Width="1000px">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttTimelineSettings ganttTimelineSettings = new GanttTimelineSettings()
            {
                TimelineUnitSize = 45,
                TimelineViewMode = TimelineViewMode.Week
            };
            private List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ColumnChooserSettings">
            <summary>
            Gets or sets an instance <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ColumnChooserSettings"/> to configure the column chooser setting.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ColumnChooserSettings"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings"/> class provides properties to customize the column chooser settings.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomTimelineSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomTimelineSettings"/> to configure the timeline zooming behavior.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomTimelineSettings"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomTimelineSettings"/> class provides an properties to customize the zoomtimeline action.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Toolbar">
            <summary>
            Gets or sets the toolbar items in Gantt.
            </summary>
            <value>
            The available built-in toolbar items are:
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Adds a new record.</description>
            </item>
            <item>
            <term>Edit</term>
            <description>Edits the selected task.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Saves the edited task.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Deletes the selected task.</description>
            </item>
            <item>
            <term>Cancel</term>
            <description>Cancels the edit state.</description>
            </item>
            <item>
            <term>Search</term>
            <description>Searches tasks by the given key.</description>
            </item>
            <item>
            <term>ExpandAll</term>
            <description>Expands all the task of Gantt.</description>
            </item>
            <item>
            <term>CollapseAll</term>
            <description>Collapses all the task of Gantt.</description>
            </item>
            <item>
            <term>PrevTimeSpan</term>
            <description>Extends timeline with one unit before the timeline start date</description>
            </item>
            <item>
            <term>NextTimeSpan</term>
            <description>Extends timeline with one unit after the timeline finish date.</description>
            </item>
            <item>
            <term>ZoomIn</term>
            <description>Zoom-in the timeline</description>
            </item>
            <item>
            <term>ZoomOut</term>
            <description>Zoom-out the timeline</description>
            </item>
            <item>
            <term>ZoomToFit</term>
            <description>Displays all tasks within the viewable Gantt chart within current view port.</description>
            </item>
            <item>
            <term>ExcelExport</term>
            <description>Exports Gantt data in Excel format.</description>
            </item>
            <item>
            <term>CsvExport</term>
            <description>Exports Gantt data in CSV format.</description>
            </item>
            </list>
            </value>
            <remarks>
            Both built-in and custom toolbar items can be added to toolbar.
            </remarks>
            <example>
            <code>   
            <![CDATA[   
                  <SfGantt @ref = "Gantt" DataSource="@TaskCollection" Toolbar="@(new List<string>() { "Add", "Cancel", "Delete", "Edit", "Update", new ItemModel() { Text = "QuickFilter", TooltipText = "Quick Filter", PrefixIcon = "e-click", Id = "QuickFilter" }})">
                  </SfGantt> 
            ]]>   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TooltipSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TooltipSettings"/> to configure the tooltip behavior in Gantt.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TooltipSettings"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TooltipSettings"/> class provides the properties to customize the tooltip setting.
            </remarks>
            <example>
            <code>   
            <![CDATA[   
                  <SfGantt @ref = "Gantt" ID="GanttEditing" DataSource="@TaskCollection">
                            <GanttTooltipSettings ShowTooltip="true">
                            <TaskbarTemplate>
                              @{
                                  <div>TaskID: @context.TaskId</div>
                                }
                             </TaskbarTemplate>
                            </GanttTooltipSettings>
                  </SfGantt> 
            ]]>   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TreeColumnIndex">
            <summary>
            Gets or sets a column index that is used to expand or collapse its child rows.
            </summary>
            <value>
            Tree column index, for example integer value 4.
            </value>
            <remarks>
            Tree column index can be changed by using 'TreeColumnIndex' property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ValidateManualTasksOnLinking">
            <summary>
            Gets or sets whether to validate date values while connecting manually scheduled tasks with predecessor.
            </summary>
            <value>
            <b>true</b> if need to validate manual tasks on linking; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ViewType">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ViewType"/> to configure the view type.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ViewType"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.viewType"/> enum class provides an properties to customize the viewType.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Width">
            <summary>
            Gets or sets the Width of the Gantt Component container.
            </summary>
            <value>
            Pixel or percentage values. The default value is "auto".
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.WorkUnit">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.workUnit"/> to configure Work unit.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.WorkUnit"/>
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.workUnit"/> enum class provides the properties to customize work unit.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.WorkWeek">
            <summary>
            Gets or sets the workweek of project.
            </summary>
            <value>
            Names of Weekdays. The dafault value is "Monday, Tuesday, Wednesday, Thursday, Friday.
            </value>
            <example>
            <code>   
            <![CDATA[   
                <SfGantt  DataSource="@TaskCollection" WorkWeek="@(new string[] { "Monday","Tuesday"})">      
                </SfGantt> 
            ]]>   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineTierSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineTierSettings"/> to configure the time line tier setting.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineTierSettings"/>
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineTierSettings"/> class provides the various properties to customize timeline tier setting.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowMultiSorting">
            <summary>
            Gets or sets whether to allow user to sort multiple column in Gantt.
            </summary>
            <value>
            <b>true</b> if need to enable AllowMultiSorting; otherwise, <b>false</b>.The default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ShowInlineNotes">
            <summary>
            Gets or sets whether to show notes column value inside the cell or in tooltip.
            </summary>
            <value>
            <b>true</b> if need to enable ShowInlineNotes; otherwise, <b>false</b>.The default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings"/> to configure the labels in Gantt Chart.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings"/> class provides the various properties of the gantt label setting.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.CustomZoomingLevels">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CustomZoomingLevels"/> to configure the zooming levels.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CustomZoomingLevels"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CustomZoomingLevels"/> class provides the various properties to custom zooming level.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt @ref="Gantt" DataSource="@TaskCollection" CustomZoomingLevels=zoomingLevel Toolbar="@(new List<string>() { "ZoomIn", "ZoomOut", "ZoomToFit" })" Height="450px" Width="700px">
             <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId" Dependency="Predecessor">
            </GanttTaskFields>
            <GanttLabelSettings LeftLabel = "TaskName" TValue="TaskData"></GanttLabelSettings>
            </SfGantt>
            private GanttZoomTimelineSettings[] zoomingLevel = new GanttZoomTimelineSettings[]
            {
              new GanttZoomTimelineSettings
              {
                  TopTier = new GanttTopTierSettings { Unit = TimelineViewMode.Week, Format = "MMM dd,yyyy", Count = 1 },
                  BottomTier = new GanttBottomTierSettings { Unit = TimelineViewMode.Day, Format = "dd", Count = 1 },
                  TimelineUnitSize = 99, TimelineViewMode = TimelineViewMode.Week, WeekStartDay = 0, UpdateTimescaleView = true,
                  WeekendBackground = null, ShowTooltip = true, Level = 0
              },
               new GanttZoomTimelineSettings
               {
                  TopTier = new GanttTopTierSettings { Unit = TimelineViewMode.Day, Format = "MMM dd yyyy", Count = 1 },
                  BottomTier = new GanttBottomTierSettings { Unit = TimelineViewMode.Hour, Format = "hh tt", Count = 12 },
                  TimelineUnitSize = 66,
                  TimelineViewMode = TimelineViewMode.Day,
                  WeekStartDay = 0,
                  UpdateTimescaleView = true,
                  WeekendBackground = null,
                  ShowTooltip = true,
                  Level = 1
              },
              new GanttZoomTimelineSettings
              {
                  TopTier = new GanttTopTierSettings { Unit = TimelineViewMode.Day, Format = "MMM dd yyyy", Count = 1 },
                  BottomTier = new GanttBottomTierSettings { Unit = TimelineViewMode.Hour, Format = "hh tt", Count = 12 },
                  TimelineUnitSize = 99,
                  TimelineViewMode = TimelineViewMode.Day,
                  WeekStartDay = 0,
                  UpdateTimescaleView = true,
                  WeekendBackground = null,
                  ShowTooltip = true,
                  Level = 2
              },
            };
            private SfGantt<TaskData> Gantt;
            private List<TaskData> TaskCollection { get; set; }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTaskbarOnClick">
            <summary>
            Gets or sets whether to scroll and bring the taskbar into current view port on row click action.
            </summary>
            <value><b>true</b>, if taskbar is brought into view on row selection by horizontally scrolling the chart timeline.The default value is false</value>
            <remarks>
            For seemless view of task information you can enable this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.UnmatchedValues">
            <summary>
            Gets or sets the unmatched attributes of the Gantt Chart component.
            </summary>
            <value> Dictionary collections of attributes.
            Key (string): attribute name
            Value (object): value of the attribute
            </value>
            <remarks>
            It will capture the custom attributes and native events.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" @onkeydown="KeyDown" @onkeyup="KeyUp">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private async Task KeyDown(KeyboardEventArgs Args)
            {
                // Triggers with key information on keyboard actions
            }
            private async Task KeyUp(KeyboardEventArgs Args)
            {
                // Triggers with key information on keyboard actions
            }
            private List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.CopyHierarchyMode">
            <summary>
            Defines how to copy the selected data in the tree grid rows. 
            </summary>
            <remarks>
            The available built-in items are,
            `Parent`: Copy the selected data with parent record.
            `Child`: Copy the selected data with child record.
            `Both`: Copy the selected data with both parent and child record.
            `None`: Copy only the selected record.
            </remarks>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.TreeGrid.CopyHierarchyType"/> enumeration that specifies how the data is copies to clipboard.
            The default mode is <b>Syncfusion.Blazor.TreeGrid.CopyHierarchyType.Parent</b>. 
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AddPredecessor(System.Int32,System.String)">
            <summary>
            Adds dependency between the tasks.
            Task relationships are categorized into four types based on the start and finish dates of the task.
            <b>SS</b>cannot start the task until the dependent task also start.
            <b>SF</b>cannot finish the task until the  dependent task aso start.
            <b>FS</b>cannot start the task until the dependent task is completed.
            <b>FF</b>cannot finish the task until the dependent task is Completed.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class.</param>
            <param name="predecessorString">The dependency relationship type.</param>
            <remarks>
            Adds the dependency between the tasks by passing TaskId and dependency type.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="AddPredecessorFunc">Add Predecessor</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public void AddPredecessorFunc()
            {
               gantt.AddPredecessor(12,"4FS");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AddPredecessor(System.Guid,System.String)">
            <summary>
            Adds dependency between the tasks.
            Task relationships are categorized into four types based on the start and finish dates of the task.
            <b>SS</b>cannot start the task until the dependent task also start.
            <b>SF</b>cannot finish the task until the dependent task also start.
            <b>FS</b>cannot start the task until the dependent task also completed.
            <b>FF</b>cannot finish the task until the dependent task also completed. 
            </summary>
            <param name="id">The task of value ‘id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id" /> class.</param>
            <param name="predecessorString">The dependency relationship type.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="AddPredecessorfunc">Add Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task AddPredecessorFunc()
            {
                await gantt.AddPredecessor(“9245fe4a-d402-451c-b9ed-9c1a04247482”,”3F2504E0-4F89-11D3-9A0C-0305E82C3301 FS”); /// pass task id and predecessor type.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AddPredecessor(System.String,System.String)">
            <summary>
            Adds dependency between the tasks.
            Task relationships are categorized into four types based on the start and finish dates of the task.
            <b>SS</b>cannot start the task until the dependent task also start.
            <b>SF</b>cannot finish the task until the dependent task also start.
            <b>FS</b>cannot start the task until the dependent task also completed.
            <b>FF</b>cannot finish the task until the dependent task also completed. 
            </summary>
            <param name="id">The task of value ‘id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class.</param>
            <param name="predecessorString">The dependency relationship type.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="AddPredecessorfunc">Add Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task AddPredecessorFunc()
            {
                await gantt.AddPredecessor(“ABCD12”,”ABCS FS”); /// pass task id and predecessor type.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AddRecordAsync(`0,System.Nullable{System.Double},System.Nullable{Syncfusion.Blazor.Gantt.RowPosition})">
            <summary>
            Inserts a new record into gantt chart at particular row index.
            </summary>
            <param name="data">The new record to be added.</param> 
            <param name="index">The index in which new record is to be added.</param> 
            <param name="position">The position such as Below, Above or Child, in which new record is to be added.</param> 
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks> 
            When index and position parameter is not passed, new record is added at top first row index. 
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowAdding" /> should be true.
            </remarks> 
            <example>
            <code>
            <![CDATA[
            <button @onclick="AddItemFunc">Add Record</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task AddItemFunc()
            {
               TaskData data = new TaskData(30,"ProjectApproval",new DateTime(2022,04,01),new DateTime(2022,04,05),"5",56,29);
               await gantt.AddRecordAsync(data,29,RowPosition.Below);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetHierarchicalData(System.Int32)">
            <summary>
            Returns the hierarchy relation properties of tasks.
            </summary>
            <param name="id">The Id of Task.</param>
            <returns><see cref="T:System.Dynamic.ExpandoObject"/>.</returns>
            <remarks>
            Shows the hierarchical relation properties of the tasks in the Gantt component.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="GetHierarchyInfo">Get Hierarchial Data</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void GetHierarchyInfo()
            {
               var recordInfo = gantt.GetHierarchicalData(1);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CancelEdit">
            <summary>
            Cancels the active edit state in the Gantt.
            </summary>
            <remarks>
            Closes the add or edit form without saving changes.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="CancelEditFunc">Cancel Edit</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public void CancelEditFunc()
            {
               gantt.CancelEdit(); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ClearFilteringAsync">
            <summary>
            Clears the filter from all columns in Gantt.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Clears the filtered rows of Gantt.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClearFilterFunc">Clear Filtering </button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClearFilterFunc()
            {
               await gantt.ClearFilteringAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ClearSelectionAsync">
            <summary>
            Deselects all the selected rows and cells in Gantt.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Currently selected rows and cells in Gantt are cleared.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClearSelectionFunc">Clear Slection</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClearSelectionFunc()
            {
               await gantt.ClearSelectionAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ClearSortingAsync">
            <summary>
            Clear sorting from all the columns of the gantt.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Clear all the sorted columns in Gantt.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClearSortingFunc">Clear Sorting</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClearSortingFunc()
            {
               await gantt.ClearSortingAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CollapseAllAsync">
            <summary>
            Collapses all the parent rows.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="CollapseHandler">Collapse All</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task CollapseHandler()
            {
               await gantt.CollapseAllAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToCsvAsync">
            <summary>
            Exports the Gantt data to CSV formal excel file.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExportToCsvFunc">Export to CSV</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExportToCsvFunc()
            {
               await gantt.ExportToCsvAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToCsvAsync(Syncfusion.Blazor.Grids.ExcelExportProperties)">
            <summary>
            Exports the Gantt data to CSV format excel file.
            </summary>
            <param name="excelExportProperties">Options for customizing the excel document during export.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            /// <SfGantt @ref="gantt" DataSource="@TaskCollection"Toolbar="@(new List<string>() { "CsvExport" })">
            <GanttEvents OnToolbarClick="ToolbarClickHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
            {
             Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
             Syncfusion.Blazor.Grids.ExcelStyle ThemeStyle = new Syncfusion.Blazor.Grids.ExcelStyle()
            {
               FontName = "Segoe UI",
               FontColor = "#666666",
               FontSize = 12
            };
            Theme.Header = ThemeStyle;
            Theme.Record = ThemeStyle;
            ExportProperties.Theme = Theme;
             if (args.Item.Text == "CSV export")
             {
               await this.Gantt.CsvExport(ExportProperties);
             }
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.DeleteRecordAsync(System.Nullable{System.Int32})">
            <summary>
            Deletes a record from Gantt.
            </summary>
            <param name="TaskID">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            When the parameters are not passed, the selected record will be deleted.
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowDeleting" /> should be true. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="DeleteRecordFunc">Delete Record</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task DeleteRecordFunc()
            {
               await gantt.DeleteRecordAsync(2); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.DeleteRecordAsync(System.Guid)">
             <summary>
             Deletes a record from Gantt. 
             </summary>
             <param name="TaskID">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted.</param>
             <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
             <remarks>
             When the parameters are not passed, the selected record will be deleted.
             <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowDeleting"/> should be true.
            </remarks>
             <example>
             <code>
             <![CDATA[
             <button @onclick="DeleteRecordFunc">Delete Record</button>
             <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                 <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" Child="SubTasks">
                 </GanttTaskFields>
             </SfGantt>
             @code{
             private SfGantt<TaskData> gantt;
             private async Task DeleteRecordFunc()
             {
                 await gantt.DeleteRecordAsync(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”); /// pass task id.
             }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.DeleteRecordAsync(System.String)">
             <summary>
             Deletes a record from Gantt. 
             </summary>
             <param name="TaskID">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted.</param>
             <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
             <remarks>
             When the parameters are not passed, the selected record will be deleted.
             <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowDeleting"/> should be true.
            </remarks>
             <example>
             <code>
             <![CDATA[
             <button @onclick="DeleteRecordFunc">Delete Record</button>
             <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                 <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" Child="SubTasks">
                 </GanttTaskFields>
             </SfGantt>
             @code{
             private SfGantt<TaskData> gantt;
             private async Task DeleteRecordFunc()
             {
                 await gantt.DeleteRecordAsync(“ABCD12”); /// pass task id.
             }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.EnableItems(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Enable or disable the toolbar items dynamically.
            </summary>
            <param name="items">Indexes of toolbar Items</param>
            <param name="isEnable">Decides whether to enable or disable items</param>
            <example>
            <code>
            <![CDATA[
            <button @onclick="EnableItemFunc">Enable Items</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection"  Toolbar="Toolbaritems">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public List<ItemModel> Toolbaritems = new List<ItemModel>() { new ItemModel() { Text = "Quick Filter", TooltipText = "Quick Filter", Id = "quickfilter" },
            new ItemModel() { Text = "Clear Filter", TooltipText = "Clear Filter", Id = "clearfilter" }};
            }
            private async Task EnableItemFunc()
            {
               await gantt.EnableItems(new List<int>() { 0,1 },true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToExcelAsync">
            <summary>
            Exports the Gantt data to Excel file.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExportToExcelFunc">Export to Excel</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExportToExcelFunc()
            {
               await gantt.ExportToExcelAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollIntoViewAsync(System.Int32,System.Int32)">
            <summary>
            Scrolls to specific row or column into current view port.
            </summary>
            <param name="columnIndex">The column index to scroll horizontally</param>
            <param name="rowIndex">The row index to scroll vertically</param>
            <remarks>
            Programmatically scrolls to view particular data in grid part of Gantt.
            </remarks>
            <code><![CDATA[
            <SfButton @onclick="Scroll">Scroll to row/column</SfButton>
            <SfGantt @ref="Gantt">
            ........
            </SfGantt>
            public void Scroll()
            {
            Gantt.ScrollIntoViewAsync(4, 3);
            }
            ]]></code>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToExcelAsync(Syncfusion.Blazor.Grids.ExcelExportProperties)">
            <summary>
            Exports the Gantt data to Excel file.
            </summary>
            <param name="excelExportProperties">The options for customizing the excel document during export.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Grids.ExcelExportProperties"/> class provides various properties to customize Excel export.
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt @ref="gantt" DataSource="@TaskCollection"Toolbar="@(new List<string>() { "ExcelExport" })">
            <GanttEvents OnToolbarClick="ToolbarClickHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
            {
             Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
             Syncfusion.Blazor.Grids.ExcelStyle ThemeStyle = new Syncfusion.Blazor.Grids.ExcelStyle()
            {
               FontName = "Segoe UI",
               FontColor = "#666666",
               FontSize = 12
            };
            Theme.Header = ThemeStyle;
            Theme.Record = ThemeStyle;
            ExportProperties.Theme = Theme;
             if (args.Item.Text == "Excel export")
             {
               await this.Gantt.ExcelExport(ExportProperties);
             }
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExpandAllAsync">
            <summary>
            Expands all the parent rows of Gantt.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExpandAllFunc">Expand All</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExpandAllFunc()
            {
               await gantt.ExpandAllAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.FilterByColumnAsync(System.String,System.String,System.String)">
            <summary>
            Filters the gantt data with column details.
            </summary>
            <param name="fieldName">The column name by which the data to be filtered.</param>
            <param name="filterOperator"><see cref="T:Syncfusion.Blazor.Operator" /> in string,</param>
            <param name="filterValue">The filter value.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="FilterByColumnFunc">Filter By Column</button>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task FilterByColumnFunc()
            {
               await gantt.FilterByColumnAsync("TaskName","Startswith","Iden");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomToFitAsync">
            <summary>
            Zooms the time line in Gantt Chart such that all the taskbars are visibile in single view port.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ZoomFitFunc">Zoom to Fit</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ZoomFitFunc()
            {
               await gantt.ZoomToFitAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.HideColumnAsync(System.String,System.String)">
            <summary>
            Hides a column by column name.
            </summary>
            <param name="key">The column name.</param>
            <param name="hideBy">Specifies whether the column name is based on <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.Field" /> or <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText" /> property of column.</param>
            <remarks>
            You can dynamically hide a column.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="HideColumnFunc">Hide Column</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task HideColumnFunc()
            {
               await gantt.HideColumnAsync("TaskId","Id");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.HideColumnsAsync(System.String[],System.String)">
            <summary>
            Hides columns by column names.
            </summary>
            <param name="key">Collection of column names.</param>
            <param name="hideBy">Specifies whether the column name is based on <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.Field" /> or <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText" /> property of column.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            You can dynamically hide columns.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="HideColumnFunc">Hide Column</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task HideColumnFunc()
            {
               await gantt.HideColumnAsync("TaskId","Id");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.HideSpinnerAsync">
            <summary>
            Hide the default spinner in Gantt Chart whenever needed.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <remarks>
            When the spinner is displayed manually, then you can manually hide the spinner using this method.
            </remarks>
            <code>
            <![CDATA[
            <button @onclick="HideSpinner">Hide Spinner</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task HideSpinner()
            {
               await gantt.HideSpinnerAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.IndentAsync">
            <summary>
            Indents the record to one level of hierarchy. Moves the selected row as the last child of its previous row.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="IndentFunc">Indent</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task IndentFunc()
            {
               await gantt.IndentAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.NextTimeSpan">
            <summary>
            Updates the timeline at end point with one unit.
            </summary>
            <remarks>
            Extends timeline with one unit after the timeline finish date.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="NextTimeSpanFunc">Next Time Span</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public void NextTimeSpanFunc()
            {
               gantt.NextTimeSpan();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenAddDialogAsync">
            <summary>
            Opens a dialog to add new task.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowAdding" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OpenAddDialog">Open Add Dialog</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OpenAddDialog()
            {
               await gantt.OpenAddDialogAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenEditDialogAsync(System.Nullable{System.Int32})">
            <summary>
            Opens a dialog to edit a task.
            </summary>
            <param name="TaskID">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be edited.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OpenEditDialog">Open EditDialog</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OpenEditDialog()
            {
               await gantt.OpenEditDialogAsync(2);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenEditDialogAsync(System.Guid)">
             <summary>
             Opens a dialog to edit a task. 
             </summary>
             <param name="TaskID">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted.</param>
             <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
             <remarks>
             <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing"/> should be true.
            </remarks>
             <example>
             <code>
             <![CDATA[
             <button @onclick="OpenEditDialog">Open EditDialog</button>
             <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                 <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" Child="SubTasks">
                 </GanttTaskFields>
             </SfGantt>
             @code{
             private SfGantt<TaskData> gantt;
             private async Task OpenEditDialog()
             {
                 await gantt.OpenEditDialogAsync(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”); /// pass task id.
             }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenEditDialogAsync(System.String)">
             <summary>
             Opens a dialog to edit a task. 
             </summary>
             <param name="TaskID">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted.</param>
             <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
             <remarks>
             <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing"/> should be true.
            </remarks>
             <example>
             <code>
             <![CDATA[
             <button @onclick="OpenEditDialog">Open EditDialog</button>
             <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                 <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" Child="SubTasks">
                 </GanttTaskFields>
             </SfGantt>
             @code{
             private SfGantt<TaskData> gantt;
             private async Task OpenEditDialog()
             {
                 await gantt.OpenEditDialogAsync(“ABCD12”); /// pass task id.
             }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OutdentAsync">
            <summary>
            Outdents the record to one level of hierarchy. Moves the selected row as sibling to its parent row. 
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OutdentFunc">Outdent</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OutdentFunc()
            {
               await gantt.OutdentAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.PreviousTimeSpan">
            <summary>
            Updates the timeline at start point with one unit.
            </summary>
            <remarks>
            Extends timeline with the one unit before the timeline start date.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="PreviousTimeSpanFunc">Previous TimeSpan</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            Public Void PreviousTimeSpanFunc()
            {
               gantt.PreviousTimeSpan();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RefreshAsync">
            <summary>
            Refreshes the Gantt Chart component.
            </summary>
            <remarks>
            You can use this method whenever a manual refresh is needed to gantt chart.
            </remarks>
            <returns>System.Threading.Tasks.Task.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="Refresh">Refresh</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task Refresh()
            {
               await gantt.RefreshAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RemovePredecessor(System.Int32)">
            <summary>
            Remove a dependencies from a task.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <example>
            <code>
            <![CDATA[
            <button @onclick="RemovePredecessorFunc">Remove Predecessor</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public void RemovePredecessorFunc()
            {
               gantt.RemovePredecessor(2);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RemovePredecessor(System.Guid)">
            <summary>
            Remove dependencies from a task.
            </summary>
            <param name="id">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <example>
            <code>
            <![CDATA[
            <button @onclick="RemovePredecessorFunc">Remove Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void RemovePredecessorFunc()
            {
                gantt.RemovePredecessor(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”); /// pass task id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RemovePredecessor(System.String)">
            <summary>
            Remove dependencies from a task.
            </summary>
            <param name="id">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <example>
            <code>
            <![CDATA[
            <button @onclick="RemovePredecessorFunc">Remove Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void RemovePredecessorFunc()
            {
                gantt.RemovePredecessor(“ABCD12”); /// pass task id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ReorderColumnsAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Moves the columns position in UI from one column index to another.
            </summary>
            <param name="fromFName">The list of field names to be moved together.</param>
            <param name="toFName">The field name of the destination column.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowReordering" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <returns>Task.</returns>
            <remarks>
            Change the TreeGrid column positions by field names.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ReOrderColumn">Reorder Columns</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ReOrderColumn()
            {
                await gantt.ReorderColumnsAsync(new List<string> {"TaskName","TaskId"},"Duration");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenColumnChooser(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Open column chooser pop up to show or hide columns dynamically.
            </summary>
            <param name="x">The X position in screen.</param>
            <param name="y">The Y position in screen.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            You can manually open the column chooser at any position of screen at any desired time.
            </remarks>
            <remarks>
            Column chooser can be displayed on screen by given position(X and Y axis).
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OpenColumnChooserFunc">Open columnChooser</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OpenColumnChooserFunc()
            {
               await gantt.OpenColumnChooser(2,4);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetColumnIndexByFieldAsync(System.String)">
            <summary>
            Returns then index of a particular column from the gantt column collections.
            </summary>
            <param name="field">The field name of the column.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="GetColumnIndex">Get ColumnIndexByField</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task GetColumnIndex()
            {
               await gantt.GetColumnIndexByFieldAsync("id"); //pass the field name of the column.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SearchAsync(System.String)">
            <summary>
            Searches the Gantt records using the given key.
            </summary>
            <param name="key">The search key.</param>
            <remarks>
            Searches the given key and displays only the rows which matches the key with any of its column values.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="Search">Search</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task Search()
            {
               await gantt.SearchAsync("id"); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectCellAsync(System.ValueTuple{System.Int32,System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Selects a cell by the given indexes.
            </summary>
            <param name="cellIndex">The ValueTuple of row and cell index to be selected.</param>
            <param name="isToggle">Decides whether to toggle the selection.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SelectCellFunc">Select Cell</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            Tuple<int,int> cellIndex=new Tuple<int,int>(1,2);
            private async Task SelectCellFunc()
            {
               await gantt.SelectCellAsync(cellIndex,true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectRowAsync(System.Double,System.Boolean)">
            <summary>
            Selects a row by the given index.
            </summary>
            <param name="index">The row index to be selected.</param>
            <param name="isToggle">Decides whether to toggle the selection.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SelectRowFunc">Select Row</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SelectRowFunc()
            {
               await gantt.SelectRowAsync(2,true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectRowsAsync(System.Double[])">
            <summary>
            Select a collection of rows by indexes.
            </summary>
            <param name="rowIndexes">The indexes of rows to be selected.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SelectRows">Select Rows</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SelectRows()
            {
               await gantt.SelectRowsAsync(new double[] {2,5});
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetSplitterPositionAsync(System.String)">
            <summary>
            Changes the splitter position dynamically based on position property.
            </summary>
            <param name="positionValue">Any value from 0 to 100 that denotes the perentage of total gantt width.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SetSplitterPosition">Set Splitter position</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SetSplitterPosition()
            {
               await gantt.SetSplitterPositionAsync("0");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetSplitterPositionAsync(System.Int32)">
            <summary>
            Sets the splitter position to the end of a column.
            </summary>
            <param name="positionValue">The column index.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SetSplitter">Set Splitter Position</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SetSplitter()
            {
               await gantt.SetSplitterPositionAsync(2);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetSplitterPositionAsync(Syncfusion.Blazor.Gantt.SplitterView)">
            <summary>
            Changes the splitter position dynamically to show only grid section or chart section or both sections.
            </summary>
            <param name="positionValue">One of the <see cref="T:Syncfusion.Blazor.Gantt.SplitterView"/> value.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SetSplitterPosition">Set Splitter Position</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SetSplitterPosition()
            {
               await gantt.SetSplitterPositionAsync(SplitterView.Grid);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ShowColumnAsync(System.String,System.String)">
            <summary>
            Shows a column by its column name.
            </summary>
            <param name="key">The column name.</param>
            <param name="hideBy">Specifies whether the column name is based on <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.Field" /> or <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText" /> property of column.</param>
            <remarks>
            You can dynamically show hidden column.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ShowColumn">Show Column</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ShowColumn()
            {
               await gantt.ShowColumnAsync("TaskName","Name");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ShowColumnsAsync(System.String[],System.String)">
            <summary>
            Shows columns by its column names.
            </summary>
            <param name="key">The column name.</param>
            <param name="hideBy">Specifies whether the column name is based on <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.Field" /> or <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText" /> property of column.</param>
            <remarks>
            You can dynamically show hidden columns.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ShowColumn">Show Columns</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ShowColumn()
            {
            await Gantt.ShowColumnsAsync(new string[] { "TaskName","TaskId"},"TaskDetails"); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ShowSpinnerAsync">
            <summary>
            Shows the spinner in gantt chart whenever needed to indicate that a gantt action is in processing.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ShowSpinner">Show Spinner</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ShowSpinner()
            {
               await gantt.ShowSpinnerAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SortByColumnAsync(System.String,Syncfusion.Blazor.Grids.SortDirection,System.Nullable{System.Boolean})">
            <summary>
            Sorts a column with the column details.
            </summary>
            <param name="columnName">The field name to be sorted.</param>
            <param name="direction">One of the values of <see cref="T:Syncfusion.Blazor.Grids.SortDirection" />.</param>
            <param name="isMultiSort">Decides whether to do multi-sorting.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSorting" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SortByColumn">Sort by column</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SortByColumn()
            {
              await Gantt.SortByColumnAsync("Id", SortDirection.Ascending,true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdatePredecessor(System.Int32,System.String)">
            <summary>
            Updates the dependency value of a task by the task id.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class.</param>
            <param name="predecessorString">The predecessor string type</param>
            <example>
            <code>
            <![CDATA[
            <button @onclick="UpdatePredecessorHandler">Update Predecessor</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async UpdatePredecessorHandler()
            {
               await gantt.UpdatePredecessor(7,"4FS");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdatePredecessor(System.Guid,System.String)">
            <summary>
            Updates the dependency value of a task by the task id.
            </summary>
            <param name="id">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <param name="predecessorString">The predecessor string type</param>
            <example>
            <code>
            <![CDATA[
            <button @onclick="UpdatePredecessorHandler">Update Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void updatePredecessorHandler()
            {
                gantt.UpdatePredecessor(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”,”9245fe4a-d402-451c-b9ed-9c1a04247482 FS”); /// pass task id and predecessor type.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdatePredecessor(System.String,System.String)">
            <summary> Updates the dependency value of a task by the task id. </summary>
            <param name="id">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <param name="predecessorString">The predecessor string type</param>
            <example>
            <code>
            <![CDATA[
            <button @onclick="UpdatePredecessorHandler">Update Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void updatePredecessorHandler()
            {
                gantt.UpdatePredecessor(“ABCD12”,”ABCS FS”); /// pass task id and predecessor type.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomInAsync">
            <summary>
            Zoom-in the timeline of Gantt.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ZoomIn">Zoom In</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async ZoomIn()
            {
               await gantt.ZoomInAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomOutAsync">
            <summary>
            Zoom-out the timeline of Gantt.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ZoomOut">Zoom Out</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ZoomOut()
            {
               await gantt.ZoomOutAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateProjectDates(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Updates the project start date and end date.
            </summary>
            <param name="startDate">The start date of the project.</param>
            <param name="endDate">The end date of the project.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="UpdateProjectDatesFunc">Update Project Date</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void UpdateProjectDatesFunc()
            {
                gantt.UpdateProjectDates(new DateTime(2021, 04, 02), new DateTime(2021, 05, 05));
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ReorderRowAsync(System.Double,System.Double,System.String)">
            <summary>
            Reorders the rows based on given indexes and positions.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowRowDragAndDrop" /> should be enabled.
            </remarks>
            <param name="fromIndexes">The row index from which the row needs to be moved.</param>
            <param name="toIndex">Th row index to which the row needs to be moved..</param>
            <param name="position">One of the string values of <see cref="T:Syncfusion.Blazor.TreeGrid.RowPosition" /> that decides whether to move the row as above or below or child to destination row index</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ReorderRow">Reorder Row</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ReorderRow()
            {
               await gantt.ReorderRowAsync(2,5,"above");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetSelectedRowIndexesAsync">
            <summary>
            Returns the collection of selected rows indexes.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="GetSelectedRow">Get Selected Row Index</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task GetSelectedRow()
            {
               await gantt.GetSelectedRowIndexesAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectRowsByRangeAsync(System.Int32,System.Int32)">
            <summary>
            Select a range of rows in Gantt Chart.
            </summary>
            <param name="startIndex">The row starting index to be selected.</param>
            <param name="endIndex">The Row ending index to be selected.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Method to select <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectRowsByRangeAsync(System.Int32,System.Int32)"/> a range of rows from start and end row indexes.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SelectRowByRange">Select rows by Range</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SelectRowByRange()
            {
               await gantt.SelectRowsByRangeAsync(2,6);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetSelectedRecordsAsync">
            <summary>
            Returns the collections of selected records in Gantt.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="GetSelectedRecords">Get Selected Record </button>
            <SfGantt @ref="gantt" TValue="TaskData">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async GetSelectedRecords()
            {
               await gantt.GetSelectedRecordsAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExpandAtLevelAsync(System.Double)">
            <summary>
            Expands the records along with its parent at specific hierarchical level.
            </summary>
            <param name="level">The hierarchical level until which the rows to be Expanded.</param>
            <remarks>
            The root parent level is 0.
            </remarks>
            <returns>Task.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExpandLevel">ExpandLevel</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExpandLevel()
            {
                await gantt.ExpandAtLevelAsync(12); /// pass the hierarchical level
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CollapseAtLevelAsync(System.Double)">
            <summary>
            Collapses the records along with its child records, at specific hierarchical level.
            </summary>
            <param name="level">The level of the record until which the rows to be Collapsed.</param>
            <remarks>
            The root parent level is 0.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="CollapseLevel">CollapseLevel</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task CollapseLevel()
            {
                await gantt.CollapseAtLevelAsync(12); /// pass the hierarchical level 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetRecordByID(System.String)">
            <summary>
            Returns a record from Gantt data source.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <returns><see href="System.Collection.IDictionary{string,object}">.</see></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateRecordByIDAsync(`0)">
            <summary>
            Updates a record's value.
            </summary>
            <param name="data">The updated record object.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing" /> should be true. 
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
             <example>
            <code>
            <![CDATA[
            <button @onclick="UpdateRecordFunc">Update Record By ID</button>
            <SfGantt TValue="TaskData">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async UpdateRecordFunc()
            {
               TaskData data = new TaskData(30,"ProjectApproval",new DateTime(2022,04,01),new DateTime(2022,04,05),"5",56,29);
               await gantt.UpdateRecordByIDAsync(data);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ConvertToMilestone(System.String)">
            <summary>
            Converts task data to Milestone data.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClickHandler">Convert To MileStones</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void ClickHandler()
            {
               gantt.ConvertToMilestone("1"); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.PreventRender(System.Boolean)">
            <summary>
            Prevents the Gantt component re-render.
            </summary>
            <param name="preventRender">Default value is true. Toggles the ShouldRender method value.</param>
            <example>
            <remarks>
            It will internally sets value to be returned from ShouldRender method.
            </remarks>
            <code>
            <![CDATA[
            <button @onclick="PreventRenderFunc">Prevent Render</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task PreventRenderFunc()
            {
               await gantt.PreventRender(true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetColumnsAsync">
            <summary>
            Returns the columns collection from the Gantt Chart.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClickHandler">GetColumns</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClickHandler()
            {
                var columns = await gantt.GetColumnsAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RefreshColumnsAsync">
            <summary>
            Refreshed the gantt with columns changes, if any.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Refresh the Gantt columns when column property values are updated externally.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClickHandler">RefreshColumns</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
                   <GanttColumns>
                       <GanttColumn Field="TaskId"></GanttColumn>
                       <GanttColumn Field="TaskName"></GanttColumn>
                   </GanttColumns>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClickHandler()
            {
                gantt.Columns[0].Width = "250";
                gantt.RefreshColumnsAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExpandByKeyAsync(System.Object)">
            <summary>
            Expands a record based on the primary key value of the record.
            </summary>
            <param name="key">The primary key value of the record to be expanded.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Expand a record based on the primary key value of the record.
            The `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> is the primary key of the record by default.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExpandKey">ExpandKey</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExpandKey()
            {
                await gantt.ExpandByKeyAsync(12); /// pass primary key value here
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CollapseByKeyAsync(System.Object)">
            <summary>
            Collapses a record based on the primary key value of the record.
            </summary>
            <param name="key">The primary key value of the record to be collapsed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Collapse a record based on the primary key value of the record.
            The field value  of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class is the primary key of the record.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="CollapseKey">CollapseKey</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task CollapseKey()
            {
                await gantt.CollapseByKeyAsync(12); /// pass primary key value here
            }
            }
            ]]>
            </code>
            </example>    
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTimelineAsync(System.DateTime)">
            <summary>
            Scrolls the chart timeline horizontally to a specific date or time.
            </summary>
            <param name="scrollDateTime">The DateTime in the timeline to be focused.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ScrollToTimeline">ScrollTimeline</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ScrollToTimeline()
            {
                await gantt.ScrollToTimelineAsync(new DateTime(2021, 12, 25)); /// pass the date here
            }
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTaskbarAsync(System.Int32)">
            <summary>
            Scrolls the content to bring the taskbar (specified by task id) visible to the user.
            </summary>
            <param name="taskId">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ScrollToTaskbar">ScrollToTaskbar</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ScrollToTaskbar()
            {
                await gantt.ScrollToTaskbarAsync(12); /// pass the task id here
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTaskbarAsync(System.Guid)">
            <summary>
            Scrolls the content to bring the taskbar(specified by task id) visible to the user.
            </summary>
            <param name="taskId">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ScrollToTaskbar">ScrollToTaskbar</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async task ScrollToTaskbar()
            {
                await gantt.ScrollToTaskbarAsync(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”); /// pass the task here id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTaskbarAsync(System.String)">
            <summary>
            Scrolls the content to bring the taskbar(specified by task id) visible to the user.
            </summary>
            <param name="taskId">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ScrollToTaskbar">ScrollToTaskbar</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async task ScrollToTaskbar()
            {
                await gantt.ScrollToTaskbarAsync(“ABCD12”); /// pass the task here id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetPersistDataAsync">
            <summary>
            Returns the serialized gantt chart properties to be maintained in the persisted state.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <remarks>
            Users can use this method to later restore the gantt chart state through <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetPersistDataAsync(System.String)" /> method.
            </remarks> 
            <example>
            <code>
            <![CDATA[
            <button id="GetPersistence" @onclick="GetPersistence">Get Persistence</button>
            <SfGantt @ref = "gantt" EnablePersistence=”true” DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public string currentState;
            private async Task GetPersistence()
            {
               currentState= await gantt.GetPersistDataAsync();
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetPersistDataAsync(System.String)">
            <summary>
            Loads a already saved state of the Gantt.
            </summary>
            <param name="properties"> Serialized gantt chart properties to apply to current state.
            </param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Users can view pre stored state easily in gantt chart. Current state can be stored using <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetPersistDataAsync" /> method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SetPersistence" @onclick="SetPersistence">Set Persistence</button>
            <SfGantt @ref = "gantt" EnablePersistence=”true” DataSource="@TaskCollection">
            </SfGantt>
            @code{
              private SfGantt<TaskData> gantt;
              private string currentState;
              private async Task SetPersistence()
              {
                await gantt.SetPersistDataAsync(currentState);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ResetPersistDataAsync">
            <summary>
            Resets the current state and refreshes the gantt chart with original state given declaratively.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>Applicable when State Persistence feature is enabled in gantt chart.</remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ClearPersistence" @onclick="ClearPersistence">Clear Persistence</button>>
            <SfGantt @ref = "gantt" EnablePersistence=”true” DataSource="@TaskCollection">
             ........
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async void ClearPersistence()
            {
                await gantt.ResetPersistDataAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetFilteredRecordsAsync">
            <summary> 
            Returns all filtered records from Gantt Chart as collection of data objects for the local data source, and returns a promise object if the Gantt Chart has remote data binding.  
            </summary> 
            <remarks> 
            Helps to obtain the filtered data after filtering in Gantt Chart. 
            </remarks> 
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example> 
            <code><![CDATA[ 
            <button id=”GetFilteredRecords” @onclick=”FilterHandler”> GetFilteredRecords</button> 
            <SfGantt @ref=”Gantt” DataSource=”GanttData”> 
            <GanttEditSettings AllowFiltering=”true” /> 
            … 
            </GanttEditSettings> 
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private async task  FilterHandler (){ 
               var data = await Gantt.GetFileredRecordsAsync(); 
            } 
            }
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetCurrentViewRecords">
            <summary> 
            Returns the currently visible records in GanttChart. For example, when virtualization is disabled, it returns all records including the child records in expanded state. When virtualization is enabled, it returns the record and child records in current view port it might include the records over scanned for smooth scrolling.
            </summary> 
            <remarks> 
             Helps to obtain the data currenlty rendered in DOM. 
            </remarks> 
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that gives visible records in current view.</returns> 
            <example> 
            <code><![CDATA[ 
            <button id=”GetCurrentViewData” @onclick=” GetCurrentViewData”>  GetCurrentViewData </button> 
            <SfGantt @ref=”Gantt” DataSource=”GanttData”> 
            <GanttEditSettings AllowEditing=”true”/> 
            … 
            </GanttEditSettings> 
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private async task  BatchAddHandler  (){ 
               var data = await Gantt.GetcurrentviewRecordsAsync (); 
            } 
            }
            ]]> 
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetSelectedRowCellIndexesAsync">
            <summary> 
            Returns the collection of indexes of selected row and cells . 
            </summary> 
            <remarks> 
            Using this method, selected cell or row data can be obtained for any custom actions on selected data. 
            </remarks> 
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example> 
            <code><![CDATA[ 
            <button id=”GetSelectedRowCellIndexes” @onclick=” GetSelectedRowCellIndexes”>GetSelectedRowCellIndexes </button> 
            <SfGantt @ref=”Gantt” DataSource=”GanttData”> 
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private async task  GetSelectedRowCellIndexes(){ 
               var data = await Gantt. GetSelectedRowCellIndexesAsync(); 
            } 
            }
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CopyAsync(System.Nullable{System.Boolean})">
            <summery> 
            Copies the data from selected rows or cells into clipboard.
            </summery>
            <param name="withHeader">Decides whether to copy the record values along with header names. </param> 
            <remarks> 
            The behavior of copying the record can be modified using <see cref="T:Syncfusion.Blazor.TreeGrid.CopyHierarchyType"/> enumeration property. 
            </remarks> 
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns> 
            <example> 
            <code>!
            <![CDATA[ 
            <button id="Copy" @onclick="CopyHandler">Copy</button> 
            <SfGantt @ref="Gantt" DataSource="GanttData"> 
            . . . . 
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private async Task CopyHandler(){ 
               await Gantt.CopyAsync(true); 
            } 
            }
            ]]>
            </code> 
            </example> 
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.treegridPersistedState">
            <summary>
            Gets the serialized treegrid properties to be maintained in the persisted state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ExpandedFlatData">
            <summary>
            For virtualization support added this property like flat data,but it has the updated view records after expanding and collapsing action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.GanttEditDialogRenderer">
            <summary>
            This property used to access the EditDialogRender taskIdEditable variable. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.contentWidth">
            <summary>
            This property is used to maintain the content width of a gantt. In case of, timeline virtualization, content width equals thrice the gantt width.
            Whereas in non-virtual timeline mode, content width equals total timeline width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.containerHeight">
            <summary>
            This property holds the chart content height in virtual mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.OriginalProp">
            <summary>
            This property is used to store the original values of Gantt properties, which is used to reset the persisted data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.previousRecords">
            <summary>
            To maintain record collection with old values before it gets updated.
            This collection is used to update child items on parent drag action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.PredecessorType">
            <summary>
            To maintain predecessor types in array of string.
            This property gets the ENUM values and store it as a array of string, which is configured in DependencyTypes property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.IsDataSourceUpdated">
            <summary>
            To restrict calling the updateRecord by Id method when editing from UI to observable collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.IsExpandCollapseKey">
            <summary>
            Gets or sets the key from ExpandbyKey or Collapsebykey method. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.CachedAttributes">
            <summary>
            Gets or sets the unamtched attributes which is used to pass SfGantt pane. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TreeGridAttributes">
            <summary>
            Gets or sets the unmatched attributes which is used to pass TreeGrid pane. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.taskIdType">
            <summary>
            This property used to get the task id type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomingLevels">
            <summary>
            Gets or sets the default zooming levels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.weekstartDay">
            <summary>
            Gets or sets the Timeline settings week start day to update in zooming levels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.weekendBackground">
            <summary>
            Gets or sets the Timeline settings weekend background to update in zooming levels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.isDataProcessed">
            <summary>
            To check whether record validations completed or not in order to calculate project dates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.isCrudAction">
            <summary>
            Boolean property maintained to restrict, updating predecessor collection on crud operation in Load On Demand.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateChildModelCollection(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This method is used to maintain parent and child collections in key-value pairs
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetLocalStorage">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SerializeModel(Syncfusion.Blazor.Gantt.SfGantt{`0})">
            <summary>
            Returns serialized Gantt properties in order to save in local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RefreshChartElement">
            <summary>
            This method used to refresh the chart rows, connector lines and set the chart height
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.IsParentRecord(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            To check a record is parent or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttResourceFields`1">
            <summary>
            Defines mapping properties for resource values.
            </summary>
            <typeparam name="TResources">Specifies the type of GanttResourceFields.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResourceFields`1.Id">
            <summary>
            To map id of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResourceFields`1.Unit">
            <summary>
            To map indicators of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResourceFields`1.Resources">
            <summary>
            It is used to render Gantt chart resources.
            `Resources` value was defined as array of JavaScript objects or instances of `Resources`.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResourceFields`1.Name">
            <summary>
            To map schedule mode of task from data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSearchSettings">
            <summary>
            Configures the search settings for Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.Fields">
            <summary>
            Specifies the columns to be searched at initial rendering of the Gantt.
            You can also get the columns that were currently filtered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.HierarchyMode">
            <summary>
            Defines the search types. The available options are,
            `Parent`: Shows the searched record with parent record.
            `Child`: Shows the searched record with child record.
            `Both` : shows the searched record with both parent and child record.
            `None` : Shows only searched record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.IgnoreAccent">
            <summary>
            If IgnoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.
            </summary>
            <remarks>Ignore Accent is supported by remote data alone.
            IgnoreAccent key will be sent to server and operation should be handled at user level.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.IgnoreCase">
            <summary>
            If ignoreCase set to true, then search ignores the diacritic characters or accents while filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.Key">
            <summary>
            A key word for searching the Gantt content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.Operator">
             <summary>
             Defines the operator to search records. The available operators are:.
            
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSelectionSettings">
            <summary>
            Configures Gantt Selection settings collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.BaseParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.CellSelectionMode">
            <summary>
            To define selection mode of cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.Mode">
            <summary>
            Gantt supports row, cell, and both (row and cell) selection mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.PersistSelection">
            <summary>
            If 'persistSelection' set to true, then the Gantt selection is persisted on all operations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.EnableToggle">
            <summary>
            If 'enableToggle' set to true, then the user can able to perform toggle for the selected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.Type">
            <summary>
            Defines options for selection type. They are
             `Single`: Allows selection of only a row or a cell.
             `Multiple`: Allows selection of multiple rows or cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.AllowDragSelection">
            <summary>
            Gets or sets whether to enable selection of multiple rows and cells by dragging mouse.
            </summary>
            <value>
            <c>true</c> if the row and cell selection enabled when dragging mouse. Otherwise, false. The default value is false.
            </value>
            <remarks>
            To perform drag selection in grid part of Blazor Gantt, set <see cref="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.Type"/> as <c>Multiple</c>.
            </remarks>
            <example>
            In the below code example, enabled AllowDragSelection property 
            <code><![CDATA[
            <SfGantt @ref="Gantt">
                <GanttSelectionSettings AllowDragSelection = "true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GanttSelectionSettings>
            </SfGantt>
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSortDescriptor">
            <summary>
            Configures sort descriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortDescriptor.Direction">
            <summary>
            Defines the direction of sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortDescriptor.Field">
            <summary>
            Defines the field name of sort column.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSortDescriptors">
            <summary>
            Configures sort descriptors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortDescriptors.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortDescriptors.Columns">
            <summary>
            Gets the sorted columns collection, use <see cref="T:Syncfusion.Blazor.Gantt.GanttSortDescriptor"/> component
            To set initial sort columns.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSortSettings">
            <summary>
            Configures the sort settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortSettings.AllowUnsort">
            <summary>
            If AllowUnsort set to false the user can not get the Gantt in unsorted state by clicking the sorted column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortSettings.Columns">
            <summary>
            Specifies the columns to sort at initial rendering of Gantt.
            Also user can get current sorted columns.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSplitterSettings">
            <summary>
            Configures gantt splitter settings collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.ColumnIndex">
            <summary>
            Defines splitter position with respect to column index value.
            If `ColumnIndex` set as `2` then splitter bar placed at third column of grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.Minimum">
            <summary>
            Defines minimum width of Grid part, splitter can't be moved less than this value on grid side.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.Position">
            <summary>
            Defines splitter position at initial load, it accepts values in pixels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.SeparatorSize">
            <summary>
            Defines splitter bar size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.View">
            <summary>
            Defines predefined view of Gantt.
             `Default` - Shows grid side and side of Gantt.
             `Grid` - Shows grid side alone in Gantt.
             `Chart` - Shows chart side alone in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.Collapsible">
            <summary>
            This property is used to enable/disable splitter expand collapse feature in Gantt chart.
            </summary>
            <value>boolean value to enable/disable expand/collapse feature</value> 
            <remarks>It enables expand collapse icon near splitter resizer.</remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTaskFields">
            <summary>
            Configures Gantt taskfields column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.BaselineEndDate">
            <summary>
            To map baseline end date of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.BaselineStartDate">
            <summary>
            To map baseline start date of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Child">
            <summary>
            To map child of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.CssClass">
            <summary>
            To map custom css class of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Dependency">
            <summary>
            Gets or sets field name from data source which maps dependency of tasks on initial load.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Duration">
            <summary>
            To map duration of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.DurationUnit">
            <summary>
            To map duration unit of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.EndDate">
            <summary>
            To map end date of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.ExpandState">
            <summary>
            To map expand status of parent record from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id">
            <summary>
            To map id of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Indicators">
            <summary>
            To map indicators of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Manual">
            <summary>
            To map schedule mode of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Milestone">
            <summary>
            To map milestone of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Name">
            <summary>
            To map name of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Notes">
            <summary>
            To map notes value of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.ParentID">
            <summary>
            To map parent id of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Progress">
            <summary>
            To map progress of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.ResourceInfo">
            <summary>
            To map assigned resources of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.StartDate">
            <summary>
            To map start date of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.TaskType">
            <summary>
            To map taskType value of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Work">
            <summary>
            To map work of task from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.HasChildMapping">
            <summary>
            Gets or sets a field name of data object in data source that specifies whether the current record has child records. 
            </summary>
            <value>
            Field name in data object of data source which denotes whether current record holds any child records. The default value is null.
            </value>
            <remarks> 
            It is applicable only when <b>LoadChildOnDemand</b> property is enabled  to handle the record as parent item. 
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTemplates`1">
            <summary>
            Configures Gantt Chart templates.
            </summary>
            <typeparam name="TValue">Specifies the type of GanttTemplates.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.ChildContent">
            <summary>
            Defines the child content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.ParentTaskbarTemplate">
            <summary>
            Gets or sets the template to customize parent taskbar element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.TaskbarTemplate">
            <summary>
            Gets or sets the template to customize taskbar element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.MilestoneTemplate">
            <summary>
            Gets or sets the template to customize milestone element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.RowTemplate">
            <summary>
            Gets or sets the template to customize row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.ManualTaskbarTemplate">
            <summary>
            Gets or sets the template to customize ManualTaskbar element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.BaselineTemplate">
            <summary>
            Gets or sets the template to customize Baseline element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.BaselineMilestoneTemplate">
            <summary>
            Gets or sets the template to customize Baseline Milestone element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings">
            <summary>
            Configures gantt timeline settings collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.ShowTooltip">
            <summary>
            Enables or disables tooltip for timeline cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.TimelineUnitSize">
            <summary>
            Defines width of timeline cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.TimelineViewMode">
            <summary>
            Defines timeline mode of Gantt header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.UpdateTimescaleView">
            <summary>
            Enables or disables timeline auto update on editing action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.WeekStartDay">
            <summary>
             Defines week start day in timeline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.WeekendBackground">
            <summary>
             Defines background color of weekend cell in week - day timeline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.BottomTier">
            <summary>
            Defines bottom tier settings in timeline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.TopTier">
            <summary>
            Defines top tier setting in timeline.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings">
            <summary>
            Configures gantt Timeline tier collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.Count">
            <summary>
            Defines number of timeline units combined for single cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.Format">
            <summary>
            Defines timeline cell format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.Formatter">
            <summary>
            Defines method to get custom formatted values of timeline cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.Unit">
            <summary>
            defines number units per cell.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.OnInitializedAsync">
            <summary>
            Receive its initial parameters from its parent in the render tree.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.OnParametersSetAsync">
            <summary>
            Incoming values have been assigned to properties.
            </summary>
            <retruns>Task.</retruns>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1">
            <summary>
            Configures Gantt Tooltip settings collection.
            </summary>
            <typeparam name="TValue">Specifies the type of GanttTooltipSettings.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.Parent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ShowTooltip">
            <summary> 
            Gets or sets whether to enable or disable the tooltip in gantt chart. 
            </summary> 
            <value> 
            <b>true</b> if need to render tooltip; otherwise, <b>false</b>.  The default value is true. 
            </value> 
            <remarks> 
            Displays the respective content values like start date, end date, duration, progress, etc., in tooltip 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection"> 
            <GanttTooltipSettings ShowTooltip="true"></GanttTooltipSettings> 
                </SfGantt> 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ShowTooltipOnEditing">
             <summary> 
             Gets or sets whether to enable or disable the editing tooltip in gantt chart. 
             </summary> 
            <value> 
             <b>true</b> if need to render editing tooltip; otherwise, <b>false</b>.  The default value is true. 
             </value> 
             <remarks> 
             Displays the respective content values like start date, end date, duration, progress, etc., in editing tooltip 
             </remarks> 
             <seealso cref="T:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1"/> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.BaselineTemplate">
            <summary>
            Defines template for baseline tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ConnectorLineTemplate">
            <summary>
            Defines template for dependency line tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.EditingTemplate">
            <summary> 
            Gets or sets a template that appears on tooltip while editing taskbar. 
            </summary>   
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>. 
            The context is of type TValue of Gantt.  
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <GanttTooltipSettings ShowTooltip="true" TValue="TaskData"> 
                  <EditingTemplate> 
                      @{ 
                           <div>Start Date: @context.StartDate</div> 
                       } 
                   </EditingTemplate> 
               </GanttTooltipSettings>
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.TaskbarTemplate">
            <summary>
            Defines tooltip template for taskbar elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ManualTaskbarTemplate">
            <summary>
            Defines tooltip template for ManualTaskbar elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTopTierSettings">
            <summary>
            Defines top tier settings in timeline.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings">
            <summary>
            Configures Gantt Chart zoom timeline settings collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings.Level">
            <summary>
             Defines Level in timeline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings.PerDayWidth">
            <summary>
             Defines perDayWidth in ZoomingLevels.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.IGantt">
            <summary>
            Interface for SfGantt component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Columns">
            <summary>
            To set columns collections in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.DateFormat">
            <summary>
            To set date format in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.DayWorkingTime">
            <summary>
            Defines customized working time of project.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Height">
            <summary>
            Defines the height of the Gantt component container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Locale">
            <summary>
            Defines Gantt localization feature.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ProjectEndDate">
            <summary>
            Defines end date of the project, if `projectEndDate` value not set then it will be calculated from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ProjectStartDate">
            <summary>
            Defines start date of the project, if `projectStartDate` value not set then it will be calculated from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Query">
            <summary>
            Defines the external Query that will be executed along with data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.RowHeight">
            <summary>
            Defines height value for grid rows and chart rows in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SplitterSettings">
            <summary>
            Configures the splitter settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.TaskFields">
            <summary>
            Defines task fields value for grid rows and chart rows in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ResourceFields">
            <summary>
            Defines mapping properties to find task values such as id, name and unit values from resource fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.KeySettings">
            <summary>
            Configures the key settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.TimelineSettings">
            <summary>
            configures timeline settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ColumnChooserSettings">
            <summary>
            Configures gantt Column chooser settings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.TimelineTierSettings">
            <summary>
            configures timelineTier settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.GridLines">
            <summary>
            Configures the grid lines in tree grid and gantt chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.DurationUnit">
            <summary>
            To set duration unit in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.TreeColumnIndex">
            <summary>
            To define expander column index in Grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ViewType">
            <summary>
            Defines the view type of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Width">
            <summary>
            Defines the width of the Gantt component container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Holidays">
            <summary>
            Defines Gantt Holiday collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.EventMarkers">
            <summary>
            Defines Gantt EventMarker collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.AddDialogFields">
            <summary>
            Defines the tabs and fields to be included in the add dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.EditDialogFields">
            <summary>
            Defines the tabs and fields to be included in the edit dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.IncludeWeekend">
            <summary>
            To include weekend days in schedule calculation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.HighlightWeekends">
            <summary>
            If highlightWeekends set to true, then all weekend days are highlighted in week - day timeline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Toolbar">
            <summary>
            `Toolbar` defines the toolbar items of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.FilterSettings">
            <summary>
            Configures the filter settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.AllowSelection">
            <summary>
            To enable selection feature in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SelectedRowIndex">
            <summary>
            The selectedRowIndex allows you to select a row at initial rendering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.EditSettings">
            <summary>
            Configures the edit settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SelectionSettings">
            <summary>
            Configures the selection settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SearchSettings">
            <summary>
            Configures the search settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ShowInlineNotes">
            <summary>
            To show notes column cell values inside the cell or in tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SortSettings">
            <summary>
            Configures the sort settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.AllowSorting">
            <summary>
            Configures the AllowSorting of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.AllowMultiSorting">
            <summary>
            Configures the AllowMultiSorting of the Gantt.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.IGantt.UpdateChildProperties(System.String,System.Object)">
            <summary>
            To update Child Properties.
            </summary>
            <param name="key">key.</param>
            <param name="changedValue">value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.IGantt.ModelChanged(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            ModelChanged in Gantt.
            </summary>
            <param name="propertyChanges">propertyChanges.</param>
            <param name="propertyName">propertyName.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.IGantt.CallStateHasChangedAsync">
            <summary>
            Refreshes the state of Gantt component.
            </summary>
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.CellEdit`1">
            <summary>
            Handles Cell edit feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of CellEdit.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.CellEdit`1.#ctor(Syncfusion.Blazor.Gantt.SfGantt{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Gantt.Internal.CellEdit`1"/> class.
            </summary>
            <param name="parent">Defines Gantt.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.CellEdit`1.Parent">
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ContextMenu`1">
            <summary>
            Handles ContextMenu feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of ContextMenu.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.DialogValidation`1">
            <summary>
            Handles Dialog edit feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of DialogValidation.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.EditBase`1">
            <summary>
            Handles Edit feature of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.EditBase`1.MaxTaskID">
            <summary>
            To maintain the maximum value of TaskId from the existing dataSource.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.EditBase`1.MinStartDate">
            <summary>
            When open add dialog, the default value of start date will be minimum value of start date of existing datasource.
            Hence, using MinStartDate property to maintain the minimum value of start date.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.EditBase`1.SetColumnDefaultValue">
            <summary>
            When the method is called if set any default value
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.Keyboard`1">
            <summary>
            Handles keyboard interactions feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of Keyboard.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.Selection`1">
            <summary>
            Handles selection feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of Selection.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TaskbarEdit`1">
            <summary>
            Handles Taskbar edit feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of TaskbarEdit.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.TaskbarEdit`1.isTooltipRendered">
            <summary>
            This property is used to ensure whether editing tooltip is rendered or not, so that we can avoid unnecessary script call.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.TaskbarEdit`1.TaskbarEditedRecord">
            <summary>
            To store validated dates, duration, progress value in order to display the updated values in tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.TaskbarEdit`1.taskbarEditElement">
            <summary>
            To maintain the taskbar editing element for which the tooltip should get render.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChartBase`1">
            <summary>
            Gantt taskbar Validation.
            </summary>
            <summary>
            Timeline Validation.
            </summary>
            <summary>
            Gantt width left Validation.
            </summary>
            <typeparam name="T">Specifies the type of ChartBase.</typeparam>
            <summary>
            ConnectorLine Design.
            </summary>
            <summary>
            ConnectorLine Editing.
            </summary>
            <summary>
            ConnectorLine Validation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.timelineCellWidthCollection">
            <summary>
            This collection is used to maintain total width of each timeline cell, in order to update the grid lines with proper left position. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.currentStartDate">
            <summary>
            This property is used to maintain the current timeline start date when timeline virtualization is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.currentEndDate">
            <summary>
            This property is used to maintain the current timeline end date when timeline virtualization is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.parentRecords">
            <summary>
            To maintain parent records which needs to be updated only once, when dependent child records gets modified. So that we can avoid updating parent item, when each child record gets updated.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.parentPredecessor">
            <summary>
            To maintain parent records with predecessor values alone to avoid unnecessary iteration while validating on load time.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.loadParentPredecessor">
            <summary>
            To push parent records with predecessor values at load time alone, to avoid unnecessary iteration while validating.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.renderDialog">
            <summary>
            To enable/disable dialog rendering in touch mode, on predecessor drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.leftConnectorPoint">
            <summary>
            To enable/diable the left button of tooltip in touch mode, on predecessor drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.rightConnectorPoint">
            <summary>
            To enable/diable the right button of tooltip in touch mode, on predecessor drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.fromItem">
            <summary>
            To store the predecessor's from record in touch mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.toItem">
            <summary>
            To store the predecessor's to record in touch mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.GanttChartJSInteropAdaptor`1">
            <summary>
            JSInterop Adaptor for Gantt Chart component.
            </summary>
            <typeparam name="TValue">Accepts generic type parameter.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttChartJSInteropAdaptor`1.#ctor(Syncfusion.Blazor.Gantt.SfGantt{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Gantt.Internal.GanttChartJSInteropAdaptor`1"/> class.
            Constructor for initializing the component adaptor.
            </summary>
            <param name="parent">GanttChart arguments.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttChartJSInteropAdaptor`1.Create">
            <summary>
            Creates DotNet Object reference.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.GanttUtils">
            <summary>
            Util functions for internal usage.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.DateValidation`1">
            <summary>
            Gantt Duration Validation.
            </summary>
            <summary>
            Gantt EndDate Validation.
            </summary>
            <summary>
            Gantt NonWorking Validation.
            </summary>
            <typeparam name="T">Specifies the type of DateValidateion.</typeparam>
            <summary>
            Gantt StartDate Validation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.EventAggregators">
            <summary>
            Provides internal event mechanism.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TooltipObject">
            <summary>
            To maintain Tooltip object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ValidateType">
            <summary>
            To maintain ValidateType.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.BaselineMilestone`1">
            <summary>
            Configures Gantt chart base line milestone.
            </summary>
            <typeparam name="TValue">Specifies the type of BaselineMilestone.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.BaselineMilestone`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.BaselineRenderer`1">
            <summary>
            Configures Gantt chart base line renderer.
            </summary>
            <typeparam name="TValue">Specifies the type of BaselineRenderer.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.BaselineRenderer`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1">
            <summary>
            Configures Gantt chart body content.
            </summary>
            <typeparam name="TValue">Specifies the type of ChartBodyContent.</typeparam>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.lineContainerId">
            <summary>
            lineContainerId variable used for set the Gridline container id
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.lineContainerStyle">
            <summary>
            lineContainerStyle variable used for set the Gridline container style
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.leftPos">
            <summary>
            leftPos variable used for set the Gridline left position
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.thWidth">
            <summary>
            thWidth variable used for get and set the Gridline width
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChartPane`1">
            <summary>
            Configures Gantt Chart pane.
            </summary>
            <typeparam name="TValue">Specifies the type of ChartPane.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartPane`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChartRow`1">
            <summary>
            Configures Gantt chart row container.
            </summary>
            <typeparam name="TValue">Specifies the type of ChartRow.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.rowClassName">
            <summary>
            rowClassName variable used for define the individual row class name 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.rowStyle">
            <summary>
            rowStyle variable used for define style in individual row
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.GanttProperties">
            <summary>
            This variable used for get the gantt properities values
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.LeftLabelObj">
            <summary>
            This variable is left label refrence object
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.RightLabelObj">
            <summary>
            This variable is right label refrence object
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.ChartRowObj">
            <summary>
            This variable is drag and drop taskbar refrence object
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ConnectorLineRender`1">
            <summary>
            Configures Gantt chart connector line render.
            </summary>
            <typeparam name="TValue">Specifies the type of ConnectorLineRender.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ConnectorLineRender`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ConnectorLineRender`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.FFType1`1">
            <summary>
            Configures Gantt chart FFType1.
            </summary>
            <typeparam name="TValue">Specifies the type of FFType1.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FFType1`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FFType1`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.FFType2`1">
            <summary>
            Configures Gantt chart FFType2.
            </summary>
            <typeparam name="TValue">Specifies the type of FFType2.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FFType2`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FFType2`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.FFType3`1">
            <summary>
            Configures Gantt chart FFType3.
            </summary>
            <typeparam name="TValue">Specifies the type of FFType3.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FFType3`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FFType3`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.FFType4`1">
            <summary>
            Configures Gantt chart FFType4.
            </summary>
            <typeparam name="TValue">Specifies the type of FFType4.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FFType4`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FFType4`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.FSType1`1">
            <summary>
            Configures Gantt chart FSType1.
            </summary>
            <typeparam name="TValue">Specifies the type of FSType1.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FSType1`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FSType1`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.FSType2`1">
            <summary>
            Configures Gantt chart FSType2.
            </summary>
            <typeparam name="TValue">Specifies the type of FSType2.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FSType2`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FSType2`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.FSType3`1">
            <summary>
            Configures Gantt chart FSType3.
            </summary>
            <typeparam name="TValue">Specifies the type of FSType3.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FSType3`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FSType3`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.FSType4`1">
            <summary>
            Configures Gantt chart FSType4.
            </summary>
            <typeparam name="TValue">Specifies the type of FSType4.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FSType4`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.FSType4`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SFType1`1">
            <summary>
            Configures Gantt chart SFType1.
            </summary>
            <typeparam name="TValue">Specifies the type of SFType1.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SFType1`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SFType1`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SFType2`1">
            <summary>
            Configures Gantt chart SFType2.
            </summary>
            <typeparam name="TValue">Specifies the type of SFType2.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SFType2`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SFType2`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SFType3`1">
            <summary>
            Configures Gantt chart SFType3.
            </summary>
            <typeparam name="TValue">Specifies the type of SFType3.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SFType3`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SFType3`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SFType4`1">
            <summary>
            Configures Gantt chart SFType4.
            </summary>
            <typeparam name="TValue">Specifies the type of SFType4.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SFType4`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SFType4`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SSType1`1">
            <summary>
            Configures Gantt chart SSType1.
            </summary>
            <typeparam name="TValue">Specifies the type of SSType1.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SSType1`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SSType1`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SSType2`1">
            <summary>
            Configures Gantt chart SSType2.
            </summary>
            <typeparam name="TValue">Specifies the type of SSType2.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SSType2`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SSType2`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SSType3`1">
            <summary>
            Configures Gantt chart SSType3.
            </summary>
            <typeparam name="TValue">Specifies the type of SSType3.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SSType3`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SSType3`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SSType4`1">
            <summary>
            Configures Gantt chart SSType4.
            </summary>
            <typeparam name="TValue">Specifies the type of SSType4.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SSType4`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.SSType4`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.DateTimeTemplate`1">
            <summary>
            Configures Gantt chart date time template.
            </summary>
            <typeparam name="TValue">Specifies the type of DateTimeTemplate.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SplitterRenderer`1">
            <summary>
            Configures Gantt splitter pane.
            </summary>
            <typeparam name="TValue">Specifies the type of SplitterRenderer.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChildMilestone`1">
            <summary>
            Configures Child MileStone.
            </summary>
            <typeparam name="TValue">Specifies the type of ChildMileStone.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChildMilestone`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChildTaskbar`1">
            <summary>
            Configures child Taskbar.
            </summary>
            <typeparam name="TValue">Specifies the type of ChildTaskbar.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChildTaskbar`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.IndicatorRenderer`1">
            <summary>
            Configures Indicator Renderer.
            </summary>
            <typeparam name="TValue">Specifies the type of IndicatorRenderer.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ManualParentTaskbar`1">
            <summary>
            Configures Manual Parent Taskbar.
            </summary>
            <typeparam name="TValue">Specifies the type of ManualParentTaskbar.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ParentMilestone`1">
            <summary>
            Configures Parent Parent MileStone.
            </summary>
            <typeparam name="TValue">Specifies the type of ParentMileStone.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ParentMilestone`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ParentTaskbar`1">
            <summary>
            Configures Parent Taskbar.
            </summary>
            <typeparam name="TValue">Specifies the type of ParentTaskbar.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ParentTaskbar`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.Taskbar`1">
            <summary>
            Configures Gantt Chart taskbar main container.
            </summary>
            <typeparam name="TValue">Specifies the type of Taskbar.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.Taskbar`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.Taskbar`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TimelineCell`1">
            <summary>
            Configures Gantt Timeline cell.
            </summary>
            <typeparam name="TValue">Specifies the type of TimelineCell.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TimelineCell`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TimelineHeader`1">
            <summary>
            Configures Gantt Timeline header.
            </summary>
            <typeparam name="TValue">Specifies the type of ChildMileStone.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TimelineHeader`1.OnInitialized">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.BaselineTooltip`1">
            <summary>
            Configures Gantt Baseline Tooltip.
            </summary>
            <typeparam name="TValue">Specifies the type of BaselineTooltip.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ConnectorLineTooltip`1">
            <summary>
            Configures Gantt Connector Line Tooltip.
            </summary>
            <typeparam name="TValue">Specifies the type of ConnectorLineTooltip.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ConnectorLineTooltip`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.EventMarkerTooltip`1">
            <summary>
            Configures Gantt EventMarker Tooltip.
            </summary>
            <typeparam name="TValue">Specifies the type of EventMarkerTooltip.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.IndicatorTooltip`1">
            <summary>
            Configures Gantt Indicator Tooltip.
            </summary>
            <typeparam name="TValue">Specifies the type of IndicatorTooltip.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ManualParentTaskbarTooltip`1">
            <summary>
            Configures Gantt ManualParent Taskbar Tooltip.
            </summary>
            <typeparam name="TValue">Specifies the type of ManualParentTaskbarTooltip.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ManualTaskbarTooltip`1">
            <summary>
            Configures Gantt Manual Taskbar Tooltip.
            </summary>
            <typeparam name="TValue">Specifies the type of ManualTaskbarTooltip.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.MilestoneTooltip`1">
            <summary>
            Configures Gantt MileStone Tooltip.
            </summary>
            <typeparam name="TValue">Specifies the type of MileStoneTooltip.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TaskbarTooltip`1">
            <summary>
            Configures Gantt Taskbar Tooltip.
            </summary>
            <typeparam name="TValue">Specifies the type of TaskbarTooltip.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1">
            <summary>
            Configures Gantt TreeGrid Events.
            </summary>
            <summary>
            Configures Gantt TreeGrid Lifecycle.
            </summary>
            <summary>
            Configures Gantt TreeGrid Members.
            </summary>
            <typeparam name="TValue">Specifies the type of TreeGridPane.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.OnDemandExpand(System.Object)">
            <summary>
            To method is used to create gantt record and update necessary collections on expand action.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.DataManagerCRUD(System.Object)">
            <summary>
            To method is used to update TValue in event argument data on crud operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.accessor">
            <summary>
            Gets or sets the fast reflection accessor to reflect the data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.ResetCollections">
            <summary>
            This method is used to reset the necessary data collections.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.TreeGridPersistProperties(System.String)">
            <summary>
            Update Gantt properties based on persisted values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.HasChildMapping">
            <summary>
            To specify a record is parent or not for the remote data binding.
            </summary>
        </member>
    </members>
</doc>
