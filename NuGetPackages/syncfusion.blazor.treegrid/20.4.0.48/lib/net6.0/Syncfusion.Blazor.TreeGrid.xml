<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor.TreeGrid</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.TreeGrid.CopyHierarchyType">
            <summary>
            Defines the types of CopyHierarchyMode.<br/>
            <b>Parent</b> - Clipboard value will have the selected records with its parent records.<br/>
            <b>Child</b> - Clipboard value will have the selected records with its child record.<br/>
            <b>Both</b> - Clipboard value will have the selected records with its both parent and child record.<br/>
            <b>None</b> - Only the selected records will be in the clipboard.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.CopyHierarchyType.Parent">
            <summary>
            Clipboard value have the selected records with its parent records.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.CopyHierarchyType.Child">
            <summary>
            Clipboard value have the selected records with its child record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.CopyHierarchyType.Both">
            <summary>
            Clipboard value have the selected records with its both parent and child record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.CopyHierarchyType.None">
            <summary>
            Only the selected records will be in the clipboard.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.FilterHierarchyMode">
            <summary>
            Defines types of Filter Hierarchy.<br/>
            <b>Parent</b> - Filtered records are displayed with its parent records.<br/>
            <b>Child</b> - Filtered records are displayed with its child record.<br/>
            <b>Both</b> - Filtered records are displayed with its both parent and child record.<br/>
            <b>None</b> - Only the filtered records are displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.FilterHierarchyMode.Parent">
            <summary>
            Filtered records are displayed with its parent records.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.FilterHierarchyMode.Child">
            <summary>
            Filtered records are displayed with its child record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.FilterHierarchyMode.Both">
            <summary>
            Filtered records are displayed with its both parent and child record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.FilterHierarchyMode.None">
            <summary>
            Only the filtered records are displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.FilterType">
            <summary>
            Defines the filter type for Tree Grid
            <b>FilterBar</b> - Specifies the filter type as filter bar.<br/>
            <b>Excel</b> - Specifies the filter type as excel.<br/>
            <b>Menu</b>- Specifies the filter type as menu.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.FilterType.FilterBar">
            <summary>
            Specifies the filter type as filter bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.FilterType.Excel">
            <summary>
            Specifies the filter type as excel.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.FilterType.Menu">
            <summary>
            Specifies the filter type as menu.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.PageSizeMode">
            <summary>
            Defines the page size mode for Tree Grid
            <b>All</b> - Specifies the PageSizeMode as All.<br/>
            <b>Root</b> - Specifies the PageSizeMode as Root.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.PageSizeMode.All">
            <summary>
            Specifies the PageSizeMode as All.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.PageSizeMode.Root">
            <summary>
            Specifies the PageSizeMode as Root.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.WrapMode">
            <summary>
            Defines the wrap mode for Tree Grid.
            <b>Both</b> - Wraps both the header and content.<br/>
            <b>Header</b> - Wraps header alone.<br/>
            <b>Content</b> - Wraps content alone.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.WrapMode.Both">
            <summary>
            Wraps both the header and content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.WrapMode.Header">
            <summary>
            Wraps header alone.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.WrapMode.Content">
            <summary>
            Wraps content alone.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.EditMode">
            <summary>
            Defines the edit modes of Tree Grid.
            <b>Cell</b> - Enables cell editing.<br/>
            <b>Row</b> - Editing is done in an inline form. Edit form is rendered inline as one of the table rows.<br/>
            <b>Dialog</b> - Editing is done in a Dialog or Pop component.<br/>
            <b>Batch</b> - Multiple cells can be edited or added or deleted and saved.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.EditMode.Cell">
            <summary>
            Enables cell editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.EditMode.Row">
            <summary>
            Editing is done in an inline form. Edit form is rendered inline as one of the table rows.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.EditMode.Dialog">
            <summary>
            Editing is done in a Dialog or Pop component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.EditMode.Batch">
            <summary>
            Multiple cells can be edited or added or deleted and saved.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.RowPosition">
            <summary>
            Defines the position for newly added row in Tree Grid.
            <b>Top</b> - New row is added at the top of the tree grid.<br/>
            <b>Bottom</b> - New row is added at the bottom of the tree grid.<br/>
            <b>Above</b> - New row is added in the above position of the selected record.<br/>
            <b>Below</b> - New row is added in the below position of the selected record.<br/>
            <b>Child</b> - New row is added as a child to the selected record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.RowPosition.Top">
            <summary>
            New rows added in the top of the tree grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.RowPosition.Bottom">
            <summary>
            New rows added in the bottom of the tree grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.RowPosition.Above">
            <summary>
            New rows added in the above position of the selected record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.RowPosition.Below">
            <summary>
            New rows added in the below position of the selected record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.RowPosition.Child">
            <summary>
            New rows added as a child to the selected record.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.RowCollapsedEventArgs`1">
            <summary>
            Defines the event arguments for collapse action of Tree Grid.
            </summary>
            <typeparam name="T">A type which provides schema for the event arguments.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowCollapsedEventArgs`1.Data">
            <summary>
            Defines the parent row data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowCollapsedEventArgs`1.Row">
            <summary>
            Defines the parent row element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1">
            <summary>
            Defines the event arguments for collapsing action of Tree Grid.
            </summary>
            <typeparam name="T">A type which provides schema for the event arguments.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1.Cancel">
            <summary>
            Cancel the row collapsing action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1.Data">
            <summary>
            Defines the parent row data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1.Row">
            <summary>
            Defines the parent row element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1.CollapseAll">
            <summary>
            Provide an option to CollapseAll the nested parent rows of the current row.
            </summary>
            <example>
            <code><![CDATA[
            <SfTreeGrid>
                <TreeGridEvents TValue="TreeData"  Collapsing="OnCollapsing"></TreeGridEvents>
            </SfTreeGrid>
            @code{
             private async Task OnCollapsing(RowCollapsingEventArgs<TreeData> args)
             {
                 args.CollapseAll = true;
              }
            }
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.RowExpandedEventArgs`1">
            <summary>
            Defines the event arguments for expand action of Tree Grid.
            </summary>
            <typeparam name="T">A type which provides schema for the event arguments.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowExpandedEventArgs`1.Data">
            <summary>
            Defines the parent row data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowExpandedEventArgs`1.Row">
            <summary>
            Defines the parent row element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1">
            <summary>
            Defines the event arguments for expanding action of Tree Grid.
            </summary>
            <typeparam name="T">A type which provides schema for the event arguments.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1.Cancel">
            <summary>
            Cancel the row expanding action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1.Data">
            <summary>
            Defines the parent row data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1.Row">
            <summary>
            Defines the parent row element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1.ExpandAll">
            <summary>
            Provide an option to ExpandAll the nested parent rows of the current row 
            </summary>
            <example>
            <code><![CDATA[
            <SfTreeGrid>
                <TreeGridEvents TValue="TreeData" Expanding="OnExpanding" ></TreeGridEvents>
            </SfTreeGrid>
            @code{
             private async Task OnExpanding(RowExpandingEventArgs<TreeData> args)
             {
                 args.ExpandAll = true;
             }
            }
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.CheckBoxChangeEventArgs`1">
            <summary>
            Defines the event arguments for checkbox change event of Tree Grid.
            </summary>
            <typeparam name="T">A type which provides schema for the event arguments.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.CheckBoxChangeEventArgs`1.Checked">
            <summary>
            Defines the checked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.CheckBoxChangeEventArgs`1.SelectedRowIndexes">
            <summary>
            Defines the selected row indexes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.CheckBoxChangeEventArgs`1.SelectedRowIndex">
            <summary>
            Defines the selected row index.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridExcelExportProperties">
            <summary>
            Defines the options for customizing the excel document during export.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridExcelExportProperties.IsCollapsedStatePersist">
            <summary>
            Specifies the collapsed state persistence in exported file.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridPdfExportProperties">
            <summary>
            Defines the options for customizing the pdf document during export.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridPdfExportProperties.IsCollapsedStatePersist">
            <summary>
            Specifies the collapsed state persistence in exported file.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.BeforeCopyPasteEventArgs">
            <summary>
            Defines the event arguments of before copy action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.BeforeCellPasteEventArgs`1">
            <summary>
            Defines the event arguments of before paste action.
            </summary>
            <typeparam name="T">TValue of tree grid component. </typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid">
            <summary>
            Interface for SfTreeGrid component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.Aggregates">
            <summary>
            Configures the TreeGrid aggregate rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowExcelExport">
            <summary>
            If `AllowExcelExport` set to true, then it will allow the user to export treegrid to Excel file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowFiltering">
            <summary>
            If `AllowFiltering` is set to true the filter bar will be displayed.
            If set to false the filter bar will not be displayed.
            Filter bar allows the user to filter tree grid records with required criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowMultiSorting">
            <summary>
            If `AllowMultiSorting` set to true, then it will allow the user to sort multiple column in the treegrid.
            > `AllowSorting` should be true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowPaging">
            <summary>
            If `AllowPaging` is set to true, pager renders.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowPdfExport">
            <summary>
            If `AllowPdfExport` set to true, then it will allow the user to export treegrid to Pdf file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowReordering">
            <summary>
            If `AllowReordering` is set to true, TreeGrid columns can be reordered.
            Reordering can be done by drag and drop of a particular column from one index to another index.
            > If TreeGrid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowResizing">
            <summary>
            If `AllowResizing` is set to true, TreeGrid columns can be resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowSelection">
            <summary>
            If `AllowSelection` is set to true, it allows selection of (highlight row) TreeGrid records by clicking it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowSorting">
            <summary>
            If `AllowSorting` is set to true, it allows sorting of treegrid records when column header is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowTextWrap">
            <summary>
            If `AllowTextWrap` set to true,
            then text content will wrap to the next line when its text content exceeds the width of the Column Cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AutoCheckHierarchy">
            <summary>
            If `AutoCheckHierarchy` is set to true, hierarchy checkbox selection is enabled in TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ChildMapping">
            <summary>
            Specifies the mapping property path for child records in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ClipMode">
            <summary>
             Defines the mode of clip. The available modes are,
            `Clip`: Truncates the cell content when it overflows its area.
            `Ellipsis`: Displays ellipsis when the cell content overflows its area.
            `EllipsisWithTooltip`:  Displays ellipsis when the cell content overflows its area,
             also it will display the tooltip while hover on ellipsis is applied..
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ColumnChooserSettings">
            <summary>
            Configures the column chooser in the Tree Grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ColumnMenuItems">
            <summary>
            `ColumnMenuItems` defines both built-in and custom column menu items.
            The available built-in items are,
             `AutoFitAll` - Auto fit the size of all columns.
             `AutoFit` - Auto fit the current column.
             `SortAscending` - Sort the current column in ascending order.
             `SortDescending` - Sort the current column in descending order.
             `Filter` - Filter options will show based on filterSettings property like filterbar, menu filter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ColumnQueryMode">
            <summary>
            `ColumnQueryMode`provides options to retrieves data from the data source.Their types are
             `All`: It retrieves whole data source.
             `Schema`: retrieves data for all the defined columns in TreeGrid from the data source.
             `ExcludeHidden`: retrieves data only for visible columns of TreeGrid from the data Source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.Columns">
            <summary>
            Defines the schema of dataSource.
            If the `Columns` declaration is empty or undefined then the `columns` are automatically generated from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ContextMenuItems">
            <summary>
            `ContextMenuItems` defines both built-in and custom context menu items.
            The available built-in items are,
             `AutoFitAll` - Auto fit the size of all columns.
             `AutoFit` - Auto fit the current column.
             `Edit` - Edit the current record.
             `Delete` - Delete the current record.
             `Save` - Save the edited record.
             `Cancel` - Cancel the edited state.
             `PdfExport` - Export the grid as Pdf format.
             `ExcelExport` - Export the grid as Excel format.
             `CsvExport` - Export the grid as CSV format.
             `SortAscending` - Sort the current column in ascending order.
             `SortDescending` - Sort the current column in descending order.
             `FirstPage` - Go to the first page.
             `PrevPage` - Go to the previous page.
             `LastPage` - Go to the last page.
             `NextPage` - Go to the next page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.CopyHierarchyMode">
            <summary>
            `CopyHierarchyMode` Defines the copy clipboard types.
            The available built-in items are,
             `Parent` - Copy the selected data with parent record.
             `Child` - Copy the selected data with child record.
             `Both` - Copy the selected data with both parent and child record.
             `None` - Copy only the selected record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.EditSettings">
            <summary>
            Configures the edit settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.KeySettings">
            <summary>
            Configures the key settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.EnableAltRow">
            <summary>
            If `EnableAltRow` is set to true, the TreeGrid will render with `e-altrow` CSS class to the alternative tr elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.EnableAutoFill">
            <summary>
            If `EnableAutoFill` is set to true, then the auto fill icon will displayed on cell selection for copy cells.
            It requires the selection `mode` to be Cell and `cellSelectionMode` to be `Box`.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.EnableCollapseAll">
            <summary>
            Specifies whether to load all the rows in collapsed state when the TreeGrid is rendered for the first time.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.EnableHover">
            <summary>
            If `EnableHover` is set to true, the row hover is enabled in the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ExpandStateMapping">
            <summary>
            Specifies the mapping property path for the expand status of a record in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.FilterSettings">
            <summary>
            Configures the filter settings of the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.FrozenColumns">
            <summary>
            Gets or sets the number of frozen columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.FrozenRows">
            <summary>
            Gets or sets the number of frozen rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.GridLines">
            <summary>
            Defines the mode of TreeGrid lines. The available modes are,
             `Both`: Displays both horizontal and vertical TreeGrid lines.
             `None`: No TreeGrid lines are displayed.
             `Horizontal`: Displays the horizontal TreeGrid lines only.
             `Vertical`: Displays the vertical TreeGrid lines only.
             `Default`: Displays TreeGrid lines based on the theme.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.HasChildMapping">
            <summary>
            Specifies whether record is parent or not for the remote data binding.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.Height">
            <summary>
            Defines the scrollable height of the TreeGrid content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.IdMapping">
            <summary>
            Specifies the name of the field in the dataSource, which contains the id of that row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.LoadChildOnDemand">
            <summary>
            If `LoadChildOnDemand` is enabled, parent records are render in expanded state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.PageSettings">
            <summary>
            Configures the pager in the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ParentIdMapping">
            <summary>
            Specifies the name of the field in the dataSource, which contains the parent�s id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.PrintMode">
            <summary>
            Defines the print modes. The available print modes are
             `AllPages`: Prints all pages of the TreeGrid.
             `CurrentPage`: Prints the current page of the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.Query">
            <summary>
            Defines the external Query
            that will be executed along with data processing.
            </summary>
            <remarks>
            Additional parameters can be send along with request.
            by using <see cref="M:Syncfusion.Blazor.Data.Query.AddParams(System.String,System.Object)"/> method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.RowDropSettings">
            <summary>
            Configures the row drop settings of the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.RowHeight">
            <summary>
            Defines the height of TreeGrid rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ColumnIndex">
            <summary>
            Specifies new column added index.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.SearchSettings">
            <summary>
            Configures the search settings of the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.SelectedRowIndex">
            <summary>
            The `SelectedRowIndex` allows you to select a row at initial rendering.
            You can also get the currently selected row index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.SelectionSettings">
            <summary>
            Configures the selection settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.AllowFreezeLineMoving">
            <summary>
            If `AllowFreezeLineMoving` set to true, then it will enable the freeze line to move.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ShowColumnMenu">
            <summary>
            If `ShowColumnMenu` set to true, then it will enable the column menu options in each columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.SortSettings">
            <summary>
            Configures the sort settings of the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.TextWrapSettings">
            <summary>
            Configures the text wrap in the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.Toolbar">
            <summary>
            `Toolbar` defines the ToolBar items of the TreeGrid.
            It contains built-in and custom toolbar items.
            If a string value is assigned to the `toolbar` option, it is considered as the template for the whole TreeGrid ToolBar.
            If an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.
            The following code example implements the custom toolbar items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.TreeColumnIndex">
            <summary>
            Specifies the index of the column that needs to have the expander button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.Width">
            <summary>
            Defines the TreeGrid width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.TreeGridTemplates">
            <summary>
            Defines the TreeGrid templates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.HasSortColumnChanges">
            <summary>
            Specifies new sort column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.HasAggregateChanges">
            <summary>
            Specifies new aggregate column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.HasFilterColumnChanges">
            <summary>
            Specifies new filter column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.HasCommandColumnChanges">
            <summary>
            Specifies new command column added.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.CallStateHasChanged">
            <summary>
            Refreshes the tree grid header and content.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.CallStateHasChangedAsync">
            <summary>
            Refreshes the tree grid header and content.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values from parent component.
            </summary>
            <param name="key">Child property name.</param>
            <param name="value">Child property value.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.PropertiesChanged(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Update the propertychanges to grid component.
            </summary>
            <param name="propertyChanges">Property changes.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.ITreeGrid.ExpandRow(System.Object)">
            <summary>
            Expands child rows.
            </summary>
            <param name="record">Specify the record to be expanded.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.Internal.GridRenderer`1">
            <summary>
            Defines the Cell Edit events of Grid.
            </summary>
            <summary>
            GridRenderer is an internal component used to render the grid.
            </summary>
            <summary>
            GridRenderer is an internal component used to render the grid.
            </summary>
            <summary>
            GridRenderer is an internal component used to render the grid.
            </summary>
            <summary>
            GridRenderer is an internal component used to render the grid.
            </summary>
            <typeparam name="TValue">A type which provides schema for grid renderer.</typeparam>
            <summary>
            GridRenderer is an internal component used to render the grid.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.GridRenderer`1.HeaderSelectAll(System.String)">
            <summary>
            Selects the header checkbox of the checkbox column.
            </summary>
            <param name="checkState">Specifies the checkstate of the header checkbox.</param>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.GridRenderer`1.ReorderRows(System.Int32,System.Int32,System.String,System.Boolean,System.String,System.String,Microsoft.JSInterop.DotNetObjectReference{Syncfusion.Blazor.TreeGrid.Internal.GridRenderer{`0}},System.Boolean,System.String)">
            <summary>
            Reorder the rows based on the drop position.
            </summary>
            <param name="fromIndex">Specifies the start row index.</param>
            <param name="toIndex">Specifies the to row index.</param>
            <param name="action">Specifies whether record is deleted or added.</param>
            <param name="isDragWithinGrid">Specifies whether record is dragged within grid.</param>
            <param name="targetClass">Specifies the target elements class.</param>
            <param name="targetId">Specifies the target elements id.</param>
            <param name="destInstance">Specifies the target elements instance.</param>
            <param name="outsideGrid">Specifies whether record is dropped outside the treegrid.</param>
            <param name="dropPosition">Specifies the position of the row to be reordered.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.GridRenderer`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.GridRenderer`1.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.GridRenderer`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.GridRenderer`1.Dispose">
            <summary>
            Dispose unmanaged resources in the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.Internal.CheckboxColumn`1">
            <summary>
            Checkbox column module of treegrid.
            </summary>
            <typeparam name="T">A type which provides schema for the Checkbox column module.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.CheckboxColumn`1.#ctor(Syncfusion.Blazor.TreeGrid.SfTreeGrid{`0},Syncfusion.Blazor.Grids.SfGrid{System.Dynamic.ExpandoObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.TreeGrid.Internal.CheckboxColumn`1"/> class.
            </summary>
            <param name="parent">Defines the treegrid instance.</param>
            <param name="gridParent">Defines the grid instance.</param>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.Internal.Edit`1">
            <summary>
            Edit module of treegrid.
            </summary>
            <typeparam name="T">A type param which provides schema for edit module.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.Edit`1.#ctor(Syncfusion.Blazor.TreeGrid.SfTreeGrid{`0},Syncfusion.Blazor.Grids.SfGrid{System.Dynamic.ExpandoObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.TreeGrid.Internal.Edit`1"/> class.
            </summary>
            <param name="parent">Defines the treegrid instance.</param>
            <param name="gridParent">Defines the grid instance.</param>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.Internal.ExpandCollapse`1">
            <summary>
            ExpandCollapse module of treegrid.
            </summary>
            <typeparam name="T">A type param which provides schema for expandcollapse module.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.ExpandCollapse`1.#ctor(Syncfusion.Blazor.TreeGrid.SfTreeGrid{`0},Syncfusion.Blazor.Grids.SfGrid{System.Dynamic.ExpandoObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.TreeGrid.Internal.ExpandCollapse`1"/> class.
            </summary>
            <param name="parent">Defines the treegrid instance.</param>
            <param name="gridParent">Defines the grid instance.</param>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.ExpandCollapse`1.RemoteChildData">
            <summary>
            Remote data children count.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.Internal.FilterModule`1">
            <summary>
            Filter module of treegrid.
            </summary>
            <typeparam name="T">A type param which provides schema for filter module.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.FilterModule`1.#ctor(Syncfusion.Blazor.TreeGrid.SfTreeGrid{`0},Syncfusion.Blazor.Grids.SfGrid{System.Dynamic.ExpandoObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.TreeGrid.Internal.FilterModule`1"/> class.
            </summary>
            <param name="parent">Defines the treegrid instance.</param>
            <param name="gridParent">Defines the grid instance.</param>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.Internal.RowDD`1">
            <summary>
            Row Reorder module of treegrid.
            </summary>
            <typeparam name="T">A type which provides schema for the Row Reorder module.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.RowDD`1.#ctor(Syncfusion.Blazor.TreeGrid.SfTreeGrid{`0},Syncfusion.Blazor.Grids.SfGrid{System.Dynamic.ExpandoObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.TreeGrid.Internal.RowDD`1"/> class.
            </summary>
            <param name="parent">Defines the treegrid instance.</param>
            <param name="grid">Defines the grid instance.</param>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.Internal.RowDD`1.ReorderRows(System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String,System.String,Microsoft.JSInterop.DotNetObjectReference{Syncfusion.Blazor.TreeGrid.Internal.GridRenderer{`0}},System.Boolean)">
            <summary>
            Reorder the rows based on given indexes and position.
            </summary>
            <param name="fromIndex">Specifies the start row index.</param>
            <param name="toIndex">Specifies the to row index.</param>
            <param name="dropPosition">Specifies the position of the row to be reordered.</param>
            <param name="action">Specifies whether record is deleted or added.</param>
            <param name="isDragWithinGrid">Specifies whether record is dragged within grid.</param>
            <param name="targetClass">Specifies the target elements class.</param>
            <param name="targetId">Specifies the target elements id.</param>
            <param name="destInstance">Specifies the target elements instance.</param>
            <param name="outsideGrid">Specifies whether record is dropped outside the treegrid.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions">
            <summary>
            Struct for SfTreeGrid client options.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.Height">
            <summary>
            Defines the scrollable height of the TreeGrid content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.Width">
            <summary>
            Defines the TreeGrid width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.Columns">
            <summary>
            Defines the schema of dataSource.
            If the `Columns` declaration is empty or undefined then the `columns` are automatically generated from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.TreeColumnIndex">
            <summary>
            Specifies the index of the column that needs to have the expander button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.IdMapping">
            <summary>
            Specifies the name of the field in the dataSource, which contains the id of that row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.ParentIdMapping">
            <summary>
            Specifies the name of the field in the dataSource, which contains the parent’s id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.ChildMapping">
            <summary>
            Specifies the mapping property path for child records in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.HasDetailTemplate">
            <summary>
            Specifies whether treegrid has detailtemplate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.HasRowTemplate">
            <summary>
            Specifies whether treegrid has rowtemplate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.CopyHierarchyMode">
            <summary>
            `CopyHierarchyMode` Defines the copy clipboard types.
            The available built-in items are,
             `Parent` - Copy the selected data with parent record.
             `Child` - Copy the selected data with child record.
             `Both` - Copy the selected data with both parent and child record.
             `None` - Copy only the selected record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.AllowRowDragAndDrop">
            <summary>
            If AllowRowDragAndDrop is enabled then rows can be reordered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.RowDropTargetID">
            <summary>
            Specifies the dropped row elements id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.AllowPaging">
            <summary>
            If `AllowPaging` is set to true, pager renders.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.PageSize">
            <summary>
            Defines the number of records to be displayed in TreeGrid per page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.CurrentPage">
            <summary>
            Defines the current page number of the pager in TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.EnableVirtualization">
            <summary>
            If EnableVirtualization is enabled rows will be virtualized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.Internal.TreeGridClientOptions.IsExpandCollapse">
            <summary>
            Determines whether record is expanded or collapsed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1">
            <summary>
            SfTreeGrid is a feature-rich Blazor component used to visualize self-referential or hierarchical data effectively in a tabular format.
            </summary>
            <summary>
            SfTreeGrid is a feature-rich Blazor component used to visualize self-referential or hierarchical data effectively in a tabular format.
            </summary>
            <typeparam name="TValue">A type which provides schema for the treegrid component.</typeparam>
            <summary>
            SfTreeGrid is a feature-rich Blazor component used to visualize self-referential or hierarchical data effectively in a tabular format.
            </summary>
            <summary>
            SfTreeGrid is a feature-rich Blazor component used to visualize self-referential or hierarchical data effectively in a tabular format.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.accessor">
            <summary>
            Gets or sets the fast reflection accessor to reflect the data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.TotalParentRecords">
            <summary>
            Used to store the total parent records when virtualization is enabled
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.virtualChildRowCount">
            <summary>
            Used to store the children count when virtualization is enabled.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.IsChildVirtualization">
            <summary>
            Set as true when the virtualization applies for children records.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.IsVirtualExpandCollapseAll">
            <summary>
            Used for expandAll, collapseAll actions when virtualization is enabled.
            Set as true when enableCollapseAll and virtualization is enabled.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HideTreeGridSpinner">
            <summary>
            Prevent the treegrid and grid spinner for gantt action.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ColumnIndex">
            <summary>
            Specifies new column added index.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HasSortColumnChanges">
            <summary>
            Specifies new sort column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HasAggregateChanges">
            <summary>
            Specifies new aggregate column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HasFilterColumnChanges">
            <summary>
            Specifies new filter column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HasCommandColumnChanges">
            <summary>
            Specifies new command column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SoftRefresh">
            <summary>
            Specifies refresh without data process and new row generation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SetIndentRecordAsync(`0)">
            <summary>
            Indent the selected or specified record based on its level.
            </summary>
            <param name="data">Specify the record which needs to be indented.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SetOutdentRecordAsync(`0,System.Boolean)">
            <summary>
            Outdent the selected or specified record based on its level.
            </summary>
            <param name="data">Specify the record which needs to be outdented.</param>
            <param name="IsUpdateSiblingRows">Optional boolean value, which specify whether to indent the sibling record as child to selected record.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetPersistDataAsync">
            <summary>
            Returns the serialized tree grid properties to be maintained in the persisted state.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <remarks>
            Users can use this method to later restore the tree grid state through <see cref="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SetPersistDataAsync(System.String)" /> method.
            </remarks>
            <example> 
            <code><![CDATA[ 
            <button id="GetPersistence" @onclick="GetPersistence">Get Persistence</button> 
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData"> 
             ........ 
            </SfTreeGrid> 
            @code{ 
               SfTreeGrid<BusinessObject> TreeGrid; 
               public string treegridstate;
               private async Task GetPersistence() 
               { 
                 treegridstate = await TreeGrid.GetPersistDataAsync(); 
               } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ComponentDispose">
            <summary>
            Handles dispose component.
            </summary>
            <remarks>
            Destroyed event will be invoked if any.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.PropertiesChanged(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Update the propertychanges to grid component.
            </summary>
            <param name="propertyChanges">Property changes.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values from parent component.
            </summary>
            <param name="key">Child property name.</param>
            <param name="value">Child property value.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ShouldRender">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Dispose">
            <summary>
            Dispose unmanaged resources in the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CallStateHasChanged">
            <summary>
            Invoke state change.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CallStateHasChangedAsync">
            <summary>
            Invoke state change.
            </summary>
            <exclude/>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.UnmatchedAttributes">
            <summary>
            Gets or sets custom atttribute to tree grid component root element
            </summary>
            <value>
            An instance of <see cref="T:System.Collections.Generic.IDictionary`2" />
            </value>
            <remarks>
            Any HTML attributes can be added to the root element of tree grid .
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ID">
            <summary>
            Gets or sets the tree grid component's DOM element Id attribute value.
            </summary>
            <value>
            HtmlElement ID, for example "TreeGridEditing".
            </value>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Aggregates">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridAggregate"/> collection, which controls the rendering of aggregate rows displayed in the tree grid content.
            </summary>
            <remarks> 
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridAggregate"/> class provides various properties to customize aggregate operations. 
            </remarks> 
            <value> 
            A List instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridAggregate"/>. 
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfTreeGrid DataSource="@TreeGridData" AllowSorting="true" AllowFiltering="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search" })"> 
                <TreeGridAggregates> 
                    <TreeGridAggregate ShowChildSummary="false"> 
                        <TreeGridAggregateColumns> 
                        <TreeGridAggregateColumn Field="Duration" Type="Syncfusion.Blazor.Grids.AggregateType.Sum" Format="C2"></TreeGridAggregateColumn> 
                        </TreeGridAggregateColumns> 
                    </TreeGridAggregate> 
                </TreeGridAggregates>
            </SfTreeGrid> 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowExcelExport">
            <summary>
            Gets or sets whether to allow exporting the tree grid data to excel and CSV.
            </summary>
            <value>
            <b>true</b> If need to allow the user to export tree grid data to Excel file; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value>
            <remarks>
            Exporting can be customized using <see cref="T:Syncfusion.Blazor.Grids.ExcelExportProperties" /> type parameter of <see cref="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExportToExcelAsync(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})" /> method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowFiltering">
            <summary>
            Gets or sets whether to allow filtering tree grid data in the columns.
            </summary>
            <value>
            <b>true</b> If need to allow filtering; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value>
            <remarks>
            You can cancel or customize the filtering action through <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowMultiSorting">
            <summary>
            Gets or sets whether to allow user to sort multiple tree grid columns.
            </summary>
            <value>
            <b>true</b> if need to enable multiple columns sorting; otherwise, <b>false</b>.The default value is <b>true</b>.
            </value>
            <remarks>
            To sort multiple column hold CTRL key and click the column header. 
            To clear sort for a column, hold SHIFT key and click the column header. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowPaging">
            <summary>
            Gets or sets whether to render pager at bottom of tree grid.
            </summary>
            <value>
            <b>true</b> If need to enable paging actions in tree grid; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            You can cancel or customize the paging action through <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowPdfExport">
            <summary>
            Gets or sets whether to allow export tree grid data in pdf.
            </summary>
            <value>
            <b>true</b> If need to allow exporting PDF document; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            Exporting can be customized using <see cref="T:Syncfusion.Blazor.Grids.PdfExportProperties" /> type parameter of <see cref="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExportToPdfAsync(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})" /> method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowReordering">
            <summary>
            Gets or sets whether to allow reordering of tree grid columns. 
            Reordering can be done by drag and drop of a particular column from one index to another column index.
            </summary>
            <value>
            <b>true</b> If need to allow column reorder; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            You can cancel or customize the reordering action through <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowResizing">
            <summary>
            Gets or sets whether to allow resizing of tree grid columns.
            </summary>
            <value>
            <b>true</b> If need to allow columns resizing; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            You can also prevent the resize of the particular column through setting <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.AllowResizing"/> column property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowRowDragAndDrop">
            <summary>
            Gets or sets whether to allow row reordering in tree grid.
            </summary>
            <value>
            <b>true</b> If need to allow row drag and drop in tree grid; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value>
            <remarks>
            You can cancel or customize the row reorder action through <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnRowDragStart" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowFreezeLineMoving">
             <summary>
             Gets or sets whether to allow the user to move the frozen line by dragging and dropping it between columns. Frozen columns are updated corresponding to frozen line position.
             </summary>
             <value>
             <b>true</b> if allowed to adjust freeze line; otherwise, <b>false</b>.  By default, the property value is false.
             </value>
             <remarks>
             Enable FreezeLineMoving property that helps to increase/decrease the frozen columns by drag-and-drop the freeze bar between columns.
             </remarks>
             <example>
             <code><![CDATA[
            <SfTreeGrid AllowFreezeLineMoving=true FrozenColumns="2" Height="500" Width="500">
             ..
            </SfTreeGrid>
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowSelection">
            <summary>
            Gets or sets whether to allow selection of tree grid rows.
            </summary>
            <value>
            <b>true</b> If need to allow sorting of records; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            To perform the multi-selection, hold CTRL key and click the desired rows/cells.
            To select range of rows/cells, hold SHIFT key and click the rows/cells.The default value is false.
            You can cancel or customize the selection action through <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.RowSelecting" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowSorting">
            <summary>
            Gets or sets whether to allow sorting of tree grid columns.
            </summary>
            <value> 
            <b>true</b> If need to allow sorting of records; otherwise, <b>false</b>.The default value is <b>false</b>. 
            </value> 
            <remarks> 
            You can cancel or customize the sorting action through <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowTextWrap">
            <summary>
            Gets or sets whether to allow wrapping for text content in tree grid cells.
            </summary>
            <value>
            <b>true</b> need to wrap the cell texts; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AutoCheckHierarchy">
            <summary>
            Gets or sets whether the tree column checkboxes should be checked hierarchically.
            </summary>
            <value>
            <b>true</b> If need to change the checkbox state of parent or child row checkboxes on either of the row checkbox change; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShowCheckbox" /> should be enabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ChildMapping">
            <summary>
            Specifies the mapping property path for child records in data source.
            </summary>
            <value>
            Field name which maps the child records. The default value is null.
            </value>
            <remarks>
            It is applicable only for hierarchy type data binding in tree grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ClipMode">
            <summary>
            Defines how to display the text content in the tree grid cell when it overflows. 
            </summary>
            <remarks>
            The available modes are,
            `Clip`: Truncates the cell content when it overflows its area.
            `Ellipsis`: Displays ellipsis when the cell content overflows its area.
            `EllipsisWithTooltip`:  Displays ellipsis when the cell content overflows its area and also, and it displays the tooltip on mouse hover.
            </remarks>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.ClipMode"/> enumeration that specifies how the cell content is displayed.
            The default mode is <b>Syncfusion.Blazor.Grids.ClipMode.Clip</b>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ColumnMenuItems">
            <summary>
            Gets or sets both built-in and custom column menu items.
            Built-in items are provided as instance List of object and custom column menu items are provided as List instance of 'Syncfusion.Blazor.Grids.ColumnMenuItemModel'.
            </summary>
            <value>
            The available built-in items are,
            `AutoFitAll`: Auto fit the size of all columns.
            `AutoFit`: Auto fit the current column.
            `SortAscending`: Sort the current column in ascending order.
            `SortDescending`: Sort the current column in descending order.
            `Filter`: Filter options will show based on filterSettings property like filterbar, menu filter.
            </value>
            <remarks>
            Actions for custom column menu items can be handled through 'Syncfusion.Blazor.TreeGrid.TreeGridEvents.ColumnMenuItemClicked' event.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeGridData" ColumnMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending" })" >
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ColumnQueryMode">
            <summary>
            Defines how to the the column values of data source.
            </summary>
            <remarks>
            The types are,
            `All`: Retrieves whole data source with all columns.
            `Schema`: Retrieves data for only the defined <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumns" /> from the data source.
            `ExcludeHidden`: Retrieves data only for <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Visible" /> property enabled columns of tree grid from the data Source.
            </remarks>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.ColumnQueryModeType"/> enumeration that specifies how the data source fields are retrieved.
            The default mode is <b>Syncfusion.Blazor.Grids.ColumnQueryModeType.All</b>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Columns">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumn"/> collection, which controls the rendering of column displayed in the tree grid content.
            </summary>
            <remarks> 
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumn"/> class provides various properties to customize tree grid columns. 
            </remarks> 
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumn"/>.
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeGridData" >
            	<TreeGridColumns>
            		<TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="50"></TreeGridColumn>
            	</TreeGridColumns>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ContextMenuItems">
            <summary>
            Gets or sets both built-in and custom context menu items. 
            Built-in items are provided as instance List of object and custom context menu items are provided as List instance of 'Syncfusion.Blazor.Grids.ContextMenuItemModel'.
            </summary>
            <value>
            The available built-in items are,
            `AutoFitAll`: Auto fit the size of all columns.
            `AutoFit`: Auto fit the current column.
            `SortAscending`: Sort the current column in ascending order.
            `SortDescending`: Sort the current column in descending order.
            `Filter`: Filter options will show based on filterSettings property like filterbar, menu filter.
            `Copy`: Copies the selected record values to clipboard.
            `Edit`: Edits current selected record.
            `Save`: Saves the edited record.
            `Cancel`: Cancels the edit operation.
            `Delete`: Removed the selected record.
            `FirstPage`: Moved to first page in pager enabled tree grid.
            `PrevPage`: Moved to first page in pager enabled tree grid.
            `NexttPage`: Moved to first page in pager enabled tree grid.
            `LastPage`: Moved to first page in pager enabled tree grid
            </value>
            <remarks> 
            Actions for custom context menu items can be handled through 'Syncfusion.Blazor.TreeGrid.TreeGridEvents.ContextMenuItemClicked' event.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeGridData" ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending", "Edit", "Delete", "Save", "Cancel" })">
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CopyHierarchyMode">
            <summary>
            Defines how to copy the selected data in the tree grid rows. 
            </summary>
            <remarks>
            The available built-in items are,
            `Parent`: Copy the selected data with parent record.
            `Child`: Copy the selected data with child record.
            `Both`: Copy the selected data with both parent and child record.
            `None`: Copy only the selected record.
            </remarks>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.TreeGrid.CopyHierarchyType"/> enumeration that specifies how the data is copies to clipboard.
            The default mode is <b>Syncfusion.Blazor.Grids.CopyHierarchyType.Parent</b>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.DataSource">
            <summary>
            Gets or sets the data source for rendering the tree grid rows. The data source value can be of any type that implements IEnumerable.
            </summary>
            <value>
            IEnumerable or List or ExpandoObject Ccllection or DynamicObject collection or Observable collection.
            </value>
            <remarks>
            To consume data from remote service or custom adaptor, <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> component has to be used.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeGridData" >
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.DataSourceChanged">
            <summary>
            An event that is raised when the datasource changes.
            </summary>
            <remarks>
            This event handler receives a object which provides the details of the datasource changed.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
            <TreeGridEvents DataSourceChanged="DataSourceChanged" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void DataSourceChanged(IEnumerable<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EditSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings"/> which configures the editing behavior of tree grid.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings"/> class provides various properties to customize editing operations.
            </remarks>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings"/>.
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid IdMapping="TaskId" AllowFiltering="true" ParentIdMapping="ParentId" DataSource="@TreeGridData" TreeColumnIndex="1" >
            	<TreeGridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Batch" NewRowPosition="RowPosition.Below">
            	</TreeGridEditSettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableAltRow">
            <summary>
            Gets or sets whether to render alternate tree grid row elements with a CSS class. 
            </summary>
            <value>
            <b>true</b> If enabled the tree grid will render with `e-altrow` CSS class to the alternative tr elements. The default value is false.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableAutoFill">
            <summary>
            Gets or sets whether to automatically fills a series of cells by dragging a cell right hand corner, as like in excel.
            </summary>
            <value>
            <b>true</b> If enabled it allows to copy the data of the selected cells and paste it to another cells by just dragging the autofill icon of the selected cells up to the required cells.
            </value>
            <remarks>
            The value of selected cell is filled in other cells.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableCollapseAll">
            <summary>
            Gets or sets whether to load all the rows in collapsed state.
            </summary>
            <value>
            <b>true</b> If need to render all rows in collapsed state at initial rendering; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            You can use <see href="Syncfusion.Blazor.TreeGrid.SfTreeGrid.CollapseAllAsync" /> method for dynamic collapsing of all parent tasks.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableHover">
            <summary>
            Gets or sets whether to enable hovering effect on ree grid rows while mouse over it.
            </summary>
            <value>
            <b>true</b> If need to enable hovering effect; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            While hovering on the row, the backgroud colour of row element changes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnablePersistence">
            <summary>
            Gets or sets whether to persist tree grid's current state during browser reload.
            </summary>
            <value>
            <b>true</b> if need to persist the state; otherwise, <b>false</b>. The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableRtl">
            <summary>
            Gets or sets whether whether to render Tree Grid component in right to left direction.
            </summary>
            <value>
            <b>true</b> if need to enable rendering component in right to left direction; otherwise, <b>false</b>. The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExpandStateMapping">
            <summary>
            Gets or sets the mapping field, in data object of data source, that denotes the expand status of parent row.
            </summary>
            <value> 
            Field name which maps the expand state of parent row.
            </value>
            <remarks>
            It renders parent row in expanded or collapsed state based on this mapping property value in data source.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.FilterSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings"/> which configures the filtering behavior of tree grid.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings"/> class provides various properties to customize filtering operations.
            </remarks>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings"/>.
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid IdMapping="TaskId" AllowFiltering="true" FrozenColumns="2" ParentIdMapping="ParentId" DataSource="@TreeGridData" TreeColumnIndex="1">
                <TreeGridFilterSettings>
                    <TreeGridFilterColumns>
                    <TreeGridFilterColumn Field="TaskName" MatchCase="false" Operator="Syncfusion.Blazor.Operator.StartsWith" Predicate="and" Value="@Name"></TreeGridFilterColumn>
                    </TreeGridFilterColumns>
                </TreeGridFilterSettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.FrozenColumns">
            <summary>
            Gets or sets the number of frozen columns remains fixed in left side of tree grid.
            </summary>
            <value>
            The number of non-scrolling columns. The default value is 0.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.FrozenRows">
            <summary>
            Gets or sets the number of frozen rows remains fixed in top of tree grid.
            </summary>
            <value>
            The number of non-scrolling rows. The default value is 0.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GridLines">
            <summary>
            Defines how to show borders of row and cells in Tree Grid.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.GridLine"/> enumeration that specifies whether to render horizontal and vertical border lines.
            The default value is <b>yncfusion.Blazor.Grids.GridLine.Horizontal</b>. 
            </value>
            <remarks>
            The availble grid lines are,
            <list type="bullet">
            <item>
            <term>Both</term>
            <description>Displays both the horizontal and vertical grid lines.</description>
            </item>
            <item>
            <term>None</term>
            <description>No grid lines are displayed.</description>
            </item>
            <item>
            <term>Horizontal</term>
            <description>Displays the horizontal grid lines only.</description>
            </item>
            <item>
            <term>Vertical</term>
            <description>Displays grid lines based on the theme.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HasChildMapping">
            <summary>
            Gets or sets whether a record is parent or not for on-demand data loading in remote data binding.
            </summary>
            <value>
            Field name in data object of data source which maps whether current record holds any child records. The default value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Height">
            <summary>
            Gets or sets the height of the tree grid component container.
            </summary>
            <value>
            Pixel or percentage or auto, for example "500px". The default value is "auto".
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.IdMapping">
            <summary>
            Gets or sets the name of the field in the data object of data source, which contains the unique id of that row.
            </summary>
            <value>
            This field name in the data object of data source.
            </value>
            <remarks>
            It is only applicable for self-referantial type data binding in tree grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.LoadChildOnDemand">
            <summary>
            Gets or sets whether to load child record on demand in remote data binding. At initial rendering parent records are rendered in colllapsed state.
            </summary>
            <value>
            <b>true</b> If need to load only parent records at initial load and child records are loaded on demand when expanding the parent row; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.PageSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings"/> which configures the paging beahvior in tree grid.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings"/> class provides various properties to customize paging operations.
            </remarks>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings"/>.  
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeGridData" AllowPaging="true">
                <TreeGridPageSettings PageSize="2" PageCount="10"></TreeGridPageSettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ParentIdMapping">
            <summary>
            Gets or sets the name of the field in data source, which contains unique id of parent record
            </summary>
            <value>
            Field name in data object of datasource which maps the parent record. The default value is null.  
            </value>
            <remarks>
            It is only applicable for self-referantial type data binding in tree grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.PrintMode">
             <summary>
             Defines PrintMode for printing the tree grid data.
             </summary>
             <remarks>
             The available print modes are as follows:
             `AllPages`: Prints all pages of the tree grid.
             `CurrentPage`: Prints the current page of the tree grid.
             </remarks>
             <value>
             One of the <see cref="T:Syncfusion.Blazor.Grids.PrintMode"/> enumeration that specifies how to print the tree grid data.
             The default mode is <b>yncfusion.Blazor.Grids.PrintMode.AllPages</b>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Query">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Data.Query"/> which process the data based on query provided.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Data.Query"/> class provides various options for doing data operations in tree grid.
            </remarks>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Data.Query"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.RowDropSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridRowDropSettings"/> which configures the row drop behavior of tree grid.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridRowDropSettings"/> class provides various properties to customize row drop operations.
            </remarks>
            <value>
              An instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridRowDropSettings"/>.
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeGridData" AllowRowDragAndDrop="true" AllowSelection="true" AllowPaging="true" TreeColumnIndex="1">
                <TreeGridRowDropSettings TargetID="Grid"></TreeGridRowDropSettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.RowHeight">
            <summary>
            Gets or sets the height value for the tree grid rows.
            </summary>
            <value>
            Row height pixel value in integer. The default value is 36.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SearchSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings"/> which configures the searching behavior of tree grid.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings"/> class provides various properties to customize searching operations.
            </remarks>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings"/>
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeGridData" TreeColumnIndex="1" Toolbar="@(new List<string>() { "Search" })">
            	<TreeGridSearchSettings Key="Child Task 1"></TreeGridSearchSettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectedRowIndex">
            <summary>
            Gets or sets the selected row index in tree grid.
            </summary>
            <value>
            Row index of selected row, for example 3. The default value is -1.
            </value>
            <remarks>
            Allows you to select a row at initial rendering.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ColumnChooserSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserSettings"/> which configures the column chooser for hiding and showing columns dynamically.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserSettings"/> class provides various properties to customize column chooser.
            </remarks>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserSettings"/>
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeGridData" TreeColumnIndex="1" Toolbar="@(new List<string>() { "Search" })">
            	<TreeGridColumnChooserSettings ignoreAccent="true" operator="startsWith"></TreeGridColumnChooserSettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ShowColumnChooser">
            <summary>
            Gets or sets whether to render column chooser in Tree Grid.
            </summary>
            <value>
            <b>true</b> if need to enable the column chooser; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            It allows you to dynamically show or hide columns.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableVirtualization">
            <summary>
            Gets or sets whether to enable virtual loading of rows.
            </summary>
            <value>
            <b>true</b> if need to enable virtualization; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            If 'EnableVirtualization' set to true, then the tree grid will render only the rows visible within the view-port
            and load subsequent rows on vertical scrolling. This helps to improve the performance of loading large dataset in tree grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableVirtualMaskRow">
            <summary> 
            Gets or sets whether to display shimmer effect during scrolling action in virtual scrolling feature enabled tree grid. If disabled, spinner pop-up is display while virtual scrolling.
            </summary> 
            <value> 
            <b>true</b> If need to enable shimmer effect; otherwise, <b>false</b>. The default value is <b>false</b>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableColumnVirtualization">
             <summary> 
             Gets or sets whether to enable virtual loading of column cells.
             </summary> 
            <value> 
             <b>true</b> if need to enable column virtualization; otherwise, <b>false</b>. The default value is <b>false</b>.
             </value> 
             <remarks>
             Loads large dataset of columns with better performance. Initially, renders only the columns that are in current viewport and load subsequent columns on horizontal scrolling. 
             </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableAdaptiveUI">
            <summary>
            Gets or sets whether to enabled adaptive UI which makes tree grid adaptive to small screens. The Filtering and various actions in tree grid opens the UI for user in a pop-up occupying the entire screen. 
            </summary>
            <value>
            <b>true</b> If adaptive UI is enabled to display pop-up, for filtering and various features, which occupies the entire screen. The default value is false.
            </value>
            <remarks>
            If adaptive UI is enabled to display pop-up, for filtering and various features, which occupies the entire screen. The default value is false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectionSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings"/> which configures the selection behavior of tree grid rows and cells.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings"/> class provides various properties to customize the row and cell selection.
            </remarks>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings"/>
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeGridData" AllowSelection="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search" })">
            	<TreeGridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></TreeGridSelectionSettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ShowColumnMenu">
            <summary>
            Gets or sets whether to render the column menu option in each column with default items.
            </summary>
            <value>
            <b>true</b> if need to enable column menu; otherwise, <b>false</b>.The default value is <b>true</b>.
            </value>
            <remarks>
            If 'ShowColumnMenu' set to true, then it will enable all the build in column menu items. You can customize the column menu items using <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ColumnMenuItems"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SortSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings"/> which configures the sorting behavior of tree grid columns.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings"/> class provides various properties to sort the data in tree grid columns.
            </remarks>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings"/>
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeGridData" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search" })">
            	<TreeGridSortSettings>
            	<TreeGridSortColumns>
            	    <TreeGridSortColumn Field="TaskName" Direction="Syncfusion.Blazor.Grids.SortDirection.Descending"></TreeGridSortColumn>
            	</TreeGridSortColumns>
            	</TreeGridSortSettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.TextWrapSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridTextWrapSettings"/> which configures the wrapping behavior in tree grid cells.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridTextWrapSettings"/> class provides various properties to wrap the content in the tree grid cells.
            </remarks>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridTextWrapSettings"/>
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="TreeData" AllowTextWrap="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search" })">
            	<TreeGridTextWrapSettings WrapMode="WrapMode.Content"></TreeGridTextWrapSettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Toolbar">
            <summary>
            Gets or sets both built-in and custom toolbar items. Built-in items are provided as instance List of string and custom toolbar items are provided as List instance of 'Syncfusion.Blazor.Navigations.ItemModel'.
            </summary>
            <value>
            The available built-in toolbar items are as follows:
            <b>Add</b>: Adds a new record.
            <b>Edit</b>: Edits the selected task.
            <b>Update</b>: Saves the edited task.
            <b>Delete</b>: Deletes the selected task.
            <b>Cancel</b>: Cancels the edit state.
            <b>Search</b>: Searches tasks by the given key.
            <b>ExpandAll</b>: Expands all the records of tree grid.
            <b>CollapseAll</b>: Collapses all the records of tree grid.
            <b>Indent</b>: Adds as a child to the previous record.
            <b>Outdent</b>: Removes as a child from the previos parent record.
            <b>ExcelExport</b>: Exports tree grid data in Excel format
            <b>CsvExport</b>: Exports tree grid data in CSV format.
            </value>
            <remarks>
            Both built-in and custom toolbar items can be added to toolbar.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="TreeData" TreeColumnIndex="1" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search" })">
            </SfTreeGrid>
            ]]></code>  
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.TreeColumnIndex">
            <summary>
            Gets or sets a column index that is used to expand or collapse its child rows.
            </summary>
            <value>
            Column index in integer. The default value is 0.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Width">
            <summary>
            Gets or sets the width of the tree grid component container.
            </summary>
            <value>
            Pixel or percentage or auto values. The default value is "auto".
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Syncfusion#Blazor#TreeGrid#Internal#ITreeGrid#TreeGridTemplates">
            <summary>
            Gets or sets the tree grid templates.
            </summary>
            <value>
            Column template - Used to customize cell content.
            Header template - Used to customize header cell content.
            Row template - Used to customize row content.
            Detail template - Used to customize the detail cell content.
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="Employee">
            	<TreeGridTemplates>
            	<RowTemplate>
            	@{
            	var employee = (context as Employee);
            	<td style='padding-left:18px; border-bottom: 0.5px solid #e0e0e0;'>
            		<div>@employee.EmpID</div>
            	</td>
            	 }
            	</RowTemplate>
            	</TreeGridTemplates>
            	<TreeGridColumns>
            	<TreeGridColumn Field="EmpID" HeaderText="Employee ID" Width="160"></TreeGridColumn>
            	</TreeGridColumns>
            </SfTreeGrid>
            ]]></code>
            </example>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.KeySettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings"/> to configure the hot keys of tree grid.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings"/> class provides various properties to customize the hot keys.
            </remarks>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings"/>
            </value>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="TreeData" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search" })">
            	<TreeGridKeySettings MoveDownCell="Shift" ></TreeGridKeySettings>
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AddRecordAsync(`0,System.Nullable{System.Double},System.Nullable{Syncfusion.Blazor.TreeGrid.RowPosition})">
            <summary>
            Inserts a new record into the tree grid at a particular row index and position.
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowAdding" /> should be true.
            </summary>
            <param name="data">The new record to be added. </param>
            <param name="index">The index in which new record is to be added. </param>
            <param name="position">The position such as Below, Above or Child, in which new record is to be added. </param>
            <remarks>
            When the index parameter is not passed, a new record is added at the top as the first row index.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="AddRecord" @onclick="AddItem">AddRecord</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            ........
            </SfTreeGrid>
            @code{
            SfTreeGrid<BusinessObject> TreeGrid;
            private async Task AddItem()
            {
            var data = new BusinessObject() { TaskId = 21, TaskName = "Test Add", StartDate = new DateTime(2017, 10, 23), Duration = 10, Progress = 70, Priority = "Critical" };
            await TreeGrid.AddRecordAsync(data, 1, RowPosition.Below); // pass data,index and new row position here.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AddRecord(`0,System.Nullable{System.Double},System.Nullable{Syncfusion.Blazor.TreeGrid.RowPosition})">
            <summary>
            Adds a new record to the TreeGrid. Without passing parameters, it adds empty rows.
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowAdding" /> should be true.
            </summary>
            <param name="data">Specify the new record to be added.</param>
            <param name="index">Specify the index in which new record is to be added.</param>
            <param name="position">Specify the position in which new rocord is to be added.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AddRecordAsync">
            <summary>
            A new row with input fields is rendered in tree grid content, for user to fill the fields and then to save the new record.
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowAdding" /> should be true.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="AddRecord" @onclick="AddItem">AddItem</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            ........
            </SfTreeGrid>
            @code{
            SfTreeGrid<BusinessObject> TreeGrid;
            private async Task AddItem()
            {
            await TreeGrid.AddRecordAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AddRecord">
            <summary>
            Adds a new record to the TreeGrid. If no data is passed then add form will be showed.
            > `TreeGridEditSettings.AllowAdding` should be true.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AutoFitColumnsAsync(System.String[])">
            <summary>
            Udpates the column width to fit its content automatically, ensuring that the width shows the content without wrapping/hiding.
            </summary>
            <param name="fieldNames">The column names collection.</param>
            <remarks>
            You can use the method in the <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.DataBound" /> event to autofit the columns at initial rendering.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="AutoFitColumns" @onclick="FitColumnshHandler">FitColumns</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task FitColumnshHandler()
               {
                 await TreeGrid.AutoFitColumnsAsync(new List<string>() { "TaskName" , "Duration"}.ToArray()); // pass desire column field names
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AutoFitColumns(System.String[])">
            <summary>
            Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.
            >  This method ignores the hidden columns.
            >  Uses the `AutoFitColumns` method in the `dataBound` event to resize at initial rendering.
            </summary>
            <param name="fieldNames">Specify the column names to autofit.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ClearFilteringAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Clears the filter from the columns in tree grid.
            </summary>
            <param name="fields">The field names from which filtering to be cleared.</param>
            <remarks>
            When a field name is not defined, it clears filtering from all the columns.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ClearFiltering" @onclick="ClearFilterHandler">ClearFiltering</button>
            <SfTreeGrid @ref="TreeGrid" AllowFiltering="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ClearFilterHandler()
               {
                 await TreeGrid.ClearFilteringAsync(new List<string>() { "TaskName" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ClearFiltering(System.Collections.Generic.List{System.String})">
            <summary>
            Clears all the filtered rows of the Grid.
            </summary>
            <param name="fields">Specify the field name to be cleared.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ClearFilteringAsync">
            <summary>
            Clears the filter from all columns in tree grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Clears the filtered rows of tree grid.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ClearFiltering" @onclick="ClearFilterHandler">ClearFiltering</button>
            <SfTreeGrid @ref="TreeGrid" AllowFiltering="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ClearFilterHandler()
               {
                 await TreeGrid.ClearFilteringAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ClearFiltering">
            <summary>
            Clears all the filtered rows of the Grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ClearSelectionAsync">
            <summary>
            Deselects the current selected rows and cells.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Currently selected rows and cells in tree grid are cleared.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ClearSelection" @onclick="ClearSelectionHandler">ClearSelection</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ClearSelectionHandler()
               {
                 await TreeGrid.ClearSelectionAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ClearSelection">
            <summary>
            Deselects the current selected rows and cells.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ClearSortingAsync">
            <summary>
            Clears sorting from all the columns of tree grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ClearSorting" @onclick="ClearSortingHandler">ClearSorting</button>
            <SfTreeGrid @ref="TreeGrid" AllowSorting="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ClearSortingHandler()
               {
                 await TreeGrid.ClearSortingAsync();
               }
            }
            ]]>
            </code>
            </example>   
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ClearSorting">
            <summary>
            Clears all the sorted columns of the TreeGrid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CloseEditAsync">
            <summary>
            Cancels the active edit state in the tree grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            Closes the add or edit form withou saving changes.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="CloseEdit" @onclick="CloseEditHandler">CloseEdit</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            <TreeGridEditSettings AllowEditing="true" />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task CloseEditHandler()
               {
                 await TreeGrid.CloseEditAsync();
               }
            }
            ]]>
            </code>
            </example>   
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CloseEdit">
            <summary>
            Cancels edited state.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CollapseAllAsync">
            <summary>
            Collapses all the parent rows.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="CollapseAll" @onclick="CollapseHandler">CollapseAll</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task CollapseHandler()
               {
                 await TreeGrid.CollapseAllAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CollapseAll">
            <summary>
            Collapses All the rows.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CollapseByKeyAsync(System.Object)">
            <summary>
            Collapses a row based on the primary key value of the record.
            </summary>
            <param name="key">The primary key value of the record to be collapsed.</param>
            <remarks>
            A primary key column must be specified using the <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.IsPrimaryKey" /> property.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="collapseKey" @onclick="CollapseHandler">CollapseKey</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<HierarchyData> TreeGrid;
               private async Task CollapseHandler()
               {
                   await TreeGrid.CollapseByKeyAsync(12); /// pass primary key value here
              }
            }
            ]]>
            </code>
            </example>       
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CollapseAtLevelAsync(System.Double)">
            <summary>
            Collapses the records along with its child records, at specific hierarchical level.
            </summary>
            <param name="level">The level of the record until which the rows to be Collapsed.</param>
            <remarks>
            The root parent level is 0.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="CollapseAtLevel" @onclick="CollapseHandler">CollapseAll</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task CollapseHandler()
               {
                 await TreeGrid.CollapseAtLevelAsync(1);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CollapseAtLevel(System.Double)">
            <summary>
            Collapses the records at specific hierarchical level.
            </summary>
            <param name="level">The level of the records to be collapsed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CollapseRowAsync(`0)">
            <summary>
            Collapses the row based on the record given as parameter.
            </summary>
            <param name="record">The record to be collapsed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="CollapseRow" @onclick="CollapseHandler">CollapseRow</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task CollapseHandler()
               {
                 await TreeGrid.CollapseRowAsync(TreeGrid.GetCurrentViewRecords()[0]); // pass your desire record here to collapse the same.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CollapseRow(`0)">
            <summary>
            Collapses child rows.
            </summary>
            <param name="record">The record to be collapsed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.PreventRender(System.Boolean)">
            <summary>
            Prevents the Tree Grid component re-render. This method will internally sets value to be returned from ShouldRender method.
            </summary>
            <param name="preventRender">Default value is true. Toggles the ShouldRender method value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CopyAsync(System.Nullable{System.Boolean})">
            <summary>
            Copies the selected rows or cells data into clipboard.
            </summary>
            <param name="withHeader">Decides Whether to copy the record values along with header names.</param>
            <remarks>
            The behavior of copying the record can be modified using <see cref="T:Syncfusion.Blazor.TreeGrid.CopyHierarchyType"/> enumeration property.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="Copy" @onclick="CopyHandler">Copy</button>
            <SfTreeGrid @ref="TreeGrid" AllowSorting="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task CopyHandler()
               {
                 await TreeGrid.CopyAsync(true);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Copy(System.Nullable{System.Boolean})">
            <summary>
            Copy the selected rows or cells data into clipboard.
            </summary>
            <param name="withHeader">Specifies whether to copy the record with header.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExportToCsvAsync(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Exports the Tree Grid data to CSV file.
            </summary>
            <param name="excelExportProperties">Options for customizing the exporting document during export.</param>
            <param name="isMultipleExport">Decides whether whether multiple tree grid is exported to same file.</param>
            <param name="workbook">Workbook instance.</param>
            <param name="isBlob">Exports as blob instead of writing response.</param>
            <remarks>
            When the parameters were not passed, the tree grid data is exported without any customization.
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ExportToCsv" @onclick="ExportHandler">ExportToCsv</button>
            <SfTreeGrid @ref="TreeGrid" AllowExcelExport="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ExportHandler()
               {
                   Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
                   ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.CurrentPage; // here we have changed the ExportType from AllPages to CurrentPage, as like same we can change our desire properties.
                   await TreeGrid.ExportToCsvAsync(ExportProperties);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CsvExport(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Export TreeGrid data to CSV file.
            </summary>
            <param name="excelExportProperties">Provides the excel export properties. Use this to provide custom column,
            data source, theme etc.</param>
            <param name="isMultipleExport">Specifies multi-export is enabled.</param>
            <param name="workbook">Workbook instance.</param>
            <param name="isBlob">Export as blob instead of writing response.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.DeleteRecordAsync(System.String,`0)">
            <summary>
            Deletes a record from tree grid.
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowDeleting" /> should be true.
            </summary>
            <param name="fieldName">The field name of the primary key column.</param>
            <param name="data">The record to be deleted.</param>
            <remarks>
            When the parameters are not passed, the selected record will be deleted.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="DeleteRecord" @onclick="DeleteHandler">DeleteRecord</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             <TreeGridEditSettings AllowDeleting="true" />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task DeleteHandler()
               {
            	await TreeGrid.DeleteRecordAsync("TaskId", TreeGrid.GetCurrentViewRecords()[0]);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.DeleteRecord(System.String,`0)">
            <summary>
            Deletes the selected record from tree grid.
            > `TreeGridEditSettings.AllowDeleting` should be true.
            </summary>
            <param name="fieldName">The field name of the primary key column.</param>
            <param name="data">The record to be deleted.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.DeleteRecordAsync">
            <summary>
            Delete a record with Given options. If fieldname and data is not given then grid will delete the selected record.
            `TreeGridEditSettings.AllowDeleting` should be true.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="DeleteRecord" @onclick="DeleteHandler">DeleteRecord</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             <TreeGridEditSettings AllowDeleting="true" />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task DeleteHandler()
               {
            	await TreeGrid.DeleteRecordAsync(); // delete the selected record
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.DeleteRecord">
            <summary>
            Delete a record with Given options. If fieldname and data is not given then grid will delete the selected record.
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowDeleting" /> should be true.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EditCellAsync(System.Double,System.String)">
            <summary>
            To edit any particular cell using row index and field name.
            </summary>
            <param name="rowIndex">The index of the row to be edited.</param>
            <param name="field">The column name of the cell to be edited.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowEditing" /> should be true.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="EditCell" @onclick="EditCell">EditHandler</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             <TreeGridEditSettings AllowEditing="true" />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task EditHandler()
               {
            	await TreeGrid.EditCellAsync(1, "TaskName"); // pass rowIndex and fieldname.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EditCell(System.Double,System.String)">
            <summary>
            To edit any particular cell using row index and cell index.
            </summary>
            <param name="rowIndex">The index of the row to be deleted.</param>
            <param name="field">The field name of the cell to be deleted.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableToolbarItemsAsync(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Enables or disables the toolBar items.
            </summary>
            <param name="items">The toolbar items name collection.</param>
            <param name="isEnable">Decides whether the toolbar items should be enabled or disabled.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="EnableToolbarItems" @onclick="ToolbarHandler">EnableToolbarItems</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
             <TreeGridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true"  />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ToolbarHandler()
               {
            	await TreeGrid.EnableToolbarItemsAsync(new List<string>() { "Add" , "Edit"}, false); // here we disabled the Add and Edit toolbar items.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EnableToolbarItems(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Enables or disables ToolBar items.
            </summary>
            <param name="items">Specify the toolbar items to be enabled or disabled.</param>
            <param name="isEnable">Specify whether the given items should be enabled or disabled.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EndEditAsync">
            <summary>
            Saves the modified values when the row or cell is in editing state.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            To close the edit state without saving changes, you can use <see cref="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.CloseEditAsync" /> method.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="EndEdit" @onclick="EditHandler">EndEdit</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData" >
             <TreeGridEditSettings AllowEditing="true" />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task EditHandler()
               {
            	await TreeGrid.EndEditAsync();
               }
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.EndEdit">
            <summary>
            If TreeGrid is in editable state, you can save a record by invoking endEdit.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExportToExcelAsync(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Exports the tree grid data to Excel file.
            </summary>
            <param name="excelExportProperties">Options for customizing the excel document during export.</param>
            <param name="isMultipleExport">Decides whether whether multiple tree grid is exported to same file.</param>
            <param name="workbook">Workbook instance.</param>
            <param name="isBlob">Exports as blob instead of writing response.</param>
            <remarks>
            When the parameters were not passed, the tree grid data is exported without any customization.
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ExportToExcel" @onclick="ExportHandler">ExportToExcel</button>
            <SfTreeGrid @ref="TreeGrid" AllowExcelExport="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ExportHandler()
                 {
                   Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
                   ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.CurrentPage; // here we have changed the ExportType from AllPages to CurrentPage, as like same we can change our desire properties.
                   await TreeGrid.ExportToExcelAsync(ExportProperties);
                 }
            ]]>
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExcelExport(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Export TreeGrid data to Excel file with customization(.xlsx).
            </summary>
            <param name="excelExportProperties">Provides the excel export properties. Use this to provide custom column,
            data source, theme etc.</param>
            <param name="isMultipleExport">Specifies multi-export is enabled.</param>
            <param name="workbook">Workbook instance.</param>
            <param name="isBlob">Export as blob instead of writing response.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExportToExcelAsync">
            <summary>
            Exports the tree grid data to Excel file.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ExportToExcel" @onclick="ExportHandler">ExportToExcel</button>
            <SfTreeGrid @ref="TreeGrid" AllowExcelExport="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ExportHandler()
                 {
                    await TreeGrid.ExportToExcelAsync();
                 }
            ]]>
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExcelExport">
            <summary>
            Export TreeGrid data to Excel file(.xlsx).
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExportToExcelAsync(Syncfusion.Blazor.TreeGrid.TreeGridExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Exports the Tree Grid data to CSV file.
            </summary>
            <param name="excelExportProperties">The properties of the exported excel document.</param>
            <param name="isMultipleExport">Decides whether whether multiple tree grid is exported to same file.</param>
            <param name="workbook">Workbook instance.</param>
            <param name="isBlob">Exports as blob instead of writing response.</param>
            <remarks>
            When the parameters were not passed, the tree grid data is exported without any customization.
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ExportToExcel" @onclick="ExportHandler">ExportToExcel</button>
            <SfTreeGrid @ref="TreeGrid" AllowExcelExport="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ExportHandler()
                 {
            		Syncfusion.Blazor.TreeGrid.TreeGridExcelExportProperties ExportProperties = new Syncfusion.Blazor.TreeGrid.TreeGridExcelExportProperties();
            		ExportProperties.IsCollapsedStatePersist = true; // IsCollapsedStatePersist is set to true, to persist the collapsed state in exported document.
            		await TreeGrid.ExportToExcelAsync(ExportProperties);
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExcelExport(Syncfusion.Blazor.TreeGrid.TreeGridExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Export TreeGrid data to Excel file with Tree Grid Customization(.xlsx).
            </summary>
            <param name="excelExportProperties">The properties of the exported excel document.</param>
            <param name="isMultipleExport">Specify whether multiple documents are exported.</param>
            <param name="workbook">The workbook to be exported.</param>
            <param name="isBlob">Specify whether the exported document is a blob.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExpandAllAsync">
            <summary>
            Expands all the parent rows of tree grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ExpandAll" @onclick="ExpandHandler">ExpandAll</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ExpandHandler()
                 {
            		await TreeGrid.ExpandAllAsync();
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExpandAll">
            <summary>
            Expands All the rows.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExpandByKeyAsync(System.Object)">
            <summary>
            Expands a row based on the primary key value of the corresponding record.
            </summary>
            <param name="key">The primary key value of the record to be expanded.</param>
            <remarks>
            A primary key column must be specified using the <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.IsPrimaryKey" /> property.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            <button id="expandKey" @onclick="ExpandHandler">ExpandKey</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<HierarchyData> TreeGrid;
               private async Task ExpandHandler()
               {
                    await TreeGrid.ExpandByKeyAsync(12); /// pass primary key value here.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExpandAtLevelAsync(System.Double)">
            <summary>
            Expands the records along with its parent at specific hierarchical level.
            </summary>
            <param name="level">The hierarchical level until which the rows to be Expanded.</param>
            <remarks>
            The root parent level is 0.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id=" ExpandAtLevel" @onclick="ExpandHandler"> ExpandAtLevel</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ExpandHandler()
                 {
            	await TreeGrid.ExpandAtLevelAsync(1); // pass the desire level here.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExpandAtLevel(System.Double)">
            <summary>
            Expands the records at specific hierarchical level.
            </summary>
            <param name="level">The level of the records to be expanded.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExpandRow(System.Object)">
            <summary>
            Expands child rows.
            </summary>
            <param name="record">The record to be expanded.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExpandRowAsync(`0)">
            <summary>
            Expands the row based on the record given as a parameter.
            </summary>
            <param name="record">The record to be expanded.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ExpandRow" @onclick="ExpandHandler">ExpandRow</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ExpandHandler()
               {
                 await TreeGrid.ExpandRowAsync(TreeGrid.GetCurrentViewRecords()[0]); // pass your desire record here to expand the same.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExpandRow(`0)">
            <summary>
            Expands child rows.
            </summary>
            <param name="record">The record to be expanded.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.FilterByColumnAsync(System.String,System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Filters tree grid row with column details.
            </summary>
            <param name="fieldName">The field name  by which the data to be filtered.</param>
            <param name="filterOperator"><see cref="T:Syncfusion.Blazor.Operator" /> in string</param>
            <param name="filterValue">The filter value.</param>
            <param name="predicate">Predicate/condition such as AND/OR while filtering multiple value.</param>
            <param name="matchCase">Decieds whether case sensitive.</param>
            <param name="ignoreAccent">Decides whether to ignore accent.</param>
            <param name="actualFilterValue">The actual value.</param>
            <param name="actualOperator">The actual operator.</param>
            <remarks>
            `AllowFiltering` should be true.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="FilterByColumn" @onclick="FilterHandler">FilterByColumn</button>
            <SfTreeGrid @ref="TreeGrid" AllowFiltering="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task FilterHandler()
                 {
            	await TreeGrid.FilterByColumnAsync("TaskName", "equal", "Child task 1");
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.FilterByColumn(System.String,System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Filters TreeGrid row by column name with the given options.
            </summary>
            <param name="fieldName">Specifies the field name to be filtered.</param>
            <param name="filterOperator">Sepcifies the filter operator.</param>
            <param name="filterValue">Specifies the filter value.</param>
            <param name="predicate">Specifies predicate/condition such as AND/OR while filtering multiple value.</param>
            <param name="matchCase">Specifies the match case.</param>
            <param name="ignoreAccent">Specifies the ignore accent.</param>
            <param name="actualFilterValue">Specifies the actual value.</param>
            <param name="actualOperator">Specifies the actual type.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetBatchChangesAsync">
            <summary>
            Returns the added, edited, and deleted data before bulk save to data source in batch edit mode of tree grid.
            </summary>
            <remarks>
            Helps to obtain the modified data in batch editing.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetBatchChanges" @onclick="BatchHandler">GetBatchChanges</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            	<TreeGridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" Mode="Syncfusion.Blazor.TreeGrid.EditMode.Batch" />
             ........
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task BatchHandler()
                 {
            	var data = await TreeGrid.GetBatchChangesAsync();
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetBatchChanges">
            <summary>
            Returns the added, edited,and deleted data before bulk save to the DataSource in batch mode.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetCheckedRecordsAsync">
            <summary>
            Returns the records of checked checkbox column in UI.
            </summary>
            <remarks>
            Helps to obtain checked records from data source.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetCheckedRecords" @onclick="CheckedRecordsHandler">GetCheckedRecords</button>
            <SfTreeGrid @ref="TreeGrid" AutoCheckHierarchy="true" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
                    <TreeGridColumn Field="TaskName" ShowCheckbox="true" HeaderText="Task Name" Width="160"></TreeGridColumn>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task CheckedRecordsHandler()
                 {
                      var data = await TreeGrid.GetCheckedRecordsAsync();
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetCheckedRecords">
            <summary>
            Get the records of checked rows.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetCheckedRowIndexesAsync">
            <summary>
            Get the indexes of checked rows.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetCheckedRowIndexes">
            <summary>
            Returns the row indexes of checked checkbox column.
            </summary>
            <remarks>
            Helps to obtain checked records from data source.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetCheckedRowIndexes" @onclick="GetDataHandler">GetCheckedRowIndexes</button>
            <SfTreeGrid @ref="TreeGrid" AutoCheckHierarchy="true" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
                    <TreeGridColumn Field="TaskName" ShowCheckbox="true" HeaderText="Task Name" Width="160"></TreeGridColumn>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetDataHandler()
                 {
            	var data = await TreeGrid.GetCheckedRowIndexes();
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnByFieldAsync(System.String)">
            <summary>
            Returns a <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumn" /> object from the provided column name.
            </summary>
            <remarks>
            Helps to read other column informations from the column name.
            </remarks>
            <param name="field">The field name of the column.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetColumnByField" @onclick="GetColumnHandler">GetColumnByField</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="160"></TreeGridColumn>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetColumnHandler()
                 {
            	var column = await TreeGrid.GetColumnByFieldAsync("TaskName"); // pass field name here.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnByField(System.String)">
            <summary>
            Gets a Column by column name.
            </summary>
            <param name="field">The field name of the column to be obtained.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnByUidAsync(System.String)">
            <summary>
            Returns a <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumn" /> object from the provided column's unique id value .
            </summary>
            <remarks>
            Helps to read other column informations from the column name.
            </remarks>
            <param name="uid">The unique id value.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetColumnByUid" @onclick="GetColumnHandler">GetColumnByUid</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
                    <TreeGridColumn Field="TaskName" Uid="task_name" HeaderText="Task Name" Width="160"></TreeGridColumn>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetColumnHandler()
                 {
            	var column = await TreeGrid.GetColumnByUidAsync("task_name"); // pass uid value here.
                 }
            ]]>
            </code>
            </example>  
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnByUid(System.String)">
            <summary>
            Gets a column by UID.
            </summary>
            <param name="uid">The uid value of the column to be obtained.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnFieldNamesAsync">
            <summary>
            Returns the collection of column names from tree grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetColumnFieldNames" @onclick="GetColumnHandler">GetColumnFieldNames</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetColumnHandler()
                 {
            	var columns = await TreeGrid.GetColumnFieldNamesAsync();
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnFieldNames">
            <summary>
            Gets the collection of column fields.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnIndexByFieldAsync(System.String)">
            <summary>
            Returns then index of a particular column from the tree grid column collections.
            </summary>
            <param name="field">The field name of the column.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetColumnIndexByField" @onclick="GetColumnHandler">GetColumnIndexByField</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="160"></TreeGridColumn>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetColumnHandler()
                 {
            	var columnIndex = await TreeGrid.GetColumnIndexByFieldAsync("TaskName"); // pass field name here.
                 }
            ]]>
            </code>
            </example>  
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnIndexByField(System.String)">
            <summary>
            Gets a column index by column name.
            </summary>
            <param name="field">The field name of the column.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnIndexByUidAsync(System.String)">
            <summary>
            Returns the index a particular column from the tree grid columns collection.
            </summary>
            <param name="uid">The unique id value of the column.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetColumnIndexByUid" @onclick="GetColumnHandler">GetColumnIndexByUid</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
                    <TreeGridColumn Field="TaskName" Uid="task_name" HeaderText="Task Name" Width="160"></TreeGridColumn>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetColumnHandler()
                 {
            	var columnIndex = await TreeGrid.GetColumnIndexByUidAsync("task_name"); // pass uid value here.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnIndexByUid(System.String)">
            <summary>
            Gets a column index by UID.
            </summary>
            <param name="uid">The uid value of the column.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumnsAsync">
            <summary>
            Returns the columns collection of tree grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetColumns" @onclick="GetColumnHandler">GetColumns</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetColumnHandler()
                 {
            	var columns = await TreeGrid.GetColumnsAsync();
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetColumns">
            <summary>
            Gets the columns from the TreeGrid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetCurrentViewRecords">
            <summary>
            Gets data object of data source which are in current view or page of tree grid.
            </summary>
            <remarks>
            Returns current page records when paging or virual scrolling feature is enabled. Otherwise returns all records of data source.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetCurrentViewRecords" @onclick="GetDataHandler">GetCurrentViewRecords</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private void GetDataHandler()
                 {
            	var records = TreeGrid.GetCurrentViewRecords();
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetFilteredRecordsAsync">
            <summary>
            Returns all the filtered records from tree grid. It returns array of data objects for the local data source and returns a promise object if the tree grid has remote data binding.
            </summary>
            <remarks>
            Helps to obtain the filtered data when filtering is done in tree grid.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetFilteredRecords" @onclick="FilterHandler"> GetFilteredRecords</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="TreeData" AllowFiltering="true" />
            …
            </SfTreeGrid>
            @code{
                SfTreeGrid<BusinessObject> TreeGrid;
                private async task  FilterHandler ()
                {
               var data = await TreeGrid.GetFileredRecordsAsync();
                }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetPrimaryKeyFieldNamesAsync">
            <summary>
            Returns the names of the primary key columns in tree grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetPrimaryKeyFieldNames" @onclick="GetDataHandler">GetPrimaryKeyFieldNames</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
                    <TreeGridColumn Field="TaskId" HeaderText="Task ID" IsPrimaryKey="true" Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetDataHandler()
                 {
            	var primaryKeyFieldName = await TreeGrid.GetPrimaryKeyFieldNamesAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetPrimaryKeyFieldNames">
            <summary>
            Returns the names of the primary key columns of the TreeGrid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetSelectedRecordsAsync">
            <summary>
            Returns the collection of selected records.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetSelectedRecords" @onclick="GetDataHandler">GetSelectedRecords</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetDataHandler()
                 {
            	var selectedRecords = await TreeGrid.GetSelectedRecordsAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetSelectedRecords">
            <summary>
            Returns the collection of selected records.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetSelectedRowCellIndexesAsync">
            <summary>
            Returns the collection of selected row and cell indexes.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetSelectedRowCellIndexes" @onclick="GetDataHandler">GetSelectedRowCellIndexes</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetDataHandler()
                 {
            	var selectedRowcellIndexes = await TreeGrid.GetSelectedRowCellIndexesAsync();
                 }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetSelectedRowCellIndexes">
            <summary>
            Gets the collection of selected row and cell indexes.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetSelectedRowIndexesAsync">
            <summary>
            Returns the collection of selected row indexes.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetSelectedRowIndexes" @onclick="GetDataHandler">GetSelectedRowIndexes</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetDataHandler()
                 {
            	var selectedRowIndexes = await TreeGrid.GetSelectedRowIndexesAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetSelectedRowIndexes">
            <summary>
            Gets the collection of selected row indexes.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetRowIndexByPrimaryKeyAsync(System.Object)">
            <summary>
            Returns the row element index from the primary key value of corresponding  data object in data source.
            </summary>
            <param name="value">Primary key value of a data object.</param>
            <remarks>
            A primary key column must be specified using the <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.IsPrimaryKey" /> property.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetRowIndexByPrimaryKey" @onclick="GetDataHandler">GetSelectedRowIndexes</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetDataHandler()
                 {
            	var rowIndex = await TreeGrid.GetRowIndexByPrimaryKeyAsync(1); // pass primary key value here.
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetRowIndexByPrimaryKey(System.Object)">
            <summary>
            Get row index by primary key.
            </summary>
            <param name="value">Primary key value.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetUidByColumnFieldAsync(System.String)">
            <summary>
            Returns the unique id value of a tree grid column.
            </summary>
            <param name="field">The field name of the column.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetUidByColumnField" @onclick="GetDataHandler">GetUidByColumnField</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="160"></TreeGridColumn>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetDataHandler()
                 {
            	var uid = await TreeGrid.GetUidByColumnFieldAsync("TaskName"); // pass field name here.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetUidByColumnField(System.String)">
             <summary>
             Gets UID by column name.
             </summary>
             <param name="field">The field name of the column.</param>
             <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetVisibleColumnsAsync">
            <summary>
            Returns the visible tree grid columns collection in UI.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GetVisibleColumns" @onclick="GetColumnHandler">GetVisibleColumns</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task GetColumnHandler()
                 {
            	var visibleColumns = await TreeGrid.GetVisibleColumnsAsync();
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GetVisibleColumns">
            <summary>
            Gets the visible columns from the TreeGrid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GoToPageAsync(System.Double)">
            <summary>
            Navigates to the specified target page.
            </summary>
            <param name="pageNo">The page number you want to navigate.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowPaging" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="GoToPage" @onclick="PagingHandler">GoToPage</button>
            <SfTreeGrid @ref="TreeGrid" AllowPaging="true" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task PagingHandler()
                 {
            	await TreeGrid.GoToPageAsync(3); // pass desire page number here.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.GoToPage(System.Double)">
            <summary>
            Navigates to the specified target page.
            </summary>
            <param name="pageNo">Specify the page number you want to navigate.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HideColumnsAsync(System.String[],System.String)">
            <summary>
            Hides specified tree grid columns.
            </summary>
            <param name="keys">The column names.</param>
            <param name="hideBy">Decides whether the column names are based on <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Field" /> or <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.HeaderText" /> property of column.</param>
            <remarks>
            You can dynamically hide columns.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="HideColumns" @onclick="ColumnHandler">HideColumns</button>
            <button id="HideColumnsByField" @onclick="ColumnFieldHandler">HideColumnsByField</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ColumnHandler()
                 {
                    var columns = new List<string>() {"Task Name", "Duration" };
            		await TreeGrid.HideColumnsAsync(columns.ToArray());
                 }
                 private async Task ColumnFieldHandler()
                 {
                    var columns = new List<string>() {"TaskName", "Duration" };
                    await TreeGrid.HideColumnsAsync(columns.ToArray(), "Field"); // pass second param as "Field" to hide using field name.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HideColumns(System.String[],System.String)">
            <summary>
            Hides a column by column name.
            </summary>
            <param name="keys">Specifies the column names.</param>
            <param name="hideBy">Specifies the column getting criteria.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HideColumnAsync(System.String,System.String)">
            <summary>
            Hides a particular tree grid column.
            </summary>
            <param name="key">The column name.</param>
            <param name="hideBy">Whether the column name is based on <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Field" /> or <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.HeaderText" /> property of column.</param>
            <remarks>
            You can dynamically hide a column.
            Based on the parameter hideBy, we can hide column using field or headerText value.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="HideColumn" @onclick="ColumnHandler">HideColumn</button>
            <button id="HideColumnByField" @onclick="ColumnFieldHandler">HideColumnByField</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ColumnHandler()
                 {
            	await TreeGrid.HideColumnAsync("Task Name"); // pass headerText
                 }
                 private async Task ColumnFieldHandler()
                 {
                    await TreeGrid.HideColumnAsync("TaskName", "Field"); // pass second param as "Field" to hide using field name.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HideColumns(System.String,System.String)">
            <summary>
            Hides a column by column name.
            </summary>
            <param name="key">Specifies the column names.</param>
            <param name="hideBy">Specifies the column getting criteria.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HideSpinnerAsync">
            <summary>
            Hides the spinner of tree grid whenever needed.
            </summary>
            <remarks>
            When the tree grid spinner is displayed manually, then you can manually hide the spinner using this method.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="HideSpinner" @onclick="SpinnerHandler">HideSpinner</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task SpinnerHandler()
                 {
            	await TreeGrid.HideSpinnerAsync(); // Hides the spinner.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.HideSpinner">
            <summary>
            Manually shown spinner needs to hide by `HideSpinnner`.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.OpenColumnChooserAsync(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Opens the column chooser pop up on screen by given position(X and Y axis).
            </summary>
            <param name="x">The X position in screen.</param>
            <param name="y">The Y position in screen.</param>
            <remarks>
            You can manually open the column chooser at any position of screen at any desired time.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="OpenColumnChooser" @onclick="ColumnHandler">OpenColumnChooser</button>
            <SfTreeGrid @ref="TreeGrid" ShowColumnChooser="true" Toolbar="@(new List<string>() { "ColumnChooser" })" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ColumnHandler()
                 {
            	await TreeGrid.OpenColumnChooser(200, 50); // pass desire X and Y value.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.OpenColumnChooser(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Column chooser can be displayed on screen by given position(X and Y axis).
            </summary>
            <param name="x">Specifies the X position.</param>
            <param name="y">Specifies the Y position.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.PasteAsync(System.String,System.Double,System.Double)">
            <summary>
            Fills a selected cell with a value.
            </summary>
            <param name="data">The value to be updated in a cell</param>
            <param name="rowIndex">Row index of the desired cell.</param>
            <param name="colIndex">Column index of the desired cell.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="Paste" @onclick="DataHandler">Paste</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task DataHandler()
                 {
            	await TreeGrid.PasteAsync("test", 0, 4); // pass value, rowIndex and colIndex.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Paste(System.String,System.Double,System.Double)">
            <summary>
            Paste data from clipboard to selected cells.
            </summary>
            <param name="data">Specifies the record to be pasted.</param>
            <param name="rowIndex">Specifies the row index.</param>
            <param name="colIndex">Specifies the column index.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExportToPdfAsync(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Exports the tree grid data to Pdf file.
            </summary>
            <param name="pdfExportProperties">Options for customizing the pdf document during export.</param>
            <param name="isMultipleExport">Decides whether multiple tree grid is exported to same file.</param>
            <param name="pdfDoc">PDF document instance.</param>
            <param name="isBlob">Export as blob instead of writing response.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            When the parameters were not passed, the tree grid data is exported without any customization.
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowPdfExport" /> should be enabled.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ExportToPdf" @onclick="ExportHandler">ExportToPdf</button>
            <SfTreeGrid @ref="TreeGrid" AllowPdfExport="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ExportHandler()
               {
                   Syncfusion.Blazor.Grids.PdfExportProperties ExportProperties = new Syncfusion.Blazor.Grids.PdfExportProperties();
                   ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.CurrentPage; // here we have changed the ExportType from AllPages to CurrentPage, as like same we can change our desire properties.
                   await TreeGrid.ExportToPdfAsync(ExportProperties);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.PdfExport(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Export TreeGrid data to PDF document with Customization.
            </summary>
            <param name="pdfExportProperties">Provides the pdf export properties. Use this to provide custom column,
            data source, theme etc.</param>
            <param name="isMultipleExport">Specifies multi-export is enabled.</param>
            <param name="pdfDoc">PDF document instance.</param>
            <param name="isBlob">Export as blob instead of writing response.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExportToPdfAsync(Syncfusion.Blazor.TreeGrid.TreeGridPdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Exports the tree grid data to Pdf file.
            </summary>
            <param name="pdfExportProperties">Options for customizing the pdf document during export.</param>
            <param name="isMultipleExport">Decides whether multiple tree grid is exported to same file.</param>
            <param name="pdfDoc">PDF document instance.</param>
            <param name="isBlob">Export as blob instead of writing response.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            When the parameters were not passed, the tree grid data is exported without any customization.
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowPdfExport" /> should be enabled.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ExportToPdf" @onclick="ExportHandler">ExportToPdf</button>
            <SfTreeGrid @ref="TreeGrid" AllowPdfExport="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ExportHandler()
               {
            	Syncfusion.Blazor.TreeGrid.TreeGridPdfExportProperties ExportProperties = new Syncfusion.Blazor.TreeGrid.TreeGridPdfExportProperties();
            	ExportProperties.IsCollapsedStatePersist = true; // IsCollapsedStatePersist is set to true, to persist the collapsed state in exported document.
            	await TreeGrid.ExportToPdfAsync(ExportProperties);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.PdfExport(Syncfusion.Blazor.TreeGrid.TreeGridPdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Export TreeGrid data to PDF document with Tree Grid Customization.
            </summary>
            <param name="pdfExportProperties">Provides the pdf export properties. Use this to provide custom column,
            data source, theme etc.</param>
            <remarks>
            When the parameters were not passed, a plain Pdf file was exported without customization.
            </remarks>
            <param name="isMultipleExport">Specifies multi-export is enabled.</param>
            <param name="pdfDoc">PDF document instance.</param>
            <param name="isBlob">Export as blob instead of writing response.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ExportToPdfAsync">
            <summary>
            Exports the tree grid data to Pdf file.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowPdfExport" /> should be enabled.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ExportToPdf" @onclick="ExportHandler">ExportToPdf</button>
            <SfTreeGrid @ref="TreeGrid" AllowPdfExport="true" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task ExportHandler()
               {
            	await TreeGrid.ExportToPdfAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.PdfExport">
            <summary>
            Export TreeGrid data to PDF document.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.PrintAsync">
            <summary>
            Prints the tree grid data directly from your browser.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            You can customize print options using the <see cref="T:Syncfusion.Blazor.Grids.PrintMode"/>.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="Print" @onclick="PrintHandler">Print</button>
            <SfTreeGrid @ref="TreeGrid" Toolbar="@(new List<string>() { "Print" })" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task PrintHandler()
                 {
            	await TreeGrid.PrintAsync();
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Print">
            <summary>
            By default, prints all the pages of the TreeGrid and hides the pager.
            You can customize print options using the <see cref="T:Syncfusion.Blazor.Grids.PrintMode"/>.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.RefreshAsync">
            <summary>
            Refreshes the tree grid header and content.
            </summary>
            <remarks>
            You can use this method whenever a manual refresh is needed to tree grid.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="Refresh" @onclick="RefreshHandler">Refresh</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task RefreshHandler()
                 {
            	await TreeGrid.RefreshAsync(); // refresh the tree grid.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Refresh">
            <summary>
            Refreshes the tree grid header and content.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.RefreshColumnsAsync">
            <summary>
            Refreshes the tree grid with column changes, if any.
            </summary>
            <remarks>
            You can use this method whenever <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumn" /> object is modified externally.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="RefreshColumns" @onclick="RefreshHandler">RefreshColumns</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task RefreshHandler()
                 {
            	await TreeGrid.RefreshColumnsAsync(); // refresh the tree grid columns.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.RefreshColumns">
            <summary>
            Refreshes the TreeGrid column changes.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.RefreshHeaderAsync">
            <summary>
            Refreshes the tree grid header.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            You can use this method whenever <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumn" /> object is modified externally and need to refresh only the header element of tree grid.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="RefreshHeader" @onclick="RefreshHandler">RefreshHeader</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task RefreshHandler()
                 {
            	await TreeGrid.RefreshHeaderAsync(); // refresh the tree grid headers.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.RefreshHeader">
            <summary>
            Refreshes the TreeGrid header.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ReorderColumnsAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Moves the columns position in UI from one column index to another.
            </summary>
            <param name="fromFName">The list of field names to be moved together.</param>
            <param name="toFName">The field name of the destination column.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowReordering" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ReorderColumns" @onclick="ColumnHandler">ReorderColumns</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ColumnHandler()
                 {
            	await TreeGrid.ReorderColumnsAsync(new List<string>(){"TaskName", "Duration"}, "Progress");
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ReorderColumns(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Changes the Grid column positions by field names.
            </summary>
            <param name="fromFName">Specifies the list of field names to be moved.</param>
            <param name="toFName">Specifies the field name of the destination location.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ReorderRowAsync(System.Double,System.Double,System.String)">
            <summary>
            Moves a row position in UI from one row index to another.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowRowDragAndDrop" /> should be enabled.
            </remarks>
            <param name="fromIndex">The row index from which the row needs to be moved.</param>
            <param name="toIndex">Th row index to which the row needs to be moved..</param>
            <param name="position">One of the string values of <see cref="T:Syncfusion.Blazor.TreeGrid.RowPosition" /> that decides whether to move the row as above or below or child to destination row index</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ReorderRow" @onclick="RowHandler">ReorderRow</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task RowHandler()
                 {
            	await TreeGrid.ReorderRowAsync(6, 5, "Child");
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ReorderRows(System.Double,System.Double,System.String)">
            <summary>
            Changes the Tree Grid Row position with given indexes.
            </summary>
            <param name="fromIndex">Specifies the start row index.</param>
            <param name="toIndex">Specifies the to row index.</param>
            <param name="position">Specifies the position of the row to be reordered.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SaveCellAsync">
            <summary>
            Saves the cell value that is currently edited. 
            </summary>	
            <summary>
            Applicable only when <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.Mode" /> is set as <see cref="F:Syncfusion.Blazor.TreeGrid.EditMode.Cell" />.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="SaveCell" @onclick="CellHandler">SaveCell</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             <TreeGridEditSettings AllowEditing="true" Mode="Syncfusion.Blazor.TreeGrid.EditMode.Batch"/>
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task CellHandler()
               {
            	await TreeGrid.SaveCellAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SaveCell">
            <summary>
            Saves the cell that is currently edited. It does not save the value to the DataSource.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SearchAsync(System.String)">
            <summary>
            Searches the tree grid records using the given key.
            </summary>
            <param name="searchString">The search key.</param>
            <remarks>
            Searches the given key and displays only the rows which matches the key with any of its column values.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="Search" @onclick="DataHandler">Search</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task DataHandler()
               {
            	await TreeGrid.SearchAsync("Child task 1");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.Search(System.String)">
            <summary>
            Searches TreeGrid records using the given key.
            </summary>
            <param name="searchString">Specifies the search key.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectCellAsync(System.ValueTuple{System.Int32,System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Selects a cell by the given index.
            </summary>
            <param name="cellIndex">The ValueTuple of row and cell index. Example: (0, 1).</param>
            <param name="isToggle">Toggles the selection.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="SelectCell" @onclick="CellHandler">SelectCell</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            <TreeGridSelectionSettings Type="SelectionType.Multiple" Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell" ></TreeGridSelectionSettings>
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task CellHandler()
               {
            	await TreeGrid.SelectCellAsync((1,1)); // pass row and cell index
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectCell(System.ValueTuple{System.Int32,System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Selects a cell by the given index.
            </summary>
            <param name="cellIndex">Specifies the ValueTuple of row and cell index. Example: (0, 1).</param>
            <param name="isToggle">Toggles the selection.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectCheckboxesAsync(System.Double[])">
            <summary>
            Checks the column checkboxes using row indexes.
            </summary>
            <param name="rowIndexes">The row indexes in which the checkbox to be checked.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShowCheckbox" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="SelectCheckboxes" @onclick="CheckboxHandler">SelectCheckboxes</button>
            <SfTreeGrid @ref="TreeGrid" AutoCheckHierarchy="true" DataSource="@TreeData">
              <TreeGridColumns>
                  .................
                    <TreeGridColumn Field="TaskName" ShowCheckbox="true" HeaderText="Task Name" Width="160"></TreeGridColumn>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task CellHandler()
                 {
                    var indexes = new List<double>(){5, 6};
                await TreeGrid.SelectCheckboxesAsync(indexes.ToArray());
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectCheckboxes(System.Double[])">
            <summary>
            Checked the checkboxes using rowIndexes.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <param name="rowIndexes">Specifies the indexes of checkbox rows to be selected.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectRowAsync(System.Double,System.Nullable{System.Boolean})">
            <summary>
            Selects a row by given index.
            </summary>
            <param name="index">The row index to be selected.</param>
            <param name="isToggle">Toggles the selection.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="SelectRow" @onclick="RowHandler">SelectRow</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task RowHandler()
                 {
            	await TreeGrid.SelectRowAsync(2);
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectRow(System.Double,System.Nullable{System.Boolean})">
            <summary>
            Selects a row by given index.
            </summary>
            <param name="index">Specifies the row index to select.</param>
            <param name="isToggle">Toggles the selection.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectRowsAsync(System.Double[])">
            <summary>
            Selects a collection of rows by indexes.
            </summary>
            <param name="rowIndexes">The indexes of rows to be selected.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="SelectRow" @onclick="RowHandler">SelectRow</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
              <TreeGridColumns>
                  .............
              </TreeGridColumns>
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task RowHandler()
                 {
                    var indexes = new List<double>(){2, 3};
                await TreeGrid.SelectRowsAsync(indexes.ToArray());
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SelectRows(System.Double[])">
            <summary>
            Selects a collection of rows by indexes.
            </summary>
            <param name="rowIndexes">Specifies the indexes of rows to be selected.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SetCellValueAsync(System.Object,System.String,System.Object)">
            <summary>
            Updates particular cell value based on the given primary key value.
            </summary>
            <param name="key">The primary key value of a record.</param>
            <param name="field">The column or field name.</param>
            <param name="value">The new value.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.Mode" /> should be `Cell` or `Batch`.
            A primary key column must be specified using the <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.IsPrimaryKey" /> property.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="SetCellValue" @onclick="CellHandler">SetCellValue</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             <TreeGridEditSettings AllowEditing="true" Mode="Syncfusion.Blazor.TreeGrid.EditMode.Cell"/>
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task CellHandler()
               {
            	await TreeGrid.SetCellValueAsync(2, "TaskName", "test");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SetCellValue(System.Object,System.String,System.Object)">
            <summary>
            Updates particular cell value based on the given primary key value.
            > Primary key column must be specified using `Columns.isPrimaryKey` property.
            </summary>
            <param name="key">Specifies the primary key value.</param>
            <param name="field">Specifies the key field name.</param>
            <param name="value">Specifies the new value.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SetRowDataAsync(System.Object,`0)">
            <summary>
            Updates the particular row values based on the given primary key value.
            </summary>
            <param name="primaryKey">The PrimaryKey value of a record object in data source.</param>
            <param name="rowData">New data for the particular row.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowEditing" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="SetRowData" @onclick="DataHandler">SetRowData</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            <TreeGridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" Mode="Syncfusion.Blazor.TreeGrid.EditMode.Row" />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task DataHandler()
               {
                 var data = new BusinessObject() { TaskId=2, TaskName = "Test Add", StartDate = new DateTime(2017, 10, 23), Duration = 10, Progress = 70, Priority = "Critical" };
                 await TreeGrid.SetRowDataAsync(2, data);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SetRowData(System.Object,`0)">
            <summary>
            Updates and refresh the particular row values based on the given primary key value.
            > Primary key column must be specified using `Columns.isPrimaryKey` property.
            </summary>
            <param name="primaryKey">Specifies the PrimaryKey value of dataSource.</param>
            <param name = "rowData">To update new data for the particular row.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ShowColumnsAsync(System.String[],System.String)">
            <summary>
            Shows specified tree grid columns.
            </summary>
            <param name="keys">The column names.</param>
            <param name="showBy">Whether the column names are based on <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Field" /> or <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.HeaderText" /> property of column.</param>
            <remarks>
            You can dynamically show hidden columns.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ShowColumns" @onclick="ColumnHandler">ShowColumns</button>
            <button id="ShowColumnsByField" @onclick="ColumnFieldHandler">ShowColumnsByField</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ColumnHandler()
                 {
                    var columns = new List<string>() {"Task Name", "Duration" };
            		await TreeGrid.ShowColumnsAsync(columns.ToArray());
                 }
                 private async Task ColumnFieldHandler()
                 {
                    var columns = new List<string>() {"TaskName", "Duration" };
                    await TreeGrid.ShowColumnsAsync(columns.ToArray(), "Field"); // pass second param as "Field" to hide using field name.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ShowColumns(System.String[],System.String)">
            <summary>
            Shows a column by its column name.
            </summary>
            <param name="keys">Specifies the column names.</param>
            <param name="showBy">Specifies the column getting criteria.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ShowColumnAsync(System.String,System.String)">
            <summary>
            Shows a particular tree grid column.
            </summary>
            <param name="key">The column name.</param>
            <param name="showBy">Decides whether the column name is based on <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Field" /> or <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.HeaderText" /> property of column.</param>
            <remarks>
            You can dynamically show a hidden column.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ShowColumn" @onclick="ColumnHandler">ShowColumn</button>
            <button id="ShowColumnByField" @onclick="ColumnFieldHandler">ShowColumnByField</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task ColumnHandler()
                 {
            		await TreeGrid.ShowColumnAsync("Task Name"); // pass headerText
                 }
                 private async Task ColumnFieldHandler()
                 {
                    await TreeGrid.ShowColumnAsync("TaskName", "Field"); // pass second param as "Field" to hide using field name.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ShowColumns(System.String,System.String)">
            <summary>
            Shows a column by its column name.
            </summary>
            <param name="key">Specifies the column names.</param>
            <param name="showBy">Specifies the column getting criteria.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ShowSpinnerAsync">
            <summary>
            Shows the spinner in tree grid whenever needed to indicate that a tree grid action is in processing.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="ShowSpinner" @onclick="SpinnerHandler">ShowSpinner</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task SpinnerHandler()
                 {
            	await TreeGrid.ShowSpinnerAsync(); // shows the spinner.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ShowSpinner">
            <summary>
            By default, TreeGrid shows the spinner for all its actions. You can use this method to show spinner at your needed time.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SortByColumnAsync(System.String,Syncfusion.Blazor.Grids.SortDirection,System.Nullable{System.Boolean})">
            <summary>
            Sorts a column with the column details.
            </summary>
            <param name="columnName">The field name to be sorted.</param>
            <param name="direction">One of the values of <see cref="T:Syncfusion.Blazor.Grids.SortDirection" />.</param>
            <param name="isMultiSort">Decides whether to do multi-sorting.</param>
            <remarks>
            `AllowSorting` should be true.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="SortByColumn"  @onclick="SortHandler">SortByColumn</button>
            <SfTreeGrid @ref="TreeGrid" AllowSorting="true" DataSource="@TreeData">
                  .................
            </SfTreeGrid>
            @code{
                 SfTreeGrid<BusinessObject> TreeGrid;
                 private async Task SortHandler()
                 {
            	await TreeGrid.SortByColumn("TaskName", SortDirection.Descending);
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SortByColumn(System.String,Syncfusion.Blazor.Grids.SortDirection,System.Nullable{System.Boolean})">
            <summary>
            Sorts a column with the given options.
            </summary>
            <param name="columnName">Specifies the sort column name.</param>
            <param name="direction">Specifies the sort direction.</param>
            <param name="isMultiSort">Specifies whether its multi-sorting.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.StartEditAsync">
            <summary>
            Renders edit form to edit the selected row.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            A row must be selected beffore calling this method.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="StartEdit" @onclick="DataHandler">StartEdit</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            <TreeGridEditSettings AllowEditing="true" />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task DataHandler()
               {
                 await TreeGrid.StartEditAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.StartEdit">
            <summary>
            To edit any particular row by TR element.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.UpdateCellAsync(System.Double,System.String,System.Object)">
            <summary>
            Update the specified cell with given value.
            </summary>
            <param name="rowIndex">The row index of the desired cell.</param>
            <param name="field">The column name of the desired cell.</param>
            <param name="value">The new value.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.Mode" /> should be `Cell` or `Batch`. And <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowEditing" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="UpdateCell" @onclick="DataHandler">UpdateCell</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            <TreeGridEditSettings AllowEditing="true" Mode="Syncfusion.Blazor.TreeGrid.EditMode.Cell" />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task DataHandler()
               {
                 await TreeGrid.UpdateCellAsync(1, 'TaskName', 'test');
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.UpdateCell(System.Double,System.String,System.Object)">
            <summary>
            To update the specified cell by given value without changing into edited state.
            </summary>
            <param name="rowIndex">Specifies the row index.</param>
            <param name="field">Specifies the column name.</param>
            <param name="value">Specifies the new value.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.UpdateExternalMessageAsync(System.String)">
            <summary>
            Defines the text of external message.
            </summary>
            <param name="message">Specifies the externam message.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.UpdateExternalMessage(System.String)">
            <summary>
            Defines the text of external message.
            </summary>
            <param name="message">Specifies the externam message.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.UpdateRowAsync(System.Double,`0)">
            <summary>
            Updates the specified row with given values.
            </summary>
            <param name="index">The row index of the desired row.</param>
            <param name="data">The new data to be updated.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowEditing" /> should be enabled.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="UpdateRow" @onclick="DataHandler">UpdateRow</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
            <TreeGridEditSettings AllowEditing="true" Mode="Syncfusion.Blazor.TreeGrid.EditMode.Batch" />
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task DataHandler()
               {
                 var data = TreeGrid.GetCurrentViewRecords()[6];
                 data.TaskName = "test";
                 data.Duration = 80;
                 await TreeGrid.UpdateRowAsync(6, data);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.UpdateRow(System.Double,`0)">
            <summary>
            To update the specified row by given values without changing into edited state.
            </summary>
            <param name="index">Specifies the row index.</param>
            <param name="data">Specifies the updated data.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.FocusAsync">
            <summary>
            Focuses the Tree Grid element in UI.
            </summary>
            <remarks>
            Helps in doing keyboard interactions by focusing the tree grid element.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button id="Focus" @onclick="FocusHandler">Focus</button>
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData">
             ........
            </SfTreeGrid>
            @code{
               SfTreeGrid<BusinessObject> TreeGrid;
               private async Task FocusHandler()
               {
                 await TreeGrid.FocusAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.ResetPersistDataAsync">
            <summary>
            Resets the current state and refreshes the tree grid with original state given declaratively.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns> 
            <remarks>
            Applicable when State Persistence feature is enabled in tree grid.
            </remarks>
            <example> 
            <code><![CDATA[ 
            <button id="ClearPersistence" @onclick="ClearPersistence">Clear Persistence</button> 
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData"> 
             ........ 
            </SfTreeGrid> 
            @code{ 
               SfTreeGrid<BusinessObject> TreeGrid; 
               private async Task ClearPersistence() 
               { 
                 await TreeGrid.ResetPersistDataAsync(); 
               } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SetPersistDataAsync(System.String)">
            <summary>
            Loads a already saved state of tree grid.
            </summary>
            <remarks>
            Users can view pre stored state easily in tree grid. Current state can be stored using <see cref="M:Syncfusion.Blazor.TreeGrid.SfTreeGrid`1.SetPersistDataAsync(System.String)" /> method.
            </remarks>
            <param name="properties">Serialized tree grid properties to apply to current state.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns> 
            <example> 
            <code><![CDATA[ 
            <button id="SetPersistence" @onclick="SetPersistence">Set Persistence</button> 
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeData"> 
             ........ 
            </SfTreeGrid> 
            @code{ 
               SfTreeGrid<BusinessObject> TreeGrid; 
               public string treegridstate;
               private async Task SetPersistence() 
               { 
                 await TreeGrid.SetPersistDataAsync(treegridstate); 
               } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.RowTemplateTreeColumn">
            <summary>
            Configures the tree column content for the RowTemplate of Tree Grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowTemplateTreeColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowTemplateTreeColumn.RowData">
            <summary>
            Gets the current row data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.RowTemplateTreeColumn.Row">
            <summary>
            Gets the current row object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.RowTemplateTreeColumn.OnParametersSet">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridAggregate">
            <summary>
            Configures Tree Grid aggregates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregate.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregate.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregate.Columns">
            <summary>
            Configures the aggregate columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregate.ShowChildSummary">
            <summary>
            Display the childSummary for each parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridAggregate.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values from parent component.
            </summary>
            <param name="key">Child property name.</param>
            <param name="value">Child property value.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridAggregate.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridAggregate.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumn">
            <summary>
            Configures Tree Grid aggregate column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumn.ColumnName">
            <summary>
            Defines the column name to display the aggregate value. If `ColumnName` is not defined,
            then `field` name value will be assigned to the `columnName` property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumn.Field">
            <summary>
            Defines the column name to perform aggregation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumn.FooterTemplate">
            <summary>
            Defines the footer cell template as a string for the aggregate column.
            The `Type` name should be used to access aggregate values inside the template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumn.Format">
            <summary>
            Format is applied to a calculated value before it is displayed.
            Gets the format from the user, which can be standard or custom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumn.Type">
            <summary>
            Defines the aggregate type of a particular column.<br/>
            Types of aggregate supported in-built are,<br/>
            <see cref="F:Syncfusion.Blazor.Grids.AggregateType.Sum"/> -
            Performs sum aggregation.<br/>
            <see cref="F:Syncfusion.Blazor.Grids.AggregateType.Average"/> -
            Performs average aggregation.<br/>
            <see cref="F:Syncfusion.Blazor.Grids.AggregateType.Count"/> -
            Performs count aggregation.
            <see cref="F:Syncfusion.Blazor.Grids.AggregateType.FalseCount"/> -
            Performes false count aggregation.<br/>
            <see cref="F:Syncfusion.Blazor.Grids.AggregateType.TrueCount"/> -
            Performes true count aggregation.<br/>
            <see cref="F:Syncfusion.Blazor.Grids.AggregateType.Max"/> -
            Performes max aggregation.<br/>
            <see cref="F:Syncfusion.Blazor.Grids.AggregateType.Min"/> -
            Performes min aggregation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumn.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumn.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumns">
            <summary>
            Configures Tree Grid aggregate columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumns.Columns">
            <summary>
            Defines the aggregate columns.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridAggregateColumns.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridAggregates">
            <summary>
            Configures Tree Grid aggregates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregates.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridAggregates.Aggregates">
            <summary>
            Gets or sets the aggregate row collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridAggregates.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridColumn">
            <summary>
            Configures Tree Grid column.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridColumn"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Index">
            <summary>
            Gets the unique identifier value of the column. It is used to get the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.AllowEditing">
            <summary>
            If AllowEditing set to false, then it disables editing of a particular column.
            By default all columns are editable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.AllowAdding">
            <summary>
            If AllowAdding set to false, then it disables add operation of a particular column.
            By default all columns are editable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.AllowFiltering">
            <summary>
            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.
            By default all columns are filterable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.AllowReordering">
            <summary>
            If AllowReordering set to false, then it disables reorder of a particular column.
            By default all columns can be reorder.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.AllowResizing">
            <summary>
            If AllowResizing set to false, it disables resize option of a particular column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.AllowSorting">
            <summary>
            If AllowSorting set to false, then it disables sorting option of a particular column.
            By default all columns are sortable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ClipMode">
            <summary>
            Defines the cell content's overflow mode. The available modes are
             Clip -  Truncates the cell content when it overflows its area.
             Ellipsis -  Displays ellipsis when the cell content overflows its area.
             EllipsisWithTooltip - Displays ellipsis when the cell content overflows its area
            also it will display tooltip while hover on ellipsis applied cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Columns">
            <summary>
            Used to render multiple header rows(stacked headers) on TreeGrid header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Commands">
            <summary>
            Commands provides an option to display command buttons in every cell.
            The available built-in command buttons are
             Edit - Edit the record.
             Delete - Delete the record.
             Save - Save the record.
             Cancel - Cancel the edit state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.CustomAttributes">
            <summary>
            The CSS styles and attributes of the content cells of a particular column can be customized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.DefaultValue">
            <summary>
            Defines default values for the component when adding a new record to the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.DisableHtmlEncode">
            <summary>
            If DisableHtmlEncode is set to true, it encodes the HTML of the header and content cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.DisplayAsCheckBox">
            <summary>
            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.EditorSettings">
            <summary>
            Defines the object to customize default cell editors. The following types can be used to customize default
            editors.<br/>
            <see cref="T:Syncfusion.Blazor.Grids.NumericEditCellParams"/> -
            Customizes the default numerictextbox editor.<br/>
            <see cref="T:Syncfusion.Blazor.Grids.DropDownEditCellParams"/> -
            Customizes the default dropdown editor.<br/>
            <see cref="T:Syncfusion.Blazor.Grids.DateEditCellParams"/> -
            Customizes the default datepicker editor.<br/>
            <see cref="T:Syncfusion.Blazor.Grids.BooleanEditCellParams"/> -
            Customizes the default checkbox editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.EditTemplate">
            <summary>
            Defines the cell edit template that is used as editor for a particular column.
            It accepts either template string or HTML element ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.EditType">
            <summary>
            Defines the type of component for editing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Field">
            <summary>
            Defines the field name of column which is mapped with mapping name of DataSource.
            The bounded columns can be sort, filter etc.,
            The Field name must be a valid JavaScript identifier,
            the first character must be an alphabet and should not contain spaces and special characters.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.FilterSettings">
            <summary>
             Defines the filter options to customize filtering for the particular column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.FilterTemplate">
            <summary>
            Defines the filter template/UI that is used as filter for a particular column.
            It accepts either template string or HTML element ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Format">
            <summary>
            It is used to change display value with the given format and does not affect the original data.
            Gets the format from the user which can be standard or custom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Formatter">
            <summary>
            Defines the method which is used to achieve custom formatting from an external function.
            This function triggers before rendering of each cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.HeaderTemplate">
            <summary>
            Defines the header template as string or HTML element ID which is used to add customized element in the column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.HeaderText">
            <summary>
            Defines the header text of column which is used to display in column header.
            If HeaderText is not defined, then field name value will be assigned to header text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.HeaderTextAlign">
            <summary>
            Define the alignment of column header which is used to align the text of column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.HideAtMedia">
            <summary>
            Column visibility can change based on [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html).
            HideAtMedia accepts only valid Media Queries.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.IsFrozen">
            <summary>
            You can use this property to freeze selected columns in grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Freeze">
            <summary>
            Gets or sets a value that indicates which side column needs to freeze. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.FreezeDirection"/> enumeration that specifies in which direction the columns is frozen.
            The default mode is <b> Syncfusion.Blazor.Grids.FreezeDirection.Left</b>. 
            </value>  
            <remarks>  
            Columns can be frozen both at left and right side of tree grid content.Columns in the center part of tree grid content are scrollable.
            </remarks>
            <example>   
            <code>   
            <![CDATA[   
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeGridData" >
            <TreeGridColumns>
            <TreeGridColumn Field="TaskId" HeaderText="Task ID"
            Freeze="FreezeDirection.Left" IsFrozen="true" Width="80"
            TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
            <TreeGridColumn Field="TaskName" Freeze="FreezeDirection.Right" IsFrozen="true" 
            HeaderText="Task Name" Width="160"></TreeGridColumn>
            ...
            </TreeGridColumns>
            </SfTreeGrid>
            ]]>   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.IsIdentity">
            <summary>
            If IsIdentity is set to true, then this column is considered as identity column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.IsPrimaryKey">
            <summary>
            If IsPrimaryKey is set to true, considers this column as the primary key constraint.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.LockColumn">
            <summary>
            If LockColumn is set to true, then it disables Reordering of a particular column.
            The locked column will be moved to first position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.MaxWidth">
            <summary>
            Defines the maximum width of the column in pixels or percentage, which will restrict resizing beyond this pixels or percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.MinWidth">
            <summary>
            Defines the minimum width of the column in pixels or percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShowCheckbox">
            <summary>
            If ShowCheckbox is set to true, then the checkboxes will be displayed in particular column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShowColumnMenu">
            <summary>
            If ShowColumnMenu is set to false, then it disable the column menu of a particular column.
            By default column menu will show for all columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShowInColumnChooser">
            <summary>
            If ShowInColumnChooser is set to false, then hides the particular column in column chooser.
            By default all columns are displayed in column Chooser.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Template">
            <summary>
            Defines the column template that renders customized element in each cell of the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.TextAlign">
            <summary>
            Defines the alignment of the column in both header and content cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Type">
            <summary>
            Defines the data type of the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Uid">
            <summary>
            Gets the unique identifier value of the column. It is used to get the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ValidationRules">
            <summary>
            Defines rules to validate data before creating and updating. The validation rules can be set
            as instance of <see cref="T:Syncfusion.Blazor.Grids.ValidationRules"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Visible">
            <summary>
            If Visible is set to false, hides the particular column. By default, columns are displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.Width">
            <summary>
            Defines the width of the column in pixels or percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumn.FilterItemTemplate">
            <summary>
            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.FilterItemTemplateContext"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShouldSerializeChildContent">
            <summary>
            Specifies whethet the child content should be serialized.
            </summary>
            <returns><see cref="T:System.Boolean"/>.</returns>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShouldSerializeTemplate">
            <summary>
            Specifies whethet the child content should be serialized.
            </summary>
            <returns><see cref="T:System.Boolean"/>.</returns>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShouldSerializeFilterTemplate">
            <summary>
            Specifies whethet the filter template should be serialized.
            </summary>
            <returns><see cref="T:System.Boolean"/>.</returns>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShouldSerializeEditTemplate">
            <summary>
            Specifies whethet the edit template should be serialized.
            </summary>
            <returns><see cref="T:System.Boolean"/>.</returns>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShouldSerializeHeaderTemplate">
            <summary>
            Specifies whethet the header template should be serialized.
            </summary>
            <returns><see cref="T:System.Boolean"/>.</returns>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.ShouldSerializeFilterItemTemplate">
            <summary>
            Specifies whethet the filter template should be serialized.
            </summary>
            <returns><see cref="T:System.Boolean"/>.</returns>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values from parent component.
            </summary>
            <param name="key">Child property name.</param>
            <param name="propertyValue">Child property value.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.SetWidth(System.String)">
            <summary>
            Update the width of the column.
            </summary>
            <param name="_width">sets the width of the column.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.SetVisibility(System.Boolean)">
            <summary>
            Update the visibility of the column.
            </summary>
            <param name="visibility">sets the visibility of the column.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumn.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserItem">
            <summary>
            Configures the Tree Grid column chooser group items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserItem.Title">
            <summary>
            Specifies the label value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserItem.Column">
            <summary>
            Specifies the grid column
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserItem.IsSelectAll">
            <summary>
            Specifies that the checkbox is select all.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserItemGroup">
            <summary>
            Configures the Tree Grid column chooser grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserItemGroup.Title">
            <summary>
            Specifies the group title.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserSettings">
            <summary>
            Configures Tree Grid column chooser settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserSettings.Operator">
            <summary>
            Defines the search operator for Column Chooser.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserSettings.Template">
            <summary>
            Defines the custom content for the ColumnChooser.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserSettings.FooterTemplate">
            <summary>
            Defines the custom footer content for the ColumnChooser.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the grid.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumnChooserSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridColumns">
            <summary>
            Configures Tree Grid columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridColumns.Columns">
            <summary>
            Defines the columns collection.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridColumns.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumn">
            <summary>
            Configures tree grid command column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumn.ButtonOption">
            <summary>
            Define the button model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumn.Title">
            <summary>
            Define the command button tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumn.Type">
            <summary>
            Define the command button type.<br/>
            <b>None</b> -
            Default. A command button with no default action. Use this for custom command actions.<br/>
            <b>Edit</b> -
            A edit command button that edit current record.<br/>
            <b>Delete</b> -
            A delete command button that delete current record.<br/>
            <b>Save</b> -
            A save command button that saves the current edited record.<br/>
            <b>Cancel</b> -
            A cancel command button that cancels the edit state.
            </summary>
            <remarks>
            To use custom command button, set Type as <see cref="F:Syncfusion.Blazor.Grids.CommandButtonType.None"/> and use
            <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.CommandClicked"/> event to perform custom action.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumn.Uid">
            <summary>
            Gets the unique identifier value of the column. It is used to get the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumn.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumn.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumns">
            <summary>
            Configures tree grid command columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumns.Commands">
            <summary>
            Defines the command button collection. Use <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumn"/> component
            to provide command buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridCommandColumns.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings">
            <summary>
            Configures Tree Grid edit settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowAdding">
            <summary>
            If AllowAdding is set to true, new records can be added to the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowDeleting">
            <summary>
            If AllowDeleting is set to true, existing record can be deleted from the TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowEditOnDblClick">
            <summary>
            If AllowEditOnDblClick is set to false, TreeGrid will not allow editing of a record on double click.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.AllowEditing">
            <summary>
            If AllowEditing is set to true, values can be updated in the existing record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.Dialog">
            <summary>
            Defines the dialog params to edit.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.FooterTemplate">
            <summary>
            Defines the custom footer for the edit dialog.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the tree grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.HeaderTemplate">
            <summary>
            Defines the custom header for the edit dialog.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the tree grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.Mode">
            <summary>
            Defines the mode to edit. The available editing modes are:
             Cell
             Row
             Dialog
             Batch.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.NewRowPosition">
            <summary>
            Defines the row position for new records. The available row positions are:
             Top
             Bottom
             Above
             Below
             Child.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.ShowConfirmDialog">
            <summary>
            If ShowConfirmDialog is set to false, confirm dialog does not show when batch changes are saved or discarded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.ShowDeleteConfirmDialog">
            <summary>
            If ShowDeleteConfirmDialog is set to true, confirm dialog will show delete action. You can also cancel delete command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.Template">
            <summary>
            Defines the custom edit elements for the dialog template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.Validator">
            <summary>
            Defines the custom validator component for the built-in EditForm. Use this to override built-in
            validation components.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.ValidatorTemplateContext"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridEditSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1">
            <summary>
            Configures Tree Grid events.
            </summary>
            <typeparam name="TValue">A type which provides schema for the tree grid events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.Parent">
            <summary>
            Gets the Parent component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnActionBegin">
            <summary>
            An event that is raised when the tree grid actions such as sorting, filtering, paging, and more begins.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ActionEventArgs`1"/> object which provides the details of current tree grid action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnActionBegin="ActionBeginHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ActionBeginHandler(ActionEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnActionComplete">
            <summary>
            An event that is raised when the tree grid actions such as sorting, filtering, paging and more are completed.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ActionEventArgs`1"/> object which provides the details of current tree grid action.
            </remarks>
            <example>
            <code> 
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnActionComplete="ActionCompleteHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ActionCompleteHandler(ActionEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnActionFailure">
            <summary>
            An event that is raised when any tree grid action failed to achieve the desired results.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FailureEventArgs"/> object which provides details of the error in Tree Grid. Stack trace of exceptions, if any, can also be obtained here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnActionFailure="ActionFailureHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ActionFailureHandler(FailureEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnBatchAdd">
            <summary>
             An event that is raised when the tree grid records are added in the batch mode.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.BeforeBatchAddArgs`1"/> object. Based on this, you can customize the batch add operation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnBatchAdd="BatchAddHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void BatchAddHandler(BeforeBatchAddArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnBatchDelete">
            <summary>
            An event that is raised When the tree grid records are deleted in the batch mode.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs`1"/> object. Based on this, you can get deleted records details or cancel the batch delete action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnBatchDelete="BatchDeleteHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void BatchDeleteHandler(BeforeBatchDeleteArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnBatchSave">
            <summary>
            An event that is raised when the modified records are saved to data source in batch mode.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.BeforeBatchSaveArgs`1"/> object which provides the details of the changed tree grid records.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnBatchSave="BatchSaveHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void BatchSaveHandler(BeforeBatchSaveArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.BeforeBatchAdd">
            <summary>
            An event that is raised before new records are added in batch mode.
            </summary>
            <remarks>
            This event handler receives a object argument which provides the details of before batch add action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents BeforeBatchAdd="BeforeBatchAddHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void BeforeBatchAddHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.BeforeBatchDelete">
            <summary>
            An event that is raised before the tree grid records are deleted in batch mode.
            </summary>
            <remarks>
            This event handler receives a object argument which provides the details of before batch delete action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents BeforeBatchDelete="BeforeBatchDeleteHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void BeforeBatchDeleteHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.BeforeBatchSave">
            <summary>
            An event that is raised before the modified records are saved in batch mode.
            </summary>
            <remarks>
            This event handler receives a object argument which provides the details of before batch save action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents BeforeBatchSave="BeforeBatchSaveHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void BeforeBatchSaveHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnDataBound">
            <summary>
            An event that is raised when data is bound to the tree grid.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.BeforeDataBoundArgs`1"/> object through which you can able to get currentview data and total records count.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnDataBound="DataBoundHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void DataBoundHandler(BeforeDataBoundArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnExcelExport">
            <summary>
            An event that is raised when the tree grid data is exported to an excel file.
            </summary>
            <remarks>
            This event handler receives a object which provides the details of tree grid data and excel properties.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnExcelExport="ExcelExportHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             SfTreeGrid<BusinessObject> TreeGrid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "Excel Export")
              {
               await this.TreeGrid.ExcelExport();
              }
             }
             public void ExcelExportHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnPdfExport">
            <summary>
            An event that is raised when tree grid data is exported to a PDF document.
            </summary>
            <remarks>
            This event handler receives a object argument that provides the details on tree grid data and PDF properties.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnPdfExport="PdfExportHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             SfTreeGrid<BusinessObject> TreeGrid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "PDF Export")
              {
               await this.TreeGrid.PdfExport();
              }
             }
             public void PdfExportHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnBeginEdit">
            <summary>
            An event that is raised when tree grid record is beginning to do edit operation.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.BeginEditArgs`1"/> object through which you can be able to get the current edited record details through the event argument. Edit action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.BeginEditArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnBeginEdit="BeginEditHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void BeginEditHandler(BeginEditArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnCellEdit">
            <summary>
            An event that is raised when the cell is being edited.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellEditArgs`1"/> object through which you can get the corresponding column and edited row details through event argument. Cell edit action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnCellEdit="CellEditHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CellEditHandler(CellEditArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnCellSave">
            <summary>
            An event that is raised when modified cell value is saved.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSaveArgs`1"/> object through which you can get previous and current edited cell values so you can be able to customize the cell save action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnCellSave="CellSaveHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CellSaveHandler(CellSaveArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.CellSaved">
            <summary>
            An event that is raised after the modified cell value is saved.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSaveArgs`1"/> object through which you can get previous and current edited cell values.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents CellSaved="CellSavedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CellSavedHandler(CellSaveArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.CellSelected">
            <summary>
            An event that is raised after a cell is selected.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSelectEventArgs`1"/> object through which you can able to get the selected cell and row details.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridSelectionSettings Mode=SelectionMode.Cell></TreeGridSelectionSettings>
              <TreeGridEvents CellSelected="CellSelectedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CellSelectedHandler(CellSelectEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.CellSelecting">
            <summary>
            An event that is raised when any cell selection occurs.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1"/> object through which you can get current selected cell and row details. Cell selection action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridSelectionSettings Mode=SelectionMode.Cell></TreeGridSelectionSettings>
              <TreeGridEvents CellSelecting="CellSelectingHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CellSelectingHandler(CellSelectingEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.CellDeselecting">
            <summary>
            An event that is raised when any cell deselection occurs.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1"/> object through which you can be able to get the details of the cell to be deselected.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridSelectionSettings Mode=SelectionMode.Cell></TreeGridSelectionSettings>
              <TreeGridEvents CellDeselecting="CellDeselectingHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CellDeselectingHandler(CellDeselectEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.CellDeselected">
            <summary>
            An event that is raised after any cell deselection occurs.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1"/> object through which you can able to get deselected cell and row details.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridSelectionSettings Mode=SelectionMode.Cell></TreeGridSelectionSettings>
              <TreeGridEvents CellDeselected="CellDeselectedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CellDeselectedHandler(CellDeselectEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.Collapsed">
            <summary>
            An event that is raised after the tree grid parent row is collapsed.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowCollapsedEventArgs`1"/> object which provides the details of parent and child rows.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents Collapsed="CollapsedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CollapsedHandler(RowCollapsedEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.Collapsing">
            <summary>
            An event that is raised while collapsing the tree grid parent row.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1"/> object which provides the details of parent and child rows. Row collapse action can be cancelled using <see cref="P:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents Collapsing="CollapsingHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CollapsingHandler(RowCollapsingEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.CommandClicked">
            <summary>
            An event that is raised when command button is clicked in tree grid column.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CommandClickEventArgs`1"/> object through which you can get the corresponding command column and row details.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid ShowColumnMenu="true">
              <TreeGridEvents CommandClicked="OnCommandClicked" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void OnCommandClicked(CommandClickEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.ColumnMenuItemClicked">
            <summary>
            An event that is raised after clicking on column menu.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs"/> object through which you can able to get the corresponding menu item and column details through event argument.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid ShowColumnMenu="true">
              <TreeGridEvents ColumnMenuItemClicked="ColumnMenuItemClickedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ColumnMenuItemClickedHandler(ColumnMenuClickEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.ContextMenuItemClicked">
            <summary>
            An event that is raised after clicking an item on context menu.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1"/> object through which you can get the corresponding menu item, column and row details through event argument. Custom actions for custom context menu items can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", 
              "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})" >
              <TreeGridEvents ContextMenuItemClicked="ContextMenuItemClickedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ContextMenuItemClickedHandler(ContextMenuClickEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.ContextMenuOpen">
            <summary>
            An event that is raised when context menu is opened.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1"/> object through which you can get context menu instance through event argument so you can able to customize the context menu items.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", 
              "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})" >
              <TreeGridEvents ContextMenuOpen="ContextMenuOpenHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ContextMenuOpenHandler(ContextMenuOpenEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.Created">
            <summary>
            An event that is raised when the component is created.
            </summary>
            <remarks>
            This event handler receives a object which provides the details of created tree grid component.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents Created="CreatedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CreatedHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.DataBound">
            <summary>
            An event that is raised when data source is populated in the tree grid.
            </summary>
            <remarks>
            This event handler receives a object which provides the current view data and its count.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents DataBound="DataBoundHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void DataBoundHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.Destroyed">
            <summary>
            An event that is raised when the tree grid component is destroyed.
            </summary>
            <remarks>
            This event handler receives a object which provides the details of the component.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents Destroyed="DestroyHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void DestroyHandler(object args)
             {
             }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.DetailDataBound">
            <summary>
            An event that is raised after detail row expands.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.DetailDataBoundEventArgs`1"/> object which provides the details of the row.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents DetailDataBound="DetailDataBoundHandler" TValue="Employee"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void DetailDataBoundHandler(DetailDataBoundEventArgs<Employee> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.Expanded">
            <summary>
            An event that is raised after the tree grid parent row is expanded.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowExpandedEventArgs`1"/> object which provides the details of the parent and child rows.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents Expanded="ExpandedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ExpandedHandler(RowExpandedEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.Expanding">
            <summary>
            An event that is raised while expanding the tree grid parent row.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1"/> object which provides the details of parent and child rows. Row expand action can be cancelled using <see cref="P:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents Expanding="ExpandingHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ExpandingHandler(RowExpandingEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.HeaderCellInfo">
            <summary>
            An event that is raised everytime a header cell is rendered or refreshed in tree grid.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs"/> object which provides the details of header cells in the tree grid so that it can be customized.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents HeaderCellInfo="HeaderCellInfoHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void HeaderCellInfoHandler(HeaderCellInfoEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.BeforeCopyPaste">
             <summary>
             An event that is raised before copy or paste action in the Grid cells. You can cancel the copy or paste action by cancelling this event. 
             </summary>
             <remarks>
             This event triggers before <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.BeforeCellPaste"/> event, so you can cancel copy or paste operation by using this event.
             Also, this event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.BeforeCopyPasteEventArgs"/> object which provides the details of before paste/copy action.
            </remarks>
             <example>
             <code><![CDATA[
             <SfTreeGrid DataSource="@TreeData" @ref="TreeGrid" >
               <TreeGridEvents BeforeCopyPaste="CopyPaste"></TreeGridEvents>
             </SfTreeGrid>
             @code{
              public async Task CopyPaste(BeforeCopyPasteEventArgs args)
              {
                    //you can cancel the entire copy action here
                 if(args.Action == "Copy"){
                    args.Cancel = true;
                 }
                    //you can cancel the entire paste action here
                 if(args.Action == "Paste"){
                    args.Cancel = true;
                 }
              }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.BeforeCellPaste">
            <summary>     
            An event that is raised before pasting the copied cell value in a corresponding cells. You can cancel the paste on a particular cell by handling this event.        
            </summary>     
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.BeforeCellPasteEventArgs`1"/> object which provides the details for the before cell paste action. Paste event action can be cancelled by setting <c>Cancel</c> property of <see cref="T:Syncfusion.Blazor.TreeGrid.BeforeCellPasteEventArgs`1"/> property.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeData" @ref="TreeGrid" >
            <TreeGridEvents TValue="BusinessObject" BeforeCellPaste="CellPaste"></TreeGridEvents>
            </SfTreeGrid>
            @code{
             public async Task Paste(BeforeCellPasteEventArgs<BusinessObject> args)
             {
              if(ColumnIndex == 1 && RowIndex == 4){
                  //you can modified the content to be paste here.
                 args.CellValue = "Modified value";
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnLoad">
            <summary>
            An event that is raised before rendering of TreeGrid Component.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:System.Object"/> object which provides the details of the tree grid before initial rendering.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents TValue="BusinessObject" OnLoad="LoadHandler"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void LoadHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.QueryCellInfo">
            <summary>
            An event that is raised every time a tree grid cell is rendered or refreshed.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1"/> object which provides the details of the tree grid cell. Customizations for tree grid cell element can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents QueryCellInfo="QueryCellInfoHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void QueryCellInfoHandler(QueryCellInfoEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnRecordDoubleClick">
            <summary>
            An event that is raised when tree grid row is double clicked.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs`1"/> object which provides the details of the tree grid row.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.RowDataBound">
            <summary>
            An event that is raised every time a tree grid row is rendered or refreshed.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDataBoundEventArgs`1"/> object which provides the details of the tree grid row. Customizations for tree grid row element can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents RowDataBound="RowDataBoundHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void RowDataBoundHandler(RowDataBoundEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnResizeStart">
            <summary>
            An event that is raised when tree grid column resize starts.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ResizeArgs"/> object which provides the details of the resizing column.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents OnResizeStart="OnResizeStartHanlder" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void OnResizeStartHanlder(ResizeArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.ResizeStopped">
            <summary>
            An event that is raised when tree grid column resize ends.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ResizeArgs"/> object which provides the details of resized column.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents ResizeStopped="ResizeStoppedHanlder" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ResizeStoppedHanlder(ResizeArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.FreezeLineMoving">
            <summary>
            Gets or sets an event callback that is raised on moving freeze line.
            </summary>
            <remarks> 
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FreezeLineMovingEventArgs"/> object which provides the details when frozen line moving.
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfTreeGrid> 
                <TreeGridEvents FreezeLineMoving="FreezeLineMovingHandler" TValue="BusinessObject"></TreeGridEvents> 
            </SfTreeGrid> 
            @code { 
                public void FreezeLineMovingHandler(FreezeLineMoving args) 
                { 
                } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.FreezeLineMoved">
            <summary>
            Gets or sets an event callback that is raised after moved freeze line.
            </summary>
            <remarks> 
            This event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs" /> object which provides the details after frozen line moved.
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfTreeGrid> 
                <TreeGridEvents FreezeLineMoved="FreezeLineMovedHandler" TValue="BusinessObject"></TreeGridEvents> 
            </SfTreeGrid> 
            @code { 
                public void FreezeLineMovedHandler(FreezeLineMoving args) 
                { 
                } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnRowDragStart">
            <summary>
            Gets or sets the event callback that is raised when we start dragging the rows to perform reorder.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDragEventArgs`1"/> object which provides the details of the rows from which it is dragged.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeData" @ref="TreeGrid">
            <TreeGridEvents TValue="BusinessObject" OnRowDragStart="OnRowDragStartHandler"></TreeGridEvents>
            ........
            </SfTreeGrid>
            @code{
            public async Task OnRowDragStartHandler(RowDragEventArgs<BusinessObject> args)
            {
                 //you can get the dragged row data's here
                 List<BusinessObject> Data = args.Data;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.RowDropping">
            <summary>
            Gets or sets the event callback that is raised when the row elements are dropping on the target element. You can cancel the dropping action using this event.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1"/> object which provides the details of the rows which are dropping and the target where the rows are dropping.
            If the dropping action is prevented using the <c>Cancel</c> argument, then the RowDropped event doesn't trigger.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeData" @ref="TreeGrid">
            <TreeGridEvents TValue="BusinessObject" RowDropping="RowDroppingHandler"></TreeGridEvents>
            ........
            </SfTreeGrid>
            @code{
            public async Task RowDroppingHandler(RowDroppingEventArgs<BusinessObject> args)
            {
                 //you can cancel the dropping action here
                 args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.RowDropped">
            <summary>
            Gets or sets the event callback that is raised when row elements are dropped on the target element.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDroppedEventArgs`1"/> object which provides the details of the rows which are dropped and the target where the rows are dropped.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTreeGrid DataSource="@TreeData" @ref="TreeGrid">
            <TreeGridEvents TValue="BusinessObject" RowDropped="RowDroppedHandler"></TreeGridEvents>
            ........
            </SfTreeGrid>
            @code{
            public async Task RowDroppedHandler(RowDroppedEventArgs<BusinessObject> args)
            {
                 //you can get the dropped row data's here
                 List<BusinessObject> Data = args.Data;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.RowDeselected">
            <summary>
            An event that is raised after a selected row is deselected.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1"/> object which provides the details of deselected row.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents RowDeselected="RowDeselectedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void RowDeselectedHandler(RowDeselectEventArgs<BusinessObject> args)
             {
             }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.RowDeselecting">
            <summary>
            An event that is raised when deselecting the selected row.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1"/> object which provides the details of the row to be deselected.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents RowDeselecting="RowDeselectingHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void RowDeselectingHandler(RowDeselectEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.RowSelected">
            <summary>
            An event that is raised after a tree grid row is selected.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowSelectEventArgs`1"/> object which provides the details of selected row.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents RowSelected="RowSelectedHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void RowSelectedHandler(RowSelectEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.RowSelecting">
            <summary>
            An event that is raised before row selection occurs.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1"/> object which provides the details of the row to be selected. Row selection action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents RowSelecting="RowSelectingHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void RowSelectingHandler(RowSelectingEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.CheckboxChange">
            <summary>
            An event that is raised when checkbox column state changed.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.CheckBoxChangeEventArgs`1"/> object which provides the details of checkbox column state with the corresponding record and column details.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
              <TreeGridEvents CheckboxChange="CheckboxChangeHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void CheckboxChangeHandler(CheckBoxChangeEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnToolbarClick">
            <summary>
            An event that is raised when toolbar item is clicked.
            </summary>
            <remarks>
            This event handler receives a <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnToolbarClick"/> object which provides the details about the toolbar item. Custom actions for custom toolbar items can be performed using this event.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })">
              <TreeGridEvents OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.ExcelQueryCellInfoEvent">
            <summary>
            An even that is raised every time a data is entered into a cell of the excel sheet.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs`1"/> object which provides the details before the tree grid data is exported to the Excel file.
            It can be used to customize the tree grid content in Excel file.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid AllowExcelExport="true" Toolbar="@(new List<string>() { "Excel Export" })">
              <TreeGridEvents ExcelQueryCellInfoEvent="ExcelQueryCellInfoHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             SfTreeGrid<BusinessObject> TreeGrid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "Excel Export")
              {
               await this.TreeGrid.ExcelExport();
              }
             }
             public void RowSelectedHandler(RowSelectEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.PdfQueryCellInfoEvent">
            <summary>
            An event that is raised every time a data is entered into a cell of the pdf document.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs`1"/> object which provides the details before the tree grid data is exported to PDF document.
            It can be used to customize the tree grid content in a PDF document.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid AllowPdfExport="true" Toolbar="@(new List<string>() { "PdfExport" })">
              <TreeGridEvents PdfQueryCellInfoEvent="PdfQueryCellInfoHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
             SfTreeGrid<BusinessObject> TreeGrid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "PDF Export")
              {
               await this.TreeGrid.PdfExport();
              }
             }
             public void PdfQueryCellInfoHandler(PdfQueryCellInfoEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridEvents`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn">
            <summary>
            Configures Tree Grid filter column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.Field">
            <summary>
            Defines the Field name of the filter column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.IgnoreAccent">
            <summary>
            If IgnoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.MatchCase">
            <summary>
            If MatchCase set to true, then filter records with exact match or else
            filter records with case insensitive(uppercase and lowercase letters treated as same).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.Operator">
            <summary>
            Defines the Operator to filter records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.Predicate">
            <summary>
            Defines the relationship between one filter query and another by using AND or OR predicate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.Uid">
            <summary>
            Defines the UID of filter column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.Value">
            <summary>
            Defines the value used to filter records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.ActualValue">
            <summary>
            Defines the Actual value used to filter records.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumns">
            <summary>
            Configures Tree Grid filter columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumns.Columns">
            <summary>
            Defines the filter column collection. Use <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumn"/> component.
            to define filter criteria.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridFilterColumns.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings">
            <summary>
            Configures Tree Grid filter settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.Columns">
            <summary>
            Specifies the columns to be filtered at initial rendering of the TreeGrid. You can also get the columns that were currently filtered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.HierarchyMode">
            <summary>
            Defines the filter types. The available options are,
            Parent: Shows the filtered record with parent record.
            Child: Shows the filtered record with child record.
            Both : shows the filtered record with both parent and child record.
            None : Shows only filtered record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.IgnoreAccent">
            <summary>
            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.ImmediateModeDelay">
            <summary>
            Defines the time delay (in milliseconds) in filtering records when the `Immediate` mode of filter bar is set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.Mode">
            <summary>
            Defines the filter bar modes. The available options are,
             `OnEnter`: Initiates filter operation after Enter key is pressed.
             `Immediate`: Initiates filter operation after a certain time interval. By default, time interval is 1500 ms.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.Operators">
            <summary>
            The `Operators` is used to override the default operators in filter menu. This should be defined by type wise
            (string, number, date and boolean). Based on the column type, this customize operator list will render in filter menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.ShowFilterBarStatus">
            <summary>
            Shows or hides the filtered status message on the pager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.Type">
            <summary>
            Defines options for filtering type. The available options are
             `Menu` - Specifies the filter type as menu.
             `FilterBar` - Specifies the filter type as filterbar.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values from parent component.
            </summary>
            <param name="key">Child property name.</param>
            <param name="value">Child property value.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridFilterSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings">
            <summary>
            Configures Tree Grid key settings.
            </summary>
            <remarks>
            The properties set to TreeGridKeySettings will handle and/or prevent hot key's default action.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTreeGrid @ref="TreeGrid" DataSource="@TreeGridData">
            <TreeGridKeySettings MoveLeftCell="Shift+Left" MoveRightCell="Tab" MoveUpCell="UpArrow" MoveDownCell=""></TreeGridKeySettings>
            ........
            </SfTreeGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings.MoveLeftCell">
            <summary>
            Defines the action keys for the left cell movement.
            <list type="bullet">
            <item>
            <term>Shift+Tab</term>
            <description>Moves to left cell on pressing Shift+Tab key</description>
            </item>
            <item>
            <term>ArrowLeft</term>
            <description>Moves to left cell on pressing LeftArrow key</description>
            </item>
            <item>
            <term>ShiftLeft</term>
            <description>Moves to left cell on pressing Shift+LeftArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Shift+Tab,LeftArrow,Shift+LeftArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings.MoveRightCell">
            <summary>
            Defines the action keys for the right cell movement.
            <list type="bullet">
            <item>
            <term>Tab</term>
            <description>Moves to right cell on pressing Tab key</description>
            </item>
            <item>
            <term>RightArrow</term>
            <description>Moves to right cell on pressing RightArrow key</description>
            </item>
            <item>
            <term>Shift+RightArrow</term>
            <description>Moves to right cell on pressing Shift+RightArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Tab,RightArrow,Shift+RightArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings.MoveUpCell">
            <summary>
            Defines the action keys for the up cell movement.
            <list type="bullet">
            <item>
            <term>Shift+Enter</term>
            <description>Moves to top cell on pressing Shit+Enter key</description>
            </item>
            <item>
            <term>UpArrow</term>
            <description>Moves to top cell on pressing UpArrow key</description>
            </item>
            <item>
            <term>Shift+UpArrow</term>
            <description>Moves to top cell on pressing Shift+UpArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Shift+Enter,UpArrow,Shift+UpArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings.MoveDownCell">
            <summary>
            Defines the action keys for the down cell movement.
            <list type="bullet">
            <item>
            <term>Enter</term>
            <description>Moves to down cell on pressing Enter key</description>
            </item>
            <item>
            <term>DownArrow</term>
            <description>Moves to down cell on pressing DownArrow key</description>
            </item>
            <item>
            <term>Shift+DownArrow</term>
            <description>Moves to down cell on pressing Shift+DownArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Enter,DownArrow,Shift+DownArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings.IndentRow">
            <summary>
            Defines the action keys for indenting the row.
            <list type="bullet">
            <item>
            <term>Alt+Shift+RightArrow</term>
            <description>Indent the row on pressing Alt+Shift+RightArrow keys</description>
            </item>
            </list>
            <value>
            The default value is <b>Alt+Shift+RightArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridKeySettings.OutdentRow">
            <summary>
            Defines the action keys for outdenting the row.
            <list type="bullet">
            <item>
            <term>Alt+Shift+LeftArrow</term>
            <description>Indent the row on pressing Alt+Shift+LeftArrow keys</description>
            </item>
            </list>
            <value>
            The default value is <b>AltShiftLeft</b>.
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings">
            <summary>
            Configures Tree Grid page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.CurrentPage">
            <summary>
            Defines the current page number of the pager in TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.EnableQueryString">
            <summary>
            If EnableQueryString is set to true,
            then it pass current page information as a query string along with the URL while navigating to other page in TreeGrid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.PageCount">
            <summary>
            Defines the number of pages to be displayed in the TreeGrid pager container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.PageSize">
            <summary>
            Defines the number of records to be displayed in TreeGrid per page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.PageSizeMode">
            <summary>
            Specifies the mode of record count in a page. The options are,
             All: Count all the records.
             Root: Count only zeroth level parent records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.PageSizes">
            <summary>
            If PageSizes set to true or Array of values,
            It renders DropDownList in the pager of TreeGrid which allow us to select pageSize from DropDownList.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.Template">
            <summary>
            Defines the template which renders customized elements in pager instead of default elements.
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Navigations.PagerTemplateContext"/> of the grid.
            </remarks>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridPageSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridRowDropSettings">
            <summary>
            Configures Tree Grid rowdrop settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridRowDropSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridRowDropSettings.TargetID">
            <summary>
            Defines the ID of droppable component on which row drop should occur.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridRowDropSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridRowDropSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings">
            <summary>
            Configures Tree Grid search settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings.Fields">
            <summary>
            Specifies the columns to be searched at initial rendering of the TreeGrid. You can also get the columns that were currently filtered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings.HierarchyMode">
            <summary>
            Defines the filter types. The available options are,
             Parent: Searches only the parent records with the specified Key.
             Child: Searches only the child records with the specified Key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings.IgnoreAccent">
            <summary>
            If IgnoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.
            </summary>
            <remarks>Ignore Accent is supported by remote data alone.
            IgnoreAccent key will be sent to server and operation should be handled at user level.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings.IgnoreCase">
            <summary>
            If IgnoreCase is set to true, then search ignores the diacritic characters or accents while filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings.Key">
            <summary>
            A key word for searching the TreeGrid content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings.Operator">
            <summary>
            Defines the operator to search records.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSearchSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings">
            <summary>
            Configures Tree Grid sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.CellSelectionMode">
            <summary>
            The cell selection modes are flow and box. It requires the selection
            Mode to be either Cell or Both.
            Flow: Selects the range of cells between start index and end index that also includes the other cells of the selected rows.
            Box: Selects the range of cells within the start and end column indexes that includes in between cells of rows within the range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.CheckboxMode">
            <summary>
            Defines options for checkbox selection Mode. They are
             Default: This is the default value of the checkboxMode. In this mode, user can select multiple rows by clicking rows one by one.
             ResetOnRowClick: In ResetOnRowClick mode, on clicking a row it will reset previously selected row and also multiple
             rows can be selected by using CTRL or SHIFT key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.CheckboxOnly">
            <summary>
            If CheckboxOnly set to true, then the TreeGrid selection is allowed only through checkbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.Mode">
            <summary>
            TreeGrid supports row, cell, and both (row and cell) selection mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.PersistSelection">
            <summary>
            If PersistSelection set to true, then the TreeGrid selection is persisted on all operations.
            For persisting selection in the TreeGrid, any one of the column should be enabled as a primary key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.EnableToggle">
            <summary>
            If EnableToggle set to true, then the user can able to perform toggle for the selected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.MultiSelectWithClick">
            <summary>
            If RowMultiSelectWithClick is set to true, then the user can able to perform multiple row selection with single clicks.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.Type">
            <summary>
            Defines options for selection type. They are
             Single: Allows selection of only a row or a cell.
             Multiple: Allows selection of multiple rows or cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.AllowDragSelection">
            <summary>
            Gets or sets whether to enable selection of multiple rows and cells by dragging mouse.
            </summary>
            <value>
            <c>true</c> if the row and cell selection enabled when dragging mouse. Otherwise, false. The default value is false.
            </value>
            <remarks>
            To perform drag selection in Blazor TreeGrid, set <see cref="P:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.Type"/> as <c>Multiple</c>.
            </remarks>
            <example>
            In the below code example, enabled AllowDragSelection property 
            <code><![CDATA[
            <SfTreeGrid @ref="Treegrid">
            <TreeGridSelectionSettings AllowDragSelection = "true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" >
            ........
            </SfTreeGrid>]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSelectionSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridSortColumn">
            <summary>
            Configures Tree Grid sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSortColumn.Direction">
            <summary>
            Defines the direction of sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSortColumn.Field">
            <summary>
            Defines the field name of sort column.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSortColumn.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSortColumn.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridSortColumns">
            <summary>
            Configures Tree Grid sort columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSortColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSortColumns.Columns">
            <summary>
            Gets the sorted columns collection, use <see cref="T:Syncfusion.Blazor.TreeGrid.TreeGridSortColumn"/> component.
            To set initial sort columns.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSortColumns.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings">
            <summary>
            Configures Tree Grid sort settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings.AllowUnsort">
            <summary>
            If AllowUnsort set to false the user can not get the TreeGrid in unsorted state by clicking the sorted column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings.Columns">
            <summary>
            Specifies the columns to sort at initial rendering of TreeGrid.
            Also user can get current sorted columns.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values from parent component.
            </summary>
            <param name="key">Child property name.</param>
            <param name="value">Child property value.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridSortSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridTemplates">
            <summary>
            Configures Tree Grid templates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridTemplates.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridTemplates.RowTemplate">
            <summary>
            Gets or sets the row template to customize row elements.
            </summary>
            <remarks>
            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.
            The parameters passed to the templates can be accessed using the implicit parameter named <c>context</c>.
            The context is a type of TValue.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridTemplates.DetailTemplate">
            <summary>
            Gets or sets the template to customize detail row element.
            </summary>
            <remarks>
            Use the DetailTemplate to render hierarchy treegrid. It supports N level of nested grids.
            The parameters passed to the templates can be accessed using the implicit parameter named <c>context</c>.
            The context is a type of TValue.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridTemplates.ToolbarTemplate">
            <summary>
            Render custom toolbar using the ToolbarTemplate property. It replaces the in-built toolbar
            and click actions must be handled in the custom toolbar itself.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridTemplates.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.TreeGrid.TreeGridTextWrapSettings">
            <summary>
            Configures Tree Grid text wrap settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridTextWrapSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.TreeGrid.TreeGridTextWrapSettings.WrapMode">
            <summary>
            Defines the WrapMode of the TreeGrid. The available modes are:
             Both: Wraps both the header and content.
             Content: Wraps the header alone.
             Header: Wraps the content alone.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridTextWrapSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start, having received its initial
            parameters from its parent in the render tree. Override this method if you will perform an asynchronous
            operation and want the component to refresh when that operation is completed.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.TreeGrid.TreeGridTextWrapSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
    </members>
</doc>
