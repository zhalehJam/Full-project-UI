<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor.Diagram</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Diagram.ContextMenuSettings">
             <summary>
             Represents a shortcut menu
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent @ref="diagram" Height="600px" Width="90%" @bind-Nodes="nodes" >
            <ContextMenuSettings @bind-Show="@show" @bind-ShowCustomMenuOnly="@customMenuOnly" @bind-Items="@Items" ContextMenuOpening="@BeforeOpen" ContextMenuItemClicked="@ItemClicked">
            </ContextMenuSettings>
            </SfDiagramComponent>
             @code {
            SfDiagramComponent diagram;
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
            ContextMenuSettings ContextMenuSettings;
            List<ContextMenuItem> Items;
            bool customMenuOnly = false;
            bool show = true;
            protected override void OnInitialized()
            {
            
                Items = new List<ContextMenuItem>()
                {
                         new ContextMenuItem()
                        {
                            Text = "Save As...",
                            Id = "save",
                            IconCss = "e-save",
                        },
                        new ContextMenuItem()
                        {
                            Text = "Group",
                            Id = "load",
                            IconCss = "e-group"
                        }
                };
               Node node = new Node()
               {
                 // Position of the node
                 OffsetX = 250,
                 OffsetY = 250,
                 // Size of the node
                 Width = 100,
                 Height = 100,
                   };
                   nodes.Add(node);
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.Show">
             <summary>
             Gets or sets a value indicates whether the contextmenu is displayed.
             </summary>
             <value>true, the context menu can be enabled; Otherwise false.</value>
             <remarks>
             By default, the Show is set to false. The context menu can be enabled by setting the Show to true.
             </remarks>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent>
            <ContextMenuSettings @bind-Show="@show"  @bind-Items="@Items">
            </ContextMenuSettings>
            <SfDiagramComponent>
             @code {
            bool show = true;
            protected override void OnInitialized()
            {
            
                Items = new List<ContextMenuItem>()
                {
                         new ContextMenuItem()
                        {
                            Text = "Save As...",
                            Id = "save",
                            IconCss = "e-save",
                        },
                };
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.Items">
             <summary>
            Gets or sets a value indicating the collection of ContextMenuItem objects associated with the menu.
             </summary> 
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent>
            <ContextMenuSettings  @bind-Items="@Items" >
            </ContextMenuSettings>
             </SfDiagramComponent>
             @code {
            protected override void OnInitialized()
            {
            
                Items = new List<ContextMenuItem>()
                {
                         new ContextMenuItem()
                        {
                            Text = "Save As...",
                            Id = "save",
                            IconCss = "e-save",
                        },
                };
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.ShowCustomMenuOnly">
             <summary>
             Gets or sets the value indicates whether the custom menu items are displayed.
             </summary>
             <remarks>
             By default, the ShowCustomMenuOnly is set to false. The context menu can be enabled by setting the ShowCustomMenuOnly to true.
             </remarks>
             <example>
             <code lang="Razor">
             <![CDATA[
            <ContextMenuSettings @bind-Show="@show" @bind-ShowCustomMenuOnly="@customMenuOnly" >
            </ContextMenuSettings>
             @code {
            bool customMenuOnly = false;
            bool show = true;
            protected override void OnInitialized()
            {
            
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.ShowChanged">
            <summary>
            Specifies the callback to trigger when show value changes
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.ItemsChanged">
            <summary>
            Specifies the callback to trigger when Items value changes
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.ShowCustomMenuOnlyChanged">
            <summary>
            Specifies the callback to trigger when ShowCustomMenuOnly value changes
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.ContextMenuOpening">
            <summary>
            Gets or sets the callback to trigger before opening context menu
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.ContextMenuItemClicked">
            <summary>
            Gets or sets the callback to trigger while menu items gets clicked
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ContextMenuSettings.ContextMenuDefaultItems">
            <summary>
            Gets or sets instance of  SfDiagramComponent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.ContextMenuTemplate">
             <summary>
             Represents segment of UI rendered for the context menu items.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent>
            <ContextMenuSettings>
            <ContextMenuTemplate>
                @context.Text
                <span class="shortcut">@((@context.Text == "Save As...") ? "Ctrl + S" : "")</span>
            </ContextMenuTemplate>
            </ContextMenuSettings>
            </SfDiagramComponent>
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuSettings.ChildContent">
            <summary>
            Gets or sets the child content of ContextMenuSettings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ContextMenuSettings"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ContextMenuSettings"/> class.
            </summary>
            <param name="parent">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.OnInitializedAsync">
            <summary>
            This method is invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering, otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.GetMenuItems">
            <summary>
            Get the context menu items. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.ContextMenuItemClick(Syncfusion.Blazor.Navigations.MenuEventArgs{Syncfusion.Blazor.Diagram.ContextMenuItem})">
            <summary>
            Invoke when contextmenu item clicked. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.EnsureItems(Syncfusion.Blazor.Diagram.ContextMenuItem)">
            <summary>
            It used to hide unnessary items item when perform right click on the diagram with respect to target
            </summary>
            <param name="Item">ContextMenuItem</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.ContextMenuBeforeOpen(Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs{Syncfusion.Blazor.Diagram.ContextMenuItem})">
            <summary>
            Invoke when performing right click on the diagram or the diagram elements such as Node, Connector and Groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.GetItems(System.String,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.ContextMenuItem})">
            <summary>
            Used to get the context menu items.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.EnsureTarget(Syncfusion.Blazor.Diagram.ContextMenuItem)">
            <summary>
            Used to ensure target items.
            </summary>
            <param name="Item">ContextMenuItem</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.GenerateId(System.String)">
            <summary>
            To generate id for context menu item.
            </summary>
            <param name="item">string</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.GetKeyFromId(System.String)">
            <summary>
            To filter context menu item when performing some operartion on default itmes.
            </summary>
            <param name="id">string</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.BuildDefaultItems(System.String)">
            <summary>
            To set proeprty for default items.
            </summary>
            <param name="Id">string</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.PropertyUpdate(Syncfusion.Blazor.Diagram.ContextMenuSettings)">
            <summary>
            Used to update property value.
            </summary>
            <param name="contextMenuSettings">ContextMenuSettings</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ContextMenuSettings.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BackgroundStyle">
            <summary>
            Represents the characteristics of the background of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.Parent">
            <summary>
            Gets or sets instance of  PageSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageSourceChanged">
            <summary>
            Specifies the callback to trigger when the Source value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.BackgroundChanged">
            <summary>
            Specifies the callback to trigger when the color value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageScaleChanged">
            <summary>
            Specifies the callback to trigger when the scale value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageAlignChanged">
            <summary>
            Specifies the callback to trigger when the align value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageSource">
            <summary>
            Defines the source of the background image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.Background">
            <summary>
            Defines the background color of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageScale">
            <summary>
            Defines how the background image should be scaled/stretched.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BackgroundStyle.ImageAlign">
            <summary>
            Defines how to align the background image over the diagram area.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BackgroundStyle.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BackgroundStyle.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BackgroundStyle.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering, otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BackgroundStyle.PropertyUpdate(Syncfusion.Blazor.Diagram.BackgroundStyle)">
            <summary>
            Used to update property value.
            </summary>
            <param name="background">BackgroundStyle</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BackgroundStyle.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PageMargin">
            <summary>
            Represents the margin of the diagram page.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <PageSettings >
                    <PageMargin Left = "@marginLeft" Right="@marginRight" Top="@marginTop" Bottom="@marginBottom"></PageMargin>
                </PageSettings>
            </SfDiagramComponent>
            @code
            {
                double marginLeft = 10;
                double marginRight = 10;
                double marginTop = 10;
                double marginBottom = 10;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageMargin.Parent">
            <summary>
            Gets or sets instance of  PageSettings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageMargin.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageMargin.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageMargin.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageMargin.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PageSettings">
            <summary>
            Specifies how to customize the appearance, width, and height of the diagram page.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <PageSettings Width = "@PageWidth" Height="@PageHeight" Orientation="@pageOrientation" MultiplePage="@IsMultiplePage" ShowPageBreaks="@IsShowPageBreaks">
                    <PageMargin Left = "@marginLeft" Right="@marginRight" Top="@marginTop" Bottom="@marginBottom"></PageMargin>
                </PageSettings>
            </SfDiagramComponent>
            @code
            {
                double PageWidth = 300;
                double PageHeight = 300;
                PageOrientation pageOrientation = PageOrientation.Landscape;
                bool IsMultiplePage = true;
                bool IsShowPageBreaks = true;
                double marginLeft = 10;
                double marginRight = 10;
                double marginTop = 10;
                double marginBottom = 10;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Parent">
            <summary>
            Gets or sets instance of  SfDiagramComponent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.WidthChanged">
            <summary>
            Specifies the callback to trigger when the width value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.HeightChanged">
            <summary>
            Specifies the callback to trigger when the height value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.OrientationChanged">
            <summary>
            Specifies the callback to trigger when the Orientation value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.BoundaryConstraintsChanged">
            <summary>
            Specifies the callback to trigger when the BoundaryConstraints value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.ShowPageBreaksChanged">
            <summary>
            Specifies the callback to trigger when the ShowPageBreaks value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.MultiplePageChanged">
            <summary>
            Specifies the callback to trigger when the MultiplePage value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.BackgroundChanged">
            <summary>
            Specifies the callback to trigger when the Background value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.MarginChanged">
            <summary>
            Specifies the callback to trigger when the Margin value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.ChildContent">
            <summary>
            Gets or sets the child content of the page settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Width">
            <summary>
            Gets or sets the width of the diagram page.
            </summary>
            <example>
            <code>
            <![CDATA[
                <PageSettings Width = "@PageWidth" >
                </PageSettings>
            @code
            {
                double PageWidth = 300;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Height">
            <summary>
            Gets or sets the height of the diagram page.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <PageSettings Height="@PageHeight" >
                </PageSettings>
            </SfDiagramComponent>
            @code
            {
                double PageHeight = 300;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Orientation">
            <summary>
            Gets or sets the orientation of the page in the diagram. By default, the orientation of the page is set to landscape.
            </summary>
            <value>The default value is <see cref="F:Syncfusion.Blazor.Diagram.PageOrientation.Landscape"/></value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <PageSettings Orientation="@pageOrientation" >
                </PageSettings>
            </SfDiagramComponent>
            @code
            {
                PageOrientation pageOrientation = PageOrientation.Landscape;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.BoundaryConstraints">
            <summary>
            Allows the user to customize the interactive region.
            </summary>
            <value>The default value is <see cref="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Infinity"/></value>
            <remarks>
            The boundary constraints property restricts or customizes the interactive region, out of which the elements cannot be dragged, resized or rotated.
            </remarks>
            <example>
            <code>
            <![CDATA[
              <SfDiagramComponent>
                <PageSettings  BoundaryConstraints="@boundaryConstraints" >
                </PageSettings>
            </SfDiagramComponent>
            @code
            {
                BoundaryConstraints boundaryConstraints = BoundaryConstraints.Diagram;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.MultiplePage">
            <summary>
            Allows users to enable or disable multiple pages.
            </summary>
            <value>true, the multiple pages can be enabled; Otherwise false.</value>
            <remarks>
            When multiple pages are enabled, the size of the page dynamically increases or decreases to split the single page into multiple pages and completely fit the diagram within the page boundaries. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <PageSettings   MultiplePage="@IsMultiplePage" >
                </PageSettings>
            </SfDiagramComponent>
            @code
            {
                bool IsMultiplePage = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.ShowPageBreaks">
            <summary>
            Allows the user to enable or disable the page break lines.
            </summary>
            <value>true, the page break lines can be enabled; Otherwise false.</value>
            <remarks>
            The ShowPageBreaks property is used as a visual guide to see how pages are split into multiple pages. By default, it is false. If it is true, then the page break lines will be visible.
            </remarks>
            <example>
            <code>
            <![CDATA[
             <SfDiagramComponent>
                <PageSettings  ShowPageBreaks="@IsShowPageBreaks">
                </PageSettings>
            </SfDiagramComponent>
            @code
            {
                bool IsShowPageBreaks = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Margin">
            <summary>
            Specifies the extra space around the diagram content. The default values for the margin are set to 25 on all sides.
            </summary>
            <value>The default values for the margin are set to 25 on all sides.</value>
            <example>
            <code>
             <SfDiagramComponent>
                <PageSettings Width = "@PageWidth" Height="@PageHeight" Orientation="@pageOrientation" MultiplePage="@IsMultiplePage" ShowPageBreaks="@IsShowPageBreaks">
                    <PageMargin Left = "10" Right="10" Top="10" Bottom="10"></PageMargin>
                </PageSettings>
              </SfDiagramComponent>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Background">
            <summary>
            Defines the page background.
            </summary>
            <remarks>
            Users can customize the background of the diagram page by using the background property.  The Source property of background allows the user to set the path of the image to the background, whereas the Color property of the background allows the user to set a color to the background of the diagram page. By default, it is set to transparent.
            </remarks>
            <value>The default value is transparent.</value>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.ValidatePageSize">
            <summary>
            Validate the page size.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.Initialize">
            <summary>
            Initialize the pagesetting.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.UpdateBackgroundValues(Syncfusion.Blazor.Diagram.BackgroundStyle)">
            <summary>
            To update page background values.
            </summary>
            <param name="background">BackgroundStyle</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.UpdateMarginValues(Syncfusion.Blazor.Diagram.PageMargin)">
            <summary>
            To update page margin values.
            </summary>
            <param name="margin">PageMargin</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.PropertyUpdate(Syncfusion.Blazor.Diagram.PageSettings)">
            <summary>
            Used to update property value of pagesettings.
            </summary>
            <param name="pageSettings">PageSettings</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PageSettings.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramExportSettings">
            <summary> 
            Represents the configuration settings for exporting the diagram. 
            </summary> 
            <example>
            <code>
            <![CDATA[
             <SfDiagramComponent>
            <PageSettings Width = "@PageWidth" Height="@PageHeight" Orientation="@pageOrientation" MultiplePage="@IsMultiplePage" ShowPageBreaks="@IsShowPageBreaks"/>
            </SfDiagramComponent>
            @code
            {
                double PageWidth = 300;
                double PageHeight = 300;
                PageOrientation pageOrientation = PageOrientation.Landscape;
                bool IsMultiplePage = true;
                bool IsShowPageBreaks = true;
               private async Task<string[]> OnExportEntry()
               {
                 DiagramExportSettings print = new DiagramExportSettings();
                 print.PageHeight = PageHeight;
                 print.PageWidth = PageWidth;
                 print.Orientation = orientation;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.PageHeight">
            <summary> 
            Gets or sets the height of the page to be printed. 
            </summary> 
            <value>The height of the page to be printed. The default value will be <see cref="P:Syncfusion.Blazor.Diagram.PageSettings.Height"/>.</value> 
            <example>
            <code>
            <![CDATA[
             <SfDiagramComponent>
            <PageSettings  Height="@PageHeight" 
            </SfDiagramComponent>
            @code
            {
                double PageHeight = 300;
               private async Task<string[]> OnExportEntry()
               {
                 DiagramExportSettings print = new DiagramExportSettings();
                 print.PageHeight = PageHeight;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.PageWidth">
            <summary> 
            Gets or sets the width of the page to be printed. 
            </summary> 
            <value>The width of the page to be printed. The default value will be <see cref="P:Syncfusion.Blazor.Diagram.PageSettings.Width"/>.</value> 
            <example>
            <code>
            <![CDATA[
             <SfDiagramComponent>
            <PageSettings Width = "@PageWidth" />
            </SfDiagramComponent>
            @code
            {
                double PageWidth = 300;
               private async Task<string[]> OnExportEntry()
               {
                 DiagramExportSettings print = new DiagramExportSettings();
                 print.PageWidth = PageWidth;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.Margin">
            <summary> 
            Gets or sets the margin of the page to be printed/exported. 
            </summary> 
            <value>Space around the content to be printed/exported.The default value for margin is 25 for all sides.</value> 
            <example>
            <code>
            <![CDATA[
             <SfDiagramComponent>
            <PageSettings />
            </SfDiagramComponent>
            @code
            {
               private async Task<string[]> OnExportEntry()
               {
                 DiagramExportSettings print = new DiagramExportSettings();
                 print.Margin = new DiagramThickness() { Left = 10, Top = 10, Right = 10, Bottom = 10 };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.Orientation">
            <summary> 
            Gets or sets the orientation of the page to be printed. 
            </summary> 
            <value>One of the <see cref="T:Syncfusion.Blazor.Diagram.PageOrientation"/> enumeration values. The default value is <see cref="F:Syncfusion.Blazor.Diagram.PageOrientation.Landscape"/>. </value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings  Orientation="@pageOrientation"/>
            </SfDiagramComponent>
            @code
            {
                PageOrientation pageOrientation = PageOrientation.Landscape;
               private async Task<string[]> OnExportEntry()
               {
                 DiagramExportSettings print = new DiagramExportSettings();
                 print.Orientation = orientation;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.FitToPage">
            <summary> 
            Gets or sets the value to indicate whether to print or export the entire diagram to single page or multiple pages. 
            </summary> 
            <value> true, if the diagram printed or exported to single page. Otherwise, diagram printed or exported into multiple pages or images. The default value is false. </value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings />
            </SfDiagramComponent>
            @code
            {
               private async Task<string[]> OnExportEntry()
               {
                 DiagramExportSettings print = new DiagramExportSettings();
                 print.FitToPage = true;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.Region">
            <summary> 
            Gets or sets the region in the diagram which need to be printed or exported. 
            </summary> 
            <value>One of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion"/> enumeration values. The default value is <see cref="F:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion.PageSettings"/></value>
            <remarks> 
            * PageSettings - The region within the x,y, width and height values of page settings is printed or exported. 
            * Content – Content of the diagram without empty space around the content is printed or exported. 
            * ClipBounds - The region specified using <see cref="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.ClipBounds"/> property is exported. This is applicable for exporting only. 
            </remarks> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings />
            </SfDiagramComponent>
            @code
            {
               private async Task<string[]> OnExportEntry()
               {
                 DiagramExportSettings print = new DiagramExportSettings();
                 print.Region = DiagramPrintExportRegion.PageSettings;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.ClipBounds">
            <summary> 
            Gets or sets the region that to be exported when <see cref="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.Region"/> is <see cref="F:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion.ClipBounds"/>. 
            </summary> 
            <value>The bounds to be used for clipping area sizing. The default is a <see cref="T:Syncfusion.Blazor.Diagram.DiagramRect"/>(0,0,0,0)</value> 
            <example>
            <code>
            <![CDATA[
             <SfDiagramComponent>
            <PageSettings />
            </SfDiagramComponent>
            @code
            {
               private async Task<string[]> OnExportEntry()
               {
                 DiagramExportSettings print = new DiagramExportSettings();
                 print.ClipBounds = new DiagramRect() { X = 100, Y = 0, Width = 500, Height = 600 };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramPrintSettings">
            <summary> 
            Represents the configuration settings for printing the diagram. 
            </summary> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings Width = "@PageWidth" Height="@PageHeight" Orientation="@pageOrientation" MultiplePage="@IsMultiplePage" ShowPageBreaks="@IsShowPageBreaks" />
            </SfDiagramComponent>
            @code
            {
                double PageWidth = 300;
                double PageHeight = 300;
                PageOrientation pageOrientation = PageOrientation.Landscape;
                bool IsMultiplePage = true;
                bool IsShowPageBreaks = true;
               private async Task OnCustomEntry()
               {
                 DiagramPrintSettings print = new DiagramPrintSettings();
                 print.FitToPage = true;
                 print.PageHeight = PageHeight;
                 print.PageWidth = PageWidth;
                 print.Orientation = orientation;
                 print.Region = DiagramPrintExportRegion.PageSettings;
                 print.Margin = new DiagramThickness() { Left = left, Top = top, Right = right, Bottom = bottom };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.PageHeight">
            <summary> 
            Gets or sets the height of the page to be printed. 
            </summary> 
            <value>The height of the page to be printed. The default value will be <see cref="P:Syncfusion.Blazor.Diagram.PageSettings.Height"/>.</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings  Height="@PageHeight"  />
            </SfDiagramComponent>
            @code
            {
                double PageHeight = 300;
               private async Task OnCustomEntry()
               {
                 DiagramPrintSettings print = new DiagramPrintSettings();
                 print.PageHeight = PageHeight;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.PageWidth">
            <summary> 
            Gets or sets the width of the page to be printed. 
            </summary> 
            <value>The width of the page to be printed. The default value will be <see cref="P:Syncfusion.Blazor.Diagram.PageSettings.Width"/>.</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings Width = "@PageWidth" />
            </SfDiagramComponent>
            @code
            {
                double PageWidth = 300;
               private async Task OnCustomEntry()
               {
                 DiagramPrintSettings print = new DiagramPrintSettings();
                 print.PageWidth = PageWidth;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.Margin">
            <summary> 
            Gets or sets the margin of the page to be printed/exported. 
            </summary> 
            <value>Space around the content to be printed/exported.The default value for margin is 25 for all sides.</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings />
            </SfDiagramComponent>
            @code
            {
               private async Task OnCustomEntry()
               {
                 DiagramPrintSettings print = new DiagramPrintSettings();
                 print.Margin = new DiagramThickness() { Left = left, Top = top, Right = right, Bottom = bottom };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.Orientation">
            <summary> 
            Gets or sets the orientation of the page to be printed. 
            </summary> 
            <value>One of the <see cref="T:Syncfusion.Blazor.Diagram.PageOrientation"/> enumeration values. The default value is <see cref="F:Syncfusion.Blazor.Diagram.PageOrientation.Landscape"/>. </value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings  Orientation="@pageOrientation" />
            </SfDiagramComponent>
            @code
            {
                PageOrientation pageOrientation = PageOrientation.Landscape;
               private async Task OnCustomEntry()
               {
                 DiagramPrintSettings print = new DiagramPrintSettings();
                 print.Orientation = orientation;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.FitToPage">
            <summary> 
            Gets or sets the value to indicate whether to print or export the entire diagram to single page or multiple pages. 
            </summary> 
            <value> true, if the diagram printed or exported to single page. Otherwise, diagram printed or exported into multiple pages or images. The default value is false. </value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings />
            </SfDiagramComponent>
            @code
            {
               private async Task OnCustomEntry()
               {
                 DiagramPrintSettings print = new DiagramPrintSettings();
                 print.FitToPage = true;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.Region">
             <summary> 
             Gets or sets the region in the diagram which need to be printed or exported. 
            </summary> 
             <value>One of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion"/> enumeration values. The default value is <see cref="F:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion.PageSettings"/> </value>
            <remarks> 
             * PageSettings - The region within the x,y, width and height values of page settings is printed or exported. 
             * Content – Content of the diagram without empty space around the content is printed or exported. 
             * ClipBounds - The region specified using <see cref="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.ClipBounds"/> property is exported. This is applicable for exporting only. 
             </remarks> 
             <example>
             <code>
             <![CDATA[
             </SfDiagramComponent>
             <PageSettings  />
             </SfDiagramComponent>
             @code
             {
                private async Task OnCustomEntry()
                {
                  DiagramPrintSettings print = new DiagramPrintSettings();
                  print.Region = DiagramPrintExportRegion.PageSettings;
                }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.ClipBounds">
            <summary> 
            Gets or sets the region that to be exported when <see cref="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.Region"/> is <see cref="F:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion.ClipBounds"/>. 
            </summary> 
            <value>The bounds to be used for clipping area sizing. The default is a <see cref="T:Syncfusion.Blazor.Diagram.DiagramRect"/>(0,0,0,0)</value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings />
            </SfDiagramComponent>
            @code
            {
               private async Task OnCustomEntry()
               {
                 DiagramPrintSettings print = new DiagramPrintSettings();
                 print.ClipBounds = new DiagramRect() { X = 100, Y = 0, Width = 500, Height = 600 };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings">
            <summary> 
            Represents the common configuration settings for printing  and exporting the diagram.  
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.PageHeight">
            <summary> 
            Gets or sets the height of the page to be printed. 
            </summary> 
            <value>The height of the page to be printed. The default value will be <see cref="P:Syncfusion.Blazor.Diagram.PageSettings.Height"/>.</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.PageWidth">
            <summary> 
            Gets or sets the width of the page to be printed. 
            </summary> 
            <value>The width of the page to be printed. The default value will be <see cref="P:Syncfusion.Blazor.Diagram.PageSettings.Width"/>.</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.Margin">
            <summary> 
            Gets or sets the margin of the page to be printed/exported. 
            </summary> 
            <value>Space around the content to be printed/exported.The default value for margin is 25 for all sides.</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.Orientation">
            <summary> 
            Gets or sets the orientation of the page to be printed. 
            </summary> 
            <value>One of the <see cref="T:Syncfusion.Blazor.Diagram.PageOrientation"/> enumeration values. The default value is <see cref="F:Syncfusion.Blazor.Diagram.PageOrientation.Landscape"/>. </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.FitToPage">
            <summary> 
            Gets or sets the value to indicate whether to print or export the entire diagram to single page or multiple pages. 
            </summary> 
            <value> true, if the diagram printed or exported to single page. Otherwise, diagram printed or exported into multiple pages or images. The default value is false. </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.Region">
            <summary> 
            Gets or sets the region in the diagram which need to be printed or exported. 
            </summary> 
            <value>One of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion"/> enumeration values. The default value is <see cref="F:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion.PageSettings"/></value>
            <remarks> 
            * PageSettings - The region within the x,y, width and height values of page settings is printed or exported. 
            * Content – Content of the diagram without empty space around the content is printed or exported. 
            * ClipBounds - The region specified using <see cref="P:Syncfusion.Blazor.Diagram.DiagramPrintSettings.ClipBounds"/> property is exported. This is applicable for exporting only. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.ClipBounds">
            <summary> 
            Gets or sets the region that to be exported when <see cref="P:Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.Region"/> is <see cref="F:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion.ClipBounds"/>. 
            </summary> 
            <value>The bounds to be used for clipping area sizing. The default is a <see cref="T:Syncfusion.Blazor.Diagram.DiagramRect"/>(0,0,0,0)</value> 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollSettings">
            <summary>
            Sets the diagram's current zoom value, zoom factor, scroll state, and viewport size.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings @bind-VerticalOffset="@verticalOffset" @bind-HorizontalOffset="@horizontalOffset" @bind-ScrollLimit="@scrollLimit" @bind-CurrentZoom="@currentZoom" @bind-MinZoom="minZoom" @bind-MaxZoom="@maxZoom">
                </ScrollSettings>
            </SfDiagramComponent>    
            @code
            {
                double verticalOffset { get; set; } = 300;
                double horizontalOffset { get; set; } = -1000;
                ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Infinity;
                double currentZoom { get; set; } = 1;
                double minZoom { get; set; } = 0.2;
                double maxZoom { get; set; } = 1.5;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ScrollableAreaChanged">
            <summary>
            Specifies the callback to trigger when the Scrollable Area changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.Parent">
            <summary>
            Gets or sets instance of  SfDiagramComponent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.HorizontalOffsetChanged">
            <summary>
            Specifies the callback to trigger when the horizontal offset changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.VerticalOffsetChanged">
            <summary>
            Specifies the callback to trigger when the vertical offset changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.CurrentZoomChanged">
            <summary>
            Specifies the callback to trigger when the current zoom changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MinZoomChanged">
            <summary>
            Specifies the callback to trigger when the minimum zoom changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MaxZoomChanged">
            <summary>
            Specifies the callback to trigger when the maximum zoom changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ScrollLimitChanged">
            <summary>
            Specifies the callback to trigger when the scroll limit changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ChildContent">
            <summary>
            Sets the child content for the ScrollSettings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset of the scroller.  
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings  @bind-HorizontalOffset="@horizontalOffset">
                </ScrollSettings>
            </SfDiagramComponent>    
            @code
            {
                double horizontalOffset { get; set; } = -1000;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.VerticalOffset">
            <summary>
            Gets or sets the Vertical offset of the scroller. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings @bind-VerticalOffset="@verticalOffset" />
                </ScrollSettings>
            </SfDiagramComponent>    
            @code
            {
                double verticalOffset { get; set; } = 300;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.CurrentZoom">
            <summary>
            Gets or sets the diagram's currentZoom value. 
            </summary>
            <value>The default value is 1</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings  @bind-CurrentZoom="@currentZoom" >
                </ScrollSettings>
            </SfDiagramComponent>    
            @code
            {
                double currentZoom { get; set; } = 1;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MinZoom">
            <summary>
            Gets or sets the scroller's minimum zoom value.
            </summary>
            <value>The default value is 0.2</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings  @bind-MinZoom="minZoom" >
                </ScrollSettings>
            </SfDiagramComponent>    
            @code
            {
                double minZoom { get; set; } = 0.2;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MaxZoom">
            <summary>
            Gets or sets the scroller's maximum zoom value.
            </summary>
            <value>The default value is 30</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings  @bind-MaxZoom="@maxZoom">
                </ScrollSettings>
            </SfDiagramComponent>    
            @code
            {
                double maxZoom { get; set; } = 1.5;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ScrollLimit">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
            <value>The default value will be <see cref="F:Syncfusion.Blazor.Diagram.ScrollLimitMode.Diagram"/></value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings  @bind-ScrollLimit="@scrollLimit" >
                </ScrollSettings>
            </SfDiagramComponent>    
            @code
            {
                ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Infinity;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ScrollableArea">
            <summary> 
            Get or sets the value rectangle area within the diagram to restrict scrolling beyond this rectangle area within the diagram. Its is applicable only if <see ref="ScrollLimit"/> is set to  <see ref="ScrollLimitMode.Limited"/>
            </summary>
            <value>
            The <see ref="DiagramRect"/> value represents the width, height and position of a rectangle to be scrolled within the diagram region. The defult value is Null.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings  ScrollableArea ="@scrollableArea" ScrollLimit="ScrollLimitMode.Limited">
                </ScrollSettings>
            </SfDiagramComponent>    
            @code
            {
               DiagramRect scrollableArea = new DiagramRect() { X = 0, Y = 0, Width = 300, Height = 300 };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.PropertyInitialized">
            <summary>
            To Initialize the property of scrollsettings
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.UpdateHorizontalValue">
            <summary>
            To update the value of horiozontal offset.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.UpdateVerticalValue">
            <summary>
            To update the value of Vertical offset.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.UpdateCurrentZoomValue">
            <summary>
            To update the value of CurrentZoom value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.PropertyUpdate(Syncfusion.Blazor.Diagram.ScrollSettings)">
            <summary>
            To update the property  of scrollsettings value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ScrollSettings.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramGridLines">
            <summary>
            Represents the visual guidance while dragging or arranging the objects.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent>
                <SnapSettings Constraints="SnapConstraints.ShowLines">
                    <HorizontalGridLines LineColor="blue" LineDashArray="2,2" LineIntervals="@LineInterval">
                    </HorizontalGridLines>
                    <VerticalGridLines LineColor="blue" LineDashArray="2,2" LineIntervals="@LineInterval">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            @code
            {
               //Set the line intervals for the grid lines
               public double[] LineInterval { get; set; } = new double[] 
               {
                    1.25, 14, 0.25, 15, 0.25, 15, 0.25, 15, 0.25, 15
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.ScaledInterval">
            <summary>
            Specifies a set of intervals to snap the objects
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.Parent">
            <summary>
            Gets and sets instance of snapsettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.LineColor">
            <summary>
            Defines the color of the horizontal or vertical grid lines.
            </summary>
            <value>The default color is LIGHTGRAY</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent>
                <SnapSettings Constraints="SnapConstraints.ShowLines">
                    <HorizontalGridLines LineColor="blue" >
                    </HorizontalGridLines>
                    <VerticalGridLines LineColor="blue">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            @code
            {
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.LineDashArray">
            <summary>
            Defines the pattern of dashes and gaps in the horizontal or vertical grid lines.
            </summary>
            <value>The default value is empty</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
             <SfDiagramComponent>
                <SnapSettings Constraints="SnapConstraints.ShowLines">
                    <HorizontalGridLines LineDashArray="2" >
                    </HorizontalGridLines>
                    <VerticalGridLines LineDashArray="2">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            @code
            {
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.LineIntervals">
            <summary>
             The thickness and the space between horizontal/vertical grid lines can be customized by using line intervals.
            </summary>
            <value>The default vaule is { 1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75 } </value> 
            <example>
            <code lang="Razor">
            <![CDATA[
             <SfDiagramComponent>
                <SnapSettings Constraints="SnapConstraints.ShowLines">
                    <HorizontalGridLines  LineIntervals="@LineInterval">
                    </HorizontalGridLines>
                    <VerticalGridLines  LineIntervals="@LineInterval">
                    </VerticalGridLines>
                </SnapSettings>
             </SfDiagramComponent>
            @code
            {
               //Set the line intervals for the grid lines
               public double[] LineInterval { get; set; } = new double[] 
               {
                    1.25, 14, 0.25, 15, 0.25, 15, 0.25, 15, 0.25, 15
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.DotIntervals">
            <summary>
            Represents the pattern of gaps defined by a set of dots.
            </summary>
            <value>The default vaule is { 1, 19, 0.5, 19.5, 0.5, 19.5, 0.5, 19.5, 0.5, 19.5 } </value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent>
                <SnapSettings Constraints="SnapConstraints.ShowLines">
                    <HorizontalGridLines  DotIntervals="@DotInterval">
                    </HorizontalGridLines>
                    <VerticalGridLines  DotIntervals="@DotInterval">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            @code
            {
               //Set the Dot intervals for the grid lines
               public double[] DotInterval { get; set; } = new double[] 
               {
                    1.25, 14, 0.25, 15, 0.25, 15, 0.25, 15, 0.25, 15
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.SnapIntervals">
            <summary>
            Specifies a set of intervals for snapping the objects. By default, the objects are snapped towards the nearest grid line.
            </summary>
            <value>The default vaule is { 20 } </value> 
            <example>
            <code lang="Razor">
            <![CDATA[
             <SfDiagramComponent>
                <SnapSettings Constraints="SnapConstraints.ShowLines">
                    <HorizontalGridLines SnapIntervals="30" >
                    </HorizontalGridLines>
                    <VerticalGridLines SnapIntervals="30" >
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            @code
            {
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.LineColorChanged">
            <summary>
            Specifies the callback to trigger when the line color changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.LineDashArrayChanged">
            <summary>
            Specifies the callback to trigger when the line dash array changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.LineIntervalsChanged">
            <summary>
            Specifies the callback to trigger when the line intervals changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.SnapIntervalsChanged">
            <summary>
            Specifies the callback to trigger when the snap intervals changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramGridLines.DotIntervalsChanged">
            <summary>
            Specifies the callback to trigger when the dot intervals changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramGridLines.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramGridLines.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramGridLines.PropertyUpdate(Syncfusion.Blazor.Diagram.DiagramGridLines)">
            <summary>
            To update property of diagram grid lines.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramGridLines.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HorizontalGridLines">
            <summary>
            Represents the horizontal grid lines of the diagram.
            </summary>
            <remarks>
            Horizontal grid lines provide visual guidance while dragging or arranging   objects on the diagram surface.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px">
                @* Shows vertical grid lines *@
                <SnapSettings Constraints = "SnapConstraints.ShowLines" >
                    @* Customizes the line color and line style to the grid lines*@
                    <HorizontalGridLines LineColor="blue" LineDashArray="2,2" />               
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HorizontalGridLines.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HorizontalGridLines.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SnapSettings">
            <summary>
            Customizes and controls the grid lines and the snap behavior of the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
              <SfDiagramComponent>
                // Shows the horizontal grid lines
                <SnapSettings Constraints ="SnapConstraints.ShowLines" SnapAngle="10">
                    <HorizontalGridLines LineColor = "blue" LineDashArray="2,2">
                    </HorizontalGridLines>
                    <VerticalGridLines LineColor = "blue" LineDashArray="2,2">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.Parent">
            <summary>
            Gets or sets instance of  SfDiagramComponent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.ChildContent">
            <summary>
            Gets or sets the child content of the SnapSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.VerticalGridLines">
            <summary>
            Defines the pattern of vertical grid lines.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <SnapSettings >
                    <VerticalGridLines LineColor = "blue" LineDashArray="2,2">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.HorizontalGridLines">
            <summary>
            Defines the pattern of horizontal grid lines
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <SnapSettings >
                    <HorizontalGridLines LineColor = "blue" LineDashArray="2,2">
                    </HorizontalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.Constraints">
            <summary>
            Enables or disables the features of grid lines and SnapSettings.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.SnapConstraints.All"/>.</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <SnapSettings Constraints ="SnapConstraints.ShowLines" >
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.ConstraintsChanged">
            <summary>
            Specifies the callback to trigger when the constraints changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapDistance">
            <summary>
            Defines the minimum distance between the selected object and the nearest object. By default, it is 5.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <SnapSettings SnapDistance="10">
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapDistanceChanged">
            <summary>
            Specifies the callback to trigger when the SnapObjectDistance changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapAngle">
            <summary>
            SnapAngle defines the angle by which the object needs to be rotated. By default, 5.
            </summary>
            <value>The default snape angle value is 5.</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <SnapSettings  SnapAngle="10">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapAngleChanged">
            <summary>
            Specifies the callback to trigger when the SnaAngle changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.GridType">
            <summary>
            Defines the diagram Grid pattern.
            </summary>
            <remarks>
            The GridType can be set to lines or dots. By default, the GridType is set to lines.
            </remarks>
            <value>The default value will be <see cref="F:Syncfusion.Blazor.Diagram.GridType.Lines"/>.</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <SnapSetting GridType = GridType.Lines >
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.GridTypeChanged">
            <summary>
            Specifies the callback to trigger when the GridType changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.GetLineIntervals(Syncfusion.Blazor.Diagram.SnapSettings,System.Boolean)">
            <summary>
            Get line intervals values
            </summary>
            <param name="snapSettings">SnapSettings</param>
            <param name="isHorizontal">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.ScaleSnapInterval(Syncfusion.Blazor.Diagram.SnapSettings,System.Double)">
            <summary>
            Get snap intervals values
            </summary>
            <param name="snapSettings">SnapSettings</param>
            <param name="scale">bool</param>
            <returns>double</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.GetAttributes(System.Boolean,Syncfusion.Blazor.Diagram.SnapSettings,System.Double)">
            <summary>
            Get line attributes values.
            </summary>
            <param name="snapSettings">SnapSettings</param>
            <param name="horizontalLine">bool</param>
            <param name="scale">double</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.GetHorizontalAttributes(System.Collections.Generic.List{System.Double},System.Double,Syncfusion.Blazor.Diagram.HorizontalGridLines,System.Boolean,Syncfusion.Blazor.Diagram.VerticalGridLines,System.Double,System.Double)">
            <summary>
            Get hroizontal line attributes values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.RenderDotGrid(System.Double,System.Double,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes},System.Boolean,System.String,System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Used to render dot grid lines.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.GetGridDotAttributes(System.Boolean,Syncfusion.Blazor.Diagram.HorizontalGridLines,System.Collections.Generic.List{System.Double},Syncfusion.Blazor.Diagram.VerticalGridLines,System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Get grid dot attributes value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.GetPatternDimension(Syncfusion.Blazor.Diagram.SnapSettings,System.Boolean)">
            <summary>
            Get pattern dimension value.
            </summary>
            <param name="snapSettings">SnapSettings</param>
            <param name="isHeight">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.Initialize">
            <summary>
            Initialize the snap settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.UpdateHorizontalGridValues(Syncfusion.Blazor.Diagram.HorizontalGridLines)">
            <summary>
            Update horizontal grid line values.
            </summary>
            <param name="value">HorizontalGridLines</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.UpdateVerticalGridValues(Syncfusion.Blazor.Diagram.VerticalGridLines)">
            <summary>
            Update vertical grid line values.
            </summary>
            <param name="value">VerticalGridLines</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.UpdateLineSettings(Syncfusion.Blazor.Diagram.SnapSettings)">
            <summary>
            Update horizontal and vertical grid lines.
            </summary>
            <param name="value">SnapSettings</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.RefreshSnapSettings(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Boolean})">
            <summary>
            Used to refresh snap settings values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.PropertyUpdate(Syncfusion.Blazor.Diagram.SnapSettings)">
            <summary>
            Update property of snapsettings.
            </summary>
            <param name="snapSettings">SnapSettings</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.GetPathData(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes})">
            <summary>
            Get path data of attributes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SnapSettings.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.VerticalGridLines">
            <summary>
            Represents the vertical grid lines of the diagram.
            </summary>
            <remarks>
            VerticalGridlines provides the visual guidance while dragging or arranging the objects on the diagram surface.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px">
                @* Shows vertical grid lines *@
                <SnapSettings Constraints = "SnapConstraints.ShowLines" >
                    @* Customizes the line color and line style to the grid lines*@
                    <VerticalGridLines LineColor = "blue" LineDashArray="2,2" />        
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.VerticalGridLines.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.VerticalGridLines.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionController">
            <summary>
            Represents the class that helps to connect the connector with the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectionController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
            <param name="endPoint">It provides diagram element action</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the connector target point or source point and a mouse button is clicked.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse button is clicked on the connector end thumb and the thumb is moved over the diagram.
            </summary>
            <param name="args">Specifies the information about the mouse events</param>
            <returns>IsConnected</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the connector and a mouse button is released.
            </summary>
            <param name="args">Specifies the information about the mouse events</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the connector source or target point.
            </summary>
            <param name="args">Specifies the information about the mouse events</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectionController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorDrawingController">
            <summary>
            Represents the class that is used to draw a connector. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorDrawingController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorDrawingController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
            <param name="endPoint">It provides diagram element action</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorDrawingController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram and a mouse button is pressed.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorDrawingController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse button is clicked on the connector end thumb and the thumb is moved over the diagram.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorDrawingController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the connector and a mouse button is released.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorDrawingController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DragController">
            <summary>
            Represents the class that helps to move (drag) the selected objects.  
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DragController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is clicked.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is released. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DragController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ExpandAndCollapseController">
            <summary>
            Represents the class that is used to Expand or collapse nodes when the Expand/Collapse icon is clicked. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ExpandAndCollapseController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ExpandAndCollapseController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ExpandAndCollapseController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is released. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ExpandAndCollapseController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandleController">
            <summary>
            Represents the class that is used to handle the fixed user handle events. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandleController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.FixedUserHandleController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandleController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse clicks on the fixed user handle.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandleController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommonController">
            <summary>
            Represents the class for all common tools.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram element and a mouse button is pressed.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram element and a mouse button is released.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the diagram element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.InteractionControllerBase">
            <summary>
            Represents the interactive tools.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.CommandHandler">
            <summary>
            Gets or sets the instance of commandhandler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.InAction">
            <summary>
            Allows to decide whether an element in action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.CurrentPosition">
            <summary>
            Gets or sets the current position of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.PreviousPosition">
            <summary>
            Gets or sets the previous position of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.StartPosition">
            <summary>
            Gets or sets the starting point of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.CurrentElement">
            <summary>
            Gets or sets the current selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.MouseDownElement">
            <summary>
            Gets or sets the element on which mouse is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.UndoElement">
            <summary>
            Gets or sets the undo element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.InteractionControllerBase.UndoParentElement">
            <summary>
            Gets or sets the undo parent element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.InteractionControllerBase"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.StartAction(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method triggers when an action is going to start.
            </summary>
            <param name="currentElement"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is released.  
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.EndAction">
            <summary>
            This method triggers when an action is going to end.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.InteractionControllerBase.UpdateSize(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            This method invokes when the size of the rect is updated.
            </summary>
            <param name="shape">Selector</param>
            <param name="startPoint">Point</param>
            <param name="endPoint">Point</param>
            <param name="corner">DiagramElementAction</param>
            <param name="initialBounds">DiagramRect</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LabelController">
            <summary>
             Represents the class that is used to open the hyperlink from the node’s annotation at mouse up. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LabelController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.LabelController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LabelController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse pointer is moved over the annotation hyperlink and a mouse button is released.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LabelController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeDrawingController">
            <summary>
            Represents the class that is used to draw a node that is defined by the user. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeDrawingController.prevPosition">
            <summary>
            the previous mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeDrawingController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeDrawingController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeDrawingController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram and a mouse button is pressed.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeDrawingController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse button is pressed and a mouse pointer is moved over the diagram.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeDrawingController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the node and a mouse button is released.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeDrawingController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PolygonDrawingController">
            <summary>
            Represents the class that is used to draw a polygon shape node dynamically using the polygon Tool. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolygonDrawingController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.PolygonDrawingController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolygonDrawingController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse down event occurs with a drawing tool and polygon shapes in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolygonDrawingController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse move event occurs with a drawing tool and polygon shapes in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolygonDrawingController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PolylineDrawingController">
            <summary>
            Represents the class that is used to draw a polyline connector dynamically using the PolyLine Drawing Tool. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolylineDrawingController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.PolylineDrawingController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolylineDrawingController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse down event occurs with a drawing tool and PolyLine type in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolylineDrawingController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse move event occurs with a drawing tool and PolyLine type in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolylineDrawingController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse-up event occurs with a drawing tool and PolyLine type in the diagram. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PolylineDrawingController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ResizeController">
            <summary>
            Represents the class that helps to scale the selected objects. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ResizeController.prevPosition">
            <summary>
            Sets/Gets the previous mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ResizeController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
            <param name="corner">It provides diagram element action</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse down event that occurs while the user down`s the cursor over a selector resize handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse move event that occurs while the use’sr mouse moves over a selector resize handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when an mouse up event that occurs while the user releases over a selector resize handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse leave event that occurs while the user leaves a selector resize handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.ScaleHelperObjects(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
            <summary>
            Used to scale the helper object.
            </summary>
            <param name="deltaWidth">double</param>
            <param name="deltaHeight">double</param>
            <param name="corner">DiagramElementAction</param>
            <param name="startPoint">DiagramPoint</param>
            <param name="endPoint">DiagramPoint</param>
            <param name="source">DiagramSelectionSettings</param>
            <param name="originalSource">DiagramSelectionSettings</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.ScaleObjects(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
            <summary>
            Updates the size with delta width and delta height using scaling.
            </summary>
            <param name="deltaWidth"></param>
            <param name="deltaHeight"></param>
            <param name="corner"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.GetPivot(Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            Used to get the pivot value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RotationController">
            <summary>
            Represents the class that helps to rotate the selected objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.RotationController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse down event that occurs while the user down`s the cursor over a selector rotate handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse move event that occurs while the user’s mouse moves over a selector rotating handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when an mouse up event that occurs while the user releases over a selector rotating handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when a mouse leave event that occurs while the user leaves a selector’s rotating handles. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RotationController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectionController">
            <summary>
            Represents the class that helps to select the objects.  
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.SelectionController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse clicks on the element. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse clicks and drags the selected element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse clicks on the selected element. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer leaves the selected element.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SelectionController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextNodeDrawingController">
            <summary>
            Represents the class that is used to draw a Text node that is defined by the user. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextNodeDrawingController.prevPosition">
            <summary>
            The previous mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextNodeDrawingController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextNodeDrawingController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextNodeDrawingController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram and a mouse button is pressed.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextNodeDrawingController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse button is pressed and a mouse pointer is moved over the diagram.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextNodeDrawingController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the Text node and a mouse button is released.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextNodeDrawingController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ZoomPanController">
            <summary>
             Represents the class that is used to pan the diagram control on drag.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextNodeDrawingController"/> class.
            </summary>
            <param name="diagram">It provides sfdiagramcomponent</param>
            <param name="zoom">It provides zooom value</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram and a mouse button is clicked.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the diagram.
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
            <returns>Blocked</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            This method triggers when the mouse pointer is moved over the element and a mouse button is released. 
            </summary>
            <param name="args">DiagramMouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.GetDistance(Syncfusion.Blazor.Diagram.Internal.Touches,Syncfusion.Blazor.Diagram.Internal.Touches)">
            <summary>
            Get distance value.
            </summary>
            <param name="touch1">Touches</param>
            <param name="touch2">Touches</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.UpdateTouch(Syncfusion.Blazor.Diagram.Internal.Touches,Syncfusion.Blazor.Diagram.Internal.Touches)">
            <summary>
            update the touch value.
            </summary>
            <param name="startTouch">Touches</param>
            <param name="moveTouch">Touches</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ZoomPanController.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramCanvas">
            <summary>
            A DiagramCanvas is used to define a plane (DiagramCanvas) and arrange children according to margins.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramCanvas.Measure(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures the minimum space that the canvas requires
            </summary>
            <param name="availableSize">DiagramSize</param>
            <param name="dictionary">DiagramDictionary</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramCanvas.MeasureChildElement(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures the child element.
            </summary>
            <param name="availableSize">DiagramSize</param>
            <param name="dictionary">DiagramDictionary</param>
            <returns>DiagramRect</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramCanvas.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the child elements of the canvas
            </summary>
            <param name="desiredSize">DiagramSize</param>
            <param name="isStack">bool</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramCanvas.ArrangeChildElement(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the child elements.
            </summary>
            <param name="desiredSize">DiagramSize</param>
            <param name="isStack">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramCanvas.AlignChildBasedOnParent(Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.DiagramSize,System.Double,System.Double)">
            <summary>
            Aligns the child element based on its parent
            </summary>
            <param name="child">CommonElement</param>
            <param name="childSize">DiagramSize</param>
            <param name="parentSize">DiagramSize</param>
            <param name="x">double</param>
            <param name="y">double</param>
            <returns>DiagramPoint</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramCanvas.AlignChildBasedOnPoint(Syncfusion.Blazor.Diagram.DiagramElement,System.Double,System.Double)">
            <summary>
            Aligns the child elements based on a point
            </summary>
            <param name="child">CommonElement</param>
            <param name="x">double</param>
            <param name="y">double</param>
            <returns>DiagramPoint</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramContainer">
            <summary>
            The DiagramContainer is used to group related objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.#ctor(Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramContainer"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.DiagramContainer"/>.
            </summary>
            <param name="src">It provides diagramcontainer</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramContainer"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramContainer.Padding">
            <summary>
            Gets or sets the space between the container and its immediate children.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramContainer.Children">
            <summary>
            Gets or sets the collection of child elements (DiagramCanvas, Diagram Element). 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.HasChildren">
            <summary>
            Returns a value indicate whether the container has child elements or not
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.Measure(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures the minimum space that the container requires
            </summary>
            <param name="availableSize">DiagramSize</param>
            <param name="dictionary">DiagramDictionary</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.MeasureChildElement(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures the child elements.
            </summary>
            <param name="availableSize">DiagramSize</param>
            <param name="dictionary">DiagramDictionary</param>
            <returns>DiagramRect</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the container and its children
            </summary>
            <param name="desiredSize">DiagramSize</param>
            <param name="isStack">bool</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.StretchChildren(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Stretches the child elements based on the size of the container.
            </summary>
            <param name="size">DiagramSize</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.ApplyPadding(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Considers the padding of the element when measuring its desired size.
            </summary>
            <param name="size">DiagramSize</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.FindChildOffsetFromCenter(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Finds the offset of the child element with respect to the container.
            </summary>
            <param name="child">DiagramElement</param>
            <param name="center">DiagramPoint</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.GetChildrenBounds(Syncfusion.Blazor.Diagram.DiagramElement)">
            <summary>
            Get the children bounds value.
            </summary>
            <param name="child">DiagramElement</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.Clone">
            <summary>
            Creates a new element that is a copy of the current element.
            </summary>
            <returns>DiagramContainer</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramContainer.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramElement">
            <summary>
            The basic UI building blocks in a diagram node or connector are diagram elements. To create a node or connector, multiple DiagramElements can be combined.
            </summary>
            <remarks>
            A diagram element is responsible for sizing and positioning all nodes and connectors. For a node, it has more path element and text elements to render. (path element and text element are inherited from diagram element).
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.#ctor(Syncfusion.Blazor.Diagram.DiagramElement)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramElement"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.DiagramElement"/>.
            </summary>
            <param name="src">basic unit of diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramElement"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.Measure(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures the minimum space that the element requires
            </summary>
            <param name="availableSize">DiagramSize</param>
            <param name="dictionary">DiagramDictionary</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the element.
            </summary>
            <param name="desiredSize">DiagramSize</param>
            <param name="isStack">bool</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.UpdateBounds">
            <summary>
            Updates the bounds of the element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.ValidateDesiredSize(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Validates the size of the element with respect to its minimum and maximum size
            </summary>
            <param name="desiredSize">DiagramSize</param>
            <param name="availableSize">DiagramSize</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.Clone">
            <summary>
            Creates a new element that is a copy of the current element.
            </summary>
            <returns>DiagramElement</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramTemplates">
            <summary>
            Represents a segment of UI content, implemented as a delegate that writes the content of a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.NodeTemplate">
            <summary>
            Represents a segment of the UI to be rendered for a node.
            </summary>  
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  Nodes="@nodes" />
            <DiagramTemplates>
             <NodeTemplate>
              @{ var id = (context as Node).ID;
             <div style="height: 100%; width: 100%; background:green">
              <input type="button" value="Button1" @onclick="@OnClick" />
              </div>
              }
             </NodeTemplate>
             </DiagramTemplates>
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                          Shape = new Shape() { Type = NodeShapes.HTML },
                    };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.UserHandleTemplate">
            <summary>
            Represents a segment of the UI to be rendered for a user handle.
            </summary>
            <example>
            <code>
            <![CDATA[
             <SfDiagramComponent @bind-Constraints="@diagramConstraints" Height="600px" Nodes="@nodes" />
            <DiagramTemplates>
             <UserHandleTemplate>
              @{ 
             <div style="height: 100%; width: 100%; background:green">
              <input type="button" value="Button1" @onclick="@OnClick" />
              </div>
              }
             </UserHandleTemplate>
             </DiagramTemplates>
             @code
             {
            Node node = new Node()
            {
                FixedUserHandles = new DiagramObjectCollection<NodeFixedUserHandle>()
                {
                    new NodeFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 20, 
                        Width = 20, 
                        Visibility = true,
                        Padding = new DiagramThickness() { Bottom = 1, Left = 1, Right = 1, Top = 1 }, 
                        Margin = new DiagramThickness() { Right = 20 },Offset = new DiagramPoint() { X = 0, Y = 0 }, 
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    },
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.DiagramExpandIconTemplate">
            <summary>
            Represents a segment of the UI to be rendered for a DiagramExpandIcon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.DiagramCollapseIconTemplate">
            <summary>
            Represents a segment of the UI to be rendered for a DiagramCollapseIcon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.Parent">
            <summary>
            Gets or sets instance of  SfDiagramComponent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramTemplates.Initialize(Syncfusion.Blazor.Diagram.DiagramTemplates)">
            <summary>
            Initialize the diagram templates
            </summary>
            <param name="template">DiagramTemplates</param>
            <returns>DiagramTemplates</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramTemplates.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramTemplates.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramHtmlElement">
            <summary>
            The basic HTML building blocks in a diagram node are diagram HTML elements. To create a node, multiple diagram HTML elements can be combined. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommonElement">
            <summary>
            The basic UI building blocks in a diagram node or connector are elements. To create a node or connector, multiple elements can be combined
            </summary>
            <remarks>
            A Element is responsible for sizing and positioning of all nodes and connectors. For a node, it has more PathElement and TextElement to render
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Corners">
            <summary>
            Gets or sets the corners of the rectangular bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.IsCalculateDesiredSize">
            <summary>
            Gets or sets whether the size is calculated or not.
            </summary>
            <value>true,The size is calculated; Otherwise false.</value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.FlipOffset">
            <summary>
            Gets or sets the offset values for container in flipping.
            </summary>
            <value> The default value will be <see cref="T:Syncfusion.Blazor.Diagram.DiagramPoint"/>X=0,Y=0</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.ElementActions">
            <summary>
            Defines whether the element is group or port
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.ElementAction.None"/></value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.InversedAlignment">
            <summary>
            Gets or sets invered alignment of element.
            </summary>
            <value>The default value is true</value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.IsExport">
            <summary>
            Set to true during print and export
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.ExportScaleValue">
            <summary>
            Set scaling value for print and export
            </summary>
            <value> The default value will be <see cref="T:Syncfusion.Blazor.Diagram.DiagramPoint"/>X=0,Y=0</value> 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.CommonElement.ExportScaleOffset">
            <summary>
            Set scaling value for print and export
            </summary>
            <value> The default value will be <see cref="T:Syncfusion.Blazor.Diagram.DiagramPoint"/>X=0,Y=0</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.CanApplyStyle">
            <summary>
            Check whether style need to be apply or not
            </summary>
            <value> The default value is true</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Transform">
            <summary>
            Gets or sets whether the element has to be transformed based on its parent or not.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.Transform.Self"/>|<see cref="F:Syncfusion.Blazor.Diagram.Transform.Parent"/></value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Flip">
            <summary>
            Gets or sets the mirror image of diagram element in both horizontal and vertical directions.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.FlipDirection.None"/></value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.FlipMode">
            <summary>
            The FlipMode is used to control the behaviour of the flip object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.ParentTransform">
            <summary>
            Gets or sets the rotating angle that is set to the immediate parent of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Description">
            <summary>
            Defines the description of the element
            </summary>
            <value> The default value will be <see cref="F:System.String.Empty"/></value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.StaticSize">
            <summary>
            Defines whether the element has to be measured or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.IsRectElement">
            <summary>
            Check whether the element is rect or not.
            </summary>
            <value>true, which means element is rect; otherwise, false</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.ID">
            <summary>
            Gets or sets the unique id of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Pivot">
            <summary>
            The element’s rotation angle will be based on pivot values, which range from 0 to 1 like offset values. By default, the Pivot values are set to X= 0.5 and Y=0.5.
            </summary>
            <value> The default value will be <see cref="P:Syncfusion.Blazor.Diagram.CommonElement.Pivot"/>X=0.5,Y=0.5</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.IsDirt">
            <summary>
            Gets or sets whether the content of the element needs to be measured or not. If it is false, the element will not measure unnecessary scenarios
            </summary>
            <value>true, content of the element needs to be measured; otherwise, false</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Visible">
            <summary>
            Represents whether the content of the element is visible or not..
            </summary>
            <value>true, content of the element is visible; otherwise, false</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.OffsetX">
            <summary>
            Gets or sets the X-coordinate of the element
            </summary>
            <value>The default value is 0</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.OffsetY">
            <summary>
            Gets or sets the y-coordinate of the element.
            </summary>
            <value>The default value is 0</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of a border are rounded. It is only applicable to Element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.MinHeight">
            <summary>
            Gets or sets the minimum height of the element.
            </summary>
            <value>The default value is undefined</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.MinWidth">
            <summary>
            Gets or sets the minimum width of the element. 
            </summary>
            <value>The default value is undefined</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.MaxWidth">
            <summary>
            Gets or sets the maximum width of the element. 
            </summary>
            <value>The default value is undefined</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.MaxHeight">
            <summary>
            Gets or sets the maximum height of the element.
            </summary>
            <value>The default value is undefined</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Width">
            <summary>
            Gets or sets the width of the element. If it is not specified, the element renders based on the content's width
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Height">
            <summary>
            Gets or sets the height of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.RotationAngle">
            <summary>
            Gets or sets the rotate angle of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Margin">
            <summary>
            Gets or sets the extra space around the outer boundaries of the element
            </summary>
            <value> The default values for the margin are set to 0 on all sides</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the elements arranged to its immediate parent.
            Specifies how a Element in a control is horizontally aligned with respect to its parent element
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Auto"/></value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the element.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Auto"/></value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.RelativeMode">
            <summary>
            Gets or sets whether the element has to be aligned based on the offset values or its immediate parent
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.RelativeMode.Point"/></value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Style">
            <summary>
            Represents the appearance of the element.
            </summary>
            <value> The default value will be <see cref="T:Syncfusion.Blazor.Diagram.ShapeStyle"/>{ Fill = "white", StrokeColor = "black", Opacity = 1, StrokeWidth = 1 }</value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.ParentID">
            <summary>
            Gets or sets the parent id of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.DesiredSize">
            <summary>
            After taking into consideration the constraints gets or sets the exact size of which the element should be rendered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.ActualSize">
            <summary>
            Gets or sets the actual size of the Element that will be rendered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Bounds">
            <summary>
            Gets the size and location of the element in pixels, including its non-client elements relative to the parent control.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.Shadow">
            <summary>
            Gets or sets the shadow appearance of a node. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommonElement.OuterBounds">
            <summary>
            Gets the element's outside bounds. It will consider all  the margin and padding properties as well.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonElement.Measure(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measure the element size. 
            </summary>
            <param name="availableSize">DiagramSize</param>
            <param name="dictionary">DiagramDictionary</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonElement.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arrange the element size. 
            </summary>
            <param name="desiredSize">DiagramSize</param>
            <param name="isStack">bool</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonElement.SetOffsetWithRespectToBounds(System.Double,System.Double,Syncfusion.Blazor.Diagram.UnitMode)">
            <summary>
            Sets the offset of the element with respect to its parent.
            </summary>
            <param name="x">double</param>
            <param name="y">double</param>
            <param name="mode">UnitMode</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonElement.GetAbsolutePosition(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Gets the position of the element with respect to its parent.
            </summary>
            <param name="size">DiagramSize</param>
            <returns>DiagramPoint</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommonElement.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Corners">
            <summary>
            Define the Corners class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.TopLeft">
            <summary>
            Gets or sets the top left point of canvas corner
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.TopCenter">
            <summary>
            Gets or sets the top center point of canvas corner
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.TopRight">
            <summary>
            Gets or sets the top right point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.MiddleLeft">
            <summary>
            Gets or sets the middle left point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Center">
            <summary>
            Gets or sets the center point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.MiddleRight">
            <summary>
            Gets or sets the middle left point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.BottomLeft">
            <summary>
            Gets or sets the bottom left point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.BottomCenter">
            <summary>
            Gets or sets the bottom center point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.BottomRight">
            <summary>
            Gets or sets the bottom right point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Left">
            <summary>
            Gets or sets the left position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Right">
            <summary>
            Gets or sets the right position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Top">
            <summary>
            Gets or sets the top position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Bottom">
            <summary>
            Gets or sets the bottom position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Width">
            <summary>
            Gets or sets the width of canvas.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Height">
            <summary>
            Gets or sets the height of the element. By default, it is 50
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Corners.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ImageElement">
            <summary>
            Represents the class that defines a basic image elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.#ctor(Syncfusion.Blazor.Diagram.ImageElement)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ImageElement"/> from the given ImageElement.
            </summary>
            <param name="src">basic image element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ImageElement"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.Source">
            <summary>
            Gets or sets the source of the image element.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node5 = new Node()
            {
              Shape = new ImageShape()
              {
                Type = NodeShapes.Image,
                Source = " https://www.syncfusion.com/content/images/nuget/sync_logo_icon.png" 
              },
            };
            nodes.Add(node5);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.ImageScale">
            <summary>
            Gets or sets how the image will be scaled to fit within the bounds specified by the image scale property
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.DiagramScale.None"/></value> 
            <example>
            <code>
            <![CDATA[
            Node node5 = new Node()
            {
              Shape = new ImageShape()
              {
                Type = NodeShapes.Image, ImageAlign = ImageAlignment.None, Scale = DiagramScale.None,
                Source = " https://www.syncfusion.com/content/images/nuget/sync_logo_icon.png" 
              },
            };
            nodes.Add(node5);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.ImageAlign">
            <summary>
            Gets or sets the alignment of the image within the bounds specified.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.ImageAlignment.None"/></value> 
            <example>
            <code>
            <![CDATA[
            Node node5 = new Node()
            {
              Shape = new ImageShape()
              {
                Type = NodeShapes.Image, ImageAlign = ImageAlignment.None, Scale = DiagramScale.None,
                Source = " https://www.syncfusion.com/content/images/nuget/sync_logo_icon.png" 
              },
            };
            nodes.Add(node5);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.Stretch">
            <summary>
            Gets or sets the image element, which determines how the content fits into the available space
            </summary>
            <value> The default value will be stretch</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.ImageSize">
            <summary>
            Gets or sets the actual size of the image element to be rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.Measure(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures minimum space that is required to render the image
            </summary>
            <param name="availableSize"></param>
            <param name="dictionary"></param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the image element
            </summary>
            <param name="desiredSize">DiagramSize</param>
            <param name="isStack">bool</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.Clone">
            <summary>
            Creates a new image element that is a copy of the current image element
            </summary>
            <returns>ImageElement</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramSvgElement">
            <summary>
            The basic native (SVG) building blocks in a diagram node are diagram native elements. To create a node, multiple diagram native elements can be combined. 
            </summary>
            <returns>DiagramSvgElement</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PathElement">
            <summary>
            Represents the class which defines how to align the path based on offsetX and offsetY.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" @bind-Nodes="Nodes" SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>    
            @code
            { 
              DiagramObjectCollection<Node> Nodes = new DiagramObjectCollection<Node>();
              private CommonElement SetTemplate(IDiagramObject node)
              {
                if ((node as Node).ID == "node2")
                {
                  DiagramCanvas container = new DiagramCanvas();
                  PathElement diagramElement = new PathElement();
                  diagramElement.Style.Fill = "green";
                  diagramElement.Data = "M150 0 L75 200 L225 200 Z";
                  container.Children.Add(diagramElement);
                  return container;
                }
                return null;
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.#ctor(Syncfusion.Blazor.Diagram.PathElement)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.PathElement"/> from the given PathElement.
            </summary>
            <param name="src">path element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.PathElement"/> class.
            </summary>
            <returns>PathElement</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathElement.Data">
            <summary>
            Gets or sets the geometry of the path element.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px"  SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>    
            @code
            { 
              private CommonElement SetTemplate(IDiagramObject node)
              {
                if ((node as Node).ID == "node2")
                {
                  DiagramCanvas container = new DiagramCanvas();
                  PathElement diagramElement = new PathElement();
                  diagramElement.Data = "M150 0 L75 200 L225 200 Z";
                  container.Children.Add(diagramElement);
                  return container;
                }
                return null;
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathElement.TransformPath">
            <summary>
            Gets or sets whether the path has to be transformed to fit the given x,y, width, height.
            </summary>
            <value> true, The path has to be transformed to fit the given x,y,width, height.Otherwise, false. The default value is true. </value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>    
            @code
            { 
              private CommonElement SetTemplate(IDiagramObject node)
              {
                if ((node as Node).ID == "node2")
                {
                  DiagramCanvas container = new DiagramCanvas();
                  PathElement diagramElement = new PathElement();
                   diagramElement.TransformPath = true;
                  container.Children.Add(diagramElement);
                  return container;
                }
                return null;
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathElement.AbsolutePath">
            <summary>
            Gets or sets the equivalent path, that will have the origin as 0,0.
            </summary>
            <value> The default value will be <see cref="F:System.String.Empty"/></value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>    
            @code
            { 
              private CommonElement SetTemplate(IDiagramObject node)
              {
                if ((node as Node).ID == "node2")
                {
                  DiagramCanvas container = new DiagramCanvas();
                  PathElement diagramElement = new PathElement();
                   diagramElement.AbsolutePath = "M150 0 L75 200 L225 200 Z";
                  container.Children.Add(diagramElement);
                  return container;
                }
                return null;
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.GetPoints(Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Get points of path element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.Measure(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures the minimum space that is required to render the element
            </summary>
            <param name="availableSize">DiagramSize</param>
            <param name="dictionary">DiagramDictionary</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the path element
            </summary>
            <param name="desiredSize">DiagramSize</param>
            <param name="isStack">bool</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.UpdatePath(System.String,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Translates the path to 0,0 and scales the path based on the actual size
            </summary>
            <param name="path">string</param>
            <param name="bounds">DiagramRect</param>
            <param name="actualSize">DiagramRect</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.Clone">
            <summary>
            Creates a new element that is a copy of the current path element
            </summary>
            <returns>PathElement</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.StackPanel">
            <summary>
             Represents the class that arranges child elements into a single line that can be oriented horizontally or vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.StackPanel.considerPadding">
            <summary>
            Padding of the element needs to be measured
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.StackPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
            <value>The default value will be <see cref="F:Syncfusion.Blazor.Diagram.Orientation.Vertical"/>.</value> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  @bind-Nodes="Nodes" SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>
            @code
            { 
              DiagramObjectCollection<Node> Nodes = new DiagramObjectCollection<Node>();
              protected override void OnInitialized()
              {
                 StackPanel stackPanel = SetTemplate(null) as StackPanel;
                  stackPanel.Orientation = Orientation.Horizontal;
                  basicElements.Add(stackPanel);
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.#ctor(Syncfusion.Blazor.Diagram.StackPanel)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.StackPanel"/> from the given StackPanel.
            </summary>
            <param name="src">StackPanel element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.StackPanel"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.Measure(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures the minimum space that the panel needs
            </summary>
            <param name="availableSize"></param>
            <param name="dictionary"></param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the child elements of the stack panel
            </summary>
            <param name="desiredSize"></param>
            <param name="isStack"></param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.MeasureStackPanel(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures the minimum space that the panel needs
            </summary>
            <param name="availableSize"></param>
            <param name="dictionary"></param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.UpdateSize(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Update size of element
            </summary>
            <param name="child">DiagramSize</param>
            <param name="parent">DiagramSize</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.ApplyChildMargin(Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Update the margin of elements
            </summary>
            <param name="child">DiagramSize</param>
            <param name="size">DiagramSize</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.StretchChildren(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Stretches the child elements based on the size of the panel.
            </summary>
            <param name="size">DiagramSize.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.ArrangeStackPanel(Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Arrange the stack panel 
            </summary>
            <param name="desiredSize">DiagramSize</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.UpdatePosition(System.Double,System.Double,Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.StackPanel,Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Update the position of stack panel
            </summary>
            <param name="child">CommonElement</param>
            <param name="x">double</param>
            <param name="y">double</param>
            <param name="stackPanel">StackPanel</param>
            <param name="desiredSize">DiagramSize</param>
            <param name="rotatedSize">DiagramSize</param>
            <returns>DiagramPoint</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.ArrangeHorizontalStack(System.Double,System.Double,Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.StackPanel,Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Arrange the horizontal stack panel
            </summary>
            <param name="child">CommonElement</param>
            <param name="x">double</param>
            <param name="y">double</param>
            <param name="parent">StackPanel</param>
            <param name="parenBounds">DiagramSize</param>
            <param name="childBounds">DiagramSize</param>
            <returns>DiagramPoint</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.ArrangeVerticalStack(System.Double,System.Double,Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.StackPanel,Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.DiagramSize)">
            <summary>
            Arrange the Vertical stack panel
            </summary>
            <param name="child">CommonElement</param>
            <param name="x">double</param>
            <param name="y">double</param>
            <param name="parent">StackPanel</param>
            <param name="parentSize">DiagramSize</param>
            <param name="childSize">DiagramSize</param>
            <returns>DiagramPoint</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.Clone">
            <summary>
            Creates a new element that is a copy of the current element.
            </summary>
            <returns>StackPanel</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextElement">
            <summary>
            Represents the text element which is used to display text or annotations.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>    
            @code
            { 
                private CommonElement SetTemplate(IDiagramObject node)
                {
                    if ((node as Node).ID == "node2")
                    {
                        DiagramCanvas container = new DiagramCanvas();
                        TextElement textElement = new TextElement();
                        textElement.Content = "node2content";
                        container.Children.Add(textElement);
                        return container;
                    }
                     return null;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextElement.textContent">
            <summary>
            The image source
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextElement.Hyperlink">
            <summary>
            sets the hyperlink color to blue
            </summary>
            <value> The default value will be <see cref="T:Syncfusion.Blazor.Diagram.HyperlinkSettings"/>{ Color = "blue" }</value> 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextElement.Constraints">
            <summary>
            The constraints for the text element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.#ctor(Syncfusion.Blazor.Diagram.TextElement)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/> from the given TextElement.
            </summary>
            <param name="src">TextElement.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextElement.Content">
            <summary>
            Gets or sets the content of the text element that is to be displayed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>    
            @code
            { 
                private CommonElement SetTemplate(IDiagramObject node)
                {
                    if ((node as Node).ID == "node2")
                    {
                        DiagramCanvas container = new DiagramCanvas();
                        TextElement textElement = new TextElement();
                        textElement.Content = "node2content";
                        return container;
                    }
                     return null;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextElement.ChildNodes">
            <summary>
            Gets or sets the child element for the text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextElement.WrapBounds">
            <summary>
            Gets or sets the wrapBounds for the text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.Measure(Syncfusion.Blazor.Diagram.DiagramSize,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Measures the minimum size that is required for the text element
            </summary>
            <param name="availableSize"></param>
            <param name="dictionary">dictionary collection is to get bounds for the text content</param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.Arrange(Syncfusion.Blazor.Diagram.DiagramSize,System.Nullable{System.Boolean})">
            <summary>
            Arranges the text element
            </summary>
            <param name="desiredSize"></param>
            <param name="isStack"></param>
            <returns>DiagramSize</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.Clone">
            <summary>
            Creates a new object that is a copy of the current text element.
            </summary>
            <returns>TextElement</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramConstraints">
            <summary>
            Enables/Disables certain features of the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @bind-Constraints="@diagramConstraints" />
             @code
             {
               DiagramConstraints diagramConstraints = DiagramConstraints.Default;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.None">
            <summary>
            Disables all the functionalities of the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Bridging">
            <summary>
            Specifies whether a bridge can be created for all the connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.UndoRedo">
            <summary>
            Enables or disables the undo or redo functionality over the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.UserInteraction">
            <summary>
            Decides whether interaction should happen on the diagram or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.ApiUpdate">
            <summary>
            Decides whether the public API needs to be enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.PageEditable">
            <summary>
            Decides whether the diagram can be editable or not through <see cref="F:Syncfusion.Blazor.Diagram.DiagramConstraints.ApiUpdate"/> or <see cref="F:Syncfusion.Blazor.Diagram.DiagramConstraints.UserInteraction"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Zoom">
            <summary>
            Specifies whether zooming-related action can be enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.PanX">
            <summary>
            Enables or disables panning actions only on the x-axis (horizontal panning). 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.PanY">
            <summary>
            Enables or disables panning actions only on the y-axis (vertical panning). 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Pan">
            <summary>
            Specifies the panning action of the diagram on both axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.ZoomTextEdit">
            <summary>
            Specifies  whether the zooming ratio can be maintained or not while editing the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Tooltip">
            <summary>
            Enables or disables the tooltip for the diagram elements(Nodes and connectors).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Default">
            <summary>
            Enables all the functionalities of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FlipDirection">
            <summary>
            Specifies how the diagram elements have to be flipped.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.FlipDirection.None"/></value>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the direction of the Flip </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Horizontal- It is used to flip the node or Connector is mirrored across the horizontal axis.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Vertical- It is used to flip the node or connector is mirrored across the vertical axis.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Both- It is used to flip the node or connector is mirrored across the both horizontal and vertical axis.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. None- It is used to disables all the flip behaviour.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
                    Node Node = new Node()
                    {
                        ID = "node1",
                        Width = 100,
                        Height = 100,
                        OffsetX = 100,
                        OffsetY = 300,
                        Flip=FlipDirection.Horizontal
                    };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.None">
            <summary>
            No flip will be applied and this is the default value. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.Horizontal">
            <summary>
            Flip the diagram elements(node, connector and group) shape Horizontally based on its <see cref="T:Syncfusion.Blazor.Diagram.DiagramFlipMode"/> value.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.Vertical">
            <summary>
            Flip the diagram elements(node, connector and group) shape vertically based on its <see cref = "T:Syncfusion.Blazor.Diagram.DiagramFlipMode" /> value.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.Both">
            <summary>
            Flip the diagram elements(node, connector and group) shape to both horizontally and vertically based on its <see cref="T:Syncfusion.Blazor.Diagram.DiagramFlipMode"/> value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramFlipMode">
            <summary>
            The FlipMode is used to control the behaviour of the flip object.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.DiagramFlipMode.All"/></value>
            <remarks>
            It’s only applicable for node and nodegroup only.
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the flipmode </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Port- It is used to enable or disables the flip for object’s port</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Content- It is used to enable or disables the flip for object’s content</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. All- It is used to enable or disables the flip for both object’s content and port. </td>
            </tr>
            <tr>
            <td style = "border: none"> 4. None- It is used to disables all the flipmode behaviour.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
                    Node Node = new Node()
                    {
                        ID = "node1",
                        Width = 100,
                        Height = 100,
                        OffsetX = 100,
                        OffsetY = 300,
                        Flip=FlipDirection.Horizontal,
                        FlipMode=FlipMode.All,
                    };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramFlipMode.None">
            <summary>
            Disables all the flip operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramFlipMode.Content">
            <summary>
            Enables or disables the flip for Content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramFlipMode.Port">
            <summary>
            Enables or disables the flip for Port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramFlipMode.All">
            <summary>
            Enables or disables the flip for both Content and Port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HorizontalAlignment">
            <summary>
            Represents the alignment of the diagram elements based on its immediate parent. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                    Node Node = new Node()
                    {
                        Ports = new DiagramObjectCollection<PointPort>()
                        {
                            new PointPort()
                            {
                                HorizontalAlignment = HorizontalAlignment.Left
                            }
                        },
                    };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Stretch">
            <summary>
            Stretch the diagram element horizontally to its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Left">
            <summary>
            Align the diagram element horizontally to the left side of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Right">
            <summary>
            Align the diagram element horizontally to the right side of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Center">
            <summary>
            Align the diagram element horizontally to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent’s horizontal alignment property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment">
            <summary>
            Represents the alignment of the FixedUserHandle with respect to its immediate parent. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        Alignment = FixedUserHandleAlignment.After,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.Center">
            <summary>
            Aligns the FixedUserHandle on the connector segment. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.Before">
            <summary>
            Aligns the FixedUserHandle on top of a connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.After">
            <summary>
            Aligns the FixedUserHandle at the bottom of a connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GridType">
            <summary>
            Specifies the type of grid lines.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent >
                <SnapSettings GridType = "GridType.Dots" >
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GridType.Lines">
            <summary>
            Renders grid patterns as lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GridType.Dots">
            <summary>
            Renders grid patterns as dots.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.VerticalAlignment">
            <summary>
            Represents the alignment of the diagram elements based on its immediate parent. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes">
            </SfDiagramComponent>
            @code
            {
                public DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>() { };
                protected override void OnInitialized()
                {
                    // A node is created and stored in nodes array.
                    Node Node = new Node()
                    {
                        /// Initialize the port collection
                        Ports = new DiagramObjectCollection<PointPort>()
                        {
                            new PointPort()
                            {
                                VerticalAlignment = VerticalAlignment.Top
                            }
                        },
                    };
                    nodes.Add(Node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Stretch">
            <summary>
            Stretch the diagram element vertically to its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Top">
            <summary>
            Align the diagram element vertically to the top side of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Bottom">
            <summary>
            Align the diagram element vertically to the bottom side of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Center">
            <summary>
            Align the diagram element vertically to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent’s vertical alignment property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextDecoration">
            <summary>
            Represents the decoration of a text in the text block. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    // Add text as hyperlink.
                       new ShapeAnnotation {  Style= new TextStyle(){TextDecoration = TextDecoration.None, } }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.Overline">
            <summary>
            Draws a horizontal line above the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.Underline">
            <summary>
            Draws a horizontal line under the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.LineThrough">
            <summary>
            Draws a horizontal line through the text of a node or a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.None">
            <summary>
            Represents the default appearance of a text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextAlign">
            <summary>
            Represents the alignment of the text inside the text block. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                            TextAlign = TextAlign.Center,
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Left">
            <summary>
            Sets the alignment of the text to the left in the text block.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Right">
            <summary>
            Sets the alignment of the text to the right in the text block. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Center">
            <summary>
            Sets the alignment of the text at the center of the text block .
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Justify">
            <summary>
            Sets the alignment of the text in respective to left and right margins.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextOverflow">
            <summary>
            Specifies a value that indicates whether to render ellipses (...) to indicate text overflow. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                            TextOverflow = TextOverflow.Wrap,
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextOverflow.Wrap">
            <summary>
            Wraps the text to the next line, when it exceeds its bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextOverflow.Ellipsis">
            <summary>
            Ellipsis hides the text if the text size exceeds the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextOverflow.Clip">
            <summary>
            The text is restricted to the node/connector boundary and the text will not be overflown.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextWrap">
            <summary>
            Specifies how to control the overflow of text in the node boundaries. The wrapping property defines how to wrap the text.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                             TextWrapping = TextWrap.NoWrap,
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow">
            <summary>
            Text-wrapping occurs when the text overflows beyond the available node width. However, the text may overflow beyond the node width in  case of a very long word.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextWrap.Wrap">
            <summary>
            The text will be wrapped within the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextWrap.NoWrap">
            <summary>
            The text will not be wrapped. If a lengthy text exists, the boundary will not be a limit.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GradientType">
            <summary>
            Specifies the type of transition between two or more colors. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GradientType.Linear">
            <summary>
            Sets the type of gradient to linear.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GradientType.Radial">
            <summary>
            Sets the type of gradient to radial.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RelativeMode">
            <summary>
            Specifies the relative mode.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  />
             @code
             {
                protected override void OnInitialized()
                {
                 DiagramCanvas canvas = new DiagramCanvas();
                   canvas.RelativeMode = RelativeMode.Object;
                  canvas.Children = new DiagramObjectCollection<CommonElement>() { child1};
                  basicElements.Add(canvas);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RelativeMode.Point">
            <summary>
            DiagramPoint - Diagram elements will be aligned with respect to a point
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RelativeMode.Object">
            <summary>
            Object - Diagram elements will be aligned with respect to its immediate parent
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Transform">
            <summary>
            Specifies the type of Transform.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Transform.Self">
            <summary>
            Self - Sets the transform type as Self
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Transform.Parent">
            <summary>
            Parent - Sets the transform type as Parent
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ElementAction">
            <summary>
            Specifies the element action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ElementAction.None">
            <summary>
            Disables all element actions are none.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ElementAction.ElementIsPort">
            <summary>
            Enable the element action is Port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ElementAction.ElementIsGroup">
            <summary>
            Enable the element action as Group.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.UnitMode">
            <summary>
            Specifies the type of unit mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.UnitMode.Absolute">
            <summary>
            Absolute - Sets the unit mode type as Absolute
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.UnitMode.Fraction">
            <summary>
            Fraction - Sets the unit mode type as Fraction
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PortShapes">
            <summary>
            Specifies the shape of the ports.
            </summary>
            <remarks>
            To know more about using port shapes, refer to the Ports.
            To apply the X port shape, use the below code
            </remarks>
            <example>
            <code>
            <![CDATA[
                Node Node = new Node()
                {
                  ID = "node1",
                  Height = 100,
                  Width = 100,
                  OffsetX = 100,
                  OffsetY = 100,
                };
                Node.Ports = new DiagramObjectCollection<PointPort>()
                {
                 new PointPort()
                 {
                     Shape=PortShapes.X,
                  }
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.X">
            <summary>
            Sets the shape of the port to X.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.Circle">
            <summary>
            Sets the shape of the port to Circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.Square">
            <summary>
            Sets the shape of the port to Square.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.Custom">
            <summary>
            Sets the shape of the port to Custom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PortVisibility">
            <summary>
            Represents the visibility options of the port.
            </summary>
            <example>
            <code>
            <![CDATA[
               Node Node = new Node()
               {
                 ID = "node1",
                 Height = 100,
                 Width = 100,
                 OffsetX = 100,
                 OffsetY = 100,
               };
               Node.Ports = new DiagramObjectCollection<PointPort>()
               {
                 new PointPort()
                 {
                   Visibility=PortVisibility.Hover|PortVisibility.Connect,
                  }
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Connect">
            <summary>
            Shows the port when a connector endpoint is dragged over a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Hidden">
            <summary>
            Always hides the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Hover">
            <summary>
            Shows the port when the mouse hovers over a node. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Visible">
            <summary>
            Always shows the port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramExpandIcons">
            <summary>
            Specifies the shape of the Expand Icon.
            </summary>
            <remarks>
            To know more about using icon shapes, refer to the icons.
            To apply the Minus icon shape, use the below code
            </remarks>
            <example>
            <code>
            <![CDATA[
                Node Node1 = new Node()
                {
                    ExpandIcon = new DiagramExpandIcon() {
                        Shape = DiagramExpandIcons.Minus,
                    }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramExpandIcons.None">
            <summary>
            "The shape of the icon is set to None" 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramExpandIcons.Minus">
            <summary>
            "The shape of the icon is set to Minus shape" 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramExpandIcons.ArrowDown">
            <summary>
            "The shape of the icon is set to Arrow shape facing downwards" 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramExpandIcons.Template">
            <summary>
            "The shape of the icon is set to Template shape" 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramExpandIcons.Path">
            <summary>
            "The shape of the icon is set to path shape" 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramCollapseIcons">
            <summary>
            Specifies the shape of the Collapse Icon.
            </summary>
            <remarks>
            To know more about using icon shapes, refer to the icons.
            To apply the Plus icon shape, use the below code
            </remarks>
            <example>
            <code>
            <![CDATA[
                Node Node1 = new Node()
                {
                    CollapseIcon = new DiagramCollapseIcon() {
                       Shape = DiagramCollapseIcons.Plus,
                    }
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramCollapseIcons.None">
            <summary>
            "The shape of the icon is set to None" 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramCollapseIcons.Plus">
            <summary>
            "The shape of the icon is set to Plus shape" 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramCollapseIcons.ArrowUp">
            <summary>
            "The shape of the icon is set to Arrow shape facing upwards " 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramCollapseIcons.Template">
            <summary>
            "The shape of the icon is set to Template shape" 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramCollapseIcons.Path">
            <summary>
            "The shape of the icon is set to path shape" 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AlignmentMode">
            <summary>
            Defines how the specified selected items are aligned when calling the align command.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void OnAlignLeft()
            {
                diagram.SetAlign(AlignmentOptions.Left,null, AlignmentMode.Object);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentMode.Object">
            <summary>
            Aligns the selected objects based on the first object in the selected list. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentMode.Selector">
            <summary>
            Aligns the selected objects based on the selection boundary. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AlignmentOptions">
            <summary>
            Defines how the selected objects should be positioned.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void OnAlignLeft()
            {
                diagram.SetAlign(AlignmentOptions.Left,null, AlignmentMode.Object);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Left">
            <summary>
            Aligns all the selected objects to the left of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Right">
            <summary>
            Aligns all the selected objects to the right of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Top">
            <summary>
            Aligns all the selected objects at the top of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Bottom">
            <summary>
            Aligns all the selected objects at the bottom of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Center">
            <summary>
            Aligns all the selected objects at the center of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Middle">
            <summary>
            Aligns all the selected objects at the middle of the selection boundary.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DistributeOptions">
            <summary>
            Distribute the options that enable you to place the selected objects on the page at equal intervals from each other. 
            </summary>
            <remarks>
            The selected objects are equally spaced within the selection boundary.
            </remarks>
            <example>
            <code>
            <![CDATA[
            private void Distribute()
            {
                diagram.SetDistribute(DistributeOptions.Left);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.RightToLeft">
            <summary>
            Distributes the objects based on the distance between the right and left sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Center">
            <summary>
            Distributes the objects based on the distance between the centers of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Left">
            <summary>
            Distributes the objects based on the distance between the left sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Right">
            <summary>
            Distributes the objects based on the distance between the right sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Bottom">
            <summary>
            Distributes the objects based on the distance between the bottom sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Top">
            <summary>
            Distributes the objects based on the distance between the top sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.BottomToTop">
            <summary>
            Distributes the objects based on the distance between the bottom and top sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Middle">
            <summary>
            Distributes the objects based on the distance between the vertical centers of the adjacent objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SizingMode">
            <summary>
            Specifies how to equally size the selected nodes with respect to the first selected object.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void OnSameSize()
            {
               diagram.SetSameSize(SizingMode.Both);
            }
            private void OnSameWidth()
            {
               diagram.SetSameSize(SizingMode.Width);
            }
            private void OnSameHeight()
            {
               diagram.SetSameSize(SizingMode.Height);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SizingMode.Both">
            <summary>
            Scales the selected objects both vertically and horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SizingMode.Height">
            <summary>
            Scales the height of the selected objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SizingMode.Width">
            <summary>
            Scales the width of the selected objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PortConstraints">
            <summary>
            Enables or disables certain features of the port. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    new PointPort() 
                    { 
                        Constraints = PortConstraints.Draw
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.None">
            <summary>
            Disables all the port functionalities.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.Draw">
            <summary>
            Enables or disables creating the connection when the mouse hovers on the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.InConnect">
            <summary>
            Enables or disables connecting only the target end of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.OutConnect">
            <summary>
            Enables or disables connecting only the source end of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.Default">
            <summary>
            Enables all constraints of a port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeShapes">
            <summary>
            Specifies the type of node.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BasicShape() { Shape = NodeBasicShapes.Plus, Type = NodeShapes.Basic },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeShapes.Basic">
            <summary>
            Allows defining a shape from the available built-in basic shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeShapes.Path">
            <summary>
            Allows defining a custom node from path data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeShapes.Text">
            <summary> 
            Defines a shape type Text from the built-in shape types. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeShapes.Image">
            <summary>
            Allows creating an image node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeShapes.Flow">
            <summary>
            Allows defining a shape from the available built-in flow shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeShapes.Bpmn">
            <summary>
            Allows defining a shape from the available built-in BPMN shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeShapes.SVG">
            <summary>
            Allows creating a native SVG node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeShapes.HTML">
            <summary>
            Allows setting a custom template for a node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeBasicShapes">
            <summary>
            Represents the available built-in basic shapes.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BasicShape() { Shape = NodeBasicShapes.Plus, Type = NodeShapes.Basic },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Rectangle">
            <summary>
            Sets the type of basic shape as a Rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Ellipse">
            <summary>
            Sets the type of basic shape as an Ellipse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Hexagon">
            <summary>
            Sets the type of basic shape as a Hexagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Parallelogram">
            <summary>
            Sets the type of basic shape as a Parallelogram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Triangle">
            <summary>
            Sets the type of basic shape as a Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Plus">
            <summary>
            Sets the type of basic shape as a Plus.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Star">
            <summary>
            Sets the type of basic shape as a Star.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Pentagon">
            <summary>
            Sets the type of basic shape as a Pentagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Heptagon">
            <summary>
            Sets the type of basic shape as a Heptagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Octagon">
            <summary>
            Sets the type of basic shape as a Octagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Trapezoid">
            <summary>
            Sets the type of basic shape as a Trapezoid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Decagon">
            <summary>
            Sets the type of basic shape as a Decagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.RightTriangle">
            <summary>
            Sets the type of basic shape as a Right Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Cylinder">
            <summary>
            Sets the type of basic shape as a Cylinder.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Diamond">
            <summary>
            Sets the type of basic shape as a Diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeBasicShapes.Polygon">
            <summary>
            Sets the type of basic shape as a Polygon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeFlowShapes">
            <summary>
            Specifies the type of process flow shape.
            </summary>
            <remarks>
            To learn more about using flow shapes, refer <see href="https://blazor.syncfusion.com/documentation/diagram-component/shapes">NodeShapes</see>.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
                    Node node = new Node()
                    {
                        Shape = new FlowShape()
                        {
                            Type = NodeShapes.Flow,
                            Shape = NodeFlowShapes.DirectData
                        }
                    };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Terminator">
            <summary>
            Sets the flow shape type to Terminator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Process">
            <summary>
            Sets the flow shape type to Process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Decision">
            <summary>
            Sets the flow shape type to Decision.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Document">
            <summary>
            Sets the flow shape type to Document.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.PreDefinedProcess">
            <summary>
            Sets the flow shape type to PreDefinedProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.PaperTap">
            <summary>
            Sets the flow shape type to PaperTap.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.DirectData">
            <summary>
            Sets the flow shape type to DirectData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.SequentialData">
            <summary>
            Sets the flow shape type to SequentialData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Sort">
            <summary>
            Sets the flow shape type to Sort.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.MultiDocument">
            <summary>
            Sets the flow shape type to MultiDocument.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Collate">
            <summary>
            Sets the flow shape type to Collate.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.SummingJunction">
            <summary>
            Sets the flow shape type to SummingJunction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Or">
            <summary>
            Sets the flow shape type to Or.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.InternalStorage">
            <summary>
            Sets the flow shape type to internal storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Extract">
            <summary>
            Sets the flow shape type to Extract.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.ManualOperation">
            <summary>
            Sets the flow shape type to ManualOperation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Merge">
            <summary>
            Sets the flow shape type to Merge.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.OffPageReference">
            <summary>
            Sets the flow shape type to OffPageReference.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.SequentialAccessStorage">
            <summary>
            Sets the flow shape type to SequentialAccessStorage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Annotation">
            <summary>
            Sets the flow shape type to Annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Data">
            <summary>
            Sets the flow shape type to Data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Card">
            <summary>
            Sets the flow shape type to Card.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Delay">
            <summary>
            Sets the flow shape type to Delay.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Preparation">
            <summary>
            Sets the flow shape type to Preparation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.Display">
            <summary>
            Sets the flow shape type to Display.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.ManualInput">
            <summary>
            Sets the flow shape type to ManualInput.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.LoopLimit">
            <summary>
            Sets the flow shape type to LoopLimit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeFlowShapes.StoredData">
            <summary>
            Sets the flow shape type to stored data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeConstraints">
            <summary>
            Specifies the node constraints allow the users to enable or disable certain behaviors and features of the diagram nodes.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                    Node node = new Node()
                    {
                        Constraints = NodeConstraints.Default | NodeConstraints.Shadow,
                    };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.None">
            <summary>
            Disable all node Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Select">
            <summary>
            Enables or disables the selection of a node in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Drag">
            <summary>
            Enables or disables the dragging functionality of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Rotate">
            <summary>
            Enables or disables node rotation. It is done with the help of a curvy arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Shadow">
            <summary>
            Enables or disables to display the nodes shadow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.PointerEvents">
            <summary>
            Enables or disables the mouse pointers events when clicking with a mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Delete">
            <summary>
            Enables or disables node deletion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.InConnect">
            <summary>
            Enables node to allow only in coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.OutConnect">
            <summary>
            Enables node to allow only out coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.AllowDrop">
            <summary>
            AllowDrop allows dropping a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeNorthEast">
            <summary>
            It enables or disables the resizing of the node in the NorthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeEast">
            <summary>
            It enables or disables the resizing of the node in the East direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeSouthEast">
            <summary>
            It enables or disables the resizing of the node in the SouthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeSouth">
            <summary>
            It enables or disables the resizing of the node in the South direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeSouthWest">
            <summary>
            It enables or disables the resizing of the node in the SouthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeWest">
            <summary>
            It enables or disables the resizing of the node in the West direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeNorthWest">
            <summary>
            It enables or disables the resizing of the node in the NorthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeNorth">
            <summary>
            It enables or disables the resizing of the node in the North direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.AspectRatio">
            <summary>
            Enables the Aspect ratio of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ReadOnly">
            <summary>
            Enables the ReadOnly mode(Write operations cannot be done) for the annotation in the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.HideThumbs">
            <summary>
            Enables to hide all resize thumbs for the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Tooltip">
            <summary>
            Enables or disables tooltip for the Nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.InheritTooltip">
            <summary>
            Enables or disables to inherit the value of Tooltip from <see cref="T:Syncfusion.Blazor.Diagram.SfDiagramComponent"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Resize">
            <summary>
            Enables or Disables the expansion or compression of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Default">
            <summary>
            Enables all the constraints for a node
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Inherit">
            <summary>
            It allows the node to inherit the interaction option from the parent object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorConstraints">
            <summary>
            Enables or disables certain behaviors and features of the connectors. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
               //set the ConnectorConstraints...
               Constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.None">
            <summary>
            Disables all the connector Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Select">
            <summary>
            Enables or disables the selection of a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Delete">
            <summary>
            Enables or disables the deletion of a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Drag">
            <summary>
            Enables or disables the connector from being dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.DragSourceEnd">
            <summary>
            Enables or disables the connector's source end from being dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.DragTargetEnd">
            <summary>
            Enables or disables the connector’s target end from being dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.DragSegmentThumb">
            <summary>
            Enables or disables the control point and endpoint of every segment in a connector for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Interaction">
            <summary>
            Enables or disables the interaction of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.AllowDrop">
            <summary>
            Enables to trigger a drop event when any object is dragged or dropped onto the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Bridging">
            <summary>
            Enables or disables bridging to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.InheritBridging">
            <summary>
            Enables or disables inheriting the value of bridging from the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.PointerEvents">
            <summary>
            Enables to set the pointer-events.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ReadOnly">
            <summary>
            Enables or disables read-only for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ConnectToNearByNode">
            <summary>
            Enables or disables connecting to the nearest node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ConnectToNearByPort">
            <summary>
            Enables or disables connecting to the nearest port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Tooltip">
            <summary>
            Enables or disables tooltip for the connectors
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.InheritTooltip">
            <summary>
            Enables or disables to inherit the value of Tooltip from <see cref="T:Syncfusion.Blazor.Diagram.SfDiagramComponent"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ConnectToNearByElement">
            <summary>
            Enables or disables connecting to the nearest elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Default">
            <summary>
            Enables all constraints for the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorSegmentType">
            <summary>
            Specifies the segment type of the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
               Type = ConnectorSegmentType.Straight,
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorSegmentType.Straight">
            <summary>
            Sets the segment type as Straight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorSegmentType.Orthogonal">
            <summary>
            Sets the segment type as Orthogonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorSegmentType.Polyline">
            <summary>
            Sets the segment type as Polyline.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorSegmentType.Bezier">
            <summary>
            Sets the segment type as Bezier.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DecoratorShape">
            <summary>
            Specifies the decorator shape of the connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
                    Connector Connector = new Connector()
                    {
                        TargetDecorator = new DecoratorSettings()
                        {
                            Shape = DecoratorShape.Arrow,
                        }
                    };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Arrow">
            <summary>
            Sets the decorator’s shape to arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.None">
            <summary>
            Sets the decorator's shape to none.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Diamond">
            <summary>
            Sets the decorator shape to diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.OpenArrow">
            <summary>
            Sets the decorator shape to open arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Circle">
            <summary>
            Sets the decorator shape to circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Square">
            <summary>
            Sets the decorator shape to square.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Fletch">
            <summary>
            Sets the decorator shape to fletch.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.OpenFletch">
            <summary>
            Sets the decorator shape to open fletch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.InArrow">
            <summary>
            Sets the decorator shape to in arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.OutArrow">
            <summary>
            Sets the decorator shape to out arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.DoubleArrow">
            <summary>
            Sets the decorator’s shape to double arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShape.Custom">
            <summary>
            Sets the decorator’s shape to custom
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Direction">
            <summary>
            Specifies the orthogonal connector's connection segment direction. 
            </summary>
            <example>
            <code>
            <![CDATA[
                Connector connector = new Connector()
                {
                    Type = ConnectorSegmentType.Orthogonal,
                    Segments = new DiagramObjectCollection<ConnectorSegment>() 
                    { 
                        new OrthogonalSegment() 
                        { 
                            Length = 70, 
                            Type = ConnectorSegmentType.Orthogonal, 
                            Direction = Direction.Right 
                        }, 
                        new OrthogonalSegment() 
                        { 
                            Length = 20, 
                            Type = ConnectorSegmentType.Orthogonal, 
                            Direction = Direction.Bottom 
                        } 
                    }
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Left">
            <summary>
            Sets the direction of the connector segment to Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Right">
            <summary>
            Sets the direction of the connector segment to Right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Top">
             <summary>
            Sets the direction of the connector segment to Top.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Bottom">
            <summary>
            Sets the direction of the connector segment to Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.MatrixTypes">
            <summary>
            MatrixTypes is used to transform points based on offsets, angle
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollActions">
            <summary>
            Indicates when the scroll properties are changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollActions.None">
            <summary>
            Disables all the functionalities of ScrollActions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollActions.PropertyChange">
            <summary>
            Indicates when the scroll properties are changed using property change.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollActions.Interaction">
            <summary>
            Indicates when the scroll properties are changed using interaction
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollActions.PublicMethod">
            <summary>
            Indicates when the scroll properties are changed using public method
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AnnotationConstraints">
            <summary>
            Enables or disables certain features and behaviors of the annotations.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Constraints = AnnotationConstraints.ReadOnly,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationConstraints.None">
            <summary>
            Disables all the functionalities of annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationConstraints.ReadOnly">
            <summary>
            Enables the user to only read the annotation (cannot be edited).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationConstraints.InheritReadOnly">
            <summary>
            Enables or disables the user from inheriting the ReadOnly option from the parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NoOfSegments">
            <summary>
            NoOfSegments is used to identify how much connector segments are in the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NoOfSegments.Zero">
            <summary>
            It represent zero segemnet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NoOfSegments.One">
            <summary>
            It represent one segemnet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NoOfSegments.Two">
            <summary>
            It represent two segemnets.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NoOfSegments.Three">
            <summary>
            It represent three segemnets.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NoOfSegments.Four">
            <summary>
            It represent four segemnets.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NoOfSegments.Five">
            <summary>
            It represent five segemnets.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AnnotationAlignment">
            <summary>
            It specifies the alignment of the diagram elements based on its immediate parent.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<PathAnnotation>() 
                { 
                    new PathAnnotation 
                    { 
                        Alignment = AnnotationAlignment.After,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.Center">
            <summary>
            Annotation placed on the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.Before">
            <summary>
            Annotation placed on top of the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.After">
            <summary>
            Annotation placed at the bottom of the connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PageOrientation">
            <summary>
            Defines the orientation of the Page
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings Width="500px" Height="400px" @bind-Orientation="PageOrientation.Landscape" />
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PageOrientation.Landscape">
            <summary>
            Display with page Width is more than the page Height
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PageOrientation.Portrait">
            <summary>
            Display with page Height is more than the page width
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BoundaryConstraints">
            <summary>
            Allows users to specify the region of the diagram in which they can interact with it. 
            </summary>
            <example>
            <code>
            <![CDATA[
                <PageSettings @bind-BoundaryConstraints="@constraints" >
                </PageSettings>
            @code
            {
                BoundaryConstraints constraints = BoundaryConstraints.Diagram;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Infinity">
            <summary>
            Allow interactions to take place at the infinite height and width of the diagram region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Diagram">
            <summary>
            Allow interactions to take place inside the diagram height and width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Page">
            <summary>
            Allow interactions to take place around the height and width mentioned in the page settings.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion">
            <summary> 
            Specifies the region that has to be printed or exported in diagram. 
            </summary> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  Height="600px">
            <PageSettings Width="500px" Height="400px" @bind-Orientation="PageOrientation.Landscape" />
            </SfDiagramComponent>
             @code
             {
                DiagramPrintExportRegion region = DiagramPrintExportRegion.PageSettings;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion.PageSettings">
            <summary> 
            Specifies the region within the x,y, width and height values of page settings is printed or exported. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion.Content">
            <summary> 
            Specifies the content of the diagram without empty space around the content is printed or exported. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramPrintExportRegion.ClipBounds">
             <summary> 
             Specifies the region specified using <see cref="P:Syncfusion.Blazor.Diagram.DiagramExportSettings.ClipBounds"/> property is exported. This is applicable for exporting only. 
             </summary> 
            <remarks>This is applicable only for diagram exporting</remarks> 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ImageAlignment">
            <summary>
            Specifies the process of overlaying images of the same scene under different condition of the image.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node5 = new Node()
            {
              Shape = new ImageShape()
              {
                Type = NodeShapes.Image, ImageAlign = ImageAlignment.None, Scale = DiagramScale.None,
                Source = " https://www.syncfusion.com/content/images/nuget/sync_logo_icon.png" 
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.None">
            <summary>
            Sets the none alignments for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMinYMin">
            <summary>
            Sets the smallest X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMidYMin">
            <summary>
            Sets the midpoint X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMaxYMin">
            <summary>
            Sets the maximum X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMinYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMidYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMaxYMid">
            <summary>
            Sets the maximum X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMinYMax">
            <summary>
            Sets the smallest X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMidYMax">
            <summary>
            Sets the midpoint X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMaxYMax">
            <summary>
            Sets the maximum X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramScale">
            <summary>
            Indicates whether or not the image should be scaled uniformly.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px">
            <BackgroundStyle ImageSource = "@imageSource" ImageScale="@imageScale”></BackgroundStyle>
            </SfDiagramComponent>
            string imageSource = "https://www.w3schools.com/images/w3schools_green.jpg";
            DiagramScale imageScale = DiagramScale.Slice;
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramScale.None">
            <summary>
            There will be no scaling of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramScale.Meet">
            <summary>
            stretches the content in both the x and y dimensions until it fills the width or height provided.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramScale.Slice">
            <summary>
            Preserves the aspect ratio of the content but scales up the graphic until it fills both the width and height provided (clipping the content that overflows the bounds).
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollLimitMode">
            <summary>
            Defines the scrollable region of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent >
            <ScrollSettings @bind-ScrollLimit="@scrollLimit">
            </ScrollSettings>
            </SfDiagramComponent>
            @code
            { 
                ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Infinity;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollLimitMode.Diagram">
            <summary>
            Enables scrolling to view the diagram content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollLimitMode.Infinity">
            <summary>
            The Diagram will be extended when we try to scroll the through it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollLimitMode.Limited">
            <summary>
            Enables scrolling to view the specified area.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramExportFormat">
            <summary>
            File Format type for export.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent>
            <PageSettings Width="500px" Height="400px" @bind-Orientation="PageOrientation.Landscape" />
            </SfDiagramComponent>
             @code
             {
                     DiagramExportFormat format = DiagramExportFormat.PNG;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramExportFormat.JPEG">
            <summary>
            Save the file in JPG Format
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramExportFormat.PNG">
            <summary>
            Save the file in PNG Format
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramExportFormat.SVG">
            <summary>
            Save the file in SVG Format
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LayoutType">
            <summary>
            Specifies the type of the layout that Diagram can be aligned its nodes and connectors.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent >
                <DataSourceSettings ID = "Id" ParentID="Team" DataSource="@DataSource"></DataSourceSettings>   
                <Layout Type = "LayoutType.OrganizationalChart">
                </Layout>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.None">
            <summary>
            None of the layouts are applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.HierarchicalTree">
            <summary>
            Defines the type of layout as a Hierarchical Tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.OrganizationalChart">
            <summary>
            Defines the type of layout as an Organizational Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.MindMap">
            <summary>
            Defines the type of layout as a Mind Map.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.ComplexHierarchicalTree">
            <summary>
            Defines the type of layout as a Complex Hierarchical Tree.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SubTreeAlignmentType">
            <summary>
            Specifies the collection of sub tree alignments in an organizational chart. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" NodeCreating="@NodeDefaults" ConnectorCreating="@ConnectorDefaults">
                <DataSourceSettings ID = "Id" ParentID="Team" DataSource="@DataSource"></DataSourceSettings>   
                <Layout Type = "LayoutType.OrganizationalChart"
                        @bind-HorizontalSpacing="@HorizontalSpacing" 
                        @bind-VerticalSpacing="@VerticalSpacing" 
                        GetLayoutInfo="GetLayoutInfo">
                </Layout>
            </SfDiagramComponent>
            @code
            {
               public class OrgChartDataModel 
               {
                   public string Id  { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                   new OrgChartDataModel() { Id= "2", Role= "Human Resource Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "3", Role= "Design Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "4", Role= "Operation Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "5", Role= "Marketing Manager", Team= "1" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Left">
            <summary>
            Aligns the child nodes at the left of the parent in a horizontal/vertical sub tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Right">
            <summary>
            Aligns the child nodes at the right of the parent in a horizontal/vertical sub tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Center">
            <summary>
            Aligns the child nodes at the center of the parent in a horizontal sub tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Alternate">
            <summary>
            Aligns the child nodes alternatively on both left and right sides in a vertical sub tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignmentType.Balanced">
            <summary>
            Aligns the child nodes horizontally to balance the width and height of the sub tree.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LayoutOrientation">
            <summary>
            Specifies the orientation of the automatic layout. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent >
                <DataSourceSettings ID = "Name" ParentID="Category" DataSource="DataSource"> </DataSourceSettings>
                    <Layou @bind-Orientation="@orientation" >                
                    </Layout>            
            </SfDiagramComponent>
            @code
            {
               LayoutOrientation orientation = LayoutOrientation.TopToBottom;
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.TopToBottom">
            <summary>
            Renders the layout from top to bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.BottomToTop">
            <summary>
            Renders the layout from bottom to top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.LeftToRight">
            <summary>
            Renders the layout from left to right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.RightToLeft">
            <summary>
            Renders the layout from right to left.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Orientation">
            <summary>
            Representing the placement of child elements in a vertical or horizontal stack
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>
            @code
            {
             private CommonElement SetTemplate(IDiagramObject node)
             {
               var table = new StackPanel();
               table.Orientation = Orientation.Horizontal;
               return table;
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Orientation.Horizontal">
            <summary>
            Sets the orientation to Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Orientation.Vertical">
            <summary>
            Sets the orientation to Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramElementAction">
            <summary>
            It specifies the action to be performed in the diagram while interacting.
            </summary>
            <example>
            <code>
            <![CDATA[
            public string cursor(DiagramElementAction action, bool active, string handle)
            {
                string cursors = null;
                if (action == DiagramElementAction.Drag)
                cursors = "-webkit-grabbing";
                return cursors;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.None">
            <summary>
            None of the actions are performed by the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.Select">
            <summary>
            Notifies when the selection happens.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.Drag">
            <summary>
            Notifies when the dragging is ongoing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ResizeWest">
            <summary>
            Notifies that the node is currently resizing to west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ConnectorSourceEnd">
            <summary>
            Notifies that the connector source points are currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ConnectorTargetEnd">
            <summary>
            Notifies that the connector Target points are currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ResizeEast">
            <summary>
            Notifies that the node is currently resizing to east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ResizeSouth">
            <summary>
            Notifies that the node is currently resizing to south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ResizeNorth">
            <summary>
            Notifies that the node is currently resizing to north direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ResizeSouthEast">
            <summary>
            Notifies that the node is currently resizing to south east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ResizeSouthWest">
            <summary>
            Notifies that the node is currently resizing to south west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ResizeNorthEast">
            <summary>
            Notifies that the node is currently resizing to north east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ResizeNorthWest">
            <summary>
            Notifies that the node is currently resizing to north west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.Rotate">
            <summary>
            Notifies that the node is currently rotating.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.Pan">
            <summary>
            Notifies that the node is currently panning.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.BezierSourceThumb">
            <summary>
            Notifies the bezier connector source points are currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.BezierTargetThumb">
            <summary>
            Notifies that the bezier connector target points are currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.SegmentEnd">
            <summary>
            Notifies that the connector segment endpoint is currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.OrthogonalThumb">
            <summary>
            Notifies that the connector orthogonal thumb is currently dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.FixedUserHandle">
            <summary>
            Notifies that the fixed user handle is currently active.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.Hyperlink">
            <summary>
            Notifies the hyperlink action when the mouse pointer is hovering over it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.Draw">
            <summary>
            Notifies the drawing of shapes using the drawing tool.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.PortDraw">
            <summary>
            Notifies the port draw action when drawing the connector from the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.PinchZoom">
            <summary>
            Notifies to interact the zoom action through touch.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramElementAction.ExpandAndCollapse">
            <summary>
            Notifies the Expand and collapse action when the Expand/Collapse Icon is clicked
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramInteractions">
            <summary>
            Allows the users to customize the selection, zooming, and interaction behavior of the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  Width="1000px"  Height="1000px" DiagramInteractions="Tools" >
            </SfDiagramComponent>
            @code
            {
               DiagramInteractions Tools = DiagramInteractions.ContinuousDraw;
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramInteractions.None">
            <summary>
            It disables the selection, zooming, and interaction behavior of the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramInteractions.SingleSelect">
            <summary>
            It allows users to select one node or connector at a time.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramInteractions.MultipleSelect">
            <summary>
            It allows users to select multiple nodes and connectors. It won't allow selecting a single node/connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramInteractions.ZoomPan">
            <summary>
            It allows users to pan the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramInteractions.DrawOnce">
            <summary>
            It enables users to draw the drawing objects at once. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramInteractions.ContinuousDraw">
            <summary>
            It enables users to draw the drawing objects continuously.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramInteractions.Default">
            <summary>
            By default, it allows users to select an individual as well as multiple nodes and connectors.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RubberBandSelectionMode">
            <summary>
            Defines how to handle the selected items via rubber band selection.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  SelectionSettings="@select" Height="600px" />
             @code
             {
                protected override void OnInitialized()
                {
                    DiagramSelectionSettings select = new DiagramSelectionSettings() {RubberBandSelectionMode= RubberBandSelectionMode.CompleteIntersect};
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RubberBandSelectionMode.CompleteIntersect">
            <summary>
            Selects the objects that are contained within the selected region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RubberBandSelectionMode.PartialIntersect">
            <summary>
            Selects the objects that are partially intersected with the selected region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectorConstraints">
            <summary>
            Enables or disables certain behaviors and features of the selector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent />
             @code
             {
                     diagram.SelectionSettings.Constraints |= SelectorConstraints.ResizeAll;
                }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.None">
            <summary>
            Hides all the selector elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ConnectorSourceThumb">
            <summary>
            Enables or disables the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ConnectorTargetThumb">
            <summary>
            Enables or disables the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeSouthEast">
            <summary>
            Enables or disables the bottom right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeSouthWest">
            <summary>
            Enables or disables the bottom left resize handle of the selector. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeNorthEast">
            <summary>
            Enables or disables the top right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeNorthWest">
            <summary>
            Enables or disables the top left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeEast">
            <summary>
            Enables or disables the middle right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeWest">
            <summary>
            Enables or disables the middle left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeSouth">
            <summary>
            Enables or disables the bottom center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeNorth">
            <summary>
            Enables or disables the top center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.Rotate">
            <summary>
            Enables or disables the rotate handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.UserHandle">
            <summary>
             Enables or disables the user handles of the selector .
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.Tooltip">
            <summary>
            Enables or disables the tooltip for drag, resize and rotate operation of nodes and connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.All">
            <summary>
            Enables or disables all handles of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeAll">
            <summary>
            Enables or disables all resize handles of the selector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CollectionChangedAction">
            <summary>
            Specifies whether an object is added/removed from the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  SelectionChanging="@OnSelectionChanging">
            </SfDiagramComponent>
            @code
            {
                private void OnSelectionChanging(SelectionChangingEventArgs args)
                {
                    if ((args != null) && (args.NewValue != null) && (args.OldValue != null))
                    {
                        CollectionChangedAction type = args.Type;
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.CollectionChangedAction.Add">
            <summary>
            Indicates that the object has been added to the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.CollectionChangedAction.Remove">
            <summary>
            Indicates that the object has been removed from the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.VisibleTarget">
            <summary>
            Specifies whether the userhandle is visible for Node or Connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VisibleTarget.Node">
            <summary>
            Specifies that userhandle is visible for node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VisibleTarget.Connector">
            <summary>
            Specifies that userhandle is visible for connetor.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramAction">
            <summary>
            Stores certain diagram state information that differ based on the usecase. For example, diagram rendering is in progress or any interaction currently in progress. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Render">
            <summary>
             It indicates that the component was currently in a rendering state.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.PublicMethod">
            <summary>
            It indicates that the current action was initiated through public API methods.
            </summary>
            
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Interactions">
            <summary>
            It indicates whether the drag or rotate or resize interaction is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Layouting">
            <summary>
            It indicates the layout process is currently in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.IsGroupDragging">
            <summary>
            It indicates whether a group node is currently dragging in the state.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.UndoRedo">
            <summary>
            It indicates that the diagram undo/redo action is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Group">
            <summary>
            It indicates group action in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.DrawingTool">
            <summary>
            It indicates whether the diagram drawing tool is currently active or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.EditText">
            <summary>
            It indicates whether any annotation is currently being edited in the state. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventDrag">
            <summary>
            Indicates to prevent the drag action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventScale">
            <summary>
            Indicates to prevent the scaling operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventDataInit">
            <summary>
            Indicates to prevent the data initialize.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.MeasureDataJSCall">
            <summary>
            Indicates whether JS calling has been made.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventRefresh">
            <summary>
            Indicates to prevent the whole diagram refresh.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PathDataMeasureAsync">
            <summary>
            Indicates whether path data is measuring has been made.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.EnableGroupAction">
            <summary>
            Enable the group action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventEventRefresh">
            <summary>
            Indicates to prevent the diagram refresh.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.ScrollActions">
            <summary>
            Indicates to diagram is preformed scroll actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventPathDataMeasure">
            <summary>
            Indicates to prevent the path data measure.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.SymbolDrag">
            <summary>
            Indicates the symbol is being dragged from the palette
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.CancelCollectionChange">
            <summary>
            Indicates to collection change event is cancelled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.GroupingCollectionChange">
            <summary>
            Indicates to collection change event is cancelled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.RefreshSelectorLayer">
            <summary>
            Indicates to refresh the selector layer.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventDragSource">
            <summary>
            Indicates to prevent the drag source while group dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventPathAnnotationMeasure">
            <summary>
            Indicates to prevent the annotation measure for connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventConnectorUpdation">
            <summary>
            Indicates to prevent the connector updation while interaction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventHistoryAdding">
            <summary>
            Indicates to prevent the history adding
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ThumbsConstraints">
            <summary>
            Specifies to enables/disables the handles for the selected items
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ConnectorSource">
            <summary>
            Sets the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ConnectorTarget">
            <summary>
            Sets the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.Default">
            <summary>
            Sets all handles of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeEast">
            <summary>
            Sets the middle right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeNorth">
            <summary>
            Sets the top center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeNorthEast">
            <summary>
            Sets the top right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeNorthWest">
            <summary>
            Sets the top left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeSouth">
            <summary>
            Sets the bottom center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeSouthEast">
            <summary>
            Sets the bottom right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeSouthWest">
            <summary>
            Sets the bottom left resize handle of the selected items. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeWest">
            <summary>
            Sets the middle left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.Rotate">
            <summary>
            Sets the rotate handle of the selected items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnEventType">
            <summary>
            Specifies the type of <see cref="T:Syncfusion.Blazor.Diagram.BpmnEvent"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BpmnEvent() 
                { 
                    EventType = BpmnEventType.Intermediate, 
                    Trigger = BpmnEventTrigger.None 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventType.Start">
            <summary>
            Specifies that an event is a Start event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventType.Intermediate">
            <summary>
            Specifies that an event is a Intermediate event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventType.End">
            <summary>
            Specifies that an event is a End event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventType.NonInterruptingStart">
            <summary>
            Specifies that an event is a NonInterruptingStart event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventType.NonInterruptingIntermediate">
            <summary>
            Specifies that an event is a NonInterruptingIntermediate event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventType.ThrowingIntermediate">
            <summary>
            Specifies that an event is a ThrowingIntermediate event according to BPMN.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnEventTrigger">
            <summary>
            Specifies type of triggers in <see cref="T:Syncfusion.Blazor.Diagram.BpmnEvent"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BpmnEvent() 
                { 
                    EventType = BpmnEventType.Intermediate, 
                    Trigger = BpmnEventTrigger.None 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.None">
            <summary>
            Specifies that an Event is a None Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Message">
            <summary>
            Specifies that an Event is a Message Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Timer">
            <summary>
            Specifies that an Event is a Timer Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Escalation">
            <summary>
            Specifies that an Event is an Escalation Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Link">
            <summary>
            Specifies that an Event is a Link Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Error">
            <summary>
            Specifies that an Event is an Error Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Compensation">
            <summary>
            Specifies that an Event is a Compensation Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Signal">
            <summary>
            Specifies that an Event is a Signal Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Multiple">
            <summary>
            Specifies that an Event is a Multiple Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Parallel">
            <summary>
            Specifies that an Event is a Parallel Multiple Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Cancel">
            <summary>
            Specifies that an Event is a Cancel Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Conditional">
            <summary>
            Specifies that an Event is a Conditional Event according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.Terminate">
            <summary>
            Specifies that an Event is a Terminate Event according to BPMN.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnGatewayType">
            <summary>
            Specifies the type of <see cref="T:Syncfusion.Blazor.Diagram.BpmnGateway"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BpmnGateway() 
                { 
                    GatewayType = BpmnGatewayType.None
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGatewayType.None">
            <summary>
            Specifies that a Gateway has the type None according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGatewayType.Exclusive">
            <summary>
            Specifies that a Gateway has the type Exclusive according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGatewayType.Inclusive">
            <summary>
            Specifies that a Gateway has the type Inclusive according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGatewayType.Parallel">
            <summary>
            Specifies that a Gateway has the type Parallel according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGatewayType.Complex">
            <summary>
            Specifies that a Gateway has the type Complex according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGatewayType.EventBased">
            <summary>
            Specifies that a Gateway has the type Event-Based according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGatewayType.ExclusiveEventBased">
            <summary>
            Specifies that a Gateway has the type Exclusive Event-Based according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGatewayType.ParallelEventBased">
            <summary>
            Specifies that a Gateway has the type Parallel Event-Based according to BPMN.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDataObjectType">
            <summary>
            Specifies the type of <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataObject"/>.
            </summary>
            <remarks>
            </remarks>
            Represents the transferring of data into or out of an Activity in the diagram.
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BpmnDataObject() 
                { 
                    DataObjectType = BpmnDataObjectType.Input, 
                    IsCollectiveData = true, 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnDataObjectType.None">
            <summary>
            Specifies the general type of data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnDataObjectType.Input">
            <summary>
            Specifies the input type of data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnDataObjectType.Output">
            <summary>
            Specifies the output type of data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnActivityType">
            <summary>
            Specifies the type of <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/>.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BpmnActivity() 
                { 
                    ActivityType = BpmnActivityType.Task, 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnActivityType.Task">
            <summary>
            Specifies the task type activity..
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnActivityType.CollapsedSubProcess">
            <summary>
            Specifies the subprocess type of an activity.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic">
            <summary>
            Specifies the LoopCharacteristics of <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/>/<see cref="T:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BpmnActivity() 
                { 
                    ActivityType = BpmnActivityType.Task, 
                    Loop = BpmnLoopCharacteristic.Standard,
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic.None">
            <summary>
            Specifies that an Activity is not looping according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic.Standard">
            <summary>
            Specifies that an Activity has a Standard Loop Characteristic according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic.ParallelMultiInstance">
            <summary>
            Specifies that an Activity has a parallel Multi-Instance Loop Characteristic according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic.SequenceMultiInstance">
            <summary>
            Specifies that an Activity has a sequential Multi-Instance Loop Characteristic according to BPMN.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTaskType">
            <summary>
            Specifies the type of the task in <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BpmnActivity() 
                { 
                    ActivityType = BpmnActivityType.Task, 
                    TaskType = BpmnTaskType.Service,
                    IsCall = true,
                    ISCompensationActivity = true, 
                    Loop = BpmnLoopCharacteristic.Standard,
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTaskType.None">
            <summary>
            Specifies the type of a task to be a None task according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTaskType.Service">
            <summary>
            Specifies the type of a task to be a Service task according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTaskType.Receive">
            <summary>
            Specifies the type of a task to be a Receive task according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTaskType.Send">
            <summary>
            Specifies the type of a task to be a Send task according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTaskType.InstantiatingReceive">
            <summary>
            Specifies the type of a task to be a InstantiatingReceive task according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTaskType.Manual">
            <summary>
             Specifies the type of a task to be a Manual task according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTaskType.BusinessRule">
            <summary>
            Specifies the type of a task to be a Business Rule task according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTaskType.User">
            <summary>
            Specifies the type of a task to be a User task according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTaskType.Script">
            <summary>
            Specifies the type of a task to be a Script task according to BPMN.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnSubProcessType">
            <summary>
            Specifies the Boundary.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Shape = new BpmnActivity() 
                { 
                    ActivityType = BpmnActivityType.Subprocess, 
                    TaskType = BpmnTaskType.Service,
                    IsCall = true,
                    ISCompensationActivity = true, 
                    SubProcessType = BpmnSubProcessType.Transaction,
                    Loop = BpmnLoopCharacteristic.Standard,
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessType.Default">
            <summary>
            Specifies the type of an activity to be a Default Boundary according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessType.Transaction">
            <summary>
            Specifies the type of an activity to be a Transaction Boundary according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessType.Call">
            <summary>
            Specifies the type of an activity to be a Call Boundary according to BPMN.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessType.Event">
            <summary>
            Specifies the type of an activity to be a Event Boundary according to BPMN.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnFlowType">
            <summary>
            Specifies the type of <see cref="T:Syncfusion.Blazor.Diagram.BpmnFlow"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector4 = new Connector() 
            {
                Type = ConnectorSegmentType.Straight,
                Shape = new BpmnFlow() 
                { 
                    FlowType = BpmnFlowType.SequenceFlow,
                } 
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlowType.AssociationFlow">
            <summary>
            Specifies relationship between artifacts and flow objects. This is represented as a dotted line.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlowType.DirectionalAssociationFlow">
            <summary>
            Specifies with data objects to show that there are either an input or output from an activity. This is represented as a dotted line with an arrow at one end.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlowType.BiDirectionalAssociationFlow">
            <summary>
            Specifies with data objects to show that there are both input and output from an activity. This is represented as a dotted line with an arrow at both ends.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlowType.MessageFlow">
            <summary>
            Specifies the flow of messages between two participants.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlowType.InitiatingMessageFlow">
            <summary>
            Specifies an activity or event in one pool which can initiate a message to another pool.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlowType.NonInitiatingMessageFlow">
            <summary>
            Specifies an activity or event in one pool which can’t initiate a message to another pool.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlowType.SequenceFlow">
            <summary>
            Specifies the typical path between two flow objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlowType.DefaultSequenceFlow">
            <summary>
            Specifies the default sequence flow when other conditional flows are not valid. It is indicated by a backslash at the beginning of the sequence.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlowType.ConditionalSequenceFlow">
            <summary>
            Specifies the flow of a process based on certain conditions. It is indicated by a diamond at the beginning of the sequence.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextAnnotationDirection">
            <summary>
            Specifies the directions of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnTextAnnotation"/> from its target.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node() 
            {
                Shape = new BpmnTextAnnotation() 
                { 
                    TextAnnotationTarget = TextAnnotationTarget.Auto,
                    TextAnnotationTarget = "node2" 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAnnotationDirection.Auto">
            <summary>
            Specifies the direction as auto to switch the direction based on the connector position.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAnnotationDirection.Left">
            <summary>
            Specifies the direction as left when the absolute angle as 180 degree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAnnotationDirection.Right">
            <summary>
            Specifies the direction as right when the absolute angle as 0 degree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAnnotationDirection.Top">
            <summary>
            Specifies the direction as top when the absolute angle as 270 degree or -90dDegree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAnnotationDirection.Bottom">
            <summary>
            Specifies the direction as bottom when the absolute angle as 90 degree.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BranchType">
            <summary>
            Defines the Alignment position
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <DataSourceSettings ID = "Id" ParentID="Team" DataSource="@DataSource"></DataSourceSettings>   
                <Layout Type = "LayoutType.MindMap">
                </Layout>
            </SfDiagramComponent>
            @code
            {
               public class OrgChartDataModel 
               {
                   public string Id  { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
                    public BranchType branch { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" ,branch = BranchType.Root},
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.Left">
            <summary>
            Sets the branch type as Left
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.Right">
            <summary>
            Sets the branch type as Right
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.SubLeft">
            <summary>
            Sets the branch type as SubLeft
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.SubRight">
            <summary>
            Sets the branch type as SubRight
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchType.Root">
            <summary>
            Sets the branch type as Root
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ModifierKeys">
            <summary>
            Specifies a combination of key modifiers, on recognition of which the command will be executed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent >
                <CommandManager Commands = "@command" >
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new KeyboardCommand()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.G, Modifiers = ModifierKeys.Control }
                    },
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.None">
            <summary>
            Specifies when no modifiers are pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.Control">
            <summary>
            Specifies the Ctrl key as a key modifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.Meta">
            <summary>
            Specifies meta key in mac.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.Alt">
            <summary>
            Specifies the alt key as a key modifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ModifierKeys.Shift">
            <summary>
            Specifies the shift key as a key modifier.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramKeys">
            <summary>
             Represents the class for arranging the nodes and connectors in a tree structure.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
                 <CommandManager Commands = "@command">
                 </CommandManager>
             @code
             {
                 DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                 {
                     new KeyboardCommand()
                     {
                         Name = "CustomGroup",
                         Gesture = new KeyGesture() { Key = DiagramKeys.G, Modifiers = ModifierKeys.Control }
                     },
                 };
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.None">
            <summary>
            Sets the key value as null when none keys is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number0">
            <summary>
            Sets the key value as 0 when key 0 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number1">
            <summary>
            Sets the key value as 1 when key 1 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number2">
            <summary>
            Sets the key value as 2 when key 2 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number3">
            <summary>
            Sets the key value as 3 when key 3 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number4">
            <summary>
            Sets the key value as 4 when key 4 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number5">
            <summary>
            Sets the key value as 5 when key 5 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number6">
            <summary>
            Sets the key value as 6 when key 6 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number7">
            <summary>
            Sets the key value as 7 when key 7 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number8">
            <summary>
            Sets the key value as 8 when key 8 is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Number9">
            <summary>
             Sets the key value as 9 when key 9 is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.A">
            <summary>
            Sets the key value as A when key A is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.B">
            <summary>
            Sets the key value as B when key B is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.C">
            <summary>
             Sets the key value as C when key C is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.D">
            <summary>
             Sets the key value as D when key D is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.E">
            <summary>
            Sets the key value as E when key E is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F">
            <summary>
            Sets the key value as F when key F is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.G">
            <summary>
            Sets the key value as G when key G is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.H">
            <summary>
            Sets the key value as H when key H is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.I">
            <summary>
            Sets the key value as I when key I is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.J">
            <summary>
            Sets the key value as J when key J is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.K">
            <summary>
            Sets the key value as K when key K is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.L">
            <summary>
            Sets the key value as L when key L is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.M">
            <summary>
            Sets the key value as M when key M is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.N">
            <summary>
            Sets the key value as N when key N is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.O">
            <summary>
            Sets the key value as O when key O is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.P">
            <summary>
            Sets the key value as P when key P is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Q">
            <summary>
            Sets the key value as Q when key Q is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.R">
            <summary>
            Sets the key value as R when key R is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.S">
            <summary>
            Sets the key value as S when key S is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.T">
            <summary>
            Sets the key value as T when key T is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.U">
            <summary>
            Sets the key value as U when key U is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.V">
            <summary>
            Sets the key value as V when key V is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.W">
            <summary>
            Sets the key value as W when key W is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.X">
            <summary>
            Sets the key value as X when key X is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Y">
            <summary>
            Sets the key value as Y when key Y is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Z">
            <summary>
            Sets the key value as Z when key Z is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.ArrowLeft">
            <summary>
            Sets the key value as left when left arrow key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.ArrowUp">
            <summary>
            Sets the key value as up when up arrow key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.ArrowRight">
            <summary>
            Sets the key value as right when right arrow key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.ArrowDown">
            <summary>
            Sets the key value as down when left down key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Escape">
            <summary>
            Sets the key value as Escape when escape key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Space">
            <summary>
            Sets the key value as Space when space key is pressed.
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.PageUp">
            <summary>
            Sets the key value as PageUp when page up key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.PageDown">
            <summary>
             Sets the key value as PageDown when page down key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.End">
            <summary>
             Sets the key value as End when end key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Home">
            <summary>
            Sets the key value as Home when home key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Delete">
            <summary>
            Sets the key value as Delete when delete key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Tab">
            <summary>
             Sets the key value as Tab when tab key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Enter">
            <summary>
            Sets the key value as enter when enter key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.BackSpace">
            <summary>
            Sets the key value as BackSpace when BackSpace key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F1">
            <summary>
            Sets the key value as F1 when F1 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F2">
            <summary>
            Sets the key value as F2 when F2 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F3">
            <summary>
            Sets the key value as F3 when F3 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F4">
            <summary>
            Sets the key value as F4 when F4 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F5">
            <summary>
            Sets the key value as F5 when F5 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F6">
            <summary>
            Sets the key value as F6 when F6 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F7">
            <summary>
            Sets the key value as F7 when F7 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F8">
            <summary>
            Sets the key value as F8 when F8 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F9">
            <summary>
            Sets the key value as F9 when F9 key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F10">
            <summary>
             Sets the key value as F10 when F10 key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F11">
            <summary>
             Sets the key value as F11 when F11 key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.F12">
            <summary>
             Sets the key value as F12 when F12 key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Star">
            <summary>
             Sets the key value as Star when star key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Plus">
            <summary>
             Sets the key value as Plus when plus key is pressed.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramKeys.Minus">
            <summary>
             Sets the key value as Minus when minus key is pressed.
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SnapConstraints">
            <summary>
            Enables or disables certain features of snapping. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @bind-Constraints="@diagramConstraints" Height="600px" />
            <SnapSettings @ref="snapSettings" @bind-Constraints="@Constraints" />
             @code
             {
             SnapSettings snapSettings;
              SnapConstraints Constraints = SnapConstraints.All;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.None">
            <summary>
            Disables all the functionalities of snapping.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.ShowHorizontalLines">
            <summary>
            Displays only the horizontal grid lines in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.ShowVerticalLines">
            <summary>
            Displays only the vertical grid lines in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.ShowLines">
            <summary>
            Display both the horizontal and the vertical grid lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToHorizontalLines">
            <summary>
            Enables the object to snap only with horizontal grid lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToVerticalLines">
            <summary>
            Enables the object to snap only with vertical grid lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToLines">
            <summary>
            Enables the object to snap with both the horizontal and vertical grid lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToObject">
            <summary>
            Enables the object to snap with other objects in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.All">
            <summary>
            Enables all the functionalities of snapping.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryEntryType">
            <summary>
             Defines the entry type
             </summary>
             <example>
             <code>
             <![CDATA[
             private void HistoryEntryTypeChange()
             {
              HistoryEntryType history = HistoryEntryType.CollectionChanged;
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.PositionChanged">
            <summary>
            PositionChanged - Sets the entry type as PositionChanged 
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.ConnectionChanged">
            <summary>
            ConnectionChanged - Sets the entry type as ConnectionChanged 
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.StartGroup">
            <summary>
            StartGroup - Sets the entry type as StartGroup
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.EndGroup">
            <summary>
            EndGroup - Sets the entry type as EndGroup
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.RotationChanged">
            <summary>
            RotationChanged - Sets the entry type as RotationChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.PropertyChanged">
            <summary>
            PropertyChanged - Sets the entry type as PropertyChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.CollectionChanged">
            <summary>
            CollectionChanged - Sets the entry type as CollectionChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.LabelCollectionChanged">
            <summary>
            LabelCollectionChanged - Sets the entry type as LabelCollectionChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.PortCollectionChanged">
            <summary>
            PortCollectionChanged - Sets the entry type as PortCollectionChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.Group">
            <summary>
            Group - Sets the entry type as Group
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.Ungroup">
            <summary>
            Ungroup - Sets the entry type as Ungroup
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.SegmentChanged">
            <summary>
            SegmentChanged - Sets the entry type as SegmentChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.AnnotationPropertyChanged">
            <summary>
            AnnotationPropertyChanged - Sets the entry type as AnnotationPropertyChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.Undo">
            <summary>
            Undo - Sets the entry type as Undo
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.Redo">
            <summary>
            Redo - Sets the entry type as Redo
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryType.SizeChanged">
            <summary>
            SizeChanged - Sets the entry type as SizeChanged
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EntryCategory">
            <summary>
            Defines the kind of entry category from which the history will be added or modified by the user or internally.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void OnCustomEntry()
            {
                Node cloneObject = node1.Clone() as Node;
                cloneObject.AddInfo = new Dictionary<string, object>();
                cloneObject.AddInfo.Add(cloneObject.ID, "Description");
                HistoryEntry entry1 = new HistoryEntry();
                entry1.ChangeType = HistoryEntryChangeType.Insert;
                entry1.Category = EntryCategory.ExternalEntry;
                entry1.UndoObject = (cloneObject) as Node;
                diagram.HistoryManager.Push(entry1);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryCategory.InternalEntry">
            <summary>
            Sets the entry category type as Internal when it`s added internally.
            </summary>       
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryCategory.ExternalEntry">
            <summary>
            Sets the entry category type as External when it`s added by the user.
            </summary>   
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryChangedAction">
            <summary>
            Specifies the state of history actions such as undo and redo.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  HistoryChanged="@OnHistoryChanged">
            </SfDiagramComponent>
            private void OnHistoryChanged(HistoryChangedEventArgs arg)
            {
                if (arg.Entry != null)
                {
                    HistoryChangedAction historyChangeArgs = arg.ActionTrigger;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryChangedAction.CustomAction">
            <summary>
            Defines the history of action as custom action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryChangedAction.Undo">
            <summary>
            Sets the history action as Undo when performing an undo action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryChangedAction.Redo">
            <summary>
            Sets the history action as Redo when performing the redo action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.MouseButtons">
            <summary>
            Defines the value that specifies the buttons on a mouse device.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.MouseButtons.Left">
            <summary>
            Represents the left mouse button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.MouseButtons.Middle">
            <summary>
            Represents the middle mouse button
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.MouseButtons.Right">
            <summary>
            Represents the right mouse button.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryEntryChangeType">
            <summary>
            Defines the change type from which the history will be entered.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  HistoryChanged="@OnHistoryChanged">
            </SfDiagramComponent>
            private void OnHistoryChanged(HistoryChangedEventArgs arg)
            {
                if (arg.Entry != null)
                {
                    HistoryEntryChangeType historyEntryChangeType = arg.CollectionChangedAction;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryChangeType.None">
            <summary>
            Represents none of the history entries to insert/remove.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryChangeType.Insert">
            <summary>
            Represents the history inserted into the entry.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntryChangeType.Remove">
            <summary>
            Represents the history  removed from the entry.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FitMode">
            <summary>
            Indicates where an element should be displayed on the viewport relative to the Height and Width of the Diagram elementss in the page
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent Diagram;
               FitOptions Options = new FitOptions(){
               Mode = FitMode.Both,
               }
               
               Diagram.FitToPage(Options);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FitMode.Both">
            <summary>
            Fits the group of elements within the ViewPort based on both Height aned Width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FitMode.Width">
            <summary>
            Fits the group of elements within the ViewPort based on Height.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FitMode.Height">
            <summary>
            Fits the group of elements within the ViewPort based on Height.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramRegion">
            <summary> 
            Specifies the region that has to be fit within the viewport.
            </summary> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent >
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent Diagram;
               FitOptions Options = new FitOptions(){
                   Region = DiagramRegion.PageSettings
               }
               
               Diagram.FitToPage(Options);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramRegion.PageSettings">
            <summary> 
            Specifies the region within the given values(x,y, width and height) of page settings. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramRegion.Content">
            <summary> 
            Specifies the region holding content of the diagram without empty space around the content. 
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramOverviewConstraints">
             <summary>
            Specifies the interaction setting (such as the zoom, pan, draw, and tap) enabled or disabled in overview component.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent @ref = "diagram" Height="600px" Width="90%" ID="diagram" @bind-Nodes="nodes"
                                @bind-Connectors="connectors">
            </SfDiagramComponent>
            <SfDiagramOverviewComponent Width = "400" Height="300" SourceID="diagram" Constraints="DiagramOverviewConstraints.Zoom"></SfDiagramOverviewComponent>
            @code {
                SfDiagramComponent diagram; DiagramObjectCollection<Node> nodes; DiagramObjectCollection<Connector> connectors;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    connectors = new DiagramObjectCollection<Connector>();
                    Node node1 = new Node()
                    {
                        ID = "node1",
                        Height = 100,
                        Width = 100,
                        OffsetX = 100,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    Node node2 = new Node()
                    {
                        ID = "node2",
                        Height = 100,
                        Width = 100,
                        OffsetX = 300,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    nodes.Add(node1); nodes.Add(node2);
                    Connector connector1 = new Connector()
                    {
                        ID = "connector1",
                        SourceID = "node1",
                        TargetID = "node2",
                        Type = ConnectorSegmentType.Straight,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeWidth = 2
                        }
                    };
                    connectors.Add(connector1);
                }
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramOverviewConstraints.None">
            <summary>
            Disables all the interactions in overview component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramOverviewConstraints.Pan">
            <summary>
            Enables the panning interaction in overview component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramOverviewConstraints.Zoom">
            <summary>
            Enables the zooming interaction in overview component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramOverviewConstraints.DrawFocus">
            <summary>
            Enables to zoom or change the viewport area of the diagram by drawing the new rect in the overview component.  
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramOverviewConstraints.TapFocus">
            <summary>
            Enables the panning of the diagram viewport to specific focus point by tap on the overview component
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramOverviewConstraints.Default">
            <summary>
            Enables all the interactions in overview component.
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs">
            <summary>
            Provides data for the PropertyChanged event.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  PropertyChanged="@PropertyChanged">
            </SfDiagramComponent>
            @code
            { 
              private void PropertyChanged(PropertyChangedEventArgs args)
              {
                if ((args != null) && (args.Element != null) && (args.NewValue != null) && (args.OldValue != null))
                {
                  Console.WriteLine("Changed");
                }
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs.Element">
            <summary>
            Gets the object where the property change has occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs.NewValue">
            <summary>
            Gets the new value of the property that was changed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs.OldValue">
            <summary>
            Gets the old value of the property that was changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the property that has a property change.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DraggingEventArgs">
            <summary>
            Notifies when an element drags over another diagram element.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Dragging="Dragging">
            </SfDiagramComponent>
            private void Dragging(DraggingEventArgs args)
            {
                if (args.Element is DiagramSelectionSettings)
                {
                    DiagramSelectionSettings selector = args.Element as DiagramSelectionSettings;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.Element">
            <summary>
            Gets the node or connector that is dragged outside the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.Position">
            <summary>
            Gets the mouse position of the node/connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DragStartEventArgs">
            <summary>
            Notifies when the element enters into the diagram from the symbol palette.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  DragStart="DragStart">
            </SfDiagramComponent>
            private void DragStart(DragStartEventArgs args)
            {
                if (args.Element is Node)
                {
                    (args.Element as Node).Width = 300;
                    (args.Element as Node).Height = 300;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragStartEventArgs.Element">
            <summary>
            Gets the node/connector over which the symbol is dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragStartEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to add or remove the symbol from the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DragLeaveEventArgs">
            <summary>
            Notifies when the element leaves the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  DragLeave="DragLeave">
            </SfDiagramComponent>
            private void DragLeave(DragLeaveEventArgs args)
            {
                if (args.Element is Node)
                {
                    (args.Element as Node).Width = 300;
                    (args.Element as Node).Height = 300;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragLeaveEventArgs.Element">
            <summary>
            Gets the node or connector that is dragged outside the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DropEventArgs">
            <summary>
            Notifies when the element is dropped from the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  DragDrop="DragDrop">
            </SfDiagramComponent>
            private void DragDrop(DropEventArgs args)
            {
                if (args.Element is Node)
                {
                    string id = (args.Element as NodeBase).ID;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Element">
            <summary>
            Gets the node or connector that is being dropped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Target">
            <summary>
            Gets the object from which the object will be dropped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the drop event or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Position">
            <summary>
            Gets the position of the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectionChangingEventArgs">
            <summary>
            Notifies before the select or deselect any objects from the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent SelectionChanging="@SelectionChanging">
            </SfDiagramComponent>
            private void SelectionChanging(SelectionChangingEventArgs args)
            {
                 if (args.NewValue[0] is Node)
                {
                   args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether the element can be selected.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs">
            <summary>
            Notifies when select or deselect any objects from the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent SelectionChanged="@OnSelectionChanged">
            </SfDiagramComponent>
            private void OnSelectionChanged( SelectionChangedEventArgs args)
            {
                if (args.NewValue[0] is Node)
                {
                    string id = (args.Element as NodeBase).ID;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs.ActionTrigger">
            <summary>
            Gets the actual cause of the event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs.NewValue">
            <summary>
            Gets the selected element after the event has triggered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs.OldValue">
            <summary>
            Gets the last selected elements, it's empty if previously, not objects have selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangedEventArgs.Type">
            <summary>
            Gets the item is added or removed from the list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextChangeEventArgs">
            <summary>
            Notifies when the label of an element undergoes editing. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  TextChanged="@textedit">
            </SfDiagramComponent>
            private void textedit(TextChangeEventArgs args)
            {
                args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.OldValue">
            <summary>
            Gets the old text value of the element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.NewValue">
            <summary>
            Gets the new text value of the element that is being changed 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.Element">
            <summary>
            Gets a node or connector in which annotation is being edited 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.Annotation">
            <summary>
            Represents the annotation which is being edited. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the event or not. 
            </summary>
            <value> When textchanging event is triggered, cancel property in <see cref="T:Syncfusion.Blazor.Diagram.TextChangeEventArgs"/> will be applicable</value>
            <remarks> 
            It will be applicable only when textchangingevent is triggered.
            </remarks> 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs">
            <summary>
            Provides information about current mouse events like mouse down, mouse move, etc. 
            </summary>
            <remarks>
            It will return the event properties when a mouse down, mouse move, mouse leave, or mouse up event occurs based on the tool which is currently active, like resize, clone tool, etc.
            </remarks>
            <example>
            <code>
            <![CDATA[
            public class CloneTool : DragController
            {
                public CloneTool(SfDiagramComponent diagram) : base(diagram)
                {
                }
                public override void OnMouseDown(DiagramMouseEventArgs args)
                {
                    NodeBase newObject;
                    if (Diagram.SelectionSettings.Nodes.Count > 0)
                    {
                        newObject = (Diagram.SelectionSettings.Nodes[0]).Clone() as Node;
                    }
                    else
                    {
                        newObject = (Diagram.SelectionSettings.Connectors[0]).Clone() as Connector;
                    }
                    newObject.ID += Diagram.Nodes.Count.ToString();
                    Diagram.Copy();
                    Diagram.Paste();
                    ObservableCollection<IDiagramObject> obj = new ObservableCollection<IDiagramObject>() { Diagram.Nodes[Diagram.Nodes.Count - 1] as IDiagramObject };
                    Diagram.Select(obj);
                    args.Element = Diagram.SelectionSettings.Nodes[0] as IDiagramObject;
                    base.OnMouseDown(args);
                    this.InAction = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.Position">
            <summary>
            Gets the current position of the mouse pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.ActualObject">
            <summary>
            Gets the actual node or connector which is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.Element">
            <summary>
            Gets or sets the selector object which is currently selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.SourceWrapper">
            <summary>
            Gets or sets the wrapper of the source object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.Target">
            <summary>
            Gets or sets the object under the source objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.TargetWrapper">
            <summary>
            Gets or sets the wrapper of the target object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.ClickCount">
            <summary>
            Gets the number of times it clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PositionChangingEventArgs">
            <summary>
            Notifies before the node or connector is dragging or its position is changing.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  PositionChanging="@changed">
            </SfDiagramComponent>
            private void changed(PositionChangingEventArgs args)
            {
                if (args.NewValue != null && args.OldValue != null && args.Element != null)
                {
                    Console.WriteLine("Changing");
                }
            }    
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PositionChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates the user prevents dragging of element over the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PositionChangedEventArgs">
            <summary>
            Notifies when the node or connector is dragged or its position is changed.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  PositionChanged="@changed">
            </SfDiagramComponent>
            private void changed(PositionChangedEventArgs args)
            {
                if (args.NewValue != null && args.OldValue != null && args.Element != null)
                {
                    Console.WriteLine("Changed");
                }
            }    
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PositionChangedEventArgs.NewValue">
            <summary>
            Gets the selector’s current value in which the node or the connector is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PositionChangedEventArgs.OldValue">
            <summary>
            Gets the Selector old value in which the node or the connector is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PositionChangedEventArgs.Element">
            <summary>
            Gets the node or connector that is being dragged.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionObject">
            <summary>
            Specifies the source and the target details of the connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  ConnectionChanging="ConnectionChanging">
            </SfDiagramComponent>
             private void ConnectionChanging(ConnectionChangingEventArgs args)
            {
               ConnectionObject obj;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.SourceID">
            <summary>
            Gets the source node id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.SourcePortID">
            <summary>
            Gets the source port id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.TargetID">
            <summary>
            Gets the target node id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.TargetPortID">
            <summary>
            Gets the target port id of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionChangingEventArgs">
            <summary>
            Notifies before the connector’s source id or target id has changing.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  ConnectionChanging="ConnectionChanging">
            </SfDiagramComponent>
             private void ConnectionChanging(ConnectionChangingEventArgs args)
            {
               args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangingEventArgs.Cancel">
            <summary>
            Defines whether the user can prevent the connection or disconnection of the connector while its endpoint is dragging.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs">
            <summary>
            Notifies when the connector’s source id or target id has changed.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" ConnectionChanged="ConnectionChanged">
            </SfDiagramComponent>
             private void ConnectionChanging(ConnectionChangedEventArgs args)
            {
               
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs.Connector">
            <summary>
            Returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs.ConnectorAction">
            <summary>
            Returns whether it is a source end or a target end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs.NewValue">
            <summary>
            Represents the current source or target node while dragging the endpoint of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangedEventArgs.OldValue">
            <summary>
            Specifies the previous source or target node of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RotationChangingEventArgs">
            <summary>
            RotationChangingEventArgs notifies before the node/connector are rotating
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent RotationChanging="@RotationChanging">
            </SfDiagramComponent>
            @code
            {
                private void RotationChanging(RotationChangingEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RotationChangedEventArgs">
            <summary>
            RotationChangedEventArgs notifies when the node/connector are rotated
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  RotationChanged="@RotationChanged">
            </SfDiagramComponent>
            @code
            {
                private void RotationChanged(RotationChangedEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationChangedEventArgs.Element">
            <summary>
            Gets the node that is selected for rotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationChangedEventArgs.OldValue">
            <summary>
            Gets the previous rotation angle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationChangedEventArgs.NewValue">
            <summary>
            Gets the new rotation angle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SizeChangingEventArgs">
            <summary>
            Notifies when the element is resizing.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" SizeChanging="@OnSizeChange" />
            @code
            {
                DiagramObjectCollection<Node> nodes;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    Node node = new Node()
                    {
                        // Position of the node
                        OffsetX = 250,
                        OffsetY = 250,
                        // Size of the node
                        Width = 100,
                        Height = 100,
                    };
                    nodes.Add(node);
                }
                // Size change event for the diagram
                public void OnSizeChange(SizeChangingEventArgs args)
                {
                    Console.WriteLine(args.NewValue.Nodes[0].ID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SizeChangedEventArgs">
            <summary>
            Notifies when the element is resized.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" SizeChanged="@SizeChanged" />
            @code
            {
                // To define the node collection
                DiagramObjectCollection<Node> nodes;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    // A node is created and stored in the nodes collection.
                    Node node = new Node()
                    {
                        // Position of the node
                        OffsetX = 250,
                        OffsetY = 250,
                        // Size of the node
                        Width = 100,
                        Height = 100,
                        Style = new ShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                    };
                    // Add a node
                    nodes.Add(node);
                }
                // Size change event for the diagram
                public void SizeChanged(SizeChangedEventArgs args)
                {
                    Console.WriteLine(args.NewValue.Nodes[0].ID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangedEventArgs.Element">
            <summary>
            Returns the element which has been selected for the resizing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangedEventArgs.OldValue">
            <summary>
            Returns the previous width, height, offsetX and offsetY values of the element that is resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangedEventArgs.NewValue">
            <summary>
            Returns the new width, height, offsetX and offsetY values of the element that is resized
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EndPointChangingEventArgs">
            <summary>
            Represents before the source and target points of the connector are changing.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" TargetPointChanging="@OnTargetPointChanging">
            </SfDiagramComponent>
            private void OnTargetPointChanging(EndPointChangingEventArgs args)
            {
                if (args.Connector != null)
                {
                    Connector connector = args.Connector;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the change or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs">
            <summary>
            Represents the source and target points of the connector are changed.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" TargetPointChanged="@OnTargetPointChanged">
            </SfDiagramComponent>
            private void OnTargetPointChanged(EndPointChangedEventArgs args)
            {
                if (args.Connector != null)
                {
                    Connector connector = args.Connector;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.Connector">
            <summary>
            Gets the current connector from which the source point or target point is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.OldValue">
            <summary>
            Gets the previous point of the mouse pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.NewValue">
            <summary>
            Gets the current point of the mouse pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.TargetNodeID">
            <summary>
            Gets the target node of the connector while dragging the end point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndPointChangedEventArgs.TargetPortID">
            <summary>
            Gets the target port of the node that is to be connected with  the connector while dragging the end point.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandleClickEventArgs">
            <summary>
            Notifies when the fixed user handle gets clicked.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" FixedUserHandleClick="@fixedhandle">
            </SfDiagramComponent>
            public void fixedhandle(FixedUserHandleClickEventArgs args)
            {
            
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandleClickEventArgs.FixedUserHandle">
            <summary>
            Represents the instance of the clicked fixed user handle. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandleClickEventArgs.Element">
            <summary>
            Gets nodes/connector which have the clicked fixed user handle. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommandKeyArgs">
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent>
                <CommandManager CanExecute="@CanExe">
                </CommandManager>
            </SfDiagramComponent>
            @code
            { 
                public void CanExe(CommandKeyArgs args)
                {
                    args.CanExecute = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandKeyArgs.Name">
            <summary>
            Specifies the name of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandKeyArgs.CanExecute">
            <summary>
            Defines the method that determines whether the command can be executed in its current state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandKeyArgs.Gesture">
            <summary>
            Specifies a combination of keys and key modifiers, on recognition of which the command should be executed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.KeyEventArgs">
            <summary>
            Notifies while performing the key actions.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" KeyUp="@OnKeyUp">
            </SfDiagramComponent>
            @code
            {
                private void OnKeyUp(KeyEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.Element">
            <summary>
            Returns the selected element of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.Key">
            <summary>
            Returns the value of the key action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.KeyCode">
            <summary>
            Returns a number that represents the actual key pressed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.KeyModifiers">
            <summary>
            Returns any modifier keys that were pressed when the flick gesture occurred.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs">
            <summary>
            Represents the class which is used to notifies while the changes occurs during undo/redo process.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" HistoryChanged="HistoryChanged">
            </SfDiagramComponent>
            @code
            {
                private void HistoryChanged(HistoryChangedEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.Source">
            <summary>
            Gets the collection of objects that are changed in the last undo/redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.Entry">
            <summary>
            Gets the previous and new value of the history object that has been changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.EntryType">
            <summary>
            Gets the type of the newly added entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.CollectionChangedAction">
            <summary>
             Gets the entry's change type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangedEventArgs.ActionTrigger">
            <summary>
            Gets the event action.
            </summary>       
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CollectionChangingEventArgs">
            <summary>
            Notifies before the node/connector is added or removed from the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" CollectionChanging="@collection">
            </SfDiagramComponent>
            @code
            {
                private void collection(CollectionChangingEventArgs args)
                {
                    if (args.Element != null)
                    {
                        Console.WriteLine("CollectionChanging");
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the change or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CollectionChangedEventArgs">
            <summary>
            Notifies while the node/connector is added or removed from the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" CollectionChanged="@collection">
            </SfDiagramComponent>
            @code
            {
                private void collection(CollectionChangedEventArgs args)
                {
                    if (args.Element != null)
                    {
                        Console.WriteLine("CollectionChanged");
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangedEventArgs.ActionTrigger">
            <summary>
            Gets the current action, like Interactions, Drawing Tools, etc., to be performed in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangedEventArgs.Element">
            <summary>
            Gets the actual object which is added, removed, or modified.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangedEventArgs.Action">
            <summary>
            Gets the type of collection change like addition or removal.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ClickEventArgs">
            <summary>
            Notifies when clicking on an object or diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" Click="click">
            </SfDiagramComponent>
            @code
            {
                private void click(ClickEventArgs args)
                {
                    if (args.ActualObject != null)
                    {
                        Console.WriteLine("Clicked");
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.ActualObject">
            <summary>
            Gets the object to be clicked on. It returns null when there is no object present in the clicked position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Count">
            <summary>
            Gets the number of times the object or diagram has to be clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Element">
            <summary>
            Gets the object if the clicked position has an object or returns the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Button">
            <summary>
            Gets the mouse button that has to be clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Position">
            <summary>
            Gets the clicked position in the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramElementMouseEventArgs">
            <summary>
            Notifies when the mouse events such as mouse enter, mouse leave, and mouseover are detected.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px"  MouseEnter="@MouseEnter">
            </SfDiagramComponent>
            @code
            {
              private void MouseEnter(DiagramElementMouseEventArgs args)
              {
                if ((args != null) && (args.ActualObject != null))
                {
                    Console.WriteLine("Mouse Entered");
                }
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramElementMouseEventArgs.ActualObject">
            <summary>
            Gets the object such as a node or connector when it is dragged from the symbol palette into the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramElementMouseEventArgs.Element">
            <summary>
            Gets the helper element from the symbol palette into the diagram while dragging
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramElementMouseEventArgs.Targets">
            <summary>
            Gets the collection of objects over which the selected items are dragged
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollChangedEventArgs">
            <summary>
            ScrollChangedEventArgs notifies when the scroller has changed
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" ScrollChanged="ScrollChanged">
            </SfDiagramComponent>
            @code
            {
               private void ScrollChanged(ScrollChangedEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollChangedEventArgs.ZoomFactor">
            <summary>
            gets the current close-up view of the diagram. By default, ZoomFactor is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollChangedEventArgs.ScrollX">
            <summary>
            Gets the value of the horizontal scroll offset. By default, the ScrollX is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollChangedEventArgs.ScrollY">
            <summary>
            Gets the value of the vertical scroll offset. By default, the ScrollY is set to 0.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs">
            <summary>
            SegmentCollectionChangeEventArgs notifies while the segment of the connectors changes
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" SegmentCollectionChange="@OnSegmentCollectionChange">
            </SfDiagramComponent>
            @code
            {
                 private void OnSegmentCollectionChange(SegmentCollectionChangeEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.AddedSegments">
            <summary>
            Gets the action of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.Element">
            <summary>
            Gets the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.RemovedSegments">
            <summary>
            Gets the removed segment collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.Type">
            <summary>
            Gets the type of the collection change.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryAddingEventArgs">
            <summary>
            HistoryAddingEventArgs notifies when an entry is added to the undo/redo stack.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" Click="click">
            <DiagramHistoryManager HistoryAdding="@oncanlog" ></DiagramHistoryManager>
            </SfDiagramComponent>
            @code
            {
                private void oncanlog(HistoryAddingEventArgs entry)
                {
                  entry.Cancel = false;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryAddingEventArgs.Entry">
            <summary>
            Gets the history object that has been added to the history list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryAddingEventArgs.Cancel">
            <summary>
            Gets or sets the value that indicates whether to cancel the added or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging">
             <summary>
            ConnectorBridging defines the bridging behavior
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.UpdateBridging(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to insert the bridge.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.FindConnectors(Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            FindConnectors for the given bounds
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.UpdateBridgingExtended(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.BridgeSegment},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Double,Syncfusion.Blazor.Diagram.Direction,Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
            <summary>
            Extended method of updatebridging.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.InsertingBridge(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.BridgeSegment},Syncfusion.Blazor.Diagram.Direction,Syncfusion.Blazor.Diagram.Connector,System.Int32,System.Int32,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Double)">
            <summary>
            This method is used to insert the bridge.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.FirstBridge(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.BridgeSegment},Syncfusion.Blazor.Diagram.Connector,System.Double)">
            <summary>
            This method is used to update the bridge.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.CreateSegment(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Double,Syncfusion.Blazor.Diagram.Direction,System.Double,Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to create a segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.CreateBridgeSegment(Syncfusion.Blazor.Diagram.DiagramPoint,System.Double,System.Double,System.Double)">
            <summary>
            This method is used to create the bridge segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.SweepDirection(System.Double,Syncfusion.Blazor.Diagram.Direction)">
            <summary>
            This method is used to SweepDirection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.GetPointAtLength(System.Double,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
            <summary>
            This method is used to get points based on length.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.GetPoints(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to get points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.IntersectsRect(Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            Intersects rect method
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.Intersect(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Boolean,Syncfusion.Blazor.Diagram.Direction,System.Boolean)">
             <summary>
            Intersect method
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.Inter1(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Boolean,Syncfusion.Blazor.Diagram.Direction)">
             <summary>
            Inter1 method
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.CheckForHorizontalLine(System.Double)">
             <summary>
            This method is used to check for the horizontal line.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.GetLengthAtFractionPoint(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to get the length.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.GetSlope(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to Get the slope
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.AngleCalculation(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used get angles.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorBridging.LengthCalculation(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used get the length based on points.
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.LengthFraction">
             <summary>
            LengthFraction
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.BridgeSegment">
             <summary>
            Define the bridge segment
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing">
            <summary>
            Multiple segments editing for Connector
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing"/> class.
            </summary>
            <param name="diagram">It defines sfdiagramcomponent</param>
            <param name="endPoint">It defines diagram element action</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            Occurs when the user perform mousedown while edit the connector segment.
            </summary>
            <param name="args">The DiagramMouseEventArgs contains event data. </param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            Occurs when the user perform mousemove while edit the connector segment.
            </summary>
            <param name="args">The DiagramMouseEventArgs contains event data. </param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            Occurs when the user perform mouseup while edit the connector segment.
            </summary>
            <param name="args">The DiagramMouseEventArgs contains event data. </param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.UpdateSegmentAndConnector(Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            This method is used to update the wrapper of connector.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.UpdateNextAndPreviousSegment">
             <summary>
            This method is used to update the previos and next segment of the connector.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.AddOrRemoveSegment(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to add / remove segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.FindIndex(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to find index value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.RemovePrevSegment(Syncfusion.Blazor.Diagram.Connector,System.Int32)">
            <summary>
            This method is used to remove previous segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.FindSegmentDirection(Syncfusion.Blazor.Diagram.OrthogonalSegment)">
            <summary>
            This method is used to find segment direction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.RemoveNextSegment(Syncfusion.Blazor.Diagram.Connector,System.Int32)">
            <summary>
            This method is used to remove next segment of connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.DragOrthogonalSegment(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.OrthogonalSegment,Syncfusion.Blazor.Diagram.DiagramPoint,System.Int32)">
            <summary>
            Invoke while we drag the orthogonal segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.AddSegments(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.OrthogonalSegment,System.Double,System.Double,System.Int32)">
            <summary>
            Invoke while we add the segments to connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.InsertFirstSegment(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.OrthogonalSegment,System.Double,System.Double)">
            <summary>
            This method is used to insert first segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.UpdateSegmentCollectionChangeEventArgs(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.ConnectorSegment})">
             <summary>
            This method is used to update the segment collection change event args.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.UpdateAdjacentSegments(Syncfusion.Blazor.Diagram.Connector,System.Int32,System.Double,System.Double)">
            <summary>
            This method is used to update adjacent segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.AddTerminalSegment(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.OrthogonalSegment,System.Int32)">
            <summary>
            This method is used to add terminal segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.UpdatePortSegment(Syncfusion.Blazor.Diagram.OrthogonalSegment,Syncfusion.Blazor.Diagram.Connector,System.Int32)">
            <summary>
            This method is used to update port segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.UpdatePreviousSegment(System.Double,System.Double,Syncfusion.Blazor.Diagram.Connector,System.Int32)">
            <summary>
            This method is used to update previous segment of connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.ChangeSegmentDirection(Syncfusion.Blazor.Diagram.OrthogonalSegment)">
            <summary>
            This method is used to change segment direction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.UpdateNextSegment(Syncfusion.Blazor.Diagram.OrthogonalSegment,Syncfusion.Blazor.Diagram.OrthogonalSegment,System.Double,System.Double)">
            <summary>
            This method is used to update next segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.UpdateFirstSegment(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.OrthogonalSegment)">
            <summary>
            This method is used to update first segment of connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorEditing.UpdateLastSegment(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.OrthogonalSegment)">
            <summary>
            This method is used to update last segment of connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramContent">
             <summary>
             Represents how the diagram objects are rendered in the diagram. 
             </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramContent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramHtmlContainer">
            <summary>
            Represents how the basic HTML building blocks are rendered in a diagram.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramHtmlContainer.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent">
            <summary>
            Represents the objects that are rendered in the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.OnScriptRendered">
            <summary>
            Represents the objects that are rendered in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.LoadDiagram(System.Boolean)">
            <summary>
            It invokes while loading the diagram
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetDefaults">
            <summary>
            This method is used to get defaults.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.InitObjects">
            <summary>
            This method is used to initialize the objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdatePathElementOffset(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to update path element based on its offset value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.InitData">
            <summary>
            This method is used to initialize the data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.InitLayerObjects">
            <summary>
            This method is used to initialize the layer objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.InitNodesAndConnectors(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Node},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.IDiagramObject})">
             <summary>
            This method is used to initialize the nodes and connectors.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.MeasureCustomPathPoints">
            <summary>
            This method is used to measure custom path points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.SetZIndex(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            This method is used to set ZIndex.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetMaxIndexValue">
            <summary>
            This method is used to get maximum Index value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.MeasurePathAnnotation(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Connector},System.Nullable{System.Boolean})">
            <summary>
            This method is used to measure text elements for connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.MeasureTextElements(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Connector})">
            <summary>
            This method is used to measure text elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.DoLayout">
            <summary>
            This method is used to initialize the layout process.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.InitNodes(Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to initialize the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.InitObject(System.Object)">
            <summary>
            This method is used to initialize the node/connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateGroupZIndex(Syncfusion.Blazor.Diagram.NodeGroup)">
            <summary>
            This method is used to update zindex for group.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateGroupOffset(System.Object,System.Boolean,System.Double,System.Double)">
            <summary>
            This method is used to update offset of group node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateGroupSize(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            This method is used to update size of group node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.ScaleObject(Syncfusion.Blazor.Diagram.Node,System.Double,System.Boolean)">
            <summary>
            This method is used to scale the objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.InitNode(Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to initialize the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetNode(System.String)">
            <summary>
            This method is used to get node from its id.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetConnector(System.String)">
            <summary>
            This method is used to get connector from its id.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetPort(Syncfusion.Blazor.Diagram.Node,System.String)">
            <summary>
            This method is used to get port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.RefreshDataSource">
            <summary>
            This method is used to referesh the data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetConnectedPort(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Connector,System.Boolean)">
            <summary>
            This method is used to getconnected port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.FindInOutConnectPorts(Syncfusion.Blazor.Diagram.Node,System.Boolean)">
            <summary>
            This method is used to find out connect port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.InitConnector(Syncfusion.Blazor.Diagram.Connector,System.Boolean)">
            <summary>
            This method is used to initialize the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetMeasurePathDataCollection">
            <summary>
            This method is used to get measure path data collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetMeasureConnectorData(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to get measure connector data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetMeasureUserHandleData(Syncfusion.Blazor.Diagram.UserHandle,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to get measure userhandle data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.AddAnnotationToHistory(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.Annotation)">
            <summary>
            This method is used to add annotation to history.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.AddMeasureTextCollection(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.Annotation,Syncfusion.Blazor.Diagram.TextElement,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils})">
            <summary>
            This method is used to add measure text collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.AddBpmnAnnotationConnector(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            This method is used to add connector and port for the Bpmn Text annotation.
            </summary>
            <param name="node"></param>
            <param name="wrapper"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.OnPropertyChanged(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Object,System.Object)">
            <summary>
            Property change at runtime
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateNodeTextElementUtils(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.Internal.TextElementUtils,System.Boolean@)">
            <summary>
            This method is used to update node text element utils.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateTextElement(System.Object,System.String,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
            This method is used to update the text element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateAnnotationTextUtils(Syncfusion.Blazor.Diagram.NodeBase,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            This method is used to update annotation text utils.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.IsMeasure(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This method is used to check we can measure the element or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateTextElementUtils(Syncfusion.Blazor.Diagram.NodeBase,System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.Internal.TextElementUtils,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Boolean@)">
            <summary>
            This method is used to udpate text element utils.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.SetAnnotationSize(Syncfusion.Blazor.Diagram.Internal.TextElementUtils)">
            <summary>
            This method is used to set annotation size.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateChangedPropertyDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This method is used to update property change value in dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateProperty(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean)">
            <summary>
            This method is used to update property.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.NodeProperty(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            This method is used to update node property change at run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateBpmnShapeEdges(Syncfusion.Blazor.Diagram.Node)">
             <summary>
            This method is used to update the Bpmn shape's edges.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateBpmnAnnotationPosition(System.Double,System.Double,System.Double,System.Double,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.Shape,System.Boolean)">
            <summary>
            This method is used to update the Bpmn Text annotation position with respect to offset Change.
            </summary>
            <param name="oldX"></param>
            <param name="oldY"></param>
            <param name="newX"></param>
            <param name="newY"></param>
            <param name="node"></param>
            <param name="wrapper"></param>
            <param name="shape"></param>
            <param name="isTextAnnotation"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateRotationAngle(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramContainer,System.Object,System.Boolean)">
             <summary>
            This method is used to update the rotation angle property.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateConstraints(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramContainer,System.Boolean,Syncfusion.Blazor.Diagram.NodeConstraints)">
             <summary>
            This method is used to update the constraints property.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.ConnectorPropertyChange(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Boolean})">
            <summary>
            This method is used to update connector property change at run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateSourcePortIDAndIcon(System.String,System.Object,Syncfusion.Blazor.Diagram.Connector,System.Object)">
             <summary>
            This method is used to update the source port ID.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateTargetPortID(System.String,System.Object,Syncfusion.Blazor.Diagram.Connector,System.Object)">
             <summary>
            This method is used to update target port ID.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.RemovePortEdges(Syncfusion.Blazor.Diagram.Node,System.String,System.String,System.Boolean)">
            <summary>
            This method is used to remove port edges.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetIndex(System.Object)">
            <summary>
            This method is used to get idex value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateElementVisibility(Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.NodeBase,System.Boolean)">
            <summary>
            This method is used to update element visibility.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateDiagramContainerVisibility(Syncfusion.Blazor.Diagram.CommonElement,System.Boolean)">
            <summary>
            This method is used to update diagramcontainer visibility.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateUserHandle(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.DiagramContainer,System.String)">
            <summary>
            This method is used to update userhandle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.FixedUserHandlePropertyChange(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to update property change of fixed userhandle at run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdatehandleSize(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.FixedUserHandle,Syncfusion.Blazor.Diagram.PathElement)">
             <summary>
            This method is used to measure and arrage the userhandle.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.PortProperty(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to update property change of port at run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.IconProperty(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to update property change of icon at run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateIconShape(Syncfusion.Blazor.Diagram.DiagramIcon,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.PathElement)">
             <summary>
            This method is used to update shape of an icon.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.AnnotationProperty(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to update property change of annotation at run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateOffset(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to update offset value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateMarginValue(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.DiagramThickness)">
            <summary>
            This method is used to update margin value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateMargin(Syncfusion.Blazor.Diagram.DiagramThickness,Syncfusion.Blazor.Diagram.CommonElement,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This method is used to update margin.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateStyle(Syncfusion.Blazor.Diagram.ShapeStyle,Syncfusion.Blazor.Diagram.CommonElement,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This method is used to update style of element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateGradient(Syncfusion.Blazor.Diagram.ShapeStyle,System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.ShapeStyle)">
            <summary>
            This method is used to update gradient values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateGradientStops(Syncfusion.Blazor.Diagram.GradientBrush,Syncfusion.Blazor.Diagram.GradientBrush,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This method is used to update gradient stops values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateShadow(Syncfusion.Blazor.Diagram.Shadow,Syncfusion.Blazor.Diagram.Shadow,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This method is used to update shadow values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateIcon(Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to update icon for node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.AddCustomPathDataCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object)">
            <summary>
            This method is used to add custon path data to its collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.AddCustomPointCollection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to add custom point to its collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateCustomBounds">
            <summary>
            This method is used to update custombounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateHyperlink(Syncfusion.Blazor.Diagram.CommonElement,System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.Annotation)">
            <summary>
            This method is used to update hyperlink property change at run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetEndNodeWrapper(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Connector,System.Boolean)">
            <summary>
            This method is used to get end node wrapper.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.ContainsMargin(Syncfusion.Blazor.Diagram.CommonElement)">
            <summary>
            This method is used to check whether the node contain margin or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.RemoveEdges(Syncfusion.Blazor.Diagram.Node,System.String,System.String,System.Boolean)">
            <summary>
            This method is used to remove edges.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateIconVisibility(Syncfusion.Blazor.Diagram.Node,System.Boolean)">
            <summary>
            This method is used to update icon visibility.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateEdges(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to update edges for connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdatePortVisibility(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.PortVisibility,System.Boolean)">
            <summary>
            This method is used to update prot visibility at run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdatePortEdges(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Connector,System.Boolean)">
            <summary>
            This method is used to update prot edges.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.DecoratorPropertyChange(Syncfusion.Blazor.Diagram.PathElement,System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.DecoratorSettings,System.Boolean,System.Boolean)">
            <summary>
            This method is used to update decorator property change at run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdatePointProperties(Syncfusion.Blazor.Diagram.DiagramPoint,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This method is used to update point properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateConnectorEdges(Syncfusion.Blazor.Diagram.Node,System.Nullable{System.Boolean})">
            <summary>
            This method is used to update connector edges.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateBpmnConnectorProperties(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to update BPMN connector proeprties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateInteractionConnectors">
            <summary>
            This method is used to update  connector proeprties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateConnectorProperties(Syncfusion.Blazor.Diagram.Connector,System.Nullable{System.Boolean})">
            <summary>
            This method is used to update  connector proeprties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateNodeProperties(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to update node proeprties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateDefaultLayoutIcons(Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to update default layout icons.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateDefaultLayoutIcon(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramIcon)">
            <summary>
            This method is used to update default layout icon.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.SetOffset(System.Double,System.Double)">
            <summary>
            This method is used to set offset for viweport.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.SetSize(System.Double,System.Double,System.Boolean)">
            <summary>
            This method is used to set size for view port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateScrollOffset">
            <summary>
            This method is used to update scroll offset.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.FindActionToBeDone(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to find action to be done.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.FindHandle">
            <summary>
            This method is used to find handle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetTool(Syncfusion.Blazor.Diagram.DiagramElementAction,System.String)">
            <summary>
            This method is used to get tool.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetCursor(Syncfusion.Blazor.Diagram.DiagramElementAction,System.Boolean,System.String)">
            <summary>
            This method is used to get cursor..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.SetCursor(System.String)">
            <summary>
            This method is used to set cursor..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.FindObjectsUnderMouse(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Finds the object that is under the given mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.FindObjectUnderMouse(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            Finds all the objects that is under the given mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.FindElementUnderMouse(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Double})">
            <summary>
            Finds the child element of the given object at the given position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.FindTargetObjectUnderMouse(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Finds the object that is under the given active object (Source)
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetNodesConnectors(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject})">
            <summary>
            This method is used to get nodes and connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateBridging">
            <summary>
            This method is used to update bridging.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.HistoryChangeTrigger(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.HistoryChangedAction)">
            <summary>
            This method triggered while history changing.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdateGridlines">
            <summary>
            This method is used to update grid lines.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.UpdatePageBreaks">
            <summary>
            This method is used to update page breaks.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetPatternSize">
            <summary>
            This method is used to get pattern size.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.GetSelectorAttributes">
            <summary>
            This method is used to get selection attributes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramSelectorContent">
            <summary>
            Represents the selector objects that are rendered in the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramSelectorContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramUserHandleContent">
            <summary>
            Represents the frequently used commands that are rendered around the selector objects in the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUserHandleContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.ApiUpdate">
            <summary>
            Enables or disables the update through public API  diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.Bridging">
            <summary>
            Enables or disables the Bridging support for the connector in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.Default">
            <summary>
            Enables all default constraints to the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.LineRouting">
            <summary>
            Enables or disables the line routing for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.None">
            <summary>
            Disables all the diagram functionalities except rendering.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.PageEditable">
            <summary>
            PageEditable enables or disables the page editing support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.Pan">
            <summary>
            Enables or disables the panning both X and Y coordinates support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.PanX">
            <summary>
            Enables or disables the Paning X coordinate support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.PanY">
            <summary>
            Enables or disables the Panning Y coordinate support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.Tooltip">
            <summary>
            Enables or disables the Tooltip option for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.UndoRedo">
            <summary>
            Enables or disables the Undo/Redo option for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.UserInteraction">
            <summary>
            Enables or disables the user interaction for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.Virtualization">
            <summary>
            Enables or disables the Virtualization support for  the diagram
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.Zoom">
            <summary>
            Enables or disables the Zoom support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramConstraints.ZoomTextEdit">
            <summary>
            Enables or disables zooming the text box while editing the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.AllowDrop">
            <summary>
            AllowDrop allows dropping a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.AllowMovingOutsideLane">
            <summary>
            Enables or disables child in parent for the swimLane node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.AspectRatio">
            <summary>
            Enables the Aspect ratio of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Default">
            <summary>
            Enables all the constraints for a node
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Delete">
            <summary>
            Enables or disables node deletion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Drag">
            <summary>
            Enables or disables the dragging functionality of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Expandable">
            <summary>
            Enables or disables the node expansion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.HideThumbs">
            <summary>
            Enables to hide all resize thumbs for the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.InConnect">
            <summary>
            Enables node to allow only in coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Individual">
            <summary>
            Enables node to provide individual resize option.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Inherit">
            <summary>
            It allows the node to inherit the interaction option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.InheritTooltip">
            <summary>
            Enables or disables the inherit tooltip option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.None">
            <summary>
            Disable all node Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.OutConnect">
            <summary>
            Enables node to allow only out coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.PointerEvents">
            <summary>
            Enables or disables the mouse pointer’s events when clicking with a mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.ReadOnly">
            <summary>
            Enables the ReadOnly mode(Write operations cannot be done) for the annotation in the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Resize">
            <summary>
            Enables or Disables the expansion or compression of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.ResizeEast">
            <summary>
            It enables or disables the resizing of the node in the East direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.ResizeNorth">
            <summary>
            It enables or disables the resizing of the node in the North direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.ResizeNorthEast">
            <summary>
            It enables or disables the resizing of the node in the NorthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.ResizeNorthWest">
            <summary>
            It enables or disables the resizing of the node in the NorthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.ResizeSouth">
            <summary>
            It enables or disables the resizing of the node in the South direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.ResizeSouthEast">
            <summary>
            It enables or disables the resizing of the node in the SouthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.ResizeSouthWest">
            <summary>
            It enables or disables the resizing of the node in the SouthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.ResizeWest">
            <summary>
            It enables or disables the resizing of the node in the West direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Rotate">
            <summary>
            Enables or disables node rotation. It is done with the help of a curvy arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Select">
            <summary>
            Enables or disables the selection of a node in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Shadow">
            <summary>
            Enables or disables to display the node’s shadow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperNodeConstraints.Tooltip">
            <summary>
            Enables or disables the tooltip for the Nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.AllowDrop">
            <summary>
            Enables to trigger drop event when any object is dragged or dropped to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.BridgeObstacle">
            <summary>
            Enables the connector to be treated as bridge obstacle..
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.Bridging">
            <summary>
            Enables bridging to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.ConnectToNearByElement">
            <summary>
            Enables to connect nearest elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.ConnectToNearByNode">
            <summary>
            Enables to connect nearest node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.ConnectToNearByPort">
            <summary>
            Enables to connect nearest port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.Default">
            <summary>
            Enables all constraints for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.Delete">
            <summary>
            Enables or Disables the deletion of a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.Drag">
            <summary>
            Enables or Disables connector to be Dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.DragSegmentThumb">
            <summary>
            Enables the control point and endpoint of every segment in a connector for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.DragSourceEnd">
            <summary>
            Enables the connector's source end to be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.DragTargetEnd">
            <summary>
            Enables connectors target end to be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.InheritBridging">
            <summary>
            Enables to inherit bridging option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.InheritLineRouting">
            <summary>
            Enables or disables to inheriting the routing option from the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.InheritTooltip">
            <summary>
            Enables or disables to inheriting tooltip option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.Interaction">
            <summary>
            Enables or disables Interaction for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.LineRouting">
            <summary>
            Enables or disables routing to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.None">
            <summary>
            Disable all connector Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.PointerEvents">
            <summary>
            Enables to set the pointer-events.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.ReadOnly">
            <summary>
            Enables or disables read-only for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.Select">
            <summary>
            Enables or Disables the selection of a  connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperConnectorConstraints.Tooltip">
            <summary>
            Enables or disables tooltip for the connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperAnnotationConstraints.Drag">
            <summary>
            It enables the user to drag the annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperAnnotationConstraints.InheritReadOnly">
            <summary>
            Enables or disables the user to inherit the ReadOnly option from the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperAnnotationConstraints.Interaction">
            <summary>
            Enables or Disable annotation to inherit the interaction option
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperAnnotationConstraints.None">
            <summary>
            Disables all the functionalities of annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperAnnotationConstraints.ReadOnly">
            <summary>
            It enables the user to only read (cannot be edited) the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperAnnotationConstraints.Resize">
            <summary>
            Enables or disables the resizing support for the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperAnnotationConstraints.Rotate">
            <summary>
            Enables or disables the annotation rotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperAnnotationConstraints.Select">
            <summary>
            It enables the user to select the desired node or connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperPortConstraints.Default">
            <summary>
            Enables all constraints for a port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperPortConstraints.Drag">
            <summary>
            Enables or disables port dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperPortConstraints.Draw">
            <summary>
            Enables to create the connection when mouse hover on the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperPortConstraints.InConnect">
            <summary>
            Enables or disables to connect only the target end of connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperPortConstraints.None">
            <summary>
            Disables all the Port functionalities.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperPortConstraints.OutConnect">
            <summary>
            Enables or disables to connect only the source end of connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramTools.ContinuousDraw">
            <summary>
            It allows users to draw the nodes or connectors continuously. Once it is activated, users cannot perform any other interaction in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramTools.Default">
            <summary>
            Sets the drawing tools to default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramTools.DrawOnce">
            <summary>
            It allows users to draw a node or connector at once.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramTools.MultipleSelect">
            <summary>
            It allows users to select multiple nodes and connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramTools.None">
            <summary>
            Disables all the drawing tools.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramTools.SingleSelect">
            <summary>
            It allows users to select only individual nodes or connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDiagramTools.ZoomPan">
            <summary>
            It allows users to pan the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.Arrow">
            <summary>
            Sets the decorator shape as Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.None">
            <summary>
            Sets the decorator shape as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.Diamond">
            <summary>
            Sets the decorator shape as Diamond
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.OpenArrow">
            <summary>
            Sets the decorator shape as OpenArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.Circle">
            <summary>
            Sets the decorator shape as Circle
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.Square">
            <summary>
            Sets the decorator shape as Square
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.Fletch">
            <summary>
            Sets the decorator shape as Fletch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.OpenFetch">
            <summary>
            Sets the decorator shape as OpenFetch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.IndentedArrow">
            <summary>
            Sets the decorator shape as Indented Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.OutdentedArrow">
            <summary>
            Sets the decorator shape as Outdented Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.DoubleArrow">
            <summary>
            Sets the decorator shape as DoubleArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperDecoratorShape.Custom">
            <summary>
            Sets the decorator shape as Custom
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.All">
            <summary>
            Shows all handles of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ConnectorSourceThumb">
            <summary>
            Shows the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ConnectorTargetThumb">
            <summary>
            Shows the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.None">
            <summary>
            Hides all the selector elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ResizeAll">
            <summary>
            Shows all resize handles of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ResizeEast">
            <summary>
            Shows the middle right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ResizeNorth">
            <summary>
            Shows the top center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ResizeNorthEast">
            <summary>
            Shows the top right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ResizeNorthWest">
            <summary>
            Shows the top left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ResizeSouth">
            <summary>
            Shows the bottom center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ResizeSouthEast">
            <summary>
            Shows the bottom right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ResizeSouthWest">
            <summary>
            Shows the bottom left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ResizeWest">
            <summary>
            Shows the middle left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.Rotate">
            <summary>
            Shows the rotate handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.ToolTip">
            <summary>
            Shows the default tooltip of nodes and connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.WrapperSelectorConstraints.UserHandle">
            <summary>
            Shows the user handles of the selector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ActionsUtil">
            <summary>
            Finds the action to be taken for the object under the mouse
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.DefaultCursor">
            <summary>
            It defines the default cursor list.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.FindToolToActivate(System.Object,Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.IDiagramObject,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.Touches},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.Touches})">
            <summary>
            This method is used to find which tool is activated.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.ToolToActivateForMultiSelection(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
            <summary>
            This method is used to update tools while performing multiple selection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.ToolToActivateForSingleSelection(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
            <summary>
            This method is used to update tools while performing single selection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.FindPortToolToActivate(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.PointPort)">
            <summary>
            This method is used to find whether the port tool is activated or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.CheckResizeHandles(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Internal.Matrix,System.Double,System.Double)">
            <summary>
            This method is used to check for resize handles.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.CheckForResizeHandles(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Internal.Matrix,System.Double,System.Double)">
            <summary>
            This method is used to check for resize handles.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.CanResizeCorner(Syncfusion.Blazor.Diagram.SelectorConstraints,Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.ThumbsConstraints)">
            <summary>
            This method is used to check whether we can resize the corner or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.GetSelectorConstraints(Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            This method is used to get selector constraints.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.GetThumbConstraints(Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            This method is used to get thumb constraints.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.Contains(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Double,System.Int32)">
            <summary>
            Contains methods
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.FindUserHandle(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to find user handles.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.IsSelected(Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Object)">
            <summary>
            This method is used to check whether an element has to be selected or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.GetCursor(Syncfusion.Blazor.Diagram.DiagramElementAction,System.Double)">
            <summary>
            This method is used to get the cursor.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.HasSelection(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to find if items are selected or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.HasSingleConnection(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
             This method is used to find whether the single connector is selected or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.CheckForConnectorSegment(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to check the connector segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ActionsUtil.GetCursorValue(Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            This method is used to get the cursor value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler">
            <summary>
            This class handles the mouse and touch events
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.Action">
            <summary>
            Gets or sets a value which indicates which action is set to a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.CommandHandler)">
            <summary>
            /// Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler"/> class.
            </summary>
            <param name="diagram">It defines sfdiagramcomponent</param>
            <param name="commandHandler">It defines commandHandler</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.GetMousePosition(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            This method is use to get the mouse position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.ElementEnter(Syncfusion.Blazor.Diagram.DiagramPoint,System.Boolean)">
            <summary>
            This method is used to update tooltip for specific nodes/connectors
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.ElementLeave">
            <summary>
            This method is used to hide tooltip for specific nodes/connectors
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.GetMouseEventArgs(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramMouseEventArgs,Syncfusion.Blazor.Diagram.IDiagramObject,System.Nullable{System.Double})">
            <summary>
            This method is use to get mouse event arguments.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.MouseDown(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            Triggered while performing any mousedown in a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.PaletteRenderHelper(System.Boolean,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to render a helper object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.MouseMove(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            Triggered while performing any mouse move in a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.UpdateConnectorDrawingObject(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
             <summary>
            This method is used to update the selected object on mouse move.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.UpdateDrawingTool(Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            This method is used to update the connector drawing object.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.MouseUp(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
             Triggered while performing the mouseup in a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.UpdateClickEventArgs(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
             <summary>
            This method is used to update the click event args.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.UpdateAndRefreshElements(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
             <summary>
            This method is used to update the selected elements on mouse up.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.MouseLeave(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            Triggered while performing any mouseleave actions in a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.GetLabelID(System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.String)">
            <summary>
            This method is used to get a label id.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.ChangeLabelContent(Syncfusion.Blazor.Diagram.Annotation,System.String,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},Syncfusion.Blazor.Diagram.TextChangeEventArgs,Syncfusion.Blazor.Diagram.IDiagramObject,System.Boolean)">
            <summary>
            This method is used to change label content at a run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.EndEdit(System.Object)">
             <summary>
            Triggered after an annotation gets edited.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.UpdateTextNodeElement(System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},Syncfusion.Blazor.Diagram.Node)">
             <summary>
            This method is used to update the text node object.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.InvokeDiagramEvents(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs,System.Object)">
            <summary>
            Triggered while performing any diagram actions in a diagram like mousedown and mouseup.
            </summary>
            <param name="args">JSMouseEventArgs that contains event data</param>
            <param name="obj">Object contains node/connector</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.DiagramResize(System.Double,System.Double)">
            <summary>
            Triggered while resizing the diagram area.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.KeyDown(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            Triggered while performing the keydown in a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.UpdatePropertiesAfterEscKey">
             <summary>
            This method is used to update the properties while escape key is pressed.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.KeyUp(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
             Triggered while performing the keyup in a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.Execute(System.String)">
            <summary>
            This method is used to execute commands.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.GetKeyModifier(Syncfusion.Blazor.Diagram.KeyEventArgs,Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            This method is used to get a key modifier.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.Scrolled(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            Triggered while performing scrolling.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.MouseWheel(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            Triggered while performing the mousewheel action.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.FindElementUnderMouse(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Double})">
            <summary>
            Finds the object that is under the given mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.FindObjectsUnderMouse(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Finds all the objects that is under the given mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.FindObjectUnderMouse(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            Finds  object that is under the given mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.FindTargetUnderMouse(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Finds the object that is under the given active object (Source)
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.IsMouseOnScrollBar(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            This method is used to check whether the mouse is on scrollbar or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.FindHandleEvent">
            <summary>
            This method is used to find the handle event.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.GetTool(Syncfusion.Blazor.Diagram.DiagramElementAction,System.String)">
            <summary>
            This method is used to get a tool.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.GetCursor(Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
            This method is used to get the cursor.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.AddText(System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils})">
            <summary>
            This method is used to get the add text for node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.CheckAction(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
             This method is used to check which action is in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.GetConnectorPadding(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
             This method is used to get the connector padding value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.MouseEvents">
            <summary>
             MouseEvents method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ObjectFinder.FindObjectUnderMouse(Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.DiagramMouseEventArgs,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Finds the object that is under the given mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ObjectFinder.FindObjectsUnderMouse(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.DiagramMouseEventArgs,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Finds all the objects that are under the given mouse positions
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ObjectFinder.FindElementUnderSelectedItem(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Double})">
            <summary>
            Finds  the unselected item that is under the given mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ObjectFinder.FindElementUnderMouse(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Double})">
            <summary>
            Finds the element that is under the given mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ObjectFinder.FindTargetElement(Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Double})">
             <summary>
            Finds the target element that is under the given mouse position
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramInfo.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs">
            <summary>
            Notifies the mouse events, keyboard and scrolling action in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.IsPan">
            <summary>
             Represents the scroller related actions to conform whether the scroller is updated or not in UI level. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.AltKey">
            <summary>
            Returns whether the alt key has been pressed or not. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ClientX">
            <summary>
            Represents the horizontal coordinate of a touch point relative to the  viewport. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ClientY">
            <summary>
            Represents the vertical coordinate of a touch point relative to the viewport.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.OffsetX">
            <summary>
            Represents the x coordinate in the diagram where the mouse events happened.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.OffsetY">
            <summary>
            Represents the y coordinate in the diagram where the mouse events happened.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.CtrlKey">
            <summary>
            Returns whether the ctrl key has been pressed or not. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Detail">
            <summary>
            Represents the title of the symbol group. By default, it is empty.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.MetaKey">
            <summary>
            Represents whether the mac meta key is pressed inside the diagram or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ScreenX">
            <summary>
             Represents the horizontal distance between the left side of the screen. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ScreenY">
            <summary>
            Represents the vertical distance between the top side of the screen. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.ShiftKey">
            <summary>
            Returns whether the shift key has been pressed or not. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Type">
            <summary>
            Represents the type of action like mouse movement, down or up in the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.WheelDelta">
            <summary>
            Return the mouse scroll bar wheel data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.DiagramGetBoundingClientRect">
            <summary>
            Represents the position of the diagram where it is rendered.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.DiagramCanvasScrollBounds">
            <summary>
            Represents the scroller’s left, top, width and height of the diagram. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Key">
            <summary>
            Represents the key which is pressed inside the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.KeyCode">
            <summary>
            Represents the key code which is pressed inside the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Button">
            <summary>
            Represents the button that has been clicked in the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Touches">
            <summary>
            Represents the collection of touches while is tap inside the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Touches.PageX">
            <summary>
             Represents the horizontal distance between the left side of the diagram page. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Touches.PageY">
            <summary>
            Represents the vertical distance between the left side of the diagram page.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Touches.ScreenX">
            <summary>
            Represents the horizontal distance between the left side of the screen. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Touches.ScreenY">
            <summary>
            Represents the vertical distance between the top side of the screen. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Touches.ClientX">
            <summary>
            Represents the horizontal coordinate of a touch point relative to the  viewport. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Touches.ClientY">
            <summary>
            Represents the vertical coordinate of a touch point relative to the viewport.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.Scroller">
            <summary>
            It defines scroller-related behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Scroller.CurrentZoom">
            <summary>
             Gets or sets a value which indicates the current zoom value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Scroller.ViewPortHeight">
            <summary>
             Gets or sets a value which indicates the view port height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Scroller.ViewPortWidth">
            <summary>
             Gets or sets a value which indicates the view port width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Scroller.HorizontalOffset">
            <summary>
             Gets or sets a value which indicates the horizontal offset value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Scroller.VerticalOffset">
            <summary>
             Gets or sets a value which indicates the vertical offset value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.Scroller.ScrollableArea">
            <summary>
            Gets or sets a value which indicates the scrollable area of the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.Scroller"/> class.
            </summary>
            <param name="sfDiagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.UpdateScrollOffsets(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
            <summary>
             This method is used to update the scroll offset values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.SetScrollOffset(System.Double,System.Double)">
            <summary>
             This method is used to set the scroll offset values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.SetSize(Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Boolean})">
            <summary>
             This method is used to set size
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.SetViewPortSize(System.Double,System.Double)">
            <summary>
              This method is used to set the viewport size.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.GetPageBounds(System.Nullable{System.Boolean},System.Nullable{Syncfusion.Blazor.Diagram.DiagramPrintExportRegion})">
            <summary>
             This method is used to get the pagebounds value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.GetPageBreak(Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
             This method is used to get the pagebreak.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.UpdateSegment(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This method is used to update the segment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.Zoom(System.Double,System.Nullable{System.Double},System.Nullable{System.Double},Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Allows the user to zoom in or out. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.FitToPage(Syncfusion.Blazor.Diagram.FitOptions)">
            <summary>
            Fit the diagram pages based on <see cref="T:Syncfusion.Blazor.Diagram.FitOptions"/> 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.ApplyScrollLimit(System.Double,System.Double)">
            <summary>
             This method is used to apply the scroll limit value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.BringIntoView(Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            Brings the specified bounds into the view port of the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.BringIntoCenter(Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            Brings the specified bounds into the center of the view port of the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Scroller.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.TransformFactor">
            <summary>
            Represents the transformation factor of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TransformFactor.TX">
            <summary>
            Returns the distance between X old coordinates has to be moved.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TransformFactor.TY">
            <summary>
            Returns the distance between Y old coordinates has to be moved.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TransformFactor.Scale">
            <summary>
            Returns how the text element fits inside the text element. 
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.TransformFactor.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.Snapping">
             <summary>
            Snapping defines the snapping.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.Snapping"/> class.
            </summary>
            <param name="sfDiagram">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.GetBounds(Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
            <summary>
            This method is used to get bounds
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.CanSnap">
            <summary>
            Check whether  diagram objects to snap to the nearest intersection of gridlines or not
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.SnapPoint(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Boolean,System.Boolean,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to get snapping point.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.Round(System.Double,System.Double[],System.Double)">
             <summary>
            This method is used to round the values.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.SnapObject(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.Internal.Snap,Syncfusion.Blazor.Diagram.Internal.Snap,Syncfusion.Blazor.Diagram.DiagramPoint,System.Boolean)">
             <summary>
            SnapObject method. which means, it provides visual cues to assist with aligning and spacing diagram elements
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.ToSnapVertically(Syncfusion.Blazor.Diagram.DiagramPoint,System.Double@,Syncfusion.Blazor.Diagram.Internal.SnapObject@,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},Syncfusion.Blazor.Diagram.DiagramRect,System.Double,Syncfusion.Blazor.Diagram.DiagramElement)">
             <summary>
            This method is used to snap vertically.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.ToSnapHorizontally(Syncfusion.Blazor.Diagram.DiagramPoint,System.Double@,Syncfusion.Blazor.Diagram.Internal.SnapObject@,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},Syncfusion.Blazor.Diagram.DiagramRect,System.Double,Syncfusion.Blazor.Diagram.DiagramElement)">
             <summary>
            This method is used to snap Horizontally.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.SnapConnectorEnd(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramElementAction)">
             <summary>
            SnapConnectorEnd Method
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.CanBeTarget(Syncfusion.Blazor.Diagram.DiagramElement)">
             <summary>
            Check whether the element is target or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.SnapSize(Syncfusion.Blazor.Diagram.Internal.Snap,Syncfusion.Blazor.Diagram.Internal.Snap,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Boolean)">
             <summary>
            This method is used to update snapping based on object size.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.SnapTop(Syncfusion.Blazor.Diagram.Internal.Snap,Syncfusion.Blazor.Diagram.Internal.Snap,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Boolean,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            This method is used to update Snap to object on top
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.SnapRight(Syncfusion.Blazor.Diagram.Internal.Snap,Syncfusion.Blazor.Diagram.Internal.Snap,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Boolean,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            This method is used to update Snap to object on Right.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.SnapLeft(Syncfusion.Blazor.Diagram.Internal.Snap,Syncfusion.Blazor.Diagram.Internal.Snap,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Boolean,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            This method is used to update Snap to object on Left.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.SnapBottom(Syncfusion.Blazor.Diagram.Internal.Snap,Syncfusion.Blazor.Diagram.Internal.Snap,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Boolean,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            This method is used to update Snap to object on Bottom.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.CreateGuidelines(Syncfusion.Blazor.Diagram.Internal.SnapObject,Syncfusion.Blazor.Diagram.Internal.SnapObject,Syncfusion.Blazor.Diagram.Internal.Snap,Syncfusion.Blazor.Diagram.Internal.Snap,System.Boolean)">
             <summary>
            To create the same width and same size lines
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.CreateAlignmentLines(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Internal.TransformFactor)">
             <summary>
            To create the alignment lines
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.CreateHSpacingLines(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},Syncfusion.Blazor.Diagram.Internal.Snap,System.Boolean,Syncfusion.Blazor.Diagram.DiagramPoint,System.Double)">
             <summary>
            To create Horizontal spacing lines
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.CreateVSpacingLines(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},Syncfusion.Blazor.Diagram.Internal.Snap,System.Boolean,Syncfusion.Blazor.Diagram.DiagramPoint,System.Double)">
             <summary>
            To create Vertical spacing lines
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.AddHSpacingLines(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Boolean,System.Double)">
             <summary>
            Add the Horizontal spacing lines
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.AddVSpacingLines(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Boolean,System.Double)">
             <summary>
            Add the Vertical spacing lines
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.AddSameWidthLines(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapSize},Syncfusion.Blazor.Diagram.Internal.Snap,System.Boolean,Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
             <summary>
            To add same width lines
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.AddSameHeightLines(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapSize},Syncfusion.Blazor.Diagram.Internal.Snap,System.Boolean,Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
             <summary>
            To add same height lines
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.CreateSpacingLines(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Internal.TransformFactor)">
             <summary>
            This Method is used to Render spacing lines.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.CreateSnapObject(Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramRect,System.String)">
             <summary>
            This Method is used to create snap to object.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.SnapAngle(System.Double)">
             <summary>
            This Method is used get snap angle.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.CanConsider(Syncfusion.Blazor.Diagram.DiagramElement)">
             <summary>
            Check whether the node to be snapped or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.FindNodes(Syncfusion.Blazor.Diagram.Internal.SpatialSearch,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramRect,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramElement})">
             <summary>
            Find the total number of nodes in diagram using SpatialSearch
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.IntersectsRect(Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            Intersect Rect Method
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.FindEquallySpacedNodesAtLeft(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Double,System.Double,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects})">
             <summary>
            To find nodes that are equally placed at left of the selected node
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.FindEquallySpacedNodesAtRight(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Double,System.Double,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Double)">
             <summary>
            To find nodes that are equally placed at right of the selected node
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.FindEquallySpacedNodesAtTop(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Double,System.Double,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects})">
             <summary>
            To find nodes that are equally placed at top of the selected node
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.FindEquallySpacedNodesAtBottom(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Double,System.Double,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.SnapObjects},System.Double)">
             <summary>
            To find nodes that are equally placed at bottom of the selected node
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Snapping.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.Quad">
            <summary>
            Quad helps to maintain a set of objects that are contained within the particular region
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Quad.#ctor(System.Double,System.Double,System.Double,System.Double,Syncfusion.Blazor.Diagram.Internal.SpatialSearch)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.Quad"/> class.
            </summary>
            <param name="height">It provides height value</param>
            <param name="left">It provides width value</param>
            <param name="spatialSearch">It provides spatial search value</param>
            <param name="top">It provides top value</param>
            <param name="width">It provides width value</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Quad.AddIntoAQuad(Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            AddIntoAQuad Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Quad.Add">
            <summary>
            This method is used to add quad values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Quad.SelectQuad">
            <summary>
            This method is used to Select quad values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Quad.GetQuad">
            <summary>
            This method is used to get quad values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Quad.IsContained">
            <summary>
            IsContained Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Quad.FindQuads(Syncfusion.Blazor.Diagram.DiagramRect,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.Quad})">
            <summary>
            This method is used to find quads.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Quad.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.SpatialSearch">
            <summary>
            Spatial search helps to effectively find the objects over diagrams.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.SpatialSearch"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.FindQuads(Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            This method is used to find quads.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.FindObjects(Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            This method is used to find objects within a particular region.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.UpdateBounds(Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            This method is used to update bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.RemoveFromAQuad(Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            This method is used to remove objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.Update(Syncfusion.Blazor.Diagram.Internal.Quad)">
            <summary>
            This method is used to update quad values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.ObjectIndex(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.DiagramContainer},Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            This method is used to find an object based on its index value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.AddIntoAQuad(Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            This method is used to add objects into quad tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.UpdateQuad(Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            This method is used to update quad values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.FindRight(Syncfusion.Blazor.Diagram.Internal.Quad)">
            <summary>
            This method is used to find the right side quad.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.FindBottom(Syncfusion.Blazor.Diagram.Internal.Quad)">
            <summary>
            This method is used to find the bottom side quad.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.FindTop(Syncfusion.Blazor.Diagram.Internal.Quad)">
            <summary>
            This method is used to find the top side quad.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.FindLeft(Syncfusion.Blazor.Diagram.Internal.Quad)">
            <summary>
            This method is used to find the left side quad.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.IsWithinPageBounds(Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            This method is used to check whether a node is within pagebounds or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.SetCurrentNode(Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            This method is used to set the current node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.GetPageBounds(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            This method is used to get Pagebounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SpatialSearch.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ConnectorSegmentJsonConverter">
            <summary>
            Represents the serialization and deserialization of the ConnectorSegment. 
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorSegmentJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines if the specified type can be converted. 
            </summary>
            <param name="typeToConvert">Type</param>
            <returns>IsAssignableFrom</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorSegmentJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type T. 
            </summary>
            <param name="reader">It contains Utf8JsonReader value</param>
            <param name="typeToConvert">It contains type details</param>
            <param name="options">It contains json serializer options </param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorSegmentJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.ConnectorSegment,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON. 
            </summary>
            <param name="writer">It contains Utf8JsonWriter value</param>
            <param name="value">It contains connector segement</param>
            <param name="options">It contains json serializer options </param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DrawingObjectJsonConverter">
            <summary>
            Represents the serialization and deserialization of the DrawingObject. 
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DrawingObjectJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines if the specified type can be converted. 
            </summary>
            <param name="typeToConvert">Type</param>
            <returns>IsAssignableFrom</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DrawingObjectJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to node or connector.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DrawingObjectJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.IDiagramObject,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON. 
            </summary>
            <param name="writer">Utf8JsonWriter</param>
            <param name="value">IDiagramObject</param>
            <param name="options">JsonSerializerOptions</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter">
            <summary>
             Represents the serialization and deserialization of the Gradient. 
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines if the specified type can be converted. 
            </summary>
            <param name="typeToConvert">Type</param>
            <returns>IsAssignableFrom</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type Gradient.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.GradientBrush,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.NodeJsonConverter">
            <summary>
            Represents the serialization and deserialization of the Node. 
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.NodeJsonConverter.CanConvert(System.Type)">
             <summary>
            Determines whether the specified type can be converted. 
             </summary>
             <param name="typeToConvert">It contains type</param>
             <returns>IsAssignableFrom</returns>
             <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.NodeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type T. 
            </summary>
            <param name="reader">It contains reader</param>
            <param name="typeToConvert">It contains type</param>
            <param name="options">It contains json serializer options.</param>
            <returns>Node</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.NodeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.Node,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON. 
            </summary>
            <param name="writer">It contains writer</param>
            <param name="value">It contains Node</param>
            <param name="options">It contains json serializer options></param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ShapeJsonConverter">
            <summary>
            Represents the serialization and deserialization of the shape. 
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ShapeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether the specified type can be converted.  
            </summary>
            <param name="typeToConvert">It contains type</param>
            <returns>IsAssignableFrom</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ShapeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type T. 
            </summary>
            <param name="reader">It contains reader</param>
            <param name="typeToConvert">It contains type</param>
            <param name="options">It contains json serializer options</param>
            <returns>Shape</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ShapeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.Shape,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON. 
            </summary>
            <param name="writer">It contains writer</param>
            <param name="value">It contains Shape</param>
            <param name="options">It contains json serializer options</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.TextElementStyleJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines if the specified type can be converted. 
            </summary>
            <param name="typeToConvert">It contains type</param>
            <exclude/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.TextElementStyleJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type T. 
            </summary>
            <param name="reader">It contains reader</param>
            <param name="typeToConvert">It contains type</param>
            <param name="options">It contains json serializer options</param>
            <returns>TextElementStyle</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.TextElementStyleJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.Internal.TextElementStyle,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON. 
            </summary>
            <param name="writer">It contains writer</param>
            <param name="value">It containsTextElementStyle value. </param>
            <param name="options">It contains json serializer options</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ComplexHierarchicalTree">
            <summary>
            Connects diagram objects with layout algorithm
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ComplexHierarchicalTree.GetLayoutNodesCollection(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node})">
            <summary>
            This method is used to get nodes collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil">
            <summary>
            Utility that arranges the nodes in hierarchical structure
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.GetTempVariable(Syncfusion.Blazor.Diagram.Internal.LayoutCell,System.Int32)">
            <summary>
            Used to get the temp value specified for the node or connector
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.GetConnectedCellsOnLayer(System.Object,System.Int32,System.Boolean)">
            <summary>
            Used to get the node next(up) connected to the specified node or connector 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.GetEdgesBetween(Syncfusion.Blazor.Diagram.Internal.Vertex,Syncfusion.Blazor.Diagram.Internal.Vertex,System.Boolean)">
            <summary>
            Used to get the edges between the given source and target
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.InitialRank(Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
            <summary>
            Determine the initial rank for the each vertex on the relevent direction
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.SetTempVariable(System.Object,System.Int32,System.Double)">
            <summary>
            Get the temp value of the specified layer
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.GetEdges(Syncfusion.Blazor.Diagram.Internal.Vertex)">
            <summary>
            Initializes the edges collection of the vertices
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.FindRoots(System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.Vertex})">
            <summary>
            Finds the root nodes of the layout
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.CreateVertex(Syncfusion.Blazor.Diagram.Node,System.String,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Defines a vertex that is equivalent to a node object
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.GetVisibleTerminal(Syncfusion.Blazor.Diagram.Connector,System.Boolean)">
            <summary>
            Returns the source/target vertex of the given connector
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.Traverse(Syncfusion.Blazor.Diagram.Internal.Vertex,System.Boolean,Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.Vertex},System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.Vertex}},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.Vertex})">
             <summary>
            Traverses each sub tree, ensures there is no cycle in traversing
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.CycleStage(Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
             <summary>
            Used to determine any cyclic stage have been created on the layout model
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.GetModelBounds(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.Vertex})">
             <summary>
            Returns the bounds of the given vertices
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.DoLayout(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.LineDistribution)">
             <summary>
            Initializes the layouting process
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.UpdateLayoutProperties(Syncfusion.Blazor.Diagram.LayoutOrientation,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            This method is used to update the layout properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.PlacementStageExecute(Syncfusion.Blazor.Diagram.Internal.PlacementStage)">
             <summary>
            Updates the geometry of the vertices
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.InitialCoords(Syncfusion.Blazor.Diagram.Internal.PlacementStage,Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
             <summary>
            Sets the layout in an initial positioning.it will arange all the ranks as much as possible
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.RankCoordinates(Syncfusion.Blazor.Diagram.Internal.PlacementStage,System.Int32,Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
             <summary>
            Sets geometry position of the layout node on the layout model
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.SetXY(Syncfusion.Blazor.Diagram.Internal.DiagramVertex,System.Int32,System.Double,System.Boolean,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.LayoutCell}},System.Int32)">
             <summary>
            SetXY Method.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.SetCellLocations(Syncfusion.Blazor.Diagram.Internal.PlacementStage,Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
             <summary>
            Sets the cell position in the after the layout operation
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.GetValues(Syncfusion.Blazor.Diagram.Internal.VertexMapper)">
             <summary>
            Get the specific value from the key value pair
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.CalculateWidestRank(Syncfusion.Blazor.Diagram.Internal.PlacementStage,Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
             <summary>
            Calculate the largest size of the node either height or width depends upon the layoutorientation
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.SetVertexLocation(Syncfusion.Blazor.Diagram.Internal.PlacementStage,Syncfusion.Blazor.Diagram.Internal.DiagramVertex)">
             <summary>
            Sets the cell position in the after the layout operation
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.GraphModelSetVertexLocation(Syncfusion.Blazor.Diagram.Internal.PlacementStage,Syncfusion.Blazor.Diagram.Internal.Vertex,System.Int32,System.Int32)">
             <summary>
            Used to specify the geometrical position of the layout model cell
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.MedianXValue(Syncfusion.Blazor.Diagram.Internal.PlacementStage,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.LayoutCell},System.Int32)">
             <summary>
            Calculates the node position of the connected cell on the specified rank
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.MinNode(Syncfusion.Blazor.Diagram.Internal.PlacementStage,Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
             <summary>
            Performs one node positioning in both directions
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.IsVertex(Syncfusion.Blazor.Diagram.Internal.DiagramVertex)">
             <summary>
            Check whether the object is vertext or edge on the layout model
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.UpdateNodeList(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.WeightedCellSorter},Syncfusion.Blazor.Diagram.Internal.VertexMapper,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.LayoutCell},Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
             <summary>
            Updates the ndoes collection
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.WeightedCellSorter(Syncfusion.Blazor.Diagram.Internal.DiagramVertex,System.Int32)">
             <summary>
            Initializes the sorter object
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.PlacementStage(Syncfusion.Blazor.Diagram.Internal.MultiParentModel,System.Double,System.Double)">
             <summary>
            Handles positioning the nodes
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.CoordinateAssignment(System.Double,System.Double,Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
             <summary>
            Initializes the layout properties for positioning
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.UpdateMargin(Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.Internal.LayoutProp,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to update margin.
             </summary>     
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.IsNodeOverLap(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Layout)">
             <summary>
            This method is used to check whether the node is overlapped or not.
             </summary>  
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil.IsIntersect(Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.Layout)">
             <summary>
            IsIntersect method.
             </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.Vertex">
            <summary>
            Each vertex means a node object in diagram
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramVertex">
            <summary>
            Defines the internal vertices that are used in positioning the objects
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramVertex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.DiagramVertex"/> class.
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.MultiParentModel">
            <summary>
            Handles position the objects in a hierarchical tree structure
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.#ctor(Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.Vertex},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.Vertex},Syncfusion.Blazor.Diagram.Internal.LayoutProp)">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.MultiParentModel"/> class.
            </summary> 
            <param name="layout">It provides layout.</param>
            <param name="layoutProp">It provides layout property</param>
            <param name="roots">It provides roots deatils</param>
            <param name="vertices">It provides vertices</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.SetDictionary(Syncfusion.Blazor.Diagram.Internal.VertexMapper,Syncfusion.Blazor.Diagram.Internal.Vertex,Syncfusion.Blazor.Diagram.Internal.DiagramVertex,System.String)">
            <summary>
            Used to store the value of th given key on the object
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.CreateInternalCells(Syncfusion.Blazor.Diagram.Internal.HierarchicalLayoutUtil,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.Vertex},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.DiagramVertex})">
            <summary>
            Used to create Internal cells.
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.GetDictionaryValues(System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex})">
            <summary>
            Used to get all the values of the dictionary object. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.GetDictionary(Syncfusion.Blazor.Diagram.Internal.VertexMapper,Syncfusion.Blazor.Diagram.Internal.Vertex)">
            <summary>
            Used to get the value of the given key. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.ExtendedDfs(Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.Edge,System.String,System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Object,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.LayoutCell}})">
            <summary>
            The dfs extends the default version by keeping track of cells ancestors, but it should be only used when necessary
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.UpdateConnectionRank(System.String,Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.Edge,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.LayoutCell}})">
            <summary>
            Updates the rank of the connection
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.Remove(Syncfusion.Blazor.Diagram.Internal.Edge,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.Edge})">
            <summary>
            Removes the edge from the given collection
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.IsAncestor(Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.DiagramVertex)">
            <summary>
            Checks whether the given node is an ancestor
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.RemoveConnectionEdge(Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.Edge,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Boolean)">
            <summary>
            Removes the edge from the collection
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.Visit(System.String,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Boolean,System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.LayoutCell}})">
            <summary>
             Used to visit all the entries on the given dictionary with given function
            </summary>
            <param name="dfsRoots">Provide the dfsRoots value.</param>
            <param name="rankList">Provide the RankList value</param>
            <param name="seenNodes">Provide the seenNodes value.</param>
            <param name="seenNodes1">Provide the seenNodes value.</param>
            <param name="trackAncestors">Provide the trackAncestors value.</param>
            <param name="unseenNodes1">Provide the UnseenNodes value.</param>
            <param name="visitor">provide the visitor value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.DepthFirstSearch(Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.Edge,System.String,System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Int32,System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.LayoutCell}})">
            <summary>
             Used to perform the depth fisrt search on the layout model
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.UpdateMinMaxRank(Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.DiagramVertex,Syncfusion.Blazor.Diagram.Internal.Edge,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramVertex},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.LayoutCell}})">
            <summary>
             Updates the min/max rank of the layer
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.SetTempVariable(System.Object,System.Int32,System.Double)">
            <summary>
             Sets the temp position of the node on the layer
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MultiParentModel.FixRanks">
            <summary>
             Used to set the optimum value of each vertex on the layout
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.CrossReduction">
            <summary>
            Handles position the objects in a hierarchical tree structure
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.CrossReduction"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.CalculateCrossings(Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
            <summary>
            Used to calculate the number of edges crossing the layout model
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.CalculateRankCrossing(System.Int32,Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
            <summary>
            Used to specify the number of conenctors crossing between the specified rank and its below rank
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.GetConnectedCellsOnLayer(System.Object,System.Int32,System.Boolean)">
            <summary>
            Used to get the node next(up) connected to the specified node or connector 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.GetTempVariable(Syncfusion.Blazor.Diagram.Internal.LayoutCell,System.Int32)">
            <summary>
            Used to get the temp value specified for the node or connector
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.MedianRank(System.Int32,System.Boolean)">
            <summary>
            Used to minimize the node position on this rank and one of its adjacent ranks
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.MedianValue(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.LayoutCell},System.Int32)">
            <summary>
            Calculates the rank elements on the specified rank 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.SetTempVariable(Syncfusion.Blazor.Diagram.Internal.LayoutCell,System.Int32)">
            <summary>
            Get the temp value of the specified layer
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.WeightedMedian(System.Int32,Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
            <summary>
            Used to move up or move down the node position on the adjacent ranks
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CrossReduction.Execute(Syncfusion.Blazor.Diagram.Internal.MultiParentModel)">
            <summary>
            Calculates and reduces the crosses between line segments
            </summary>
            <param name="model">Provide the target value.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.SorterEntry">
            <summary>
            Defines sorted entries
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.WeightedCellSorter">
            <summary>
            Defines weighted cell sorter
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.PlacementStage">
            <summary>
            Defines the object to represent each placement stage
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.LayoutProp">
            <summary>
            Defines the properties of layout
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree">
            <summary>
            Hierarchical Tree and Organizational Chart
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateLayout(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.DiagramPoint,System.String,System.String)">
            <summary>
            This method is used to update layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.DoLayout(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},Syncfusion.Blazor.Diagram.DiagramPoint,System.String)">
            <summary>
            Initializes the layouting process
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateNodes(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            This method is used to update nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateConnectors(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Int32)">
            <summary>
            This method is used to update connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateSegments(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node,System.Int32)">
            <summary>
            This method is used to update segments.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateSegmentsForBalancedTree(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node,System.Int32)">
            <summary>
            This method is used to update segments for balanced tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateNodeExpand(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.IDiagramObject})">
            <summary>
            This method is used to update node expand.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.Get3Points(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            Get3Points Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.GetSegmentsFromPoints(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to get segments from points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.Get5Points(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            Get5Points Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateSegmentsForHorizontalOrientation(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to get segments for horizontal orientation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.GetSegmentsForMultipleRows(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to get segments for multiple rows.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.GetBounds(Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to get bounds of node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateAnchor(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Internal.Bounds,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to updat anchor.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.SetUpLayoutInfo(Syncfusion.Blazor.Diagram.Internal.DiagramLayout)">
            <summary>
            This method is used to setup layout information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateEdges(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Int32,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node})">
            <summary>
            This method is used to update edges.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateTree(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,System.Double,System.Double,Syncfusion.Blazor.Diagram.Node,System.Nullable{System.Int32},Syncfusion.Blazor.Diagram.Node,System.Boolean)">
            <summary>
            This method is used to update tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.SetBreadthSpaceForAssistants(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramRect,System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            This method is used to set breath space for assistants.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateVerticalTree(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            This method is used to update vertical tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.FindOffset(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Internal.LayoutInfo,System.Nullable{Syncfusion.Blazor.Diagram.SubTreeAlignmentType})">
            <summary>
            This method is used to find offset.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.AlignRowsToCenter(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,System.Int32,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Internal.MultipleRowInfo,System.Double)">
            <summary>
            This method is used to align rowa based on center position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateRearBoundsOfTree(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,System.Collections.Generic.List{System.String},System.Double,Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            This method is used to update rear bounds of tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateRearBounds(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.Bounds},System.Collections.Generic.List{System.Int32})">
            <summary>
            This method is used to update rear bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.FindLevel(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Internal.Bounds)">
            <summary>
            This method is used to find first level nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateLeftTree(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Internal.MultipleRowInfo,Syncfusion.Blazor.Diagram.Node,System.Double,System.Double,System.Int32)">
            <summary>
            This method is used to update left tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.SplitRows(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            This method is used to split rows.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.SplitChildrenInRows(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to split children in rows.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateHorizontalTreeWithMultipleRows(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Double,System.Double,System.Int32)">
            <summary>
            This method is used to update horizontal tree with multiple rows.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.SetDepthSpaceForAssistants(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Double,System.Nullable{System.Int32},System.Double)">
            <summary>
            This method is used to set depth for space assistants.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.GetDimensions(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Double,System.Double,System.Nullable{System.Int32})">
            <summary>
            This method is used to get dimension value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateHorizontalTree(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,System.Double,System.Double,System.Int32)">
            <summary>
            This method is used to update horizontal tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.HasChild(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            This method is used to check the element has child or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UniteTwoRect(Syncfusion.Blazor.Diagram.Internal.Bounds,Syncfusion.Blazor.Diagram.Internal.Bounds)">
            <summary>
            UniteTwoRect Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.UpdateLeafNode(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramRect,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            This method is used to update leaf node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.TranslateSubTree(Syncfusion.Blazor.Diagram.Internal.TranslateInfo,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            This method is used to translate the sub tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.ShiftSubordinates(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,System.Collections.Generic.List{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method is used to shift the sublevels by the distance
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.SpaceLeftFromPrevSubTree(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Internal.Bounds)">
            <summary>
            This method is used to find space, left from previous sub tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.HierarchicalTree.FindIntersectingLevels(Syncfusion.Blazor.Diagram.Internal.DiagramLayout,Syncfusion.Blazor.Diagram.Internal.Bounds,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method is used to find intersecting level.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramLayout">
            <summary>
            Defines the behavior of the automatic layouts
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.LayoutInfo">
            <summary>
            Represents the necessary information about a node's children and the way to arrange them.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.SubTreeTranslation">
            <summary>
            Represents the value to be moved in the layout.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Tree">
            <summary>
            Represents the arrangement of the nodes in the layout.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.CanMoveBy">
            <summary>
            Represents the breadth space for assistants.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Translate">
            <summary>
            Represents the same positions to be arranged for the leaf in the tree. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.X">
            <summary>
            Represents the value of the X coordinate in a layout .
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Y">
            <summary>
            Represents the value of the Y coordinate in a layout. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Intersect">
            <summary>
            Represents the collection of values where the subtree has been positioned.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Mid">
            <summary>
            Represents the mid value of the layout in the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.MaxLevel">
            <summary>
            Represents the highest number of levels in the layout. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Translated">
            <summary>
            Represents whether the translate has been completed or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.Diff">
            <summary>
            Represents the space to be left from the previous sub tree. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LayoutInfo.ActualLevel">
            <summary>
            Represents the exact level of the tree in the layout. 
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.MindMap">
             <summary>
            Layout for mind-map tree
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MindMap.UpdateLayout(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.DiagramPoint,System.String,System.String)">
            <summary>
            This method is used to update layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MindMap.UpdateMindMapBranch(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.DiagramPoint,System.String,Syncfusion.Blazor.Diagram.BranchType)">
            <summary>
            This method is used to update mindmap branch.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MindMap.ExcludeFromLayout(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.IDiagramObject},System.Boolean)">
            <summary>
            Exclude from layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MindMap.CheckRoot(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},Syncfusion.Blazor.Diagram.Layout,System.String,System.String)">
            <summary>
            This method is used to check root.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MindMap.GetBranch(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node})">
            <summary>
            This method is used to get branch.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.MindMap.FindFirstLevelNodes(Syncfusion.Blazor.Diagram.Node,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.IDiagramObject})">
            <summary>
            This method is used to find first level nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.DefaultShapes">
            <summary>
             Defines the shape information.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.BpmnShapes">
            <summary>
            Defines the BpmnShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.BpmnTriggerShapes">
            <summary>
            Defines the BpmnTriggerShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.BpmnGatewayShapes">
            <summary>
            Defines the BpmnGatewayShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.BpmnLoopShapes">
            <summary>
            Defines the BpmnLoopShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.BpmnTaskShapes">
            <summary>
            Defines the BpmnTaskShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.BpmnTextAnnotationShapes">
            <summary>
            Defines the BpmnTextAnnotationShapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.MeasureCustomBounds">
            <summary>
             This method is used to measure custom bound values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.MeasureCustomPathPoints">
            <summary>
            This method is used to measure custom path points.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.MeasureTextBounds">
            <summary>
            This method is used to measure text bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.MeasureImageBounds">
            <summary>
            This method is used to measure image bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.MeasureNativeElementBounds">
            <summary>
            This method is used to measure native element bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetShapeData(System.String)">
            <summary>
            This method is used to get shape data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetBpmnTriggerShapePathData(System.String)">
            <summary>
            The GetBpmnTriggerShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetBpmnGatewayShapePathData(System.String)">
            <summary>
            The GetBpmnGatewayShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetBpmnTaskShapePathData(System.String)">
            <summary>
            The GetBpmnTaskShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetBpmnLoopShapePathData(System.String)">
            <summary>
            The GetBpmnLoopShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetBpmnShapePathData(System.String)">
            <summary>
            The GetBpmnShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetPathPointsCollection(System.String)">
            <summary>
            The GetPathPointsCollection.
            </summary>
            <param name="data">The data<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetCustomPathPointsCollection(System.String)">
            <summary>
            The GetPathPointsCollection.
            </summary>
            <param name="data">The data<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetMeasurePathBounds(System.String)">
            <summary>
            This method is used to get measure path bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetMeasureTextBounds(System.String)">
            <summary>
            This method is used to get measure text bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetMeasureImageBounds(System.String)">
            <summary>
            This method is used to get measure image bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetMeasureNativeElementBounds(System.String)">
            <summary>
            This method is used to get measure native element bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.RemoveMeasuredTextBounds(System.String)">
            <summary>
            This method is used to remove measured text bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.ArrangeBoundsValues(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils})">
            <summary>
            This method is used to arrange bounds value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.UpdateMeasuredTextData(System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtilsSerialize})">
            <summary>
            This method is used to update measured text data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.UpdateMeasuredPathData(System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.DiagramRect})">
            <summary>
            This method is used to update measured path data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.UpdateMeasuredImageData(System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.DiagramSize})">
            <summary>
            This method is used to update measured image data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.UpdateMeasuredNativeData(System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.DiagramRect})">
            <summary>
            This method is used to update measured native data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.UpdateMeasuredPathPointData(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint}})">
            <summary>
            This method is used to update measured pathpoint data.
            </summary>    
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.GetMeasureNodeData(Syncfusion.Blazor.Diagram.Node,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to get measured node data.
            </summary>    
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.MeasureNodeTemplate(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.CommonElement,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils})">
            <summary>
            This method is used to measure node template.
            </summary>    
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.AddMeasurePathDataCollection(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to add measure path data collection.
            </summary>  
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.AddMeasureImageSourceCollection(System.String,Syncfusion.Blazor.Diagram.Node,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to add measure image source collection.
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.AddMeasureTextCollection(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.Annotation,Syncfusion.Blazor.Diagram.TextElement,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils})">
            <summary>
            This method is used to add measure text data collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.AddMeasureNativeCollection(Syncfusion.Blazor.Diagram.Node,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to add measure native data collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.AddMeasureCustomPathDataCollection(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to add measure custom path data collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDictionary.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ShapeInformation">
            <summary>
            It defines shape information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ShapeInformation.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.IdentityMatrix">
            <summary>
            Will identify the matrix
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.TransformPointByMatrix(Syncfusion.Blazor.Diagram.Internal.Matrix,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Will transform the point by matrix
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.RotateMatrix(Syncfusion.Blazor.Diagram.Internal.Matrix,System.Double,System.Double,System.Double)">
            <summary>
            Will rotate the matrix
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.ScaleMatrix(Syncfusion.Blazor.Diagram.Internal.Matrix,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Will scale the matrix.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.TranslateMatrix(Syncfusion.Blazor.Diagram.Internal.Matrix,System.Double,System.Double)">
            <summary>
            Will translate the matrix
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.CreateScaling(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Will create the scaling value 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.CreateRotationRadians(System.Double,System.Double,System.Double)">
             <summary>
            Will create the rotation radians
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.MultiplyPoint(Syncfusion.Blazor.Diagram.Internal.Matrix,System.Double,System.Double)">
             <summary>
            Multiplies the point
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.MultiplyMatrix(Syncfusion.Blazor.Diagram.Internal.Matrix,Syncfusion.Blazor.Diagram.Internal.Matrix)">
             <summary>
            Will multiply the matrix
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.SetMatrix(Syncfusion.Blazor.Diagram.Internal.Matrix,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>
            Sets the matrix
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Matrix.AssignMatrix(Syncfusion.Blazor.Diagram.Internal.Matrix,Syncfusion.Blazor.Diagram.Internal.Matrix)">
             <summary>
            Assigns the matrix
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer">
            <summary>
            Represents the object to be rendered in the diagram once the data has been processed.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.GetPathAttributes(Syncfusion.Blazor.Diagram.PathElement,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Boolean)">
             <summary>
            This method is used to get path attributes
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.GetSelectorAttributes(Syncfusion.Blazor.Diagram.Internal.SelectionFragmentParameter)">
             <summary>
            This method is used to get selector attributes
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.ParseDashArray(System.String)">
             <summary>
            Returns the dashed array values
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.SvgLabelAlign(Syncfusion.Blazor.Diagram.Internal.TextAttributes,Syncfusion.Blazor.Diagram.Internal.TextBounds,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.SubTextElement})">
             <summary>
            This method is used to Draw the SVG label.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.GetTextElements(Syncfusion.Blazor.Diagram.Internal.TextAttributes)">
             <summary>
            This method is used to get the text elements.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.RenderPivotLine(Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.Internal.TransformFactor,Syncfusion.Blazor.Diagram.SelectorConstraints,System.Boolean,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes})">
             <summary>
            This method is used to render the pivot line.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.RenderRotateThumb(Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.Internal.TransformFactor,Syncfusion.Blazor.Diagram.SelectorConstraints,System.Boolean,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes})">
             <summary>
            This method is used to render rotate thumb of the diagramnode element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.RenderCircularHandle(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes},System.String,Syncfusion.Blazor.Diagram.DiagramContainer,System.Double,System.Double,System.Boolean,System.Boolean,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
             <summary>
            This method is used to render the circular handle for the node element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.RenderBezierLine(System.String,Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes})">
             <summary>
            This method is used to render the bezier line for the connector
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.RenderBorder(Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes})">
             <summary>
            This method is used to render border for the node element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.RenderEndPointHandle(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.ThumbsConstraints,Syncfusion.Blazor.Diagram.SelectorConstraints,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes})">
             <summary>
            This method is used to render the end point of the handle
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.RenderOrthogonalThumbs(System.String,Syncfusion.Blazor.Diagram.OrthogonalSegment,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes})">
             <summary>
            This method is used to render the orthogonal thumb
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.GetNativeNode(Syncfusion.Blazor.Diagram.CommonElement,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Node})">
             <summary>
            Method used to get the native node.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.GetGroupNode(System.String,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Node})">
             <summary>
            Method used to get the group node.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.GetChildNodes(Syncfusion.Blazor.Diagram.Node,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Node},System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Node})">
             <summary>
            Method used to get the child nodes.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.RenderResizeHandle(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes},Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.ThumbsConstraints,Syncfusion.Blazor.Diagram.SelectorConstraints,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Boolean})">
             <summary>
            This method is used to render the resize handle
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramRenderer.RenderUserHandle(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.BaseAttributes},Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.Internal.TransformFactor)">
             <summary>
            This method is used to render the user handle
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.StyleAttributes">
            <summary>
            Define the style attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.Fill">
            <summary>
            Gets or sets the fill color of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.Stroke">
            <summary>
            Gets or sets the stroke color of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.StrokeWidth">
            <summary>
            Gets or sets the stroke width of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.DashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.Opacity">
            <summary>
            Gets or sets the transparency level of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.Shadow">
            <summary>
            Represents the shadow appearance of the diagram object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.Gradient">
            <summary>
            Gets or sets the gradient effect of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.ClassValues">
            <summary>
            Gets or sets the class values of element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.#ctor(Syncfusion.Blazor.Diagram.CommonElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.StyleAttributes"/> class.
            </summary>
            <param name="element">It provide Icommonelement</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.StyleAttributes.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.BaseAttributes">
            <summary>
            Define Base Attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.ID">
            <summary>
             Gets or sets the id of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.X">
            <summary>
             Gets or sets the horizontal position of an element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.Y">
            <summary>
             Gets or sets the vertical position of an element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.Width">
            <summary>
             Gets or sets the width of an element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.Height">
            <summary>
             Gets or sets the height of an element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.Angle">
            <summary>
             Gets or sets the angle of an element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.PivotX">
            <summary>
             Gets or sets the pivotX of an element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.PivotY">
            <summary>
             Gets or sets the pivotY of an element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.Visible">
            <summary>
             Gets or sets the visible property of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.Description">
            <summary>
             Gets or sets the description  of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.CanApplyStyle">
            <summary>
             Gets or sets to check whether style apply or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.Flip">
            <summary>
             Gets or sets the flip direction  of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.FlipMode">
            <summary>
             Gets or sets the flipMode  of an element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.#ctor(Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.BaseAttributes"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseAttributes.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.RectAttributes">
            <summary>
             Defines Rect attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.RectAttributes.CornerRadius">
            <summary>
              Gets or sets the corner radius of an element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.RectAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.RectAttributes"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.RectAttributes.#ctor(Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Nullable{System.Boolean})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.RectAttributes.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.LineAttributes.#ctor(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.LineAttributes"/> class.
            </summary>
            <param name="element">It provides diagram element</param>
            <param name="isPreviewNode">It provides preview node details</param>
            <param name="transform">It provides transform factor value</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.LineAttributes.#ctor">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LineAttributes.StartPoint">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.LineAttributes.EndPoint">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.LineAttributes.Dispose">
            <summary>
             This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CircleAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.CircleAttributes"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CircleAttributes.#ctor(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.CircleAttributes"/> class.
            </summary>
            <param name="transform">It provides transform factor value</param>
            <param name="isPreviewNode">It provides preview node details</param>
            <param name="element">It provides diagram element.</param>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.CircleAttributes.CenterX">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.CircleAttributes.CenterY">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.CircleAttributes.Radius">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.CircleAttributes.Dispose">
            <summary>
             This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.PathAttributes"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathAttributes.#ctor(Syncfusion.Blazor.Diagram.PathElement,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.PathAttributes"/> class.
            </summary>
            <param name="element">It provides path element</param>
            <param name="isPreviewNode">It provides preview node details</param>
            <param name="transform">It provides transform factor value.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathAttributes.Dispose">
            <summary>
             This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.FragmentParameter">
            <summary> 
            RenderingParameters class is used to pass the parameter collection in render fragment
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.SubTextElement">
            <summary>
            Represents the properties of a sub text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.Text">
            <summary>
            Returns the text from the sub text element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.X">
            <summary>
            Returns the start position where the text element is to be rendered.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.Dy">
            <summary>
            Returns the left position where the text is to be rendered.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.Width">
            <summary>
            Returns the width of the sub text element. 
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.TextBounds">
            <summary>
            Represents the properties of text bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextBounds.X">
            <summary>
            Returns the width of the sub text element. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextBounds.Width">
            <summary>
            Returns the start position where the text element is to be rendered.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.TextAttributes">
            <summary>
            Defines Text attributes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.TextAttributes.#ctor(Syncfusion.Blazor.Diagram.TextElement,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.TextAttributes"/> class.
            </summary>
            <param name="transform">It provides transform factor value</param>
            <param name="isPreviewNode">It provides preview node details</param>
            <param name="element">It provides text element.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ImageAttributes">
            <summary>
            Defines Image attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.ImageAttributes.Source">
            <summary>
            Gets or sets the source of image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.ImageAttributes.SourceWidth">
            <summary>
            Gets or sets the width of an image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.ImageAttributes.SourceHeight">
            <summary>
            Gets or sets the height of an image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.ImageAttributes.Alignment">
            <summary>
            Gets or sets the alignment of an image.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ImageAttributes.#ctor(Syncfusion.Blazor.Diagram.ImageElement,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Internal.TextAttributes"/> class.
            </summary>
            <param name="transform">It provides transform factor value</param>
            <param name="isPreviewNode">It provides preview node details</param>
            <param name="element">It provides image element.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.BaseUtil">
             <summary>
            Implements the basic functionalities
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.RandomId">
             <summary>
            Used to generate a random id 
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.RotateSize(Syncfusion.Blazor.Diagram.DiagramSize,System.Double)">
             <summary>
            RotateSize Method
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.RotatePoint(System.Double,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to rotate points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.GetOffset(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramElement)">
             <summary>
            This method is used to get offset values.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.CornersPointsBeforeRotation(Syncfusion.Blazor.Diagram.DiagramElement)">
             <summary>
            This method is used to get corners points before rotation.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.GetSelectorBounds(Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
             <summary>
            This method is used to get selector bounds.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.GetBounds(Syncfusion.Blazor.Diagram.DiagramElement)">
             <summary>
            This method is used to get bounds.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.WhiteSpaceToString(System.String,Syncfusion.Blazor.Diagram.TextWrap)">
             <summary>
            This method is used to convert whitespace to a string.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.WordBreakToString(System.String)">
             <summary>
            This method is used convert wordbreak to a string.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.TextAlignToString(Syncfusion.Blazor.Diagram.TextAlign)">
             <summary>
            This method is used to convert textalign to string.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.GetDoubleValue(System.Nullable{System.Double})">
             <summary>
            This method is used to get double values.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.BaseUtil.UpdateDictionary``1(System.String,``0,``0,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
            This method is used to get double values.
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil">
             <summary>
            Connector Util are used to dock and update the connectors
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindConnectorPoints(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary,Syncfusion.Blazor.Diagram.Layout)">
             <summary>
            This method is used to find connector points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetSourcePoint(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to get the source point.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.TerminateConnection(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to terminate the connection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.UpdateSegmentPoints(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.OrthogonalSegment)">
             <summary>
            This method is used to update the path element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.PointToPoint(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to create point to point connections.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.PointToNode(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to create point to node connections.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.AddPoints(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to add points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindSegmentDirection(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Nullable{Syncfusion.Blazor.Diagram.Direction})">
             <summary>
            This method is used to find a segment direction.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.PointToPort(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to create point to point connections.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindPointToPointOrtho(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to create point to point ortho connection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.CheckPortDirection(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramElement)">
             <summary>
            This method is used to check the port direction.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.CheckPreviousSegment(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            This method is used to check the previous segment.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetDirection(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.LayoutOrientation)">
             <summary>
            This method is used to get the direction.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.ConnectToOneEnd(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            ConnectToOneEnd Method.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.AddPaddingToConnector(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Boolean)">
             <summary>
            This method is used to add padding to the connector.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.CheckSourceAndTargetIntersect(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            This method is used to check where the source and target intersect.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.CreateSegmentsCollection(Syncfusion.Blazor.Diagram.DiagramElement,System.Double)">
             <summary>
            This method is used to create a segment collection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.CreateLineSegment(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to create a line segment.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.SwapBounds(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Corners,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            This method is used to swap bounds value.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.DefaultOrthoConnection(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Direction,Syncfusion.Blazor.Diagram.Direction,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to create the default ortho connection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.IntermediatePointsForStraight(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to update intermediate points for straight.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindSourceDirection(Syncfusion.Blazor.Diagram.Direction,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to find the source direction.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.CheckLastSegmentAsTerminal(Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            This method is used to check whether the last segment is a terminal or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.CheckConsecutiveSegmentAsSame(Syncfusion.Blazor.Diagram.Connector,System.Int32,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to check if consecutive segments are the same or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.NodeOrPortToNode(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to create node/port to node connection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.CheckSourcePointInTarget(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to check for a source point in a target.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindIntermediatePoints(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to find intermediate points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.ReturnIntermediatePoints(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
             <summary>
            This method is used to return intermediate points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindDirection(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to find the direction of an element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindOrthoSegments(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Nullable{System.Double})">
             <summary>
            This method is used to find ortho segments.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindAngle(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to find an angle based on points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindPoint(Syncfusion.Blazor.Diagram.Corners,Syncfusion.Blazor.Diagram.Direction)">
             <summary>
            This method is used to find points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.PointsFromNodeToPoint(Syncfusion.Blazor.Diagram.OrthogonalSegment,Syncfusion.Blazor.Diagram.Direction,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Boolean)">
             <summary>
            This method is used to find points from a node to a point.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.AddLineSegment(Syncfusion.Blazor.Diagram.DiagramPoint,System.Double,System.Double)">
             <summary>
            This method is used to add a line segment.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetIntersection(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Boolean,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to get an intersection
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.SetLineEndPoint(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramPoint,System.Boolean)">
             <summary>
            This method is used to set a line end point.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetIntersectionPoints(Syncfusion.Blazor.Diagram.Internal.Segment,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to get intersection points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.IntersectSegment(Syncfusion.Blazor.Diagram.Internal.Segment,Syncfusion.Blazor.Diagram.Internal.Segment)">
             <summary>
            This method is used to get intersect segment.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.SameSign(System.Double,System.Double)">
             <summary>
            This method is used to check if both values have the same sign or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetRightToLeftSegmentCount(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Boolean)">
             <summary>
            This method is used to get right to left segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetRightToRightSegmentCount(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to get right to right segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetRightToTopSegmentCount(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Nullable{System.Boolean})">
             <summary>
            This method is used to get right to top segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetRightToBottomSegmentCount(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Nullable{System.Boolean})">
             <summary>
            This method is used to get right to bottom segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetBottomToTopSegmentCount(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to get bottom to top segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetBottomToLeftSegmentCount(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Nullable{System.Boolean})">
             <summary>
            This method is used to get bottom to left segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetBottomToBottomSegmentCount(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to get bottom to bottom segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetLeftToTopSegmentCount(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Nullable{System.Boolean})">
             <summary>
            This method is used to get left to top segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetLeftToLeftSegmentCount(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to get left to left segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetTopToTopSegmentCount(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to get top to top segment count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.AddOrthoSegments(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.NoOfSegments,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Nullable{System.Double})">
             <summary>
            This method is used to add ortho segments.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.AdjustSegmentLength(System.Object,Syncfusion.Blazor.Diagram.Internal.End,System.Double)">
             <summary>
            This method is used to get the adjustsegment length.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.OrthoConnection2Segment(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method gets invoked when the ortho connection has two segments
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.OrthoConnection3Segment(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Nullable{System.Double},System.Nullable{System.Boolean})">
             <summary>
            This method invoked when the ortho connection has three segments.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.OrthoConnection5Segment(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Double)">
             <summary>
            This method invoked when the ortho connection has five segments.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.OrthoConnection4Segment(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Double,System.Nullable{Syncfusion.Blazor.Diagram.Direction})">
             <summary>
            This method invoked when the ortho connection has four segments.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetOrtho3Seg(Syncfusion.Blazor.Diagram.DiagramPoint,System.String,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
             <summary>
            This method is used to get ortho with three segments.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.UpdateVOrientation(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Corners,Syncfusion.Blazor.Diagram.Corners,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Double)">
             <summary>
            This method is used to update vertical orientation.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.UpdateHOrientation(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Corners,Syncfusion.Blazor.Diagram.Corners,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Double)">
             <summary>
            This method is used to update horiozontal orientation.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.UpdatePathElement(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            This method is used to update the path element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindPath(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to find the path for a connector depending on the source and target points. 
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.FindDistance(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to find distance depending on points. 
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetTopLength(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Double,System.Nullable{Syncfusion.Blazor.Diagram.Direction})">
             <summary>
            This method is used to get the top length.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetLeftLength(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Double,System.Nullable{Syncfusion.Blazor.Diagram.Direction})">
             <summary>
            This method is used to get the left length.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetRightLength(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Double,System.Nullable{Syncfusion.Blazor.Diagram.Direction})">
             <summary>
            This method is used to get the right length.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.UpdateConnectorShape(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
             <summary>
            This method is used to update connector shapes.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetBottomLength(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End,System.Double,System.Nullable{Syncfusion.Blazor.Diagram.Direction})">
             <summary>
            This method is used to get the bottom length.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetSwapping(Syncfusion.Blazor.Diagram.Direction,Syncfusion.Blazor.Diagram.Direction)">
             <summary>
            This method is used swap the source and target directions.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.SwapPoints(Syncfusion.Blazor.Diagram.Internal.End,Syncfusion.Blazor.Diagram.Internal.End)">
             <summary>
            This method is used to swap points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetPortDirection(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            This method is used to get the port direction.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetOuterBounds(Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            This method is used to get outer bounds.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConnectorUtil.GetOppositeDirection(Syncfusion.Blazor.Diagram.Direction)">
             <summary>
            This method is used to get the opposite direction.
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.PathInformation">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.Diagram.Internal.PathInformation" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.Path">
            <summary>
            Gets or sets the Path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.Points">
            <summary>
            Gets or sets the Points.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.StartPoint">
            <summary>
            Gets or sets the Points.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.TargetPoint">
            <summary>
            Gets or sets the Points.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil">
             <summary>
            constraints-util  contains the common constraints
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CheckPortRestriction(Syncfusion.Blazor.Diagram.Port,Syncfusion.Blazor.Diagram.PortVisibility)">
             <summary>
            This method is used to restrict port visibility.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CheckPortConstraints(Syncfusion.Blazor.Diagram.Port,Syncfusion.Blazor.Diagram.PortConstraints)">
             <summary>
            This method is used to check port constraints.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanOutConnect(Syncfusion.Blazor.Diagram.Node)">
             <summary>
            Used to check OutConnect constraints of the element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanInConnect(Syncfusion.Blazor.Diagram.Node)">
             <summary>
            Used to check InConnect constraints of the element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanPortOutConnect(Syncfusion.Blazor.Diagram.PointPort)">
             <summary>
            Used to check PortOutConnect constraints of the element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanPortInConnect(Syncfusion.Blazor.Diagram.PointPort)">
             <summary>
            Used to check PortInConnect constraints of the element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanShadow(Syncfusion.Blazor.Diagram.Node)">
             <summary>
            Used to check shadown constraints of the element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanZoom(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check zoom constraints of the diagram
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanZoomTextEdit(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check Zoomtextedit constraints of the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanPan(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check pan constraints of the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanMultiSelect(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check multiselect constraints of the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanSingleSelect(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check single select constraints of the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanZoomPan(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check zoompan constraints of the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanPanX(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check  panX constraints of the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanPanY(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check  panY constraints of the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanUserInteract(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check  userinteraction constraints of the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.DefaultTool(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check  default tool of the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanSelect(Syncfusion.Blazor.Diagram.IDiagramObject)">
             <summary>
            Used to check whether item can be select or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanRotate(Syncfusion.Blazor.Diagram.IDiagramObject)">
             <summary>
            Used to check whether item can be rotate or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanMove(Syncfusion.Blazor.Diagram.IDiagramObject)">
             <summary>
            Used to check whether item can move or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanDelete(Syncfusion.Blazor.Diagram.IDiagramObject)">
             <summary>
            Used to check whether item can be delete or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanShowCorner(Syncfusion.Blazor.Diagram.SelectorConstraints,Syncfusion.Blazor.Diagram.SelectorConstraints)">
             <summary>
            Used to check whether show corner or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.HasSingleConnection(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check whether item has selection  or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanDragSourceEnd(Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            Used to check whether source end drag or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanDrawOnce(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check whether  we can draw once or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanContinuous(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check whether we can draw continous or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanDragTargetEnd(Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            Used to check whether we can drag target end or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanDragSegmentThumb(Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            Used to check whether we can drag segment thumb or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanEnablePointerEvents(Syncfusion.Blazor.Diagram.NodeBase)">
             <summary>
            Used to check whether we can enble pointer events or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.EnableReadOnly(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.Annotation)">
             <summary>
            Used to check whether we can enble readonly constraints or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanEditText(Syncfusion.Blazor.Diagram.IDiagramObject)">
             <summary>
            Used to check whether we can edit text or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanAllowDrop(Syncfusion.Blazor.Diagram.NodeBase)">
             <summary>
            Used to check whether we can allow drop or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CheckConnect(Syncfusion.Blazor.Diagram.PointPort,Syncfusion.Blazor.Diagram.DiagramElementAction)">
             <summary>
            Used to check it connected or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanBridge(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check the bridging of the element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanPageEditable(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check PageEditable constraints of the element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanApiInteract(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Used to check ApiInteract constraints of the element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanDraw(Syncfusion.Blazor.Diagram.Port)">
             <summary>
            Used to check draw constraints of the element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanUpdateScroller(Syncfusion.Blazor.Diagram.DiagramElementAction)">
             <summary>
            Used to check we can update scroller or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanInheritTooltip(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            This method is used to update tooltip property based on the node/connector constraints value 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanEnableDefaultTooltip(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Enable/disable default Tooltip
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanPreventUpdateConnector(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Used to check we can prevent the connector updation during interaction
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.ConstraintsUtil.CanEnableTooltip(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Used to check we can update tooltip or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramUtil">
            <summary>
            Represents how to handle constraint related validation/checking to render objects in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.UpdatePortEdges(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.FlipDirection,Syncfusion.Blazor.Diagram.PointPort)">
            <summary>
            This method is used to update port edges.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetWrapper(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.DiagramContainer,System.String)">
            <summary>
            This method is used get wrapper value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.RemoveBpmnWrapper(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.DiagramContainer,System.String)">
            <summary>
            This method is used remove bpmn wrapper.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetPortContainer(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            This method is used to get port container.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetUserHandlePosition(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.UserHandle,Syncfusion.Blazor.Diagram.Internal.TransformFactor)">
            <summary>
            This method is used to get userhandle position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.UpdateShape(Syncfusion.Blazor.Diagram.Node,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object)">
            <summary>
            This method is used to update shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.SortByXY(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase},Syncfusion.Blazor.Diagram.DistributeOptions)">
            <summary>
            SortByXY method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.SetParentForObservableCollection(System.Object,Syncfusion.Blazor.Diagram.IDiagramObject,System.String)">
            <summary>
            This method is used to set parent for observable collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.UpdateShapeContent(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to update shape content.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetPoints(Syncfusion.Blazor.Diagram.Corners,System.Double)">
            <summary>
            This method is used to get points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetPathPoints(Syncfusion.Blazor.Diagram.PathElement,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get path points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetLineSegment(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This method is used to get line segments.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.Intersect2(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Intersect2 Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.Intersect3(Syncfusion.Blazor.Diagram.Internal.Segment,Syncfusion.Blazor.Diagram.Internal.Segment)">
            <summary>
            Intersect3 Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetInOutConnectPorts(Syncfusion.Blazor.Diagram.Node,System.Boolean)">
            <summary>
            This method is used to get InOutConnect port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.UpdateConnector(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.RemoveItem(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            This method is used to remove item from list.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.AsDictionary(System.Object,System.Object)">
            <summary>
            AsDictionary Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetFixedUserHandlePosition(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle)">
            <summary>
            This method is used to get fixed userhandle position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetAnnotationPosition(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.PathAnnotation)">
            <summary>
            This method is used to get annotation position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetAlignedPosition(Syncfusion.Blazor.Diagram.PathAnnotation,Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle)">
            <summary>
            This method is used to get annotation aligned position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetOffsetOfConnector(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.PathAnnotation,Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle)">
            <summary>
            This method is used to get offset value of connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.AlignLabelOnSegments(Syncfusion.Blazor.Diagram.PathAnnotation,System.Double,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
            <summary>
            This method is used to align label based on segments.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.AlignLabelOnUserHandleSegments(Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle,System.Double,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
            <summary>
            This method is used to align label based on userhandle segments.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetBezierDirection(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to get bezier direction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.CheckPort(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.CommonElement)">
            <summary>
            This method is used to check port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.FindNearestPoint(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to find nearest point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.PointsForBezier(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to find points for bezier connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.BezierPoints(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Int32,System.Double)">
            <summary>
             Get the intermediate bezier curve for point over connector
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.IsPointOverConnector(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            IsPointOverConnector Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.CompleteRegion(Syncfusion.Blazor.Diagram.DiagramRect,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject})">
            <summary>
            CompleteRegion Method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.InsertObjectByZIndex(Syncfusion.Blazor.Diagram.IDiagramObject,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject})">
            <summary>
            This method is used to insert object by zindex
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.GetPoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to get point.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DomUtil">
            <summary>
            Defines the functionalities that need to access DOM
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.CreateMeasureElements(Microsoft.JSInterop.IJSRuntime,System.Boolean,System.String[],System.String,System.String,System.String,Microsoft.JSInterop.DotNetObjectReference{Syncfusion.Blazor.Diagram.Internal.DiagramEventHandler},Syncfusion.Blazor.Diagram.Internal.TransformFactor,Syncfusion.Blazor.Diagram.DiagramSize,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
            <summary>
            This method is used to create measure elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.OpenUrl(Microsoft.JSInterop.IJSRuntime,System.String)">
            <summary>
            This method is used to open the url.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.TextEdit(Microsoft.JSInterop.IJSRuntime,Syncfusion.Blazor.Diagram.Internal.TextElementUtils,System.String,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.Internal.TransformFactor,System.Boolean,System.String)">
            <summary>
            This method is invoked when text editing inprogress.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.MeasureBounds(Microsoft.JSInterop.IJSRuntime,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is used to measure bounds of element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.SetChildPosition(Syncfusion.Blazor.Diagram.Internal.SubTextElement,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Internal.SubTextElement},System.Int32,Syncfusion.Blazor.Diagram.Internal.TextAttributes)">
            <summary>
            This method is used to set child position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.UpdatePath(System.String,Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            This method is used to update path data of element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.TranslatePoints(Syncfusion.Blazor.Diagram.PathElement,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
            <summary>
            This method is used to translate the elements points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.PathPoints(Microsoft.JSInterop.IJSRuntime,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Invoke when we use path data and used to measure path points
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.UpdateInnerLayerSize(Microsoft.JSInterop.IJSRuntime,System.String[],System.String,System.String,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.Internal.TransformFactor,Syncfusion.Blazor.Diagram.DiagramSize,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            This method is used to update innerlayer size.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.UpdateZoomPanTool(Microsoft.JSInterop.IJSRuntime,System.Boolean)">
            <summary>
            This method is used to update zoompan tool.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.SerializeTextStyle(System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils})">
            <summary>
            This method is used to serialize the textstyle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.TextElementStyleSerialize(Syncfusion.Blazor.Diagram.TextStyle)">
            <summary>
            This method is used to serialize the textelement.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.AddTouchPointer(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.Touches},Syncfusion.Blazor.Diagram.Internal.Touches[])">
            <summary>
            This method is used to add touch pointer.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.UpdateGridLines(Microsoft.JSInterop.IJSRuntime,System.String,Syncfusion.Blazor.Diagram.DiagramSize,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
            <summary>
            This method is used to update grid lines.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DomUtil.UpdatePageBreaks(Microsoft.JSInterop.IJSRuntime,System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.String,System.Double[],System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            This method is used to update page breaks.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.PathUtil">
             <summary>
            These utility methods help to process the data and to convert it to desired dimensions
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.ProcessPathData(System.String)">
             <summary>
            This method is used to process the path data.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.ParsePathData(System.String)">
             <summary>
            This method is used to parse the path data.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.GetPolygonPath(Syncfusion.Blazor.Diagram.DiagramPoint[])">
             <summary>
            This method is used to get polygon path.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.TransformPath(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.PathSegment},System.Double,System.Double,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
             <summary>
            This method is used to transform the path data.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.UpdatedSegment(Syncfusion.Blazor.Diagram.Internal.PathSegment,System.Char,Syncfusion.Blazor.Diagram.Internal.PathSegment,System.Boolean,System.Double,System.Double)">
             <summary>
            This method is used to update segment.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.ScalePathData(System.Double,System.Double,System.Double,System.Double)">
             <summary>
            This method is used to  scale the path data.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.SplitArrayCollection(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.PathSegment})">
             <summary>
            This method is used to split array collection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.GetPathString(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Internal.PathSegment})">
             <summary>
            This method is used to get path string.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.GetString(Syncfusion.Blazor.Diagram.Internal.PathSegment)">
            @private 
             <summary>
            This method is used to get string value.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SVGCommand.#ctor(System.Char,System.Double[])">
            <summary>
            To inialize the instance of  SVGCommand.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.SVGCommand.Parse(System.String)">
             <summary>
            This method is used to parse the svg string
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.TextElementUtils">
             <summary>
            TextElementUtils are used to define text elements.
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtils.Content">
            <summary>
            Gets or sets the content of the textelement utils.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtils.Style">
            <summary>
            Gets or sets the style of the textelement utils.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtils.Bounds">
            <summary>
            Gets or sets the bounds of the textelement utils.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtils.NodeSize">
            <summary>
            Gets or sets the nodesize of the textelement utils.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtils.WrapBounds">
            <summary>
            Gets or sets the wrapper bounds of the textelement utils.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtils.ChildNodes">
            <summary>
            Gets or sets the child nodes of the textelement utils.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.TextElementUtils.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtilsSerialize.Content">
            <summary>
            Gets or sets the content of the textelement utils searialize.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtilsSerialize.Style">
            <summary>
            Gets or sets the style of the textelement utils searialize.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtilsSerialize.Bounds">
            <summary>
            Gets or sets the bounds of the textelement utils searialize.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementUtilsSerialize.NodeSize">
            <summary>
            Gets or sets the nodesize of the textelement utils searialize.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.TextElementUtilsSerialize.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementStyle.Bold">
            <summary>
            Gets or sets the Bold of text element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementStyle.FontFamily">
            <summary>
            Gets or sets the FontFamily of text element.
            </summary>
            <value>The default value is Arial</value> 
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementStyle.FontSize">
            <summary>
            Gets or sets the fotsize of text element.
            </summary>
            <value>The default font size is 12.0</value> 
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementStyle.Italic">
            <summary>
            Gets or sets the italic of text element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementStyle.TextAlign">
            <summary>
            Gets or sets the text align of text element.
            </summary>
            <value>The default value will be<seealso cref="F:Syncfusion.Blazor.Diagram.TextAlign.Center"/></value> 
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementStyle.TextDecoration">
            <summary>
            Gets or sets the text decoration of text element.
            </summary>
            <value>The default value will be<seealso cref="F:Syncfusion.Blazor.Diagram.TextDecoration.None"/></value> 
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementStyle.TextOverflow">
            <summary>
            Gets or sets the text overflow of text element.
            </summary>
            <value>The default value will be<seealso cref="F:Syncfusion.Blazor.Diagram.TextOverflow.Wrap"/></value> 
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementStyle.TextWrapping">
            <summary>
            Gets or sets the text wrapping of text element.
            </summary>
            <value>The default value will be<seealso cref="F:Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow"/></value> 
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextElementStyle.WhiteSpace">
            <summary>
            Gets or sets the whitespace of text element.
            </summary>
            <value>The default value will be  whiteSpace</value> 
            <exclude/>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding">
            <summary>
            Represents the data sources that are bound together with the objects in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.InitData(Syncfusion.Blazor.Diagram.DataSourceSettings,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            To initialize data source settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.InitSource(Syncfusion.Blazor.Diagram.DataSourceSettings,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            To initialize data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.ApplyDataSource(Syncfusion.Blazor.Diagram.DataSourceSettings,System.Collections.IList,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            To Apply data source settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.UpdateRootNodeItems(System.Object,System.Object,System.Object,Syncfusion.Blazor.Diagram.Internal.DataItems,System.Int32)">
            <summary>
            This method is used to update the root nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.UpdateChildNodes(System.Collections.Generic.List{System.Object},Syncfusion.Blazor.Diagram.DataSourceSettings,Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Collections.IList,Syncfusion.Blazor.Diagram.Internal.DataItems,System.Object)">
            <summary>
            This method is used to render the child nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.UpdateFirstLevelNode(System.Object,System.Collections.Generic.List{System.Object},Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.Internal.DataItems,System.Object)">
            <summary>
            This method is used to update the first level nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.RenderChildNodes(Syncfusion.Blazor.Diagram.DataSourceSettings,Syncfusion.Blazor.Diagram.Internal.DataItems,System.String,Syncfusion.Blazor.Diagram.Internal.DataItems,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            USed to render child nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.ApplyConnectorTemplate(System.String,System.String,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            USed to apply connector template.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.ContainsConnector(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Connector},System.String,System.String)">
            <summary>
            Check whether it is connector or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.CollectionContains(Syncfusion.Blazor.Diagram.Node,System.String,System.String)">
            <summary>
            Check whether it contains collection or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.UpdateMultipleRootNodes(System.Object,System.Collections.IList,Syncfusion.Blazor.Diagram.Internal.DataItems)">
            <summary>
            Used to update multiple root nodes in layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.ApplyNodeTemplate(Syncfusion.Blazor.Diagram.DataSourceSettings,System.Object,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Used to apply node template for node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramDataBinding.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DataItems">
            <summary>
            Represent the data items in layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.PaletteContent">
            <summary>
            Represents the content of the palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PaletteContent.Parent">
            <summary>
            Gets or sets instance of  SfDiagramComponent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PaletteContent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PaletteContent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1">
            <summary>
            Represents a dynamic data collection that provides notifications when nodes or connectors or annotations or ports are added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T">T</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.Parent">
             <summary>
            Gets or sets the instance of IDiagramObject
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.AddAsync(`0)">
            <summary>
            Add the objects to the diagram object collection asynchronously. It is applicable only to ports and annotations.
            </summary>
            <param name="item">It contain which item needs to be add</param>
            <returns>Diagram Object</returns>
            <example>
            <code>
            <![CDATA[
            //Method for adding labels at runtime
            public async void AddLabel()
            {
               ShapeAnnotation annotation = new ShapeAnnotation { Content = "Annotation" };
               await (diagram.Nodes[0].Annotations as DiagramObjectCollection<ShapeAnnotation>).AddAsync(annotation);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.AddCollection(Syncfusion.Blazor.Diagram.DiagramObjectCollection{`0},Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            This method is used to add collection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.HistoryEntry"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of the DiagramObjectCollection from the given DiagramObjectCollection.
            </summary>
            <param name="collection">DiagramObjectCollection</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.ClearItems">
            <summary>
            Removes all the elements from the diagram object collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.ObservableCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
             <summary>
            This method triggered while observable collection is changed.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.RemoveCollectionChange(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
             <summary>
            This method is used to remove collection change.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.UpdateInternalHistoryEntry(Syncfusion.Blazor.Diagram.HistoryEntryType,Syncfusion.Blazor.Diagram.HistoryEntryChangeType,Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.EntryCategory)">
             <summary>
            This method is used to update the internal history entry args.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.SymbolPaletteCollectionChanges(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
             <summary>
            This method is used to remove symbol palette collection changes
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.AddRemoveBpmnSubProcess(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
             <summary>
            This method is used to add/remove BPMN sub process.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.RemovingNodesAndConnectors(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
             <summary>
            This method is used to remove nodes and connectors.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.UpdateCollectionChangingEventArgs(Syncfusion.Blazor.Diagram.DiagramAction,Syncfusion.Blazor.Diagram.CollectionChangedAction,Syncfusion.Blazor.Diagram.NodeBase)">
             <summary>
            This method is used to update the collection changing event args.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.RemovingNodeDependentObjects(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            This method is used to remove the node's annotation and connector connected to node. .
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.RemovingEdges(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            This method is used to remove the edges.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.AddingContainerElements(System.Collections.Specialized.NotifyCollectionChangedEventArgs,Syncfusion.Blazor.Diagram.DiagramObject)">
             <summary>
            This method is used to adding container elements.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.AddingNodesAndConnectors(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
             <summary>
            This method is used to adding nodes and connectors.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.GetMeasureDataCollection(System.Collections.IList,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
            This method is used to get measure data collection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.InitializeNodesAndConnectors(System.Collections.IList)">
             <summary>
            This method is used to initialize connectors and nodes.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.InitializeAnnotations(System.Collections.IList)">
             <summary>
            This method is used to initialize annotations.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.InitializeFixedUserHandle(System.Collections.IList)">
             <summary>
            This method is used to initialize fixeduserhandles.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.InitializePorts(System.Collections.IList)">
             <summary>
            This method is used to initialize ports.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.MeasureDataCollection(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
            This method is used to measure data collection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.InitObjects(System.Collections.IList,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
            This method is used to initialize the objects.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.UpdateFixedUserHandle(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.FixedUserHandle,System.String)">
             <summary>
            This method is used to update the fixed userhandle.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.UpdateAnnotation(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.Annotation,System.String)">
             <summary>
            This method is used to update the annotation.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.UpdatePort(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.PointPort,System.String)">
             <summary>
            This method is used set the port.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.UpdateNodesAndConnectors(System.Collections.IList,System.Int32,System.String,Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils})">
             <summary>
            This method is used to update the nodes, connectors and text annotation.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.GetDefaultValues(Syncfusion.Blazor.Diagram.NodeBase)">
             <summary>
            This method is used to get default values.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.MeasureData(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.Internal.TextElementUtils},System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
            This method is used to meausre data.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.ClearItemElements(System.Collections.IList)">
             <summary>
            This method is used to clear elements.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObjectCollection`1.Concat(Syncfusion.Blazor.Diagram.DiagramObjectCollection{`0})">
             <summary>
            This method is used to concadinate collections.
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LineDistribution">
            <summary>
            Defines behaviour of line distribution.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.LineDistribution"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.DistributeLines(Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to distribute lines while enable line distribution.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.UpdateSegmentRow(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.ObstacleSegmentValues},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.ObstacleSegmentValues}}@)">
            <summary>
            This method is used to udpate segments based on row.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.GetObstacleEndPoint(Syncfusion.Blazor.Diagram.ObstacleSegmentValues)">
            <summary>
            This method is used to get obstacle end point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.GetObstacleStartPoint(Syncfusion.Blazor.Diagram.ObstacleSegmentValues)">
            <summary>
            This method is used to get obstacle start point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.GetPointvalue(System.Double,System.Double)">
            <summary>
            This method is used to get point value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.ResetConnectorPoints(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to reset the connector points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.UpdateConnectorPoints(Syncfusion.Blazor.Diagram.Layout,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Double,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to update the connector points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.UpdateConnectingPoints(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This method is used to update the connecting point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.UpdateLayout(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Node},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.IDiagramObject})">
            <summary>
            This method is used to update the layout.
            </summary>
            <param name="layoutProp">It contains Property of layout</param>
            <param name="modelBounds">It contains bounds value</param>
            <param name="nameTable">It define nametable</param>
            <param name="nodeWithMultiEdges">It contains collection of nodes</param>
            <param name="viewPort">It contains viewport value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.UpdateLayoutConnectorpoints(System.Int32,Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.Connector},Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.DiagramRect,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            This method is used to update the layout connector points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.SetEdgeMapper(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used set edge mapper.It contains connector collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.InitLineDistribution(Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to initialize the line distribution.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.GetConnectorDirection(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to get connector direction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.ObstacleSegment(Syncfusion.Blazor.Diagram.ObstacleSegmentValues)">
            <summary>
            This method is used to initialize obstacle segments
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.AddDynamicPortandDistributeLine(Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.Node,System.String,System.String,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to add dynamic and distributeline
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.FindPort(Syncfusion.Blazor.Diagram.NodeBase,System.String)">
            <summary>
            This method is used to find port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.InitPort(System.Collections.Generic.List{System.String},Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.Node,System.String,System.Boolean)">
            <summary>
            This method is used to initialize the port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.PortOffsetCalculation(Syncfusion.Blazor.Diagram.PointPort,System.Int32,System.String,System.Int32)">
            <summary>
            This method is used to calculate port offset values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.ArrangeElements(Syncfusion.Blazor.Diagram.Internal.MatrixModelObject,Syncfusion.Blazor.Diagram.Layout)">
            <summary>
            This method is used to arrange the elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.GroupLayoutCells(Syncfusion.Blazor.Diagram.Internal.MatrixModelObject)">
            <summary>
            This method is used to group layout cells.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.CompareLists(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            This method is used to compare lists.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.UpdateMutualSharing(Syncfusion.Blazor.Diagram.Internal.LayoutCell,System.Object)">
            <summary>
            This method is used to update mutual sharing.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.CreateMatrixCells(Syncfusion.Blazor.Diagram.Internal.MatrixModelObject)">
            <summary>
            This method is used to create matrix cells.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.ArrangeMatrix(Syncfusion.Blazor.Diagram.MatrixCellGroupObject,Syncfusion.Blazor.Diagram.MatrixCellGroupObject,Syncfusion.Blazor.Diagram.Internal.MatrixModelObject)">
            <summary>
            This method is used to arrange matrix cells.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.ShiftMatrixCells(System.Double,Syncfusion.Blazor.Diagram.MatrixCellGroupObject,Syncfusion.Blazor.Diagram.Internal.MatrixModelObject,System.Boolean,Syncfusion.Blazor.Diagram.MatrixCellGroupObject)">
            <summary>
            This method is used to shift matrix cells.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.FindParentVertexCellGroup(Syncfusion.Blazor.Diagram.MatrixCellGroupObject)">
            <summary>
            This method is used to find parent vertex cell group.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.TranslateMatrixCells(System.Double,Syncfusion.Blazor.Diagram.MatrixCellGroupObject)">
            <summary>
            This method is used to translate the matrix cells.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LineDistribution.SetXYForMatrixCell(Syncfusion.Blazor.Diagram.Internal.MatrixModelObject)">
            <summary>
            This method is used to set X,Y for matrix cell
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.MatrixCellGroupObject.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.MatrixCellGroupObject"/> class.
            </summary>
            <param name="level">It provides level.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramHistoryManager">
            <summary>
            Notifies when changes are reverted or restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.Diagram">
            <summary>
            Gets or sets instance of SfDiagramComponent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.OnInitializedAsync">
            <summary>
            This method is invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.ChildContent">
            <summary>
            Sets the child content for the scroll settings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.CanUndo">
            <summary>
            Decides whether the history entry can be undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.CanRedo">
            <summary>
            Decides whether the history entry can be redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.CurrentEntry">
            <summary>
            Specifies the current entry object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.Push(Syncfusion.Blazor.Diagram.HistoryEntryBase)">
            <summary>
            Stores a history entry on the history list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.Undo">
            <summary>
             The method will be called when the custom entry is in undo stage.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent Width="800px" Height="800px">
                 <DiagramHistoryManager Undo="onCustomUndo"></DiagramHistoryManager>
             </SfDiagramComponent >
             @code
             {
                 private void onCustomUndo(HistoryEntryBase entry)
                 {
                     (entry.RedoObject) = entry.UndoObject.Clone() as Node;
                     (entry.UndoObject as Node).AdditionalInfo[(entry.UndoObject as Node).ID] = "Start";
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.Redo">
            <summary>
            The method will be called when the custom entry is in the redo stage.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width="800px" Height="800px">
                <DiagramHistoryManager Redo="onCustomRedo"></DiagramHistoryManager>
            </SfDiagramComponent>
            @code
            {
                private void onCustomRedo(HistoryEntryBase entry)
                {
                    Node current = entry.UndoObject.Clone() as Node;
                    (entry.UndoObject as Node).AdditionalInfo[(entry.UndoObject as Node).ID] = "Description";
                    entry.RedoObject = current;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.StartGroupAction">
            <summary>
            History allows you to revert or restore multiple changes through a single undo/redo command. It is used to start the grouping of changes.
            </summary>
            <example>
            <code>
            <![CDATA[
            //Start the grouping of changes 
            diagram.StartGroupAction();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.EndGroupAction">
            <summary>
             Used to intimate the group action is end
             </summary>
             <example>
             <code>
             <![CDATA[
             //End the grouping of changes
             diagram.EndGroupAction();
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.HistoryAdding">
            <summary>
             Decides whether the changes are stored in the history or not.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent Width="800px" Height="800px">
                 <DiagramHistoryManager HistoryAdding="OnHistoryAdding"></DiagramHistoryManager>
             </SfDiagramComponent>
             @code
             {
                 private void OnHistoryAdding(HistoryAddingEventArgs args)
                 {
                     args.Cancel = true;
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.UndoStack">
            <summary>
            Used to store the list of entries in the undo list.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void OnUndoStackCount()
            {
                var undoStackCount = diagram.HistoryManager.UndoStack.Count();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.RedoStack">
            <summary>
            Used to store the list of entries in the redo list.
            </summary>
            <example>
            <code>
            <![CDATA[
            private void OnRedoStackCount()
            {
                var redoStackCount = diagram.HistoryManager.RedoStack.Count();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramHistoryManager.StackLimit">
            <summary>
             Used to restrict or limits the number of history entry will be stored on the history list
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramHistoryManager.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryEntryBase">
            <summary>
            Represents the entry of the changed history of an object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.Type">
            <summary>
            Sets the type of  entry to be stored. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.ChangeType">
            <summary>
            Gets or sets the type of object being added or removed. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.RedoObject">
            <summary>
            Stores the changed values. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.UndoObject">
            <summary>
            Stores the changed values. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.Category">
            <summary>
            Sets the category of the history entry like internal or external. Category should be external for custom action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.Next">
            <summary>
            Sets the next of the current undoing object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.Previous">
            <summary>
            Sets the previous of the current undoing object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntryBase.IsUndo">
            <summary>
             Gets or sets the value for undo action is activated. A user needs to set this property to true in order to record the changes that performs undo/redo actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.InternalHistoryEntry.ChildTable">
            <summary>
             Used to stored the entry or not
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryEntry">
            <summary>
            Represents the entry of the changed history of an object. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HistoryEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.HistoryEntry"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HistoryEntry.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.UndoRedo">
            <summary>
             Defines undo redo actions.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.AddHistoryEntry(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to add history entry.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.ApplyLimit(Syncfusion.Blazor.Diagram.HistoryEntryBase,System.Double,Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Boolean)">
            <summary>
             This method is used to apply a limit.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.ClearHistory(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to clear history.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.SetEntryLimit(System.Boolean)">
            <summary>
            This method is used to set an entry limit.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.LimitHistoryStack(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to limit history stack.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RemoveFromStack(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.HistoryEntryBase},Syncfusion.Blazor.Diagram.HistoryEntryBase)">
            <summary>
            This method is used to remove an entry from a stack.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.Undo(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Invoked when performing the undo operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.GetHistoryList(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to get history lists.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.GetHistoryObject(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.HistoryEntryBase},Syncfusion.Blazor.Diagram.HistoryEntryBase)">
            <summary>
            This method is used to get a history object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.UndoGroupAction(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Double)">
            <summary>
            UndoGroup Action Method
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.UndoEntry(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to maintain undoentry.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.UpdatePropertyChangedEntry(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.HistoryEntryBase)">
            <summary>
            This method is used to update property changed entry.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.UpdateCollectionChangedEntry(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.HistoryEntryBase)">
            <summary>
            This method is used to update the collection changed entry.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.UpdateUndoRedoStack(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to update the undo/redo stack.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RecordPropertyChanged(Syncfusion.Blazor.Diagram.HistoryEntryBase,System.Boolean,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to record property changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.Group(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Invoked when performing group actions.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RecordSizeChanged(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.HistoryEntryBase)">
            <summary>
            It maintains size changed related details.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.SizeChanged(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.HistoryEntryBase)">
            <summary>
            Invoked while size changes
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.UnGroup(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
             Invoked when perform the ungroup action.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RecordPortCollectionChanged(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            It maintains port collection changed related details.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RecordLabelCollectionChanged(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            It maintains label collection changed related details.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RecordCollectionChanged(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            It maintains collection changed related details.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RotationChanged(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Invoked while the rotation angle is changed.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RecordRotationChanged(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            It maintains rotation changed related details.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RecordPositionChanged(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            It maintains position changed related details.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.PositionChanged(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Boolean)">
             <summary>
            Invoked while position changed.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RecordConnectionChanged(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            It maintains connection changed related details.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.ConnectionChanged(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.HistoryEntryBase)">
             <summary>
            Invoked while connection changed.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.Redo(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Invoked while performing the redo operation.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RedoGroupAction(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Double)">
             <summary>
            RedoGroupAction method.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RedoEntry(Syncfusion.Blazor.Diagram.HistoryEntryBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            It maintains the redo entry detail.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.RecordSegmentChanged(Syncfusion.Blazor.Diagram.DiagramSelectionSettings,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            It maintains the segment changed related detail.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.SegmentChanged(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Invoked while segment changed.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.GetUndoEntry(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            This method is used to get the undo entry.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UndoRedo.GetRedoEntry(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            This method is used to get the redo entry.
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Annotation">
            <summary>
            Defines the textual content of nodes/connectors. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Annotation.#ctor(Syncfusion.Blazor.Diagram.Annotation)">
            <summary>
            Creates a new instance of an Annotation from the given Annotation.
            </summary>
            <param name="src">Annotation</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Annotation.#ctor">
            <summary>
            Initializes a new instance of an Annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.ID">
            <summary>
            Gets or sets the unique id of the node's or connector's annotation. 
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none"> 1. The ID needs to be unique. While creating a label, the user should not use the same id for other labels</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. If multiple labels have the same ID, then unexpected behavior could occur.</td>
            </tr>        
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Content">
            <summary>
            Gets or sets the textual information of the node/connector.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation { Content = "Node" }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Visibility">
            <summary>
            Gets or sets the visibility of the annotation. By default, it is visible (True). 
            </summary>
            <value>The visibility of the annotation. The default value will be true.</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                        Visibility = true,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Constraints">
            <summary>
            Enable or disable certain behaviors of the label. All the interactive functionalities are enabled by default.
            </summary>
            <remarks>
            For instance, the user can disable annotation editing and be able to make it read-only. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        Constraints=AnnotationConstraints.ReadOnly,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Hyperlink">
            <summary>
            Gets or sets the hyperlink of the annotation. 
            </summary>
            <remarks>
            Users can be able to show hyperlinks as annotation content.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Hyperlink =new HyperlinkSettings
                        {
                           Url=https://hr.syncfusion.com/home
                          }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Width">
            <summary>
            Gets or sets the width of the annotation. If the width is not specified, it displays based on the content's width.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                        Width = 100,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Height">
            <summary>
             Gets or sets the height of the annotation. If the height is not specified, it renders based on the height of the content. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                        Height = 100,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.RotationAngle">
            <summary>
            Gets or sets the rotation angle of the annotation. It is 0 by default. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                        RotationAngle = 30,    
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Style">
            <summary>
            Represents the appearance of an annotation. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation 
                    { 
                        Content = "Text align is set as Left",
                        Style = new TextStyle() { TextAlign = TextAlign.Left}
                    }
                },
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text to the parent node/connector.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Center"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the Horizontal Alignment of the annotation. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Stretch - Stretches the diagram element throughout the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Left - Aligns the diagram element at the left of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Right - Aligns the diagram element at the right of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 5. Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                        HorizontalAlignment = HorizontalAlignment.Center,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text to the parent node/connector. 
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Center"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the Vertical Alignment of the annotation. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Stretch  - Stretches the diagram element throughout the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Top - Aligns the diagram element at the top of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Bottom - Aligns the diagram element at the bottom of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 5. Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                        VerticalAlignment = VerticalAlignment.Center,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Margin">
            <summary>
            Gets or sets the extra space around an annotation present in the node/connector.
            </summary>
            <example>
            <code>
            <![CDATA[
            Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation 
                { 
                    Content = "Task1",
                    Margin = new DiagramThickness() { Top = 10},
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.DragLimit">
            <summary>
            Sets the space to be left between an annotation and its parent node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.AdditionalInfo">
            <summary>
            Gets or sets the custom properties of an annotation.
            </summary>
            <remarks>
            Enables the user to store data of any data type. It will be serialized and deserialized automatically while saving and opening the diagram. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Dictionary<string, object> dict = new Dictionary<string, object>();
            dict.Add("node", "Annotation1");
            Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation()
                {
                   Content = "Annotation",
                   AdditionalInfo = dict
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Annotation.Clone">
            <summary>
            Creates a new object that is a copy of the current annotation. 
            </summary>
            <returns>A new object that is a copy of this annotation</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Annotation.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HyperlinkSettings">
            <summary>
            Represents a control for creating a link to another Web page.
            </summary>
            <remarks>
            The hyperlink can be customized by adding text and color. The Hyperlink can be set to the Annotations of the node/connector.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    // Add text as hyperlink.
                       new ShapeAnnotation { Hyperlink = new Hyperlink{ Content = "Syncfusion", Link = "https://www.syncfusion.com" } }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HyperlinkSettings.#ctor(Syncfusion.Blazor.Diagram.HyperlinkSettings)">
            <summary>
            Creates a new instance of the Hyperlink from the given Hyperlink.
            </summary>
            <param name="src">Hyperlink</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HyperlinkSettings.#ctor">
            <summary>
            Initializes a new instance of the Hyperlink.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HyperlinkSettings.Color">
            <summary>
            Gets or sets the fill color of the hyperlink. Color is string type.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    // Add text as hyperlink.
                       new ShapeAnnotation { Hyperlink = new Hyperlink{ Color = "Red", Link = "https://www.syncfusion.com" } }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HyperlinkSettings.Content">
            <summary>
            Gets or sets the content of the hyperlink.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    // Add text as hyperlink.
                       new ShapeAnnotation { Hyperlink = new Hyperlink{ Content = "Syncfusion", Link = "https://www.syncfusion.com" } }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HyperlinkSettings.Url">
            <summary>
            Defines the link to be set for the hyperlink.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    // Add text as hyperlink.
                       new ShapeAnnotation { Hyperlink = new Hyperlink{ Link = "https://www.syncfusion.com" } }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HyperlinkSettings.TextDecoration">
            <summary>
            Defines the text-decoration for the content of the hyperlink.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.TextDecoration.None"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the TextDecoration of the hyperlink. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. None  - Represents the default appearance of a text.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Overline - Draws a horizontal line above the text.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Underline - Draws a horizontal line under the text.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. LineThrough - Draws a horizontal line through the text of a node or a connector..</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    // Add text as hyperlink.
                       new ShapeAnnotation { Hyperlink = new Hyperlink{  TextDecoration = TextDecoration.None, Content = "Syncfusion", Link = "https://www.syncfusion.com" } }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HyperlinkSettings.Clone">
            <summary>
            Creates a new hyperlink that is a copy of the current hyperlink.
            </summary>
            <returns>Hyperlink</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.HyperlinkSettings.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PathAnnotation">
            <summary>
            Represents the block of text displayed over the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathAnnotation.#ctor(Syncfusion.Blazor.Diagram.PathAnnotation)">
            <summary>
            Creates a new instance of the PathAnnotation from the given PathAnnotation.
            </summary>
            <param name="src">PathAnnotation</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathAnnotation.#ctor">
            <summary>
            Initializes a new instance of the PathAnnotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.Offset">
            <summary>
            Gets or sets the offset of an annotation in a connector. By default, it is 0.5 
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                Annotations = new DiagramObjectCollection<PathAnnotation>() 
                { 
                    new PathAnnotation 
                    { 
                        Content = "Connector",
                         Offset =  0,
                        ID = "Annotation",
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.Displacement">
            <summary>
            Gets or sets the displacement (margin) of an annotation from its actual position. Applicable only for connector.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                Annotations = new DiagramObjectCollection<PathAnnotation>() 
                { 
                    new PathAnnotation 
                    { 
                        Content = "Connector",
                        Offset =  0,
                        Displacement = new DiagramPoint() { X = 100, Y = 100 }
                        ID = "Annotation",
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.Alignment">
            <summary>
            Gets or sets the alignment of an annotation in a connector. By default, it is aligned at the center. 
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.Center"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none"> Below are the available alignment options</td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Center, Annotation placed on the connector segment.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Before,Annotation is placed at the top of the connector segment.</td>
            </tr>   
            <tr>
            <td style = "border: none"> 3. After, Annotation is placed at the bottom of the connector segment.</td>
            </tr> 
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                Annotations = new DiagramObjectCollection<PathAnnotation>() 
                { 
                    new PathAnnotation 
                    { 
                        Content = "Connector",
                        Alignment = AnnotationAlignment.After,
                        ID = "Annotation",
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.SegmentAngle">
            <summary> 
            Gets or sets the segment angle of the connector. 
            </summary> 
            <value>false, annotation will be rotated in the connector path; Otherwise, true.which means, annotation will be rotated from its position based on the connector segment direction. The default value is false</value> 
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                SourcePoint = new DiagramPoint() { X = 300, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 400, Y = 200 },
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<PathAnnotation>() 
                { 
                    new PathAnnotation 
                    { 
                        Content = "Connector",
                        Offset =  0,
                        Alignment = AnnotationAlignment.After,
                        ID = "Annotation",
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathAnnotation.Clone">
            <summary>
            Creates a new PathAnnotation that is a copy of the current annotation.
            </summary>
            <returns>PathAnnotation</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathAnnotation.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ShapeAnnotation">
            <summary>
            Defines the textual description of nodes/connectors with respect to bounds
            Represents the block of text displayed over the node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize the annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation { Content = "Node" }, Offset = new DiagramPoint() { X = 0, Y = 0 } },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeAnnotation"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeAnnotation.#ctor(Syncfusion.Blazor.Diagram.ShapeAnnotation)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeAnnotation"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.ShapeAnnotation"/>.
            </summary>
            <param name="src">ShapeAnnotation</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeAnnotation.Offset">
            <summary>
            Gets or sets the position of the annotation to its parent bounds.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation { Content = "Node" }, Offset = new DiagramPoint() { X = 0, Y = 0 } },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeAnnotation.Clone">
            <summary>
            Creates a new annotation that is a copy of the current annotation.
            </summary>
            <returns>ShapeAnnotation</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeAnnotation.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramMargin">
            <summary>
            Specifies the extra space around the outer boundaries of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.LeftChanged">
            <summary>
            Specifies the callback to trigger when the left values changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.RightChanged">
            <summary>
            Specifies the callback to trigger when the right values changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.TopChanged">
            <summary>
            Specifies the callback to trigger when the top values changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.BottomChanged">
            <summary>
            Specifies the callback to trigger when the bottom values changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Left">
            <summary>
            Gets or sets the extra space at the left side of an element.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                         Padding = new DiagramThickness() {  Left = 1 },
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Right">
            <summary>
            Gets or sets the extra space at the right side of an element.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        Visibility = true,Padding = new DiagramThickness() { Right = 1},
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Top">
            <summary>
            Gets or sets the extra space at the top side of an element.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        Visibility = true,Padding = new DiagramThickness() {  Top = 1 },
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Bottom">
            <summary>
            Gets or sets the extra space at the bottom of an element.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        Visibility = true,Padding = new DiagramThickness() { Bottom = 1 },
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.#ctor(Syncfusion.Blazor.Diagram.DiagramMargin)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramMargin"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.DiagramMargin"/>.
            </summary>
            <param name="src">DiagramMargin</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.#ctor">
            <summary>
            Initializes a new instance of the DiagramMargin.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.PropertyUpdate(Syncfusion.Blazor.Diagram.DiagramMargin)">
            <summary>
            Used to update property of margin.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.Clone">
            <summary>
            Creates a new margin that is a copy of the current margin.
            </summary>
            <returns>DiagramMargin</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramMargin.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramObject">
            <summary>
            Represents the class that acts as the base class for the diagram object. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramObject"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.#ctor(Syncfusion.Blazor.Diagram.DiagramObject)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramObject"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.DiagramObject"/>.
            </summary>
            <param name="src">DiagramObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this diagram objects has been updated.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.GetParent">
            <summary>
            Gets the parent of an object when the method is invoked.
            </summary>
            <returns>returns a parent of an object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.Clone">
            <summary>
            Creates a new diagram object that is a copy of the current diagram object.
            </summary>
            <returns>DiagramObject</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.IDiagramObject">
            <summary>
            Represents the class that is the base class for all the diagram objects, and it is used to handle common actions like property changes in any diagram object. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.IDiagramObject.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked whenever the effective value of any property on this diagram objects has been updated.
            </summary>
            <param name="propertyName">string</param>
            <param name="newVal">object</param>
            <param name="oldVal">object</param>
            <param name="container">IDiagramObject</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Layer">
            <summary>
            Represents the class that is the base class for all the diagram objects, and it is used to handle common actions like property changes in any diagram object. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layer.#ctor(Syncfusion.Blazor.Diagram.Layer)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Layer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Layer"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layer.ID">
            <summary>
            Gets or sets the unique id of the Layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layer.ZIndex">
            <summary>
            Gets or sets the visual order of the layer.
            </summary>
            <remarks>
            The property specifies the stack order of the layer. A layer with greater stack order is always in front of a layer with a lower stack order.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layer.Visible">
            <summary>
            Gets or sets the visibility of the layer, by default it is true(visible).
            </summary>
            <value> true,The layer in visible state;Otherwise, false.</value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layer.LayerLock">
            <summary>
            Gets or sets the locking functionality of the layer, by default it is false(unlock).
            </summary>
            <value> true,The functionality of layer is in unlock state;Otherwise, false.</value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layer.ObjectZIndex">
            <summary>
            Gets or sets the visual order of the node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layer.Objects">
            <summary>
            Get or set the objects of the layers
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layer.ZIndexTable">
            <summary>
            set the ZIndex value of the layers
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeBase">
            <summary>
            Represents the common behavior of nodes, connectors, and groups. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeBase.#ctor(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeBase"/> from the given NodeBase.
            </summary>
            <param name="src">NodeBase</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeBase"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.ID">
            <summary>
            Gets or sets the unique id of the diagram object.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">1. ID needs to be unique to use. While creating a node, the user should not provide the same id to other nodes.</td>
            </tr>
            <tr>
            <td style = "border: none">2. When drag and drop a new node from symbol palette, ID will be generated automatically.</td>
            </tr>
            <tr>
            <td style = "border: none">3. If multiple nodes having same ID, then unexpected behavior might happen. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                 ID = "Node",
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Tooltip">
            <summary>   
            Gets or sets the message that is displayed when the mouse hovers over a node/connectors
            </summary>
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind- Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> connectors= new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {  
                Node node1 = new Node() { ID = "node1", OffsetX = 100, OffsetY = 100, Tooltip=new DiagramTooltip(){Content="node1"} };  
                nodes.Add(node1);  
                Node node2 = new Node() { ID = "node2", OffsetX = 240, OffsetY = 100, Tooltip=new DiagramTooltip(){Content="node2"} };  
                nodes.Add(node2);  
                Connector connector1=new Connector{ ID = "Connector1" , SourceID = "node1" ,TargetID="node2" , Tooltip=new DiagramTooltip(){Content="connector1"} }
                connectors.Add(connector1);  
            }  
            }  
            ]]>  
            </code>  
            </example>       
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Wrapper">
            <summary>
            Gets or sets the UI of a node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.ZIndex">
            <summary>   
            Gets or sets the visual order of the node, connector, and group.   
            </summary>
            <remarks>
            The property specifies the stack order of the node. A node with greater stack order is always in front of a node with a lower stack order.
            </remarks>
            <value>The default value is -1</value>  
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind-  Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            protected override void OnInitialized()  
            {  
                Node node1 = new Node() { ID = "node1", Width = 90, Height = 60, OffsetX = 100, OffsetY = 100, ZIndex = 0 };  
                nodes.Add(node1);  
                Node node2 = new Node() { ID = "node2", Width = 90, Height = 60, OffsetX = 240, OffsetY = 100, ZIndex = 1 };  
                nodes.Add(node2);    
            }  
            }  
            ]]>  
            </code>  
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Margin">
            <summary>
            The margin adds extra space around an element's outside boundaries. 
            </summary>
            <value> The default values for the margin are 0 from all the sides.</value> 
            <table style = "border: none">
            <tr>
            <td style = "border: none">Left , represents the value of the left margin.</td>
            </tr>
            <tr>
            <td style = "border: none">Top , represents the top margin of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">Right , represents the right margin of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">Bottom , represents the bottom margin of the node. </td>
            </tr>
            </table>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                 Margin = new DiagramThickness() { Top = 10, Bottom = 10, Left = 10, Right = 10 },
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.IsVisible">
            <summary>
            Gets or sets the visibility of the node/connector, by default it is true(visible).
            </summary>
            <value>true, the visibility of the node/connector is in visible mode; Otherwise false.</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                  IsVisible = false,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.CanAutoLayout">
            <summary>
            Gets or sets the value indicates whether the node should be automatically positioned or not. Applicable, if layout option is enabled.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                 CanAutoLayout = false,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.AdditionalInfo">
            <summary>
            Gets or sets the custom properties of a node/connector.
            </summary>
            <remarks>
            Enables the user to store data of any datatype. It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Dictionary<string, object> NodeInfo = new Dictionary<string, object>();
            NodeInfo.Add("nodeInfo", "Central Node");
            // A node is created and stored in nodes collection.
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                AdditionalInfo = NodeInfo
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Flip">
            <summary>
            Gets or sets a value to flip the diagram elements (Node, Connector and Group) in Horizontal,Vertical or Both directions and its perform based on its <see cref="P:Syncfusion.Blazor.Diagram.NodeBase.FlipMode"/> value.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                    Node Node = new Node()
                    {
                        ID = "node1",
                        Width = 100,
                        Height = 100,
                        OffsetX = 100,
                        OffsetY = 300,
                        Flip=FlipDirection.Horizontal
                    };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.FlipMode">
            <summary>
            The FlipMode is used to control the behavior of the flip object.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                    Node Node = new Node()
                    {
                        ID = "node1",
                        Width = 100,
                        Height = 100,
                        OffsetX = 100,
                        OffsetY = 300,
                        Flip=FlipDirection.Horizontal,
                        FlipMode=FlipMode.All,
                    };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeBase.Clone">
            <summary>
            Creates a new diagram element that is the copy of the current diagram element.
            </summary>
            <returns>A new diagram element that is the copy of this diagram element</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeBase.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PropertyChangeValues">
            <summary>
            Specifies the Propertychange values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangeValues.OldValue">
            <summary>
            Specifies the oldvalue of property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangeValues.NewValue">
            <summary>
            Specifies the newvalue of property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramThickness">
            <summary>
            Describes the thickness of a frame around a rectangle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramThickness.#ctor(Syncfusion.Blazor.Diagram.DiagramThickness)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/> from the given DiagramThickness.
            </summary>
            <param name="src">DiagramThickness.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramThickness.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramThickness.Left">
            <summary>
            Gets or sets the left value of the thickness.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        Visibility = true,Padding = new DiagramThickness() {  Left = 1 },
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramThickness.Right">
            <summary>
            Gets or sets the right value of the thickness.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                // A fixed user handle is created and stored in the fixed user handle collection of the Connector.
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        Padding = new DiagramThickness() {  Right = 1 },
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramThickness.Top">
            <summary>
            Gets or sets the top value of the thickness.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                // A fixed user handle is created and stored in the fixed user handle collection of the Connector.
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        Visibility = true,Padding = new DiagramThickness() {  Top = 1 },
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramThickness.Bottom">
            <summary>
            Gets or sets the bottom value of the thickness.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                // A fixed user handle is created and stored in the fixed user handle collection of the Connector.
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        Visibility = true,Padding = new DiagramThickness() {  Bottom = 1 },
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramThickness.Clone">
            <summary>
            Creates a new DiagramThickness that is a copy of the current DiagramThickness.
            </summary>
            <returns>DiagramThickness</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramThickness.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Shadow">
            <summary>
            Represents the shadow appearance of the diagram object. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                Constraints = NodeConstraints.Default | NodeConstraints.Shadow,
                Shadow = new Shadow()
                {
                    Angle = 50,
                    Color = "Blue",
                    Opacity = 0.8,
                    Distance = 20
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shadow.#ctor(Syncfusion.Blazor.Diagram.Shadow)">
            <summary>
            Creates a new instance of the Shadow from the given Shadow.
            </summary>
            <param name="src">Shadow.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Shadow"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Angle">
            <summary>
            Gets or sets the angle of the shadow.
            </summary>
            <value> The default value is 45</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Constraints = NodeConstraints.Default | NodeConstraints.Shadow;
                Shadow = new Shadow() { Angle = 20 };
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Color">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
            <value> The default value is light grey</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Constraints = NodeConstraints.Default | NodeConstraints.Shadow;
                Shadow = new Shadow() {  Color = "green" };
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Distance">
            <summary>
            Gets or sets the distance of the shadow.
            </summary>
            <value> The default value is 5px</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Constraints = NodeConstraints.Default | NodeConstraints.Shadow;
                Shadow = new Shadow() {  Angle = 20, Color = "green", Distance = 20, Opacity = 0.3  };
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Opacity">
            <summary>
            Gets or sets the Opacity of the shadow. The opacity value ranges from 0 to 1.
            </summary>
            <value> The default value is 0.7</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Constraints = NodeConstraints.Default | NodeConstraints.Shadow;
                Shadow = new Shadow() {  Angle = 20, Color = "green", Distance = 20, Opacity = 0.3  };
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shadow.Clone">
            <summary>
            Creates a new shadow that is a copy of the current shadow. 
            </summary>
            <returns>Shadow</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shadow.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GradientBrush">
            <summary>
            Defines a smooth transition from one color to the next while painting the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientBrush.#ctor(Syncfusion.Blazor.Diagram.GradientBrush)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.GradientBrush"/> from the given Gradient.
            </summary>
            <param name="src">Gradient.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientBrush.#ctor">
            <summary>
            Initializes a new instance of the Gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientBrush.GradientStops">
            <summary>
            Gets or sets the color and the position where the previous color transition ends, and a new color transition starts.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                   Gradient = new LinearGradientBrush()
                   {
                       //Start point of linear gradient
                       X1 = 0,
                       Y1 = 0,
                       //End point of linear gradient
                       X2 = 50,
                       Y2 = 50,
                       //Sets an array of stop objects
                       GradientStops = new DiagramObjectCollection<GradientStop>()
                       {
                           new GradientStop(){ Color = "white", Offset = 0},
                           new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                       },
                   }
                },
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientBrush.BrushType">
            <summary>
            Gets or sets the type of the gradient.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientBrush.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LinearGradientBrush">
            <summary>
            Represents the class that defines to paints the node with linear color transitions
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                // Add node
                Style = new ShapeStyle()
                {
                   Gradient = new LinearGradientBrush()
                   {
                       //Start point of linear gradient
                       X1 = 0,
                       Y1 = 0,
                       //End point of linear gradient
                       X2 = 50,
                       Y2 = 50,
                       //Sets an array of stop objects
                       GradientStops = new DiagramObjectCollection<GradientStop>()
                       {
                           new GradientStop(){ Color = "white", Offset = 0},
                           new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                       },
                   }
                },
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LinearGradientBrush.#ctor(Syncfusion.Blazor.Diagram.LinearGradientBrush)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.LinearGradientBrush"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.LinearGradientBrush"/>.
            </summary>
            <param name="src">LinearGradient.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LinearGradientBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.LinearGradientBrush"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradientBrush.X1">
            <summary>
            Gets or sets the start point of the Linear gradient.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                   Gradient = new LinearGradientBrush()
                   {
                       //Start point of linear gradient
                       X1 = 0,
                       Y1 = 0,
                       //End point of linear gradient
                       X2 = 50,
                       Y2 = 50,
                       //Sets an array of stop objects
                       GradientStops = new DiagramObjectCollection<GradientStop>()
                       {
                           new GradientStop(){ Color = "white", Offset = 0},
                           new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                       },
                   }
                },
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradientBrush.X2">
            <summary>
            Gets or sets the start point of the Linear gradient.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                   Gradient = new LinearGradientBrush()
                   {
                       //Start point of linear gradient
                       X1 = 0,
                       Y1 = 0,
                       //End point of linear gradient
                       X2 = 50,
                       Y2 = 50,
                       //Sets an array of stop objects
                       GradientStops = new DiagramObjectCollection<GradientStop>()
                       {
                           new GradientStop(){ Color = "white", Offset = 0},
                           new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                       },
                   }
                },
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradientBrush.Y1">
            <summary>
            Gets or sets the endpoint of the Linear gradient.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                   Gradient = new LinearGradientBrush()
                   {
                       //Start point of linear gradient
                       X1 = 0,
                       Y1 = 0,
                       //End point of linear gradient
                       X2 = 50,
                       Y2 = 50,
                       //Sets an array of stop objects
                       GradientStops = new DiagramObjectCollection<GradientStop>()
                       {
                           new GradientStop(){ Color = "white", Offset = 0},
                           new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                       },
                   }
                },
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradientBrush.Y2">
            <summary>
            Gets or sets the endpoint of the Linear gradient.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                   Gradient = new LinearGradientBrush()
                   {
                       //Start point of linear gradient
                       X1 = 0,
                       Y1 = 0,
                       //End point of linear gradient
                       X2 = 50,
                       Y2 = 50,
                       //Sets an array of stop objects
                       GradientStops = new DiagramObjectCollection<GradientStop>()
                       {
                           new GradientStop(){ Color = "white", Offset = 0},
                           new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                       },
                   }
                },
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LinearGradientBrush.Clone">
            <summary>
            Creates a new object that is a copy of the current linear gradient.
            </summary>
            <returns>LinearGradient</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RadialGradientBrush">
            <summary>
            Represents the focal point that defines the beginning of the gradient and a circle that defines the endpoint of the gradient
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             // Position of the node
             OffsetX = 250,
             OffsetY = 250,
             // Size of the node
             Width = 100,
             Height = 100,
             // Add node
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "white", Offset = 0},
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RadialGradientBrush.#ctor(Syncfusion.Blazor.Diagram.RadialGradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.RadialGradientBrush"/> class.
            </summary>
            <param name="src">RadialGradient.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RadialGradientBrush.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.RadialGradientBrush"/> from the given RadialGradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.CX">
            <summary>
            Gets or sets the center point of the outer circle of the radial gradient. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "white", Offset = 0},
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.CY">
            <summary>
            Gets or sets the center point of the outer circle of the radial gradient.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "white", Offset = 0},
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.FX">
            <summary>
            Gets or sets the center point of the inner circle of the radial gradient. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "white", Offset = 0},
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.FY">
            <summary>
            Gets or sets the center point of the inner circle of the radial gradient. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "white", Offset = 0},
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradientBrush.R">
            <summary>
            Gets or sets the radius of a radial gradient
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "white", Offset = 0},
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RadialGradientBrush.Clone">
            <summary>
            Creates a new object that is the a copy of the current radial gradient
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GradientStop">
            <summary>
            Defines the different colors and the regions of color transitions. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientStop.#ctor(Syncfusion.Blazor.Diagram.GradientStop)">
            <summary>
            Creates a new instance of the GradientStop from the given GradientStop.
            </summary>
            <param name="src">GradientStop.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientStop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.GradientStop"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientStop.Color">
            <summary>
            Gets or sets the color to be filled over the specified region.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "white", Offset = 0},
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientStop.Offset">
            <summary>
            Gets or sets the position at which the previous color transition ends, and a new color transition starts.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "white", Offset = 0},
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientStop.Opacity">
            <summary>
            Gets or sets the transparency level of the region.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
             Style = new ShapeStyle()
             {
               Gradient = new RadialGradientBrush()
               {
                //Center point of the inner circle
                FX = 20,
                FY = 20,
                //Center point of the outer circle
                CX = 50,
                CY = 50,
                //Radius of a radial gradient
                R = 50,
                //Set an array of stop objects
                GradientStops = new DiagramObjectCollection<GradientStop>()
                {
                  new GradientStop(){ Color = "#6BA5D7", Offset = 100,Opacity=0.5}
                },
                }
              },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientStop.Clone">
            <summary>
            Creates a new object that is a copy of the current gradient stop.
            </summary>
            <returns>GradientStop</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientStop.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextStyle">
            <summary>
            Represents the appearance of the text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextStyle"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextStyle.#ctor(Syncfusion.Blazor.Diagram.TextStyle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextStyle"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.TextStyle"/>.
            </summary>
            <param name="src">TextShapeStyle.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.Bold">
            <summary>
            Enables or disables the bold style of a text. By default, it is false.
            </summary>
            <value>true, bold style applied for text; Oterwise false.</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Initialize annotation collection
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                           Bold = true,
                          }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.Color">
            <summary>
            Gets or sets the font color of a text. 
            </summary>
            <value>The default font color is black</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                           Color = "red",
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.FontFamily">
            <summary>
            Gets or sets the font type of a text. 
            </summary>
            <value>The default font family is Arial.</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                           FontFamily = "Calibri",
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.FontSize">
            <summary>
            Gets or sets the font size of a text. 
            </summary>
            <value>The default font size is 12px</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                           FontSize = 20,
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.Italic">
            <summary>
            Enables or disables the italic style of a text. By default, it is false. 
            </summary>
            <value>true, italic style applied for text; Oterwise false.</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                            Italic = true,
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.TextAlign">
            <summary>
            Gets or sets the alignment of the text inside the node bounds. By default, it is aligned at the center. 
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.TextAlign.Center"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the TextAlign of the annotation. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Left - Sets the alignment of the text to the left in the text block..</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Right - Sets the alignment of the text to the right in the text block.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Right - Aligns the diagram element at the right of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Center - Sets the alignment of the text at the center of the text block.</td>
            </tr>
            <tr>
            <td style = "border: none"> 5. Justify - Sets the alignment of the text in respective to left and right margins.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                            TextAlign = TextAlign.Center,
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.TextDecoration">
            <summary>
            Gets or sets the TextDecoration which contains the effects that should be applied to the text of a TextBlock. The default value is none. 
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.TextDecoration.None"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the TextAlign of the annotation. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. None  - Represents the default appearance of a text.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Overline - Draws a horizontal line above the text.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Underline - Draws a horizontal line under the text.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. LineThrough - Draws a horizontal line through the text of a node or a connector..</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                            TextDecoration = TextDecoration.None,
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.TextOverflow">
            <summary>
            Specifies a value that indicates whether to render ellipses (...) to indicate text overflow. By default, it is wrapped.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.TextOverflow.Wrap"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the TextOverflow of the annotation. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Wrap  -  Wraps the text to the next line, when it exceeds its bounds.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Ellipsis - Ellipsis hides the text if the text size exceeds the boundary.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Clip - The text is restricted to the node/connector boundary and the text will not be overflown.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                            TextOverflow = TextOverflow.Wrap,
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.TextWrapping">
            <summary>
            Gets or sets a TextWrap to wrap the text. By default, it is WrapWithOverflow. 
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the TextWrap of the annotation. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. WrapWithOverflow  -  Text-wrapping occurs when the text overflows beyond the available node width. However, the text may overflow beyond the node width in  case of a very long word.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Wrap - The text will be wrapped within the boundary.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. NoWrap - The text will not be wrapped. If a lengthy text exists, the boundary will not be a limit.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                             TextWrapping = TextWrap.NoWrap,
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextStyle.WhiteSpace">
            <summary>
            Gets or sets how the white space and the new line characters  be handled. By default, it is CollapseSpace. 
            </summary>
            <value> The default value will be CollapseSpace</value> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextStyle.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.TextStyle"/> that is a copy of the current style.
            </summary>
            <returns>TextShapeStyle</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextStyle.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ShapeStyle">
            <summary>
            Represents the appearance of a shape/path.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeStyle"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeStyle.#ctor(Syncfusion.Blazor.Diagram.ShapeStyle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeStyle"/> from the given ShapeStyle.
            </summary>
            <param name="src">ShapeStyle.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.Fill">
            <summary>
            Gets or sets the fill color of the shape or path.
            </summary>
            <value> The default value is white</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
                { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node",
                        ID = "Annotation",
                         Style= new TextStyle()
                         {
                              Fill = "Orange",
                         }
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.Gradient">
            <summary>
            Gets or sets the gradient effect of the diagram elements.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                   Gradient = new LinearGradientBrush()
                   {
                       //Start point of linear gradient
                       X1 = 0,
                       Y1 = 0,
                       //End point of linear gradient
                       X2 = 50,
                       Y2 = 50,
                       //Sets an array of stop objects
                       GradientStops = new DiagramObjectCollection<GradientStop>()
                       {
                           new GradientStop(){ Color = "white", Offset = 0},
                           new GradientStop(){ Color = "#6BA5D7", Offset = 100}
                       },
                   }
                },
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.Opacity">
            <summary>
            Gets or sets the transparency level of the diagram elements.
            </summary>
            <value> The default value is 1px</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                    Opacity = 0.5
                }
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.StrokeColor">
            <summary>
             Gets or sets the stroke color of the diagram elements.
            </summary>
            <value> The default value is black</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                    StrokeColor = "Red",
                }
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of the diagram elements.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                    StrokeDashArray = "5,5",
                }
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the stroke width of the diagram elements.
            </summary>
            <value> The default value is 1px</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            Node Node = new Node()
            {
                Style = new ShapeStyle()
                {
                    StrokeWidth = 10,
                }
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeStyle.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.ShapeStyle"/> that is a copy of the current style.
            </summary>
            <returns>ShapeStyle</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeStyle.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Connector">
            <summary>
            A line which represents the relationship between two points, nodes, or ports. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.#ctor(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            Creates a new instance of the Connector from the given Connector.
            </summary>
            <param name="src">Connector</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.#ctor">
            <summary>
            Initializes a new instance of the Connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Constraints">
            <summary>
            Enables or disables certain features of the connector. By default, all the interactive functionalities are enabled. 
            </summary>
            <remarks>
            Features like dragging, selection can be disabled. Refer <see href="https://blazor.syncfusion.com/documentation/diagram-component/constraints#connector-constraints"> ConnectorConstraints </see> for better understanding.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                //set the ConnectorConstraints...
                Constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourcePoint">
            <summary>
            Gets or sets the beginning point of the connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetPoint">
            <summary>
            Gets or sets the endpoint of the connector.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Shape">
            <summary>
            Gets or sets the shape of the connector. 
            </summary>
            <remarks>
            It is applicable only if it is a Bpmn connector.
            For more information, refer to <see href="https://blazor.syncfusion.com/documentation/diagram-component/bpmn-shapes/bpmn-connectors">Bpmn Connector</see>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.FixedUserHandles">
            <summary>
            Gets or sets the collection of the fixed user handle of the connector.
            </summary>
            <remarks>
            The fixed user handles are used to add some frequently used commands around the node and connector. It is visible even without selecting the nodes or connectors. 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                Type = ConnectorSegmentType.Orthogonal,
                Style = new TextStyle() { StrokeColor = "#6495ED" },
                // A fixed user handle is created and stored in the fixed user handle collection of the Connector.
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25, 
                        Width = 25,
                        Offset = 0.5,
                        Alignment = FixedUserHandleAlignment.After,
                        Displacement = new DiagramPoint { Y = 10 },
                        Visibility = true,Padding = new DiagramThickness() { Bottom = 1, Left = 1, Right = 1, Top = 1 },
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourceID">
            <summary>
            Gets or sets the unique id of the source node of the connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                ID = "node",
                // Size of the node
                Width = 100,
                Height = 100,
             };
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourceID = "node",
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetID">
            <summary>
            Gets or sets the unique id of the target node of the connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                ID = "node",
                // Size of the node
                Width = 100,
                Height = 100,
             };
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                TargetID = "node",
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourcePortID">
            <summary>
            Gets or sets the unique id of the source port of the connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                ID = "node",
                // Size of the node
                Width = 100,
                Height = 100,
                   Ports = new DiagramObjectCollection<PointPort>()
                   {
                       new PointPort()
                       {
                           Height = 20, Width = 20,
                           ID="Default",
                           Offset = new DiagramPoint() { X = 1, Y = 0.5},
                       }
                   }
             };
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourceID ="node", SourcePortID = "Default",
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetPortID">
            <summary>
            Gets or sets the unique id of the target port of the connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                ID = "node",
                // Size of the node
                Width = 100,
                Height = 100,
                   Ports = new DiagramObjectCollection<PointPort>()
                   {
                       new PointPort()
                       {
                           Height = 20, Width = 20,
                           ID="Default",
                           Offset = new DiagramPoint() { X = 1, Y = 0.5},
                       }
                   }
             };
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                TargetID ="node", TargetPortID = "Default",
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.CornerRadius">
            <summary>
            Gets or sets the corner radius of the connector. 
            </summary>
            <value> The default value is 0</value> 
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                CornerRadius = 10,
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.HitPadding">
            <summary>
            Gets or sets the hit padding value of the connector. Hit padding value represents the range of the connector selection. 
            </summary>
            <value> The default value is 10px</value> 
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                HitPadding = 20, 
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourcePadding">
            <summary>
            Gets or sets the space to be left between the source node and the source point of a connector.
            </summary>
            <value> The default value is 0</value> 
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                ID = "node",
                // Size of the node
                Width = 100,
                Height = 100,
             };
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourceID = "node",
                SourcePadding = 10,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetPadding">
            <summary>
            Gets or sets the space to be left between the target node and the target point of a connector. 
            </summary>
            <value> The default value is 0</value> 
            <example>
            <code>
            <![CDATA[
            Node Node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                ID = "node",
                // Size of the node
                Width = 100,
                Height = 100,
             };
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                 TargetPadding = 10,
                TargetID = "node",
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.ConnectionPadding">
            <summary>
            Gets or sets the connection padding value of the connector.
            </summary>
            <value> The default value is 0</value> 
            <remarks>
            The connector connects with the node or port while dragging its source/target thumb towards the padding region. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                  ConnectionPadding = 50,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.BridgeSpace">
            <summary>
            Gets or sets the width of the line bridges.
            </summary>
            <value> The default value is 10px</value> 
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                  BridgeSpace = 20,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Type">
            <summary>
            Represents the type of the connector.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.ConnectorSegmentType.Straight"/></value>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the  ConnectorSegmentType of the connector. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Straight -  Sets the segment type as Straight.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Orthogonal - Sets the segment type as Orthogonal.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Polyline - Sets the segment type as Polyline.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Bezier - Sets the segment type as Bezier.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Segments">
            <summary>
            Represents the collection of connector segments. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Bezier,
                  Segments=new DiagramObjectCollection<ConnectorSegment>()
                  {
                     new BezierSegment{Type= ConnectorSegmentType.Bezier}
                  }
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Annotations">
            <summary>
            Represents the collection of textual information contained in the connector.
            </summary>
            <remarks>
            The text found in the connector can be edited at runtime. Users can modify the   Style, Visibility, Width, Height, and content of the annotation. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {        
                SourcePoint = new DiagramPoint() { X = 300, Y = 40 },
                TargetPoint = new DiagramPoint() { X = 400, Y = 160 },
                Type = ConnectorSegmentType.Orthogonal,
                Style = new TextStyle() { StrokeColor = "#6495ED" },
                // Initialize the annotation collection
                Annotations = new DiagramObjectCollection<PathAnnotation>() 
                { 
                    new PathAnnotation { Content = "Annotation" }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Style">
            <summary>
            Represents the appearance of the connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                 Style = new ShapeStyle(){ StrokeColor = "red"},
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourceDecorator">
            <summary>
            Gets or sets the source decorator (sourcePoint's shape) of the connector. By default, its shape is none.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourceDecorator = new DecoratorSettings(){ Shape = DecoratorShape.Arrow},
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetDecorator">
            <summary>
            Gets or sets the target decorator (target points shape) of the connector. 
            </summary>
            <value> The default  shape is an arrow.</value>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                TargetDecorator = new DecoratorSettings(){ Shape = DecoratorShape.OpenArrow},
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.Init(Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            To initialize the diagramcanvas.
            </summary>
            <param name="dictionary">DiagramDictionary</param>
            <returns>DiagramCanvas</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.Scale(System.Double,System.Double,System.Double,System.Double,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Scale the element.
            </summary>
            <param name="sw">double</param>
            <param name="sh">double</param>
            <param name="width">double</param>
            <param name="height">double</param>
            <param name="dictionary">DiagramDictionary</param>
            <returns>DiagramPoint</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetFixedUserHandle(Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            Used to get FixedUserHandle.
            </summary>
            <returns>DiagramElement</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.InitFixedUserHandlesSymbol(Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle,Syncfusion.Blazor.Diagram.DiagramCanvas)">
            <summary>
            To initialize the fixed userhandle symbol.
            </summary>
            <param name="options">ConnectorFixedUserHandle</param>
            <param name="fixedUserHandleContainer">DiagramCanvas</param>
            <returns>DiagramElement</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.UpdateShapePosition(Syncfusion.Blazor.Diagram.DiagramElement)">
            <summary>
            To update the shape position.
            </summary>
            <param name="element">DiagramElement</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetBpmnMessageFlow">
            <summary>
            To get BPMN MessageFlow shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetBpmnAssociationFlow">
            <summary>
            To get BPMN Association Flow shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetBpmnSequenceFlow(Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            To get BPMN SequenceFlow shape.
            </summary>
            <param name="dictionary">DiagramDictionary</param>
            <returns>PathElement</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetAnnotationElement(Syncfusion.Blazor.Diagram.PathAnnotation,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            To get Annotation Element.
            </summary>
            <returns>CommonElement</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.UpdateUserHandle(Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramCanvas)">
            <summary>
            To update userhandle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.UpdateAnnotation(Syncfusion.Blazor.Diagram.PathAnnotation,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.TextElement)">
            <summary>
            Used To update annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetSegmentElement(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.PathElement,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Used to get Segment Element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetDecoratorElement(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DecoratorSettings,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Used to get decorator element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.UpdateDecoratorElement(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DecoratorSettings,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Used to update decorator element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetConnectorIntermediatePoints">
            <summary>
            Used to get connector intermediate points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetConnectorPoints(Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Used to get connector points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.UpdateSegmentElement(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.PathElement)">
             <summary>
            Used to update segment element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetMessage(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Used to get message.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetAssociation(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            Used to get Association.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetSequence(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Used to get Sequence.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.UpdatePathElementBounds(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.Internal.PathInformation,Syncfusion.Blazor.Diagram.PathElement,Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.CommonElement)">
            <summary>
            This method is used to update the path element's bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.UpdateShapeElement(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            Used to udpate shape element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.ClipDecorators(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint})">
            <summary>
            Used to clip decorators.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.ClipDecorator(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},System.Boolean)">
            <summary>
            Used to clip decorator.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetBezierBounds(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Used to get bezier bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.UpdateBezierSegmentPath(System.Collections.Generic.List{Syncfusion.Blazor.Diagram.DiagramPoint},Syncfusion.Blazor.Diagram.Connector,System.String)">
            <summary>
            This method is used to update the bezier segment path.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetDirection(Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramPoint,System.Boolean)">
            <summary>
            Used to get direction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.BridgePath(Syncfusion.Blazor.Diagram.Connector,System.String,System.Double)">
            <summary>
            Used to get bridge path.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.GetBezierPoints(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{Syncfusion.Blazor.Diagram.Direction})">
            <summary>
            Used to get bezier points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.IsEmptyVector(Syncfusion.Blazor.Diagram.Vector)">
            <summary>
            Check element has empty vector or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.Clone">
            <summary>
            Creates a new connector that is a copy of the current connector.
            </summary>
            <returns>Connector</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Connector.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorSegment">
            <summary>
            Represents the segment of the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Connectors="@connectors">
            </SfDiagramComponent>
            @code
            {
              public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
              protected override void OnInitialized()
              {
                Connector connector = new Connector()
                {
                   ID="straight",
                   SourcePoint = new DiagramPoint() { X = 100, Y = 200 },
                   TargetPoint = new DiagramPoint() { X = 300, Y = 200 },
                   Segments = new DiagramObjectCollection<ConnectorSegment>()
                   {
                       //Create a new straight segment 
                       new StraightSegment(){Point=new DiagramPoint(420,300)},
                    }
                };
               connectors.Add(connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorSegment.#ctor(Syncfusion.Blazor.Diagram.ConnectorSegment)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorSegment"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.ConnectorSegment"/>.
            </summary>
            <param name="src">ConnectorSegment</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorSegment"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorSegment.Type">
            <summary>
            Defines the type of the segment.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Connectors="@connectors">
            </SfDiagramComponent>
            @code
            {
              public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
              protected override void OnInitialized()
              {
                Connector connector = new Connector()
                {
                   ID="straight",
                    Type = ConnectorSegmentType.Straight,
                   SourcePoint = new DiagramPoint() { X = 100, Y = 200 },
                   TargetPoint = new DiagramPoint() { X = 300, Y = 200 },
                   Segments = new DiagramObjectCollection<ConnectorSegment>()
                   {
                       //Create a new straight segment 
                       new StraightSegment(){Point=new DiagramPoint(420,300)},
                    }
                };
               connectors.Add(connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorSegment.AllowDrag">
            <summary>
            Defines whether the segment can be dragged or not.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Connectors="@connectors">
            </SfDiagramComponent>
            @code
            {
              public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
              protected override void OnInitialized()
              {
                Connector connector = new Connector()
                {
                   ID="straight",
                   SourcePoint = new DiagramPoint() { X = 100, Y = 200 },
                   TargetPoint = new DiagramPoint() { X = 300, Y = 200 },
                   Segments = new DiagramObjectCollection<ConnectorSegment>()
                   {
                       //Create a new straight segment 
                       new StraightSegment(){Point=new DiagramPoint(420,300)},
                       AllowDrag = true,
                    }
                };
               connectors.Add(connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorSegment.Clone">
            <summary>
            Creates a new segment that is a copy of the current segment.
            </summary>
            <returns>ConnectorSegment</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorSegment.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.StraightSegment">
            <summary>
            Represents how a straight segment can be created for a connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Connectors="@connectors">
            </SfDiagramComponent>
            @code
            {
              public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
              protected override void OnInitialized()
              {
                Connector connector = new Connector()
                {
                   ID="straight",
                   SourcePoint = new DiagramPoint() { X = 100, Y = 200 },
                   TargetPoint = new DiagramPoint() { X = 300, Y = 200 },
                   Segments = new DiagramObjectCollection<ConnectorSegment>()
                   {
                       //Create a new straight segment 
                       new StraightSegment(){Point=new DiagramPoint(420,300)},
                    }
                };
               connectors.Add(connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StraightSegment.#ctor(Syncfusion.Blazor.Diagram.StraightSegment)">
            <summary>
            Creates a new instance of the StraightSegment from the given StraightSegment.
            </summary>
            <param name="src">StraightSegment</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StraightSegment.#ctor">
            <summary>
            Initializes a new instance of the StraightSegment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.StraightSegment.Point">
            <summary>
            Gets or sets the endpoint of the connector segment.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Connectors="@connectors">
            </SfDiagramComponent>
            @code
            {
              public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
              protected override void OnInitialized()
              {
                Connector connector = new Connector()
                {
                   ID="straight",
                   SourcePoint = new DiagramPoint() { X = 100, Y = 200 },
                   TargetPoint = new DiagramPoint() { X = 300, Y = 200 },
                   Segments = new DiagramObjectCollection<ConnectorSegment>()
                   {
                       //Create a new straight segment 
                       new StraightSegment(){Point=new DiagramPoint(420,300)},
                    }
                };
               connectors.Add(connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StraightSegment.Clone">
            <summary>
            Creates a new segment that is a copy of the current straight segment.
            </summary>
            <returns>StraightSegment</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StraightSegment.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BezierSegment">
            <summary>
            Represents the bezier segment of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BezierSegment.#ctor">
            <summary>
            Initializes a new instance of the BezierSegment.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BezierSegment.#ctor(Syncfusion.Blazor.Diagram.BezierSegment)">
            <summary>
            Creates a new instance of the BezierSegment from the given BezierSegment.
            </summary>
            <param name="src">BezierSegment</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Point1">
            <summary>
            Gets or sets the first control point of the bezier connector.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Bezier,
                  Segments=new DiagramObjectCollection<ConnectorSegment>()
                  {
                     new BezierSegment(){Type=ConnectorSegmentType.Bezier, 
                     Point1=new DiagramPoint{X=125, Y=75}, 
                     Point2=new DiagramPoint{X=225, Y=75 } }
                  }
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Point2">
            <summary>
            Gets or sets the second control point of the bezier connector.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Bezier,
                  Segments=new DiagramObjectCollection<ConnectorSegment>()
                  {
                     new BezierSegment(){Type=ConnectorSegmentType.Bezier, 
                     Point1=new DiagramPoint{X=125, Y=75}, 
                     Point2=new DiagramPoint{X=225, Y=75 } }
                  }
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Vector1">
            <summary>
            Defines the length and angle between the source point and the first control point of the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Bezier,
                  Segments=new DiagramObjectCollection<ConnectorSegment>()
                  {
                     new BezierSegment(){Type=ConnectorSegmentType.Bezier, 
                     Vector1=new Vector{Angle=90, Distance=75 }, 
                     Vector2=new Vector{Angle=90, Distance=75 }
                  }
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Vector2">
            <summary>
            Defines the length and angle between the target point and the second control point of the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Bezier,
                  Segments=new DiagramObjectCollection<ConnectorSegment>()
                  {
                     new BezierSegment(){Type=ConnectorSegmentType.Bezier, 
                     Vector1=new Vector{Angle=90, Distance=75 }, 
                     Vector2=new Vector{Angle=90, Distance=75 }
                  }
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BezierSegment.Clone">
            <summary>
            Creates a new bezier segment that is a copy of the current segment.
            </summary>
            <returns>BezierSegment</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BezierSegment.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Vector">
            <summary>
            Describes the length and angle between the control point and the start point of the bezier segment. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Vector.#ctor(Syncfusion.Blazor.Diagram.Vector)">
            <summary>
            Creates a new instance of the Vector from the given Vector.
            </summary>
            <param name="src">Vector</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Vector.#ctor">
            <summary>
            Initializes a new instance of the Vector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Vector.Angle">
            <summary>
            Defines the angle between the connector endpoint and control point of the bezier segment. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Bezier,
                  Segments=new DiagramObjectCollection<ConnectorSegment>()
                  {
                     new BezierSegment(){Type=ConnectorSegmentType.Bezier, 
                     Vector1=new Vector{Angle=90, Distance=75 }, 
                     Vector2=new Vector{Angle=90, Distance=75 }
                  }
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Vector.Distance">
            <summary>
            Defines the distance between the connector endpoint and control point of the bezier segment.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Bezier,
                  Segments=new DiagramObjectCollection<ConnectorSegment>()
                  {
                     new BezierSegment(){Type=ConnectorSegmentType.Bezier, 
                     Vector1=new Vector{Angle=90, Distance=75 }, 
                     Vector2=new Vector{Angle=90, Distance=75 }
                  }
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Vector.Clone">
            <summary>
            Creates a new vector that is the copy of the current vector.
            </summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Vector.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.OrthogonalSegment">
            <summary>
            Represents how an orthogonal segment can be created with length and direction.
            </summary>
            <example>
            <code>
            <![CDATA[
            Segments = new DiagramObjectCollection<ConnectorSegment>()
            {
                new OrthogonalSegment 
                {
                    Length = 100,
                    Type = ConnectorSegmentType.Orthogonal,
                    Direction = Direction.Right, 
                 },
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.OrthogonalSegment.#ctor(Syncfusion.Blazor.Diagram.OrthogonalSegment)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.OrthogonalSegment"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.OrthogonalSegment"/>.
            </summary>
            <param name="src">OrthogonalSegment</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.OrthogonalSegment.#ctor">
            <summary>
            Initializes a new instance of the OrthogonalSegment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.OrthogonalSegment.Length">
            <summary>
            Gets or sets the length of orthogonal segment , by default it is null.
            </summary>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                  Type = ConnectorSegmentType.Orthogonal,
                  Segments=new DiagramObjectCollection<ConnectorSegment>()
                  {
                     new OrthogonalSegment(){Type = ConnectorSegmentType.Orthogonal, 
                     Direction = Direction.Top, Length = 50 }
                  }
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.OrthogonalSegment.Direction">
            <summary>
            Gets or sets the direction of the orthogonal segment.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">1.Left, Sets the connector segment direction as left.</td>
            </tr>
            <tr>
            <td style = "border: none">2.Right, Sets the connector segment direction as right. </td>
            </tr>
            <tr>
            <td style = "border: none">3.Top, Sets the connector segment direction as top. </td>
            </tr>
            <tr>
            <td style = "border: none">4.Bottom, Sets the connector segment direction as bottom. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                  Type = ConnectorSegmentType.Orthogonal,
                  Segments=new DiagramObjectCollection<ConnectorSegment>()
                  {
                     new OrthogonalSegment(){Type = ConnectorSegmentType.Orthogonal, 
                     Direction = Direction.Top, Length = 50 }
                  }
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.OrthogonalSegment.Clone">
            <summary>
            Creates a new orthogonal segment that is a copy of the current segment.
            </summary>
            <returns>OrthogonalSegment</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.OrthogonalSegment.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DecoratorSettings">
            <summary>
            Represents the shape of the end points of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DecoratorSettings.#ctor(Syncfusion.Blazor.Diagram.DecoratorSettings)">
            <summary>
            Creates a new instance of the Decorator from the given Decorator.
            </summary>
            <param name="src">Decorator</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DecoratorSettings.#ctor">
            <summary>
            Initializes a new instance of the Decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Width">
            <summary>
            Gets or sets the width of the decorator.
            </summary>
            <value> The default is 10</value> 
            <example>
            <code>
            <![CDATA[
            TargetDecorator = new DecoratorSettings()
            {
               Width = 15, Height = 15, Shape = DecoratorShape.Square
                Style = new ShapeStyle()
                {
                    StrokeColor = "#37909A",
                    Fill = "#37909A",
                    StrokeWidth = 1,
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Height">
            <summary>
            Gets or sets the height of the decorator.
            </summary>
            <value> The default is 10</value> 
            <example>
            <code>
            <![CDATA[
            TargetDecorator = new DecoratorSettings()
            {
               Width = 15, Height = 15, Shape = DecoratorShape.Square
                Style = new ShapeStyle()
                {
                    StrokeColor = "#37909A",
                    Fill = "#37909A",
                    StrokeWidth = 1,
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Shape">
            <summary>
            Gets or sets the shape of the decorator.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.DecoratorShape.Arrow"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the  shape of the connector. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Arrow - Sets the decorator’s shape to arrow.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. None - Sets the decorator's shape to none.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Diamond - Sets the decorator's shape to diamond.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. OpenArrow - Sets the decorator shape to open OpenArrow..</td>
            </tr>
            <tr>
            <td style = "border: none"> 5. Circle - Sets the decorator shape to circle..</td>
            </tr>
            <tr>
            <td style = "border: none"> 5. Square - Sets the decorator shape to Square..</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            TargetDecorator = new DecoratorSettings()
            {
               Width = 15, Height = 15, Shape = DecoratorShape.Square
                Style = new ShapeStyle()
                {
                    StrokeColor = "#37909A",
                    Fill = "#37909A",
                    StrokeWidth = 1,
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.PathData">
            <summary>
            Allows setting a custom shape of the decorator.
            </summary>
            <example>
            <code>
            <![CDATA[
            TargetDecorator = new DecoratorSettings()
            {
                Shape = DecoratorShape.Custom,
                PathData = "M80.5,12.5 C80.5,19.127417 62.59139,24.5 40.5,24.5 C18.40861,24.5 0.5,19.127417 0.5,12.5 C0.5,5.872583 18.40861,0.5 40.5,0.5 C62.59139,0.5 80.5,5.872583 80.5,12.5 z",
                Style = new ShapeStyle()
                {
                    StrokeColor = "#37909A",
                    Fill = "#37909A",
                    StrokeWidth = 1,
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Pivot">
            <summary>
            The decorator angle will be based on the pivot values, which range from 0 to 1.
            </summary>
            <example>
            <code>
            <![CDATA[
            TargetDecorator = new DecoratorSettings()
            {
               Width = 15, Height = 15, Shape = DecoratorShape.Square
               Pivot = DiagramPoint { X = 0, Y = 0.5 };
                Style = new ShapeStyle()
                {
                    StrokeColor = "#37909A",
                    Fill = "#37909A",
                    StrokeWidth = 1,
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DecoratorSettings.Style">
            <summary>
            Represents the appearance of the decorator.
            </summary>
            <example>
            <code>
            <![CDATA[
            TargetDecorator = new DecoratorSettings()
            {
               Width = 15, Height = 15, Shape = DecoratorShape.Square
               Pivot = DiagramPoint { X = 0, Y = 0.5 };
                Style = new ShapeStyle()
                {
                    StrokeColor = "#37909A",
                    Fill = "#37909A",
                    StrokeWidth = 1,
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DecoratorSettings.Clone">
            <summary>
            Creates a new decorator that is a copy of the current decorator.
            </summary>
            <returns>Decorator</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DecoratorSettings.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DataSourceSettings">
            <summary>
            DataSourceSettings is used to specify the data source and defines how the parent and child relationship will be generated in the layout. It is applicable only when the layout is used. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px">
            <DataSourceSettings @bind-DataSource="@data" ID="@Id" ParentID="@ParentId" SymbolMapping="@doBinding"></DataSourceSettings>
            <Layout Type = "LayoutType" >
            </ Layout >
            </ SfDiagramComponent >
            @code {
            public object data { get; set; }
            public string Id;
            public string ParentId;
            public LayoutType LayoutType = LayoutType.HierarchicalTree;
            protected override void OnInitialized()
            {
             Id = "Name";
             ParentId = "Category";
             data = Data1;
            }
            //bind the external data with the node
            private Node doBinding(Node node, object data)
            {
             HierarchicalDetails hierarchicalData = data as HierarchicalDetails;
             node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
             new ShapeAnnotation()
            {
             ID = "annotation"+node.ID,
             Content = hierarchicalData.Name,
            },
            };
            return node;
            }
            public List<HierarchicalDetails> Data1 = new List<HierarchicalDetails>()
            {
             new HierarchicalDetails(){ Name ="Diagram",FillColor="#916DAF"},
             new HierarchicalDetails(){ Name ="Layout", Category="Diagram"},
             new HierarchicalDetails(){ Name ="Tree Layout",Category="Layout"},
             new HierarchicalDetails(){ Name ="Organizational Chart", Category="Layout"}
            };
            public class HierarchicalDetails
            {
             public string Name { get; set; }
             public string Category { get; set; }
             public string FillColor { get; set; }
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.ChildContent">
            <summary>
            Gets or sets the child content that the layout is displayed for.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.DataSourceChanged">
            <summary>
            Specifies the callback to trigger when the data source changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.DataSource">
            <summary>
            Gets or sets the data source that the layout is displayed for.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px">
            <DataSourceSettings @bind-DataSource="@data" ID="@Id" ParentID="@ParentId" SymbolMapping="@doBinding"></DataSourceSettings>
            <Layout Type = "LayoutType" >
            </ Layout >
            </ SfDiagramComponent >
            @code {
            public object data { get; set; }
            public string Id;
            public string ParentId;
            public LayoutType LayoutType = LayoutType.HierarchicalTree;
            protected override void OnInitialized()
            {
             Id = "Name";
             ParentId = "Category";
             data = Data1;
            }
            public List<HierarchicalDetails> Data1 = new List<HierarchicalDetails>()
            {
             new HierarchicalDetails(){ Name ="Diagram",FillColor="#916DAF"},
             new HierarchicalDetails(){ Name ="Layout", Category="Diagram"},
             new HierarchicalDetails(){ Name ="Tree Layout",Category="Layout"},
             new HierarchicalDetails(){ Name ="Organizational Chart", Category="Layout"}
            };
            public class HierarchicalDetails
            {
             public string Name { get; set; }
             public string Category { get; set; }
             public string FillColor { get; set; }
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.ID">
            <summary>
            Defines the property name that will be mapped to each node id from the data source record.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px">
            <DataSourceSettings @bind-DataSource="@data" ID="@Id" ParentID="@ParentId" SymbolMapping="@doBinding"></DataSourceSettings>
            <Layout Type = "LayoutType" >
            </ Layout >
            </ SfDiagramComponent >
            @code {
            public object data { get; set; }
            public string Id;
            public string ParentId;
            public LayoutType LayoutType = LayoutType.HierarchicalTree;
            protected override void OnInitialized()
            {
             Id = "Name";
             ParentId = "Category";
             data = Data1;
            }
            public List<HierarchicalDetails> Data1 = new List<HierarchicalDetails>()
            {
             new HierarchicalDetails(){ Name ="Diagram",FillColor="#916DAF"},
            };
            public class HierarchicalDetails
            {
             public string Name { get; set; }
             public string Category { get; set; }
             public string FillColor { get; set; }
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.ParentID">
            <summary>
            Defines the property name that will be used to find the parent and child relationship between the nodes from the data source record.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px">
            <DataSourceSettings @bind-DataSource="@data" ID="@Id" ParentID="@ParentId" SymbolMapping="@doBinding"></DataSourceSettings>
            <Layout Type = "LayoutType" >
            </ Layout >
            </ SfDiagramComponent >
            @code {
            public object data { get; set; }
            public string Id;
            public string ParentId;
            public LayoutType LayoutType = LayoutType.HierarchicalTree;
            protected override void OnInitialized()
            {
             Id = "Name";
             ParentId = "Category";
             data = Data1;
            }
            public List<HierarchicalDetails> Data1 = new List<HierarchicalDetails>()
            {
             new HierarchicalDetails(){ Name ="Diagram",FillColor="#916DAF"},
             new HierarchicalDetails(){ Name ="Layout", Category="Diagram"},
             new HierarchicalDetails(){ Name ="Tree Layout",Category="Layout"},
             new HierarchicalDetails(){ Name ="Organizational Chart", Category="Layout"}
            };
            public class HierarchicalDetails
            {
             public string Name { get; set; }
             public string Category { get; set; }
             public string FillColor { get; set; }
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.Root">
            <summary>
            Gets or sets the root (primary) node of the layout populated from the data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.IDChanged">
            <summary>
            Specifies the callback to trigger when the id value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.ParentIDChanged">
            <summary>
            Specifies the callback to trigger when the parent id value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.RootChanged">
            <summary>
            Specifies the callback to trigger when the root value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.SymbolBinding">
            <summary>
            Returns the customized node information. It is a call-back method which is triggered for each node when initializing the layout.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">For more details, refer <see href="https://blazor.syncfusion.com/documentation/diagram-component/layout/organizational-chart">Organizational Chart</see></td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DataSourceSettings.Query">
            <summary>
            Gets or sets the query that is displayed for.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering, otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.UpdateLiveData">
            <summary>
            Used to update live data.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.UpdatedLocalData">
            <summary>
            Used to update local data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.PropertyUpdate(Syncfusion.Blazor.Diagram.DataSourceSettings)">
            <summary>
            Used to update property of data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DataSourceSettings.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommandManager">
            <summary>
            Defines the collection of commands and the corresponding key gestures. It is responsible for managing routed commands.
            </summary>
            <remarks>
            CommandManager provides the support to define custom commands. The custom commands are executed when the specified key gesture is recognized.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref="@diagram" Height="600px" Nodes="@nodes">
            @* Initializing the custom commands*@
                <CommandManager Commands = "@command" Execute="@CommandExecute" CanExecute="@CanExe">
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                // Reference to the diagram
                SfDiagramComponent diagram;
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new Command()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.G, KeyModifiers = KeyModifiers.Control }
                    },
                    new Command()
                    {
                        Name = "CustomUngroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.U, KeyModifiers = KeyModifiers.Control }
                    },
                };
                // Define the diagram's nodes collection
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                public void CanExe(CommandKeyArgs args)
                {
                    args.CanExecute = true;
                }
                public void CommandExecute(CommandKeyArgs args)
                {
                    if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == DiagramKeys.G)
                    {
                        //Custom command to group the selected nodes
                        diagram.Group();
                    }
                    if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == DiagramKeys.U)
                    {
                        Selector selector = diagram.SelectedItems;
                        //Custom command to ungroup the selected items
                        if (selector.Nodes.Count > 0 && selector.Nodes[0] is Group)
                        {
                            if ((selector.Nodes[0] as Group).Children.Length > 0)
                            {
                                diagram.Ungroup();
                            }
                        }
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.ChildContent">
            <summary>
            Gets or sets the child content of the Command Manager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.Parent">
            <summary>
            Gets or sets instance of  SfDiagramComponent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.Commands">
            <summary>
            Represents storing multiple command names with the corresponding command object.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent >
                <CommandManager Commands = "@command" >
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new Command()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.G, Modifiers = ModifierKeys.Control }
                    },
                    new Command()
                    {
                        Name = "CustomUngroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.U, Modifiers = ModifierKeys.Control }
                    },
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.CommandsChanged">
            <summary>
            Specifies the callback to trigger when the commands changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.CanExecute">
            <summary>
            Determines whether this command can execute in its current state.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent >
            @* Initializing the custom commands*@
                <CommandManager CanExecute="@CanExe">
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                public void CanExe(CommandKeyArgs args)
                {
                    args.CanExecute = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.Execute">
            <summary>
            Executes the command on the current command target.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent >
            @* Initializing the custom commands*@
                <CommandManager  Execute="@CommandExecute" >
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                public void CommandExecute(CommandKeyArgs args)
                {
                    if (args.Gesture.Modifiers == ModifierKeys.Control && args.Gesture.Key == DiagramKeys.G)
                    {
                        //Custom command to group the selected nodes
                        diagram.Group();
                    }
                    if (args.Gesture.Modifiers == ModifierKeys.Control && args.Gesture.Key == DiagramKeys.U)
                    {
                        Selector selector = diagram.SelectedItems;
                        //Custom command to ungroup the selected items
                        if (selector.Nodes.Count > 0 && selector.Nodes[0] is Group)
                        {
                            if ((selector.Nodes[0] as Group).Children.Length > 0)
                            {
                                diagram.Ungroup();
                            }
                        }
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandManager.PropertyUpdate(Syncfusion.Blazor.Diagram.CommandManager)">
            <summary>
            Used to update property value.
            </summary>
            <param name="commandManager">CommandManager</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandManager.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandManager.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.KeyGesture">
            <summary>
            Defines a keyboard combination that can be used to invoke a command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyGesture.Key">
            <summary>
            Gets the key associated with this KeyGesture.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.DiagramKeys.None"/></value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent >
            @* Initializing the custom commands*@
                <CommandManager Commands = "@command">
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new Command()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.G,  Modifiers = ModifierKeys.Control }
                    },
                    new Command()
                    {
                        Name = "CustomUngroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.U,  Modifiers = ModifierKeys.Control }
                    },
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyGesture.Modifiers">
            <summary>
            Gets the modifier keys associated with this KeyGesture. The default value is None.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.ModifierKeys.None"/></value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent >
            @* Initializing the custom commands*@
                <CommandManager Commands = "@command" >
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new Command()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.G,  Modifiers = ModifierKeys.Control }
                    },
                    new Command()
                    {
                        Name = "CustomUngroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.U,  Modifiers = ModifierKeys.Control }
                    },
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.KeyboardCommand">
            <summary>
            Specifies a command and a key gesture to define when the command should be executed.
            </summary>
            <example>
            <remarks>
            The below code example illustrates how to call a group command. 
            </remarks>
            <code>
            <![CDATA[
            private void OnGroup()
            {
                diagram.Group();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyboardCommand.Name">
            <summary>
            Specifies the name of the command.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref="@diagram" Height="600px" Nodes="@nodes">
            @* Initializing the custom commands*@
                <CommandManager Commands = "@command">
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                // Reference to the diagram
                SfDiagramComponent diagram;
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new Command()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.G,  Modifiers = ModifierKeys.Control }
                    },
                    new Command()
                    {
                        Name = "CustomUngroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.U,  Modifiers = ModifierKeys.Control }
                    },
                };
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyboardCommand.Gesture">
            <summary>
             Specifies a combination of keys and key modifiers, on the recognition of which the command should be executed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <summary>
            Notifies when to execute the custom keyboard commands .
            </summary>
            <remarks>
            The following code illustrates how to create a custom command.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref="@diagram" Height="600px" Nodes="@nodes">
            @* Initializing the custom commands*@
                <CommandManager Commands = "@command">
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                // Reference to the diagram
                SfDiagramComponent diagram;
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new Command()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.G,  Modifiers = ModifierKeys.Control }
                    },
                    new Command()
                    {
                        Name = "CustomUngroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.U,  Modifiers = ModifierKeys.Control }
                    },
                };
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyboardCommand.Parameter">
            <summary>
            Specifies all additional parameters that are required at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.KeyboardCommand.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Layout">
            <summary>
            Represents the class for arranging the nodes and connectors in a tree structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.FixedNode">
            <summary>
            Sets the name of the node concerning which all the other nodes will be translated.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <DataSourceSettings ID = "Id" ParentID="Team" DataSource="@DataSource"></DataSourceSettings>   
                <Layout Type = "LayoutType.OrganizationalChart"
                        @bind-FixedNode="null"
                        GetLayoutInfo="GetLayoutInfo">
                </Layout>
            </SfDiagramComponent>
            @code
            {
               public class OrgChartDataModel 
               {
                   public string Id  { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" },
               };
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.ChildContent">
            <summary>
            Gets or sets the child content of the layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.FixedNodeChanged">
            <summary>
            Specifies the callback to trigger when the fixed node changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalSpacingChanged">
            <summary>
            Specifies the callback to trigger when the vertical spacing changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.LinearArrangementChanged">
            <summary>
            Specifies the callback to trigger when the LinearArrangement value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.SamePointChanged">
            <summary>
            Specifies the callback to trigger when the Samepoint value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.TypeChanged">
            <summary>
            Specifies the callback to trigger when the type changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalAlignmentChanged">
            <summary>
            Specifies the callback to trigger when the horizontal alignment changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalAlignmentChanged">
            <summary>
            Specifies the callback to trigger when the vertical alignment changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalSpacingChanged">
            <summary>
            Specifies the callback to trigger when the horizontal spacing changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.BoundsChanged">
            <summary>
            Specifies the callback to trigger when the bounds changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.OrientationChanged">
            <summary>
            Specifies the callback to trigger when the orientation changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.MarginChanged">
            <summary>
            Specifies the callback to trigger when the margin changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.GetLayoutInfo">
            <summary>
            GetLayoutInfo is used to configure every subtree of the organizational chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.GetBranch">
            <summary>
            Returns the branch type of the layout. Applicable only if it is a mind map layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalSpacing">
            <summary>
            Specifies the space that must be Vertically left between the nodes. It is 30, by default.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <Layout Type = "LayoutType.OrganizationalChart"
                        @bind-HorizontalSpacing="@HorizontalSpacing" 
                        @bind-VerticalSpacing="@VerticalSpacing">
                </Layout>
            </SfDiagramComponent>
            @code
            {
               int HorizontalSpacing = 40;
               int VerticalSpacing = 50;
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Bounds">
            <summary>
            Aligns the layout within the given bounds.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <Layout Type = "LayoutType.OrganizationalChart"
                        @bind-HorizontalSpacing="@HorizontalSpacing" 
                        @bind-VerticalSpacing="@VerticalSpacing"
                        Bounds="@bounds">
                </Layout>
            </SfDiagramComponent>
            @code
            {
             private DiagramRect bounds = new Rect(200, 200, 500, 500);
               int HorizontalSpacing = 40;
               int VerticalSpacing = 50;
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalSpacing">
            <summary>
            Specifies the space that must be horizontally left between the nodes. It is 30, by default.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <Layout Type = "LayoutType.OrganizationalChart"
                        @bind-HorizontalSpacing="@HorizontalSpacing" 
                        @bind-VerticalSpacing="@VerticalSpacing">
                </Layout>
            </SfDiagramComponent>
            @code
            {
               int HorizontalSpacing = 40;
               int VerticalSpacing = 50;
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Root">
            <summary>
            Specifies the parent node of the layout.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px">
                <DataSourceSettings ID = "Id"  Root="1"  ParentID="Team" DataSource="@DataSource"></DataSourceSettings>   
                <Layout Type = "LayoutType.OrganizationalChart"
                        @bind-HorizontalSpacing="@HorizontalSpacing" 
                        @bind-VerticalSpacing="@VerticalSpacing">
                </Layout>
            </SfDiagramComponent>
            @code
            {
               int HorizontalSpacing = 40;
               int VerticalSpacing = 50;
               public class OrgChartDataModel 
               {
                   public string Id  { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" },
               };
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Orientation">
            <summary>
            Specifies the orientation of the layout.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.LayoutOrientation.TopToBottom"/></value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <DataSourceSettings ID = "Id"  Root="1"  ParentID="Team" DataSource="@DataSource"></DataSourceSettings>   
                <Layout Type = "LayoutType.OrganizationalChart"
                        Orientation="LayoutOrientation.BottomToTop">
                </Layout>
            </SfDiagramComponent>
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalAlignment">
            <summary>
            Describes how the layout should be positioned or stretched in the HorizontalAlignment.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Auto"/></value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <Layout Type = "LayoutType.OrganizationalChart"
                        Orientation="LayoutOrientation.BottomToTop"
                        HorizontalAlignment="HorizontalAlignment.Auto"
                        GetLayoutInfo="GetLayoutInfo">
                </Layout>
            </SfDiagramComponent>
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalAlignment">
            <summary>
            Describes how the layout should be positioned or stretched in the VerticalAlignment.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Auto"/></value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <Layout Type = "LayoutType.OrganizationalChart"
                        Orientation="LayoutOrientation.BottomToTop"
                        VerticalAlignment="VerticalAlignment.Auto"
                        GetLayoutInfo="GetLayoutInfo">
                </Layout>
            </SfDiagramComponent>
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.LinearArrangement">
             <summary> 
             Gets or sets the value indicates whether the child nodes are arranged either linear or non-linear manner in layout. 
             </summary> 
             <value>true, the child nodes are arranged in linear manner; Otherwise, false. The default value is false</value> 
             <example> 
             <code> 
             <![CDATA[ 
             </summary>  
             <example>  
             <code>  
             <![CDATA[  
            <SfDiagramComponent @ref="@Diagram" Height="499px"  
            ConnectorCreating="@ConnectorDefaults" NodeCreating="@NodeDefaults">  
             <DataSourceSettings ID = "Name" ParentID="Category" DataSource="DataSource">   </DataSourceSettings>  
             <Layout @bind-Type="LayoutType.ComplexHierarchicalTree"  
             LinearArrangement = "false"></Layout>              
             </SfDiagramComponent>            
             ]]> 
             </code> 
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.SamePoint">
             <summary>  
             Gets or sets the value indicates whether to arrange the connectors with or without overlapping in layout.         
             </summary>  
             <value> true, To arrange connectors without overlapping in other connectors. Otherwise, false. The default value is true. </value> 
             <example> 
             <code> 
             <![CDATA[ 
             </summary>  
             <example>  
             <code>  
             <![CDATA[  
            <SfDiagramComponent @ref="@Diagram" Height="499px"  
            ConnectorCreating="@ConnectorDefaults" NodeCreating="@NodeDefaults">  
             <DataSourceSettings ID = "Name" ParentID="Category" DataSource="DataSource">   </DataSourceSettings>  
             <Layout @bind-Type="LayoutType.ComplexHierarchicalTree"  
             SamePoint= "true"></Layout>              
             </SfDiagramComponent>            
             ]]> 
             </code> 
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Type">
            <summary>
            Defines the type of layout.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.LayoutType.None"/></value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <Layout Type = "LayoutType.OrganizationalChart"
                        Orientation="LayoutOrientation.BottomToTop"
                        VerticalAlignment="VerticalAlignment.Auto">
                </Layout>
            </SfDiagramComponent>
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Margin">
            <summary>
            Specifies the space between the viewport and the layout.
            </summary>
            <value> The default value will be <see cref="T:Syncfusion.Blazor.Diagram.LayoutMargin"/>{left:50, top:50, right:0, bottom:0}</value>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <Layout Type = "LayoutType.OrganizationalChart">
                         <LayoutMargin @bind-Top="10" @bind-Bottom="10" @bind-Right="10" @bind-Left="10"></LayoutMargin>
                </Layout>
            </SfDiagramComponent>
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.LayoutInfo">
            <summary>
            To store layout information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.Initialize">
            <summary>
            To initialize the layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.UpdateMarginValues(Syncfusion.Blazor.Diagram.LayoutMargin)">
            <summary>
            Used to update margin values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.PropertyUpdate(Syncfusion.Blazor.Diagram.Layout)">
            <summary>
            Used to update property of layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.UpdateFixedNode(System.String)">
            <summary>
            Used to update fixed node in layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.GetDefaultMindMapLayout(Syncfusion.Blazor.Diagram.Layout)">
            <summary>
            Used to get default mindmap layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.UpdateOrientation(Syncfusion.Blazor.Diagram.LayoutOrientation)">
            <summary>
            Used to update layout orientation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Layout.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TreeInfo">
            <summary>
            Represents the behavior and appearance of the tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Orientation">
            <summary>
            Arranges the child nodes with the parent based on its type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.AlignmentType">
            <summary>
            Specifies the type of subtree alignments in a layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Offset">
            <summary>
            Specifies the position of the node to be arranged. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.EnableRouting">
            <summary>
            Specifies whether the route has to be enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Children">
            <summary>
            Represents the children in the tree . 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Assistants">
            <summary>
            Represents the tree assistants.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Level">
            <summary>
            Sets the level of the tree. It is a double-type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.HasSubTree">
            <summary>
            Represents the type that enables or disables the sub tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.Rows">
            <summary>
            Represents the rows of a tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.EnableSubTree">
            <summary>
            Enables or disables the sub tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TreeInfo.IsRootInverse">
            <summary>
            Represents the type that enables or disables the root inverse.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LayoutMargin">
            <summary>
            Defines the space between the viewport and the automatic layout. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LayoutMargin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.LayoutMargin"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LayoutMargin.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LayoutMargin.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LayoutMargin.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDiagrams">
            <summary>
            Represents the modeling language for creating process workflows or business process flowcharts in the diagram. 
            </summary>
            <remarks>
             BPMN diagram helps people to communicate process workflow design ideas effectively.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnShape() 
                { 
                    Type = NodeShapes.Bpmn, 
                    Shape = BpmnShapes.DataObject, 
                    DataObject = new BpmnDataObject() 
                    { 
                        IsCollectiveData = true, 
                        Type = BpmnDataObjects.Output 
                    } 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.#ctor(Syncfusion.Blazor.Diagram.BpmnDiagrams)">
            <summary>
            Creates a new instance of the BpmnDiagrams from the given BpmnDiagrams.
            </summary>
            <param name="src">BpmnDiagrams</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.#ctor">
            <summary>
            Initializes a new instance of the BpmnDiagrams.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.InitBpmnContent(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Initialize the BPMN connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateAnnotationDrag(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Double,System.Double)">
             <summary>
            To update annotation drag.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.Drag(Syncfusion.Blazor.Diagram.Node,System.Double,System.Double,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Invoke when drag the element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.RemoveChildFromExpandedSubProcess(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Used to remove the child node from the subprocess
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateDocks(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Used to update docks.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.AddBpmnProcesses(Syncfusion.Blazor.Diagram.Node,System.String,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Used to add BPMN processes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.RemoveBpmnProcesses(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            To Remove BPMN processes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.RemoveChildFromBpmn(Syncfusion.Blazor.Diagram.DiagramContainer,System.String,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            To Remove child from BPMN shape
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnTextAnnotationShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnTextAnnotation,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Used to render BPMN text annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.SetAnnotationPath(Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.DiagramCanvas,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnTextAnnotation,Syncfusion.Blazor.Diagram.TextAnnotationDirection)">
            <summary>
            This method is used to set annotation path.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.SetAnnotationPosition(Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramRect,Syncfusion.Blazor.Diagram.PathElement)">
            <summary>
            This method is used to update textAnnotation position based on the target position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnDataObjectShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnDataObject,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get data object shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnShapes(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get BPMN shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnEventShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnEvent,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get BPMN Event shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.SetEventVisibility(Syncfusion.Blazor.Diagram.Node,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.CommonElement})">
            <summary>
            This method is used to set visibility to BPMN Event shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnGatewayShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnGateway,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get BPMN Gateway Shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnActivityShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnActivity,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get BPMN Activity Shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnExpandedSubProcessShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get BPMN Expanded sub process Shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnSubProcessShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnActivity,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get BPMN Subprocess Shape.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnAdhocShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.PathElement,System.Boolean)">
            <summary>
            This method is used to get BPMN Subprocess transaction.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnLoopShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary,Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic)">
            <summary>
            This method is used to get BPMNsubprocessLoop shape.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetSubProcessChildCount(System.Boolean,Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic,System.Boolean,System.Boolean)">
            <summary>
            This method is used to get BPMNsubprocess child count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateElementVisibility(Syncfusion.Blazor.Diagram.Node,System.Boolean,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to update visibility of element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateDiagramContainerVisibility(Syncfusion.Blazor.Diagram.CommonElement,System.Boolean)">
            <summary>
            This method is used to update visibility of diagram container.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnTaskShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnActivity,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get BPMN Task shape.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetBpmnCompensationShape(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.PathElement)">
            <summary>
            This method is used to get BPMN compensation Shape.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetTaskChildCount(Syncfusion.Blazor.Diagram.BpmnActivity)">
            <summary>
            This method is used to get task child count.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetSize(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to get size of element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.SetSizeForBpmnGateway(Syncfusion.Blazor.Diagram.DiagramCanvas,System.Double,System.Double)">
            <summary>
            This method is used to set size of BPMN gateway.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.SetStyle(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to style for element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmn(Syncfusion.Blazor.Diagram.Node,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update BPMN.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnSize(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update BPMN size.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnEvent(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnEvent,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update BPMN Event.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnEventTrigger(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnEvent,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update BPMN Event Trigger.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnActivity(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnActivity,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update BPMN Activity.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnExpandedSubProcess(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update BPMN Activity subprocess.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnExpandedSubProcessCompensation(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method is used to update BPMN Subprocess Compensation.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnSubProcessCollapsed(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnActivity,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method is used to update BPMN  Subprocess Collapsed.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnSubProcessBoundary(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnSubProcessType)">
            <summary>
            This method is used to update BPMN  Subprocess Boundary.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnExpandedSubProcessAdhoc(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method is used to update BPMN Subprocess Adhoc.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetEvent(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnEventType,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.DiagramElement)">
            <summary>
            This method is used to get event.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnActivityLoop(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update BPMN Activity Task Loop.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnExpandedSubProcessLoop(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Node,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update BPMN Activity Task Loop.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateChildMargin(Syncfusion.Blazor.Diagram.DiagramContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method is used to update child margin.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.SetSizeForBpmnExpandedSubProcess(Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess,Syncfusion.Blazor.Diagram.DiagramCanvas,System.Int32,System.Int32,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to set size for BPMN activity.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.SetSizeForBpmnActivity(Syncfusion.Blazor.Diagram.BpmnActivity,Syncfusion.Blazor.Diagram.DiagramCanvas,System.Int32,System.Int32,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to set size for BPMN activity.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnDataObject(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnDataObject)">
            <summary>
            This method is used to update BPMNData Object.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateBpmnGateway(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.BpmnGateway,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            This method is used to update BPMN Activity Task.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.SetSizeForBpmnEvents(Syncfusion.Blazor.Diagram.BpmnEvent,Syncfusion.Blazor.Diagram.DiagramCanvas,System.Int32,System.Int32)">
            <summary>
            This method is used to set size for BPMN events.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.GetChildrenBound(Syncfusion.Blazor.Diagram.IDiagramObject,System.String,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to get children bounds.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.UpdateSubProcesses(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            This method is used to update sub process.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.Clone">
            <summary>
            Creates a new BPMN diagram that is a copy of the current BPMN diagram. 
            </summary>
            <returns>BpmnDiagrams</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDiagrams.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramIcon">
            <summary>
            Represents icon of the node.
            </summary>
            <remarks>
            DiagramIcon is the Expand/Collapse icon model that represents the state of the Node and allows its Child Nodes to be Expanded or Collapsed.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            Fill=”Grey”,
                            Margin = new DiagramThickness(){
                            Top = 1,
                            Bottom = 1,
                            Left = 1,
                            Right = 1,
                            }               
                            Width=10,
                            Height=10,
                            OffsetX = 0.5,
                            OffsetY = 1, 
                            HorizontalAlignment
                                      =HorizontalAlignment.Center,
                            VerticalAlignment
                                      =VerticalAlignment.Center,
                            BorderColor=”Red”,
                            BorderWidth=3,
                            CornerRadius=3,
                            Padding = new DiagramThickness(){
                            Top = 1,
                            Bottom = 1,
                            Left = 1,
                            Right = 1,
                            }               
                        },
                        CollapseIcon = new DiagramCollapseIcon()
                        {
                            Shape=DiagramCollapseIcons.Plus,
                            Fill=”Grey”,
                            Margin = new DiagramThickness(){
                            Top = 1,
                            Bottom = 1,
                            Left = 1,
                            Right = 1,
                            },               
                            Width=10,
                            Height=10,
                            OffsetX = 0.5,
                            OffsetY = 1, 
                            HorizontalAlignment
                                       =HorizontalAlignment.Center,
                            VerticalAlignment=VerticalAlignment.Center,
                            BorderColor=”Red”,
                            BorderWidth=3,
                            CornerRadius=3,
                            Padding = new DiagramThickness(){
                            Top = 1,
                            Bottom = 1,
                            Left = 1,
                            Right = 1,
                            }               
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramIcon.#ctor(Syncfusion.Blazor.Diagram.DiagramIcon)">
            <summary>
            Creates a new instance of the Expand/Collapse icon from the given icon.
            </summary>
            <param name="src">IconShapeModel</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramIcon.#ctor">
            <summary>
            Initializes a new instance of the icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.OffsetX">
            <summary>
            Gets or sets the offset coordinates of the Expand/Collapse Icon.
            </summary> 
            <remarks>
            Defines the position of the Expand/Collapse icon with respect to the boundaries of node.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            Fill=”Grey”,           
                            Width=10,
                            Height=10,
                            OffsetX = 0.5,
                            OffsetY = 1,              
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.OffsetY">
            <summary>
            Gets or sets the offset coordinates of the Expand/Collapse Icon.
            </summary> 
            <remarks>
            Defines the position of the Expand/Collapse icon with respect to the boundaries of node.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            Fill=”Grey”,           
                            Width=10,
                            Height=10,
                            OffsetX = 0.5,
                            OffsetY = 1,              
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.Width">
            <summary>
            Gets or sets the width of the icon. By default, it is 15px. 
            </summary>
            <value> The default value is 15px</value> 
            <remarks>
            The width of a icon does not include borders or margins.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            Fill=”Grey”,           
                            Width=10,
                            Height=10,
                            OffsetX = 0.5,
                            OffsetY = 1,              
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.Height">
            <summary>
             Gets or sets the height of the icon. By default, it is 15px.
            </summary>
            <value> The default value is 15px</value>
            <remarks>
            The height of a icon does not include borders or margins. 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            Fill=”Grey”,           
                            Width=10,
                            Height=10,
                            OffsetX = 0.5,
                            OffsetY = 1,              
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.BorderColor">
            <summary>
            Gets or sets the Border color of the Expand/Collapse icon.
            </summary>
            <value> The default Border Color is #1a1a1a</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            BorderColor=”Red”,              
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.BorderWidth">
            <summary>
            Gets or sets the Border Width of the Expand/Collapse icon.
            </summary>
            <value> The default  Border Width is set as 1</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                             BorderWidth=3,             
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.Fill">
            <summary>
            Gets or sets the fill color of an icon.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            Fill=”Grey”,                       
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.Margin">
            <summary>
            Gets or sets the margin for the Expand/Collapse Icon
            </summary>
            <value> The default values for the Margin are 0 on all sides</value>
            <remarks>
            Defines the space from the actual offset values of the icon. 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            Fill=”Grey”,
                            Margin = new DiagramThickness(){
                            Top = 1,
                            Bottom = 1,
                            Left = 1,
                            Right = 1,
                            }
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the Expand/Collapse Icon. 
            </summary>
            <remarks>
            Describes how an Icon should be positioned or stretched in HorizontalAlignment. 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            HorizontalAlignment
                                      =HorizontalAlignment.Center,            
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the Expand/Collapse Icon. 
            </summary>
            <remarks>
            Describes how an Icon should be positioned or stretched in VerticalAlignment. 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            HorizontalAlignment
                                      =HorizontalAlignment.Center,
                            VerticalAlignment
                                      =VerticalAlignment.Center,             
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.PathData">
            <summary>
            Gets or sets the custom geometry(shape) data of the Expand/Collapse icon. 
            </summary>
            <remarks>
            To create a custom-shaped Expand/Collapse icon, the user must set the shape to ‘path’ and then the PathData. (A custom graphics path is a set of connected lines, curves, and other simple graphics objects, including rectangles, ellipses, and text. A path works as a single graphics object, so any effect applied to the graphic path will also be applied to the Expand/Collapse icon..) 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Path,
                            PathData = "M100,200 C100,100 250,100 250,200 S400,300 400,200",
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.CornerRadius">
            <summary>
            Gets or sets the corner radius of the Expand/Collapse icon. By default the corner radius is set as 0
            </summary>
            <value>The default corner radius is set as 0</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            CornerRadius=3,             
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramIcon.Padding">
            <summary>
            Gets or sets Padding of the Expand/Collapse Icon.
            </summary>
            <remarks>
            Defines the space that the icon has to be moved from the icon border
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape=DiagramExpandIcons.Minus,
                            Padding = new DiagramThickness(){
                            Top = 1,
                            Bottom = 1,
                            Left = 1,
                            Right = 1,
                            }               
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramIcon.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramExpandIcon">
            <summary>
            Represents Expand icon of the node. 
            </summary>
            <remarks>
            DiagramExpandIcon is the Expand icon model that represents the state of the Node and also allows its Child Nodes to be Collapsed.  
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape = DiagramExpandIcons.Minus,
                        },
                        CollapseIcon= new DiagramCollapseIcon()
                        {
                            Shape = DiagramCollapseIcons.Plus,
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramExpandIcon.#ctor">
            <summary>
            Initializes a new instance of the Expand Icon.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramExpandIcon.#ctor(Syncfusion.Blazor.Diagram.DiagramExpandIcon)">
            <summary>
            Initializes a new instance of the Expand Icon which is the copy of a existing icon.
            </summary>
            <param name="src"/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramExpandIcon.Shape">
            <summary>
            Gets or sets the Shape of the Expand Icon. 
            </summary>
            <remarks>
            The Diagram provides some built-in <see cref="T:Syncfusion.Blazor.Diagram.DiagramExpandIcons"/>, such as Minus,ArrowUp,Template, etc. You can also add custom shapes such as Path Shape to the Expand Icon.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape = DiagramExpandIcons.Minus,
                        },
                        CollapseIcon= new DiagramCollapseIcon()
                        {
                            Shape = DiagramExpandIcons.Path,
                            PathData = "M100,200 C100,100 250,100 250,200 S400,300 400,200",
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramExpandIcon.Clone">
            <summary>
            Creates a new ExpandIcon that is a copy of the current ExpandIcon.
            </summary>
            <returns>ExpandIconShapeModel</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramCollapseIcon">
            <summary>
            Represents Collapse icon of the node. 
            </summary>
            <remarks>
            DiagramCollapseIcon is the Collapse icon model that represents the state of the Node and also allows its Child Nodes to be Expanded.  
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape = DiagramExpandIcons.Minus,
                        },
                        CollapseIcon= new DiagramCollapseIcon()
                        {
                            Shape = DiagramCollapseIcons.Plus,
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramCollapseIcon.#ctor">
            <summary>
            Initializes a new instance of the Collapse Icon.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramCollapseIcon.#ctor(Syncfusion.Blazor.Diagram.DiagramCollapseIcon)">
            <summary>
            Initializes a new instance of the Collapse Icon which is the copy of a existing icon.
            </summary>
            <param name="src"/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramCollapseIcon.Shape">
            <summary>
            Gets or sets the shape of the Collapse Icon. 
            </summary>
            <remarks>
            The Diagram provides some built-in <see cref="T:Syncfusion.Blazor.Diagram.DiagramCollapseIcons"/>, such as Plus,ArrowDown,Template, etc. You can also add custom shapes such as Path Shape to the Collapse Icon.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape = DiagramExpandIcons.Minus,
                        },
                        CollapseIcon= new DiagramCollapseIcon()
                        {
                            Shape = DiagramCollapseIcons.Plus,
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramCollapseIcon.Clone">
            <summary>
            Creates a new Collapse icon that is a copy of the current Collapse icon.
            </summary>
            <returns>CollapseIconShapeModel</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Node">
            <summary>
            Represents the shape that is used to visualize geometrical information. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.OutEdges">
            <summary>
            Gets information about the outgoing connectors of the node. 
            </summary>
            <remarks>
            It returns the ID of the outgoing connectors.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.InEdges">
            <summary>
            Gets information about the incoming connectors of the node. 
            </summary>
            <remarks>
            It returns the ID of the incoming connectors.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.#ctor">
            <summary>
            Initializes a new instance of the Node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.#ctor(Syncfusion.Blazor.Diagram.Node)">
            <summary>
            Creates a new instance of the Node from the given Node.
            </summary>
            <param name="src">Node</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.OffsetX">
            <summary>
            Gets or sets the X-coordinate of the node.
            </summary>
            <value> The default value is 0</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.OffsetY">
            <summary>
            Gets or sets the y-coordinate of the node.
            </summary>
            <value> The default value is 0</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Ports">
            <summary>
            Gets or sets a collection of PointPort (connection points). 
            </summary>
            <remarks>
            Ports act as the connection points between nodes and allow them to create connections with only those specific points. There may be any number of ports in a node. You can   modify the ports' appearance, visibility, positioning and can add custom shapes to them. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
               Ports = new DiagramObjectCollection<PointPort>()
               {
                   // Set the position for the port
                   new PointPort()
                   {
                       Style = new ShapeStyle() { Fill = "gray" }, 
                       Offset = new DiagramPoint() { X = 0.5, Y = 0.5 }, 
                       Visibility = PortVisibility.Visible
                   }
               }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Annotations">
            <summary>
            Represents the collection of textual information contained in the node.
            </summary>
            <remarks>
            The text found in the node can be edited at runtime. Users are able to modify the   style, visibility, width, height, and content of the annotation. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
               Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
               { 
                    new ShapeAnnotation 
                    { 
                        Content = "Node" 
                    }
               },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.FixedUserHandles">
            <summary>
            Gets or sets the collection of the fixed user handle of the node. 
            </summary>
            <remarks>
            The fixed user handles are used to add some frequently used commands around the node and connector even without selecting it. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                FixedUserHandles = new DiagramObjectCollection<NodeFixedUserHandle>()
                {
                    new NodeFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 20, 
                        Width = 20, 
                        Visibility = true,
                        Padding = new DiagramThickness() { Bottom = 1, Left = 1, Right = 1, Top = 1 }, 
                        Margin = new DiagramThickness() { Right = 20 },Offset = new DiagramPoint() { X = 0, Y = 0 }, 
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    },
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.IsExpanded">
            <summary>
            Defines whether the node is expanded or not 
            </summary>
            <value>true,which means node is expanded state; Otherwise, false.</value> 
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                IsExpanded = true,
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.ExpandIcon">
            <summary>
            Gets or sets the Expand Icon of the Node
            </summary>
            <remarks>
            Defines the Expand Icon that represents the Expanded State of the Node 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape = DiagramExpandIcons.Minus,
                        },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.CollapseIcon">
            <summary>
            Gets or sets the Collapse Icon of the Node
            </summary>
            <remarks>
            Defines the Collapse Icon that represents the Collapsed State of the Node 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ExpandIcon = new DiagramExpandIcon()
                        {
                            Shape = DiagramExpandIcons.Minus,
                        },
                        CollapseIcon= new DiagramCollapseIcon()
                        {
                            Shape = DiagramExpandIcons.Path,
                            PathData = "M100,200 C100,100 250,100 250,200 S400,300 400,200",
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Pivot">
            <summary>
            Node rotation angle will be based on pivot values which range from 0 to 1 like offset values. By default, the Pivot values are set to X= 0.5 and Y=0.5.
            </summary>
            <remarks>
            The below list explains the pivot values.  
            <table style = "border: none">
            <tr>
            <td style = "border: none"> 1. When X= 0 and Y= 0, OffsetX and OffsetY values are considered to be at the top-left corner of the node.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. When X= 0.5 and Y= 0.5, OffsetX and OffsetY values are considered to be at the node’s center point.</td>
            </tr>      
            <tr>
            <td style = "border: none"> 3. When X= 1 and Y= 1, OffsetX and OffsetY values are considered to be at the bottom-right corner of the node.</td>
            </tr>      
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        Pivot = new DiagramPoint() { X = 0, Y = 0.5 },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Width">
            <summary>
            Gets or sets the width of the node. If it is not specified, the node renders based on the content's width. 
            </summary>
            <remarks>
            The width of a node does not include borders or margins.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        Pivot = new DiagramPoint() { X = 0, Y = 0.5 },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Height">
            <summary>
            Gets or sets the height of the node. If it is not specified, the node renders based on the content's height.
            </summary>
            <remarks>
            The height of a node does not include borders or margins. 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        Pivot = new DiagramPoint() { X = 0, Y = 0.5 },
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MinWidth">
            <summary>
            Gets or sets the minimum width of the node. 
            </summary>
            <value> The default value is undefined</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        MinWidth = 50,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MinHeight">
            <summary>
            Gets or sets the minimum height of the node. 
            </summary>
            <value> The default value is undefined</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        MinHeight = 50,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MaxWidth">
            <summary>
            Gets or sets the maximum width of the node.
            </summary>
            <value> The default value is undefined</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        MaxWidth = 120,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MaxHeight">
            <summary>
            Gets or sets the maximum height of the node. 
            </summary>
            <value> The default value is undefined</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        MaxHeight = 120,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.RotationAngle">
            <summary>
            Gets or sets the rotation angle of the node. 
            </summary>
            <value> The default value is 0</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        RotationAngle = 50,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Style">
            <summary>
            Represents the appearance of the node. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        //Set the type of shape as flow
                        Style = new ShapeStyle() 
                        {
                            Fill = "#6BA5D7", 
                            StrokeDashArray = "5,5", 
                            StrokeColor = "red", 
                            StrokeWidth = 2 
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Shadow">
            <summary>
            Gets or sets the shadow appearance of a node. 
            </summary>
            <remarks>
            The Shadow effect on a node is disabled by default. It can be enabled with the constraint property of the node. The Angle, Distance, and Opacity of the shadow can be customized. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Constraints = NodeConstraints.Default | NodeConstraints.Shadow,
                Shadow = new Shadow()
                {
                    Angle = 50,
                    Color = "Blue",
                    Opacity = 0.8,
                    Distance = 20
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.BackgroundColor">
            <summary>
            Gets or sets the node's background color. By default, it is transparent.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                       BackgroundColor = "red",
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.BorderColor">
            <summary>
            Gets or sets the border color of the node.
            </summary>
            <value> The default value is black</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                       BorderColor = "Orange",
                       BorderWidth = 20,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.BorderWidth">
            <summary>
            Gets or sets the border width of the node.
            </summary>
            <value> The default value is 1px</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                       BorderColor = "Orange",
                       BorderWidth = 20,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Data">
            <summary>
            Returns the record of the data source as data. Each record on the data source represents a node in an automatic layout.
            </summary>
            <remarks>
            Nodes can be generated automatically with the information provided through the data. This is applicable only while using an automatic layout. You can get the datasource details in a node through the data. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="600px" NodeCreating="@OnNodeCreating" >
                <DataSourceSettings Id = "Id" ParentId="ParentId" DataSource="@DataSource"/>
                    <Layout Type = "LayoutType.MindMap" >
                    </Layout>
            </SfDiagramComponent>
            
            @code
            {
                private void OnNodeCreating(IDiagramObject obj)
                {
                    MindMapDetails mindMapData = node.Data as MindMapDetails;
                    node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                    {
                        new ShapeAnnotation()
                        {
                            Content = mindMapData.Label
                        }
                    };
                }
                public class MindMapDetails
                {
                    public string Id { get; set; }
                    public string Label { get; set; }
                    public string ParentId { get; set; }
                    public string Branch { get; set; }
                    public string Fill { get; set; }
                }
                public object DataSource = new List<object>()
                {
                    new MindMapDetails() { Id = "1",Label = "Creativity", ParentId = "", Branch = "Root"},
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Shape">
            <summary>
            Gets or sets the geometrical representation of a node. 
            </summary>
            <remarks>
             The Diagram provides some built-in shapes, such as BasicShape, FlowShape, Path, etc. You can also add custom shapes to the node.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        //Set the type of shape as flow
                        Shape = new FlowShape()
                        {
                            Type = NodeShapes.Flow,
                            Shape = NodeFlowShapes.DirectData
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Constraints">
            <summary>
            Enables or disables certain features of the node. By default, all the interactive functionalities are enabled. 
            </summary>
            <remarks>
            Features like dragging, resizing, and rotation of the node can be disabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
               ID = "node1",
               Height = 100,
               Width = 100,
               OffsetX = 100,
               OffsetY = 100,
               Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "White" },
               //set the NodeConstraints constraints...
               Constraints = NodeConstraints.Default & ~NodeConstraints.Rotate
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the node. 
            </summary>
            <value> The default value will be Center</value> 
            <remarks>
            Describes how a node should be positioned or stretched in HorizontalAlignment. 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                       HorizontalAlignment = HorizontalAlignment.Right,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the node. 
            </summary>
            <value> The default value will be Center</value> 
            <remarks>
            Describes how a node should be positioned or stretched in VerticalAlignment. 
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                       VerticalAlignment = VerticalAlignment.Center,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.Init(Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            Allows to initialize the UI of a node
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitContainer">
            <summary>
            Initialize the container for the node
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitPorts(Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            To initialize the ports collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitPort(Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.PointPort,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            To initialize the port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitPortWrapper(Syncfusion.Blazor.Diagram.Port,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            To initialize the portwrapper.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitAnnotations(Syncfusion.Blazor.Diagram.DiagramContainer,System.Nullable{System.Boolean})">
            <summary>
            To initialize the annotaions.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitExpandCollapseIcon(Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            To initialize the expand and collapse icon.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitIconSymbol(Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.DiagramIcon,Syncfusion.Blazor.Diagram.DiagramContainer,Syncfusion.Blazor.Diagram.Internal.DiagramDictionary)">
            <summary>
            To initialize the icon symbol.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitIconContainer(Syncfusion.Blazor.Diagram.DiagramIcon,Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            To initialize the Icon container.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.GetIconOffSet(Syncfusion.Blazor.Diagram.Layout,Syncfusion.Blazor.Diagram.DiagramIcon)">
            <summary>
            To get icon offset value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitFixedUserHandles(Syncfusion.Blazor.Diagram.NodeFixedUserHandle)">
            <summary>
            To initialize fixed userhandles.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitFixedUserHandlesSymbol(Syncfusion.Blazor.Diagram.NodeFixedUserHandle,Syncfusion.Blazor.Diagram.DiagramCanvas)">
            <summary>
            To initialize fixed userhandles symbols.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.GetFixedUserHandleOffset(Syncfusion.Blazor.Diagram.NodeFixedUserHandle)">
            <summary>
            To get fixed userhandles offset.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitAnnotationWrapper(Syncfusion.Blazor.Diagram.Annotation,System.Nullable{System.Boolean})">
            <summary>
            To initialize the annotation wrapper.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.Clone">
            <summary>
            Creates a new object that is a copy of the current node. 
            </summary>
            <returns>Node</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeGroup">
            <summary>
            Represents a cluster of multiple nodes and connectors into a single element. It acts like a container for its children (nodes, groups, and connectors).
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "500px" @ref="diagram" Nodes="@nodes">
            </SfDiagramComponent>
            @code
            {
                SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = createNode("node1", 100, 100);
                    Node node2 = createNode("node2", 300, 100);
                    NodeGroup groupNode = new NodeGroup();
                    // Grouping node 1 and node 2 into a single group
                    groupNode.Children = new string[] { "node1", "node2" };
                    nodes.Add(node1);
                    nodes.Add(node2);
                    nodes.Add(groupNode);
                }
                public Node createNode(string id, double offsetX, double offsetY)
                {
                    Node node = new Node()
                    {
                        ID = id,
                        OffsetX = offsetX,
                        OffsetY = offsetY,
                        Height = 100,
                        Width = 100,
                        Style = new ShapeStyle() { Fill = "#6495ED" }
                    };
                    return node;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeGroup"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeGroup.#ctor(Syncfusion.Blazor.Diagram.NodeGroup)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeGroup"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.NodeGroup"/>.
            </summary>
            <param name="src"></param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeGroup.Children">
            <summary>
            Gets or sets the children of the group element
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "500px" @ref="diagram" Nodes="@nodes">
            </SfDiagramComponent>
            @code
            {
                SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node1 = createNode("node1", 100, 100);
                    Node node2 = createNode("node2", 300, 100);
                    NodeGroup groupNode = new NodeGroup();
                    // Grouping node 1 and node 2 into a single group
                    groupNode.Children = new string[] { "node1", "node2" };
                    nodes.Add(node1);
                    nodes.Add(node2);
                    nodes.Add(groupNode);
                }
                public Node createNode(string id, double offsetX, double offsetY)
                {
                    Node node = new Node()
                    {
                        ID = id,
                        OffsetX = offsetX,
                        OffsetY = offsetY,
                        Height = 100,
                        Width = 100,
                        Style = new ShapeStyle() { Fill = "#6495ED" }
                    };
                    return node;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeGroup.Clone">
            <summary>
            Creates a new object that is a copy of the current group.
            </summary>
            <returns>Group</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeGroup.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Port">
            <summary>
            Represents a port or connection point of the node. 
            </summary>
            <remarks>
            Ports act as the connection points of node and allow them to create connections with only those specific points. There may be any number of ports in a node. You can able to modify the ports appearance, visibility, positioning, and can add custom shapes to it.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize port collection
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        Style = new ShapeStyle() { Fill = "gray" }, 
                        Offset = new DiagramPoint() { X = 0.5, Y = 0.5 }, 
                        Visibility = PortVisibility.Visible
                    }
                }
            };
            ]]>
            </code>
            </example>
            <see cref="T:Syncfusion.Blazor.Diagram.PointPort"/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Port.#ctor(Syncfusion.Blazor.Diagram.Port)">
            <summary>
            Creates a new instance of the Port from the given Port.
            </summary>
            <param name="src">Port</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Port.#ctor">
            <summary>
            Initializes a new instance of the Port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.ID">
            <summary>
            Represents the unique id of the diagram object. 
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">1. The ID needs to be unique. While creating a port, the user should not use the same id to other ports.</td>
            </tr>
            <tr>
            <td style = "border: none">2. The ID needs to be unique. While creating a port, the user should not use the same id to other ports.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port",
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.HorizontalAlignment">
            <summary>
            Sets the horizontal alignment of the port with respect to its immediate parent(node/connector)
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port",
                        HorizontalAlignment = HorizontalAlignment.Stretch,
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the port to its immediate parent(node/connector). 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port", 
                        VerticalAlignment = VerticalAlignment.Stretch,
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Margin">
            <summary>
            Defines the space from the actual offset values of the port. The default values for the Margin are 0 on all sides. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port", 
                        Margin = new DiagramThickness(){ Left = 5, Top = 5, Bottom = 5, Right = 5},
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Width">
            <summary>
            Gets or sets the width of the port.
            </summary>
            <value>The default value is 12px.</value>
            <remarks>
            The width of a port does not include borders or margins.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port",
                         Width = 10,
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Height">
            <summary>
             Sets the height of the port
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port",
                        Height = 10,
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Style">
            <summary>
            Represents the appearance of the port. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port",
                        Height = 10,
                        Style = new ShapeStyle() { Fill = "gray" }, 
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Shape">
            <summary>
            Represents the shape (built-in shape) of the port.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.PortShapes.Square"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The below list of shape types is used to define the port shape.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   X - Sets the shape to X.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Circle - Sets the shape to Circle. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Square - Sets the shape to Square. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Custom - Sets the shape to Custom..</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port",
                        Shape = PortShapes.Circle,
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Visibility">
            <summary>
            Represents the visibility of the port. By default, the port becomes visible when the mouse hovers over the node. 
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.PortVisibility.Visible"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">  The below list of options is used to control the visibility of the ports. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Visible - Default value. The port is visible</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Hidden - The port is hidden.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Hover - Shows the port when the mouse hovers a node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Connect - Shows the port when a connection endpoint is dragged over a node.  </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port", 
                        Visibility = PortVisibility.Visible
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.PathData">
            <summary>
            Represents the custom geometry(shape) of the port. 
            </summary>
            <remarks>
            To create a custom-shaped port, the user must set the shape to ‘custom’ and then the PathData. (A custom graphics path is a set of connected lines, curves, and other simple graphics objects, including rectangles, ellipses, and text. A path works as a single graphics object, so any effect applied to the graphic path will also be applied to the port..) 
            </remarks>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port",
                        Shape = PortShapes.Custom,
                        PathData = "M100,200 C100,100 250,100 250,200 S400,300 400,200",
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Constraints">
            <summary>
            Defines the constraints of port
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port",
                        Constraints = PortConstraints.Default,
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.AdditionalInfo">
            <summary>
            Gets or sets the custom properties of a port.
            </summary>
            <remarks>
            Enables the user to store data of any data type. It will be serialized and deserialized automatically while saving and opening the diagram. 
            </remarks>
            <example>
            <code>
            <![CDATA[
             Dictionary<string, object> dict = new Dictionary<string, object>();
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        ID = "port",
                        AdditionalInfo = dict,
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.OutEdges">
            <summary>
            Defines the collection of connectors that are connected to the port. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.InEdges">
            <summary>
            Defines the collection of connectors that are connected to the port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Port.Clone">
            <summary>
            Creates a new port that is a copy of the current port.
            </summary>
            <returns>Port</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Port.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PointPort">
            <summary>
            Defines the behavior of a port (connection point) that sticks to a point. 
            </summary>
            <remarks>
            Ports act as the connection points of node and allow them to create connections with only those specific points. There may be any number of ports in a node. You can able to modify the Ports appearance, visibility, positioning, and can add custom shapes to it.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                // Initialize port collection
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                    Style = new ShapeStyle() { Fill = "gray" }, 
                    Offset = new DiagramPoint() { X = 0.5, Y = 0.5 }, 
                    Visibility = PortVisibility.Visible
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PointPort.#ctor(Syncfusion.Blazor.Diagram.PointPort)">
            <summary>
            Creates a new instance of the PointPort from the given PointPort.
            </summary>
            <param name="src">PointPort</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PointPort.#ctor">
            <summary>
            Initializes a new instance of the PointPort.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PointPort.Offset">
            <summary>
            Defines the position of the port with respect to the boundaries of node.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                Ports = new DiagramObjectCollection<PointPort>()
                {
                    // Sets the position for the port
                    new PointPort() 
                    { 
                        Style = new ShapeStyle() { Fill = "gray" }, 
                        Offset = new DiagramPoint() { X = 0.5, Y = 0.5 }, 
                        Visibility = PortVisibility.Visible
                    }
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PointPort.Clone">
            <summary>
            Creates a new object that is a copy of the current port. 
            </summary>
            <returns>PointPort</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PointPort.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Shape">
            <summary>
            Defines the behavior of shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shape.#ctor(Syncfusion.Blazor.Diagram.Shape)">
            <summary>
            Creates a new instance of the Shape from the given Shape.
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shape.#ctor">
            <summary>
            Initializes a new instance of the Shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shape.Type">
            <summary>
            Gets or sets the type of node shape.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                Shape = new BasicShape() { Shape = NodeBasicShapes.Plus, Type = NodeShapes.Basic },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shape.Clone">
            <summary>
            Creates a new Shape that is a copy of the current Shape. 
            </summary>
            <returns>it returns  shape</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shape.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorShape">
            <summary>
            Represents the shape of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorShape.#ctor(Syncfusion.Blazor.Diagram.ConnectorShape)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorShape"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.ConnectorShape"/>.
            </summary>
            <param name="src">ConnectorShape</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorShape"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorShape.Clone">
            <summary>
            Creates a new connector shape that is a copy of the current shape.
            </summary>
            <returns>it returns  connector shape</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorShape.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnFlow">
            <summary>
            Represents the elements that are connected together to form a complete process flow in the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1", 
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 }, 
                TargetPoint = new DiagramPoint() { X = 300, Y = 200 }, 
                Type = ConnectorSegmentType.Straight, 
                Shape = new BpmnFlow() 
                { 
                    Type = ConnectorShapes.Bpmn,
                    Flow = BpmnFlowType.SequenceFlow,
                } 
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnFlow.#ctor(Syncfusion.Blazor.Diagram.BpmnFlow)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnFlow"/> class.
            </summary>
            <param name="src">BpmnFlow</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnFlow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnFlow"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnFlow.Flow">
            <summary>
             Gets or Sets the type of the Bpmn flows. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnFlowType"/> enumeration that specifies the type of flow in process.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnFlowType.SequenceFlow"/>. 
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnFlow.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.BpmnFlow"/> that is a copy of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnFlow"/> BpmnFlow. 
            </summary>
            <returns>it reurns <see cref="T:Syncfusion.Blazor.Diagram.BpmnFlow"/></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnFlow.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PathShape">
            <summary>
            Draws a series of connected lines and curves.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathShape.#ctor(Syncfusion.Blazor.Diagram.PathShape)">
            <summary>
            Creates a new instance of the Path from the given Path.
            </summary>
            <param name="src">Path</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathShape.#ctor">
            <summary>
            Initializes a new instance of the Path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathShape.Data">
            <summary>
            Gets or sets a Geometry that specifies the shape to be drawn.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                Shape = new PathShape() { Type=NodeShapes.Path, Data="M540.3643,137.9336L546.7973,159.7016L570.3633,159.7296L550.7723,171.9366L558.9053,194.9966L540.3643,179.4996L521.8223,194.9966L529.9553,171.9366L510.3633,159.7296L533.9313,159.7016L540.3643,137.9336z"},
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathShape.Clone">
            <summary>
            Creates a new path data that is a copy of the current path data.
            </summary>
            <returns> it reurns Path</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathShape.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ImageShape">
            <summary>
            Represents the behavior of the image shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageShape.#ctor">
            <summary>
            Initializes a new instance of the Image.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageShape.#ctor(Syncfusion.Blazor.Diagram.ImageShape)">
            <summary>
            Creates a new instance of the Image from the given Image.
            </summary>
            <param name="src">Image</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageShape.Source">
            <summary>
            Gets or sets the ImageSource of the image. 
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                Shape = new ImageShape() { Type = NodeShapes.Image,ImageAlign=ImageAlignment.XMaxYMax,Scale= DiagramScale.Meet, Source = "https://i.imgur.com/Rr1jAAn.jpg" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageShape.ImageAlign">
            <summary>
            Sets the alignment of the image within the node boundary.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                Shape = new ImageShape() { Type = NodeShapes.Image,ImageAlign=ImageAlignment.XMaxYMax,Scale= DiagramScale.Meet, Source = "https://i.imgur.com/Rr1jAAn.jpg" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageShape.Scale">
            <summary>
            Allows you to stretch the image as you desire (either to maintain the proportion or to stretch).
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                Shape = new ImageShape() { Type = NodeShapes.Image,ImageAlign=ImageAlignment.XMaxYMax,Scale= DiagramScale.Meet, Source = "https://i.imgur.com/Rr1jAAn.jpg" },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageShape.Clone">
            <summary>
            Creates a new image that is a copy of the current image.
            </summary>
            <returns>it returns Image</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageShape.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BasicShape">
            <summary>
            Gets or sets the behavior of the basic shape.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                Shape = new BasicShape() { Shape = NodeBasicShapes.Plus, Type = NodeShapes.Basic },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BasicShape.#ctor">
            <summary>
            Initializes a new instance of the BasicShape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BasicShape.#ctor(Syncfusion.Blazor.Diagram.BasicShape)">
            <summary>
            Creates a new instance of the BasicShape from the given BasicShape.
            </summary>
            <param name="src">BasicShape</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BasicShape.Shape">
            <summary>
            Defines the available built-in basic shapes.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                Shape = new BasicShape() { Shape = NodeBasicShapes.Plus, Type = NodeShapes.Basic },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BasicShape.CornerRadius">
            <summary>
            Gets or sets the corner radius of the node shape. It is applicable only to a rectangle shape.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                Shape = new BasicShape() {CornerRadius = 20, Shape = NodeBasicShapes.Plus, Type = NodeShapes.Basic },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BasicShape.Points">
            <summary>
            Defines the collection of points to draw a polygon. It is applicable only to a polygon shape.
            </summary>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" },
                Shape = new BasicShape() {Type=NodeShapes.Basic, Shape=NodeBasicShapes.Polygon,
                 Points= new DiagramPoint[]{new DiagramPoint() { X=35},new DiagramPoint() { X=65 },new DiagramPoint() { X = 100, Y=35 },
                 new DiagramPoint() { X = 100, Y = 65 }, new DiagramPoint() { X = 65, Y=100 },
                 new DiagramPoint() { X = 35, Y=100 },new DiagramPoint() { Y=65 },new DiagramPoint{ Y=35 }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BasicShape.Clone">
            <summary>
            Creates a new shape that is a copy of the current basic shape.
            </summary>
            <returns>it returns basich shapes</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BasicShape.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextShape">
            <summary>
            Represents the TextShape allows the user to draw node in the diagram with the shape of text based on the user’s preference  
            </summary>
            <example>
            <code>
            <![CDATA[
            Node builtInNode = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Shape = new TextShape()
                {
                    Content="Text Content"
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextShape.#ctor">
            <summary>
            Initializes a new instance of the TextShape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextShape.#ctor(Syncfusion.Blazor.Diagram.TextShape)">
            <summary>
            Creates a new instance of the TextShape from the given TextShape.
            </summary>
            <param name="src">BasicShape</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShape.Content">
            <summary> 
            Gets or sets the content to be displayed as a Text Node. 
            </summary> 
            <value> Property <c>Content</c> represents the content to be displayed as a TextNode  
            </value> 
            <example>
            <code>
            <![CDATA[
            Node builtInNode = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Shape = new TextShape()
                {
                    Content="Text Content"
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextShape.Clone">
            <summary>
            Creates a new shape that is a copy of the current Text shape.
            </summary>
            <returns> it returns TextShape</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextShape.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FlowShape">
            <summary>
            Specifies the behavior of the flow shape.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        //Set the type of shape as flow
                        Shape = new FlowShape()
                        {
                            Type = NodeShapes.Flow,
                            Shape = NodeFlowShapes.DirectData
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FlowShape.#ctor">
            <summary>
            Initializes a new instance of the FlowShape.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FlowShape.#ctor(Syncfusion.Blazor.Diagram.FlowShape)">
            <summary>
            Creates a new instance of the FlowShape from the given FlowShape.
            </summary>
            <param name="src">FlowShape</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FlowShape.Shape">
            <summary>
            Defines the available built-in flow shapes.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                //Initialize the node collection with node
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                        //Set the type of shape as flow
                        Shape = new FlowShape()
                        {
                            Type = NodeShapes.Flow,
                            Shape = NodeFlowShapes.DirectData
                        }
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FlowShape.Clone">
            <summary>
            Creates a new shape that is a copy of the current FlowShape.
            </summary>
            <returns>it returns FlowShape</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnEvent">
            <summary>
            Represents with circle shape that describe something happended during the course of  a process.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnEvent() 
                { 
                    EventType = BpmnEventType.Intermediate, 
                    Trigger = BpmnEventTrigger.None 
                }
            };
            ]]>
            </code>
            </example>
            <remarks>
            In BPMN, the events are expressed as circles in the diagram. 
            When an event occurs at the start, finish, or middle of a process, it is referred to as an event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnEvent.#ctor(Syncfusion.Blazor.Diagram.BpmnEvent)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnEvent"/> class.
            </summary>
            <param name="src">BpmnEvent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnEvent"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnEvent.EventType">
            <summary>
            Gets or sets the type of the event occurs. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnEventType"/> enumeration that specifies the type event performed during the course of a process.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnEventType.Start"/>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnEvent.Trigger">
            <summary>
            Gets or sets the type of the trigger. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnEventTrigger"/> enumeration that specifies the Trigger that starts the Event.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnEventTrigger.None"/>. 
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnEvent.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.BpmnEvent"/> that is a copy of the current <see cref="T:Syncfusion.Blazor.Diagram.BpmnEvent"/>. 
            </summary>
            <returns>it returns <see cref="T:Syncfusion.Blazor.Diagram.BpmnEvent"/></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnGateway">
            <summary>
            Represents the control as well as merge and split the process flow in the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnGateway() 
                { 
                    GatewayType = BpmnGatewayType.None
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnGateway.#ctor(Syncfusion.Blazor.Diagram.BpmnGateway)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnGateway"/> class.
            </summary>
            <param name="src">BpmnGateway</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnGateway.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnGateway"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnGateway.GatewayType">
            <summary>
            Gets or sets the type of the BPMN Gateway. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnGatewayType"/> enumeration that specifies the type of Controls imposed in the flow of process.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnGatewayType.None"/>. 
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnGateway.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.BpmnGateway"/> that is a copy of the current <see cref="T:Syncfusion.Blazor.Diagram.BpmnGateway"/>. 
            </summary>
            <returns>it returns <see cref="T:Syncfusion.Blazor.Diagram.BpmnGateway"/></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDataObject">
            <summary>
            Represents the flow of data through the process in the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnDataObject() 
                { 
                    DataObjectType = BpmnDataObjectType.Input, 
                    IsCollectiveData = true, 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDataObject.#ctor(Syncfusion.Blazor.Diagram.BpmnDataObject)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataObject"/> class.
            </summary>
            <param name="src">BpmnDataObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDataObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataObject"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnDataObject.DataObjectType">
            <summary>
            Gets or sets the type of the BPMN data object. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataObjectType"/> enumeration that specifies the type infromation in the process.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnDataObjectType.None"/>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnDataObject.IsCollectiveData">
            <summary>
             Gets or sets the value indicating whether the data object is a collection of information or not. 
            </summary>
            <value>
            <b>true</b> if the Data Object is a collection of informantion; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDataObject.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataObject"/> that is a copy of the current <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataObject"/>. 
            </summary>
            <returns>it returns <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataObject"/></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDataStore">
            <summary>
            Represents the storing or access of data associated with business processs. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnDataStore() 
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDataStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnDataStore.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataStore"/> that is a copy of the current <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataStore"/>. 
            </summary>
            <returns>it returns <see cref="T:Syncfusion.Blazor.Diagram.BpmnDataStore"/></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnMessage">
            <summary>
            Represents the transferring of information into or out of an Activity in the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnMessage() 
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnMessage"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnMessage.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.BpmnMessage"/> object that is a copy of the current <see cref="T:Syncfusion.Blazor.Diagram.BpmnMessage"/> object. 
            </summary>
            <returns>it returns <see cref="T:Syncfusion.Blazor.Diagram.BpmnMessage"/></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTextAnnotation">
            <summary>
            Represents the information about the any Bpmn element in the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnTextAnnotation() 
                { 
                    TextAnnotationTarget = TextAnnotationTarget.Auto,
                    TextAnnotationTarget = "node2" 
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnTextAnnotation.#ctor(Syncfusion.Blazor.Diagram.BpmnTextAnnotation)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnTextAnnotation"/> class.
            </summary>
            <param name="src">BpmnTextAnnotation</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnTextAnnotation.#ctor">
            <summary>
            Initializes a new instance of the BpmnTextAnnotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTextAnnotation.TextAnnotationDirection">
            <summary>
            Gets or sets the direction of the text annotation with respect to target. 
            </summary>
            <value>
            One of the <see cref="P:Syncfusion.Blazor.Diagram.BpmnTextAnnotation.TextAnnotationDirection"/> enumeration that specifies the Direction of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnTextAnnotation"/> Node.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.TextAnnotationDirection.Left"/>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTextAnnotation.TextAnnotationTarget">
            <summary>
            Gets or sets the target Bpmn element to the current text annotation.
            </summary>
            <value>
            The sting value represents the unique ID of the target element that defines the target of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnTextAnnotation"/>.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnTextAnnotation.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.BpmnTextAnnotation"/> that is a copy of the current <see cref="T:Syncfusion.Blazor.Diagram.BpmnTextAnnotation"/>  object. 
            </summary>
            <returns>it returns <see cref="T:Syncfusion.Blazor.Diagram.BpmnTextAnnotation"/></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess">
            <summary>
            Represents the Expanded SubProcess that exposes its flow details with in the context of its parent process. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnExpandedSubProcess() 
                { 
                    IsCall = true,
                    IsCompensation = true, 
                    Loop = BpmnLoopCharacteristic.Standard,
                    IsAdhoc = true,
                    SubProcessType = BpmnSubProcessTypes.Transaction
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess.#ctor(Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess"/> class.
            </summary>
            <param name="src">BpmnActivity</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess.Children">
            <summary>
            Gets or sets the set of Children categorized together in the Expandedsubprocess.
            </summary>
            <value>
            The values in this collections defines the process performed inside the specified Expanded SubPorcess/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess.Loop">
            <summary>
            Gets or sets the loop characteristics of Expanded Subprocess. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic"/> enumeration that specifies the type of the Loop performed.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic.None"/>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess.IsCompensation">
            <summary>
            Gets or sets the value indicating whether the collection of ExpandedSubProcess, describe some parts of the compensation method. 
            </summary>
            <value>
            <b>true</b> if the Expanded SubProcess performs Compensation; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess.SubProcessType">
            <summary>
            Gets or sets the specific type of the subprocess.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnSubProcessType"/> enumeration that specifies the type of the subprocess performed.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnSubProcessType.Default"/>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess.IsAdhoc">
            <summary>
            Gets or sets the value indicating whether the ExpandedSubProcess is without any prescribed order or not. 
            </summary>
            <value>
            <b>true</b> if the Expanded SubProcess performs AdHoc operation; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess"/> that is a copy of the current <see cref="T:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess"/>. 
            </summary>
            <returns>it returns <see cref="T:Syncfusion.Blazor.Diagram.BpmnExpandedSubProcess"/> </returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnActivity">
            <summary>
            Represents the work that a company or organization performs in a business process using a node in the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnActivity() 
                { 
                    ActivityType = BpmnActivityType.Task, 
                    TaskType = BpmnTaskType.Service,
                    IsCall = true,
                    ISCompensationActivity = true, 
                    Loop = BpmnLoopCharacteristic.Standard,
                }
            };
            ]]>
            </code>
            </example>
            <remarks>
            The activity can be either <see cref="F:Syncfusion.Blazor.Diagram.BpmnActivityType.Task"/> or <see cref="F:Syncfusion.Blazor.Diagram.BpmnActivityType.CollapsedSubProcess"/> 
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnActivity.#ctor(Syncfusion.Blazor.Diagram.BpmnActivity)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/> class.
            </summary>
            <param name="src">BpmnActivity</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnActivity.#ctor">
            <summary>
            Initializes a new instance of the BpmnActivity.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.ActivityType">
            <summary>
            Gets or sets the type of <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/> shape.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivityType"/> enumeration that specifies type of activity performed by the <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/> Node. 
            The Default value is <see cref="F:Syncfusion.Blazor.Diagram.BpmnActivityType.Task"/>
            </value>
            <remarks>
            Represents the process that is external to the current process definition.
            It allows you to create a reusable process definition that can be reused in multiple other process definitions. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.TaskType">
            <summary>
            Gets or sets the type of the Task to be performed. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnTaskType"/> enumeration that specifies the type of the Task performed.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnTaskType.None"/>. 
            </value>
            <remarks>
            This property is only applicable for <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/> shape Node where <see cref="P:Syncfusion.Blazor.Diagram.BpmnActivity.ActivityType"/> is <see cref="F:Syncfusion.Blazor.Diagram.BpmnActivityType.Task"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.Loop">
            <summary>
            Gets or sets the loop characteristics of an <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/> shape. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic"/> enumeration that specifies the type of the Loop performed.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnLoopCharacteristic.None"/>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.IsCall">
            <summary>
            Gets or sets the value indicating whether the Activity defined in a process that is external to the current process definition. 
            </summary>
            <value>
            <b>true</b> if the activity performs call operation; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <remarks>
            This property is only applicable for <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/> shape Node where <see cref="P:Syncfusion.Blazor.Diagram.BpmnActivity.ActivityType"/> is <see cref="F:Syncfusion.Blazor.Diagram.BpmnActivityType.Task"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.IsCompensation">
            <summary>
            Gets or sets the value indicating whether the collection of tasks, describe some parts of the compensation method. 
            </summary>
            <value>
            <b>true</b> if the activity performs Compensation; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.SubProcessType">
            <summary>
            Gets or sets the specific type of the subprocess to be performed.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnSubProcessType"/> enumeration that specifies the type of the subprocess performed.
            The default type is <see cref="F:Syncfusion.Blazor.Diagram.BpmnSubProcessType.Default"/>. 
            </value>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnActivity() 
                { 
                    ActivityType = BpmnActivityType.Subprocess, 
                    IsCompensation = true, 
                    SubProcessType = BpmnSubProcessType.Transaction,
                }
            };
            ]]>
            </code>
            </example>
            <remarks>
            This property is only applicable for <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/> shape Node where <see cref="P:Syncfusion.Blazor.Diagram.BpmnActivity.ActivityType"/> is <see cref="F:Syncfusion.Blazor.Diagram.BpmnActivityType.CollapsedSubProcess"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.IsAdhoc">
            <summary>
            Gets or sets the value indicating whether the sub process is without any prescribed order or not. 
            </summary>
            <value>
            <b>true</b> if the activity performs AdHoc operation; otherwise, <b>false</b>.The default value is <b>false</b>.
            </value>
            <example>
            <code>
            <![CDATA[
            Node node = new Node()
            {
                ID = "node1",          
                Width = 70,
                Height = 70, 
                OffsetX = 100,
                OffsetY = 300,
                Shape = new BpmnActivity() 
                { 
                    ActivityType = BpmnActivityType.Subprocess, 
                    IsCompensation = true, 
                    SubProcessType = BpmnSubProcessType.Transaction,
                    IsAdhoc = true
                }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.BpmnActivity.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/> that is a copy of the <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/>. 
            </summary>
            <returns>it returns <see cref="T:Syncfusion.Blazor.Diagram.BpmnActivity"/></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramSelectionSettings">
            <summary>
            Represents a visual representation of the selected elements. It behaves like a container for single or multiple selected elements. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Nodes">
            <summary>
            Specifies the collection of selected nodes.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" Height="600px" Nodes="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                    diagram.SelectionSettings.Nodes[0].Constraints |= NodeConstraints.AspectRatio;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Connectors">
            <summary>
            Specifies the collection of selected connectors.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" Height="600px" Connectors="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
                protected override void OnInitialized()
                {
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
                    connectors.Add(connector);
                    diagram.SelectionSettings.Connectors[0].Constraints |= ConnectorConstraints.Delete;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Width">
            <summary>
            Gets or sets the width of the selection region. Its value differs based on the selected region.
            </summary>  
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" SelectionSettings="@select" Height="600px" Nodes="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                    DiagramSelectionSettings select = new DiagramSelectionSettings() { Width =100, Height=150 };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Height">
            <summary>
            Gets or sets the height of the selected region.
            </summary>  
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" SelectionSettings="@select" Height="600px" Nodes="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                    DiagramSelectionSettings select = new DiagramSelectionSettings() { Width =100, Height=150 };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.OffsetX">
            <summary>
            Gets or sets the X-coordinate of the selected region. Its value may vary based on the selected region.
            </summary> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" SelectionSettings="@select" Height="600px" Nodes="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                    DiagramSelectionSettings select = new DiagramSelectionSettings() {OffsetX = 100, Width =100, Height=150 };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.OffsetY">
            <summary>
            Gets or sets the Y-coordinate of the selected region. Its value differs based on the selected region.
            </summary>  
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" SelectionSettings="@select" Height="600px" Nodes="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                    DiagramSelectionSettings select = new DiagramSelectionSettings() {OffsetY = 100,OffsetX = 100, Width =100, Height=150 };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.RotationAngle">
            <summary>
            Gets or sets the angle at which the node should be rotated. 
            </summary>  
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" SelectionSettings="@select" Height="600px" Nodes="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                    DiagramSelectionSettings select = new DiagramSelectionSettings() {RotationAngle = 60,OffsetY = 100,OffsetX = 100, Width =100, Height=150 };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Pivot">
            <summary>
            Gets or sets the ratio/fractional value relative to the node, based on which the node will be transformed (positioning, scaling, and rotation). 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" SelectionSettings="@select" Height="600px" Nodes="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                    DiagramSelectionSettings select = new DiagramSelectionSettings() {Pivot = new DiagramPoint() { X = 0.5, Y = 0.5 }, Width =100, Height=150 };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.UserHandles">
            <summary>
            Defines the collection of UserHandles.
            </summary>  
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" SelectionSettings="@select" Height="600px" Nodes="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                 DiagramObjectCollection<UserHandle> handles = new DiagramObjectCollection<UserHandle>()
                 { new UserHandle(){ Name= "handle1", PathData= "M10.13,0 L1.45,0 C0.66,0,0,0.55,0,1.26 L0,10 L1.45,10 L1.45,1.26 L10.1,1.26 L10.1,0 Z M12.3,2.49 L4.36,2.49 C3.57,2.49,2.91,3.04,2.91,3.75 L2.91,12.49 C2.91,13.18,3.54,13.75,4.36,13.75 L12.3,13.75 C13.09,13.75,13.75,13.2,13.75,12.49 L13.75,3.75 C13.72,3.07,13.09,2.49,12.3,2.49 Z M12.3,12.47 L4.36,12.47 L4.36,3.75 L12.3,3.75 L12.3,12.47 Z"};
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                    DiagramSelectionSettings select = new DiagramSelectionSettings() {UserHandles=handles};
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.RubberBandSelectionMode">
            <summary>
            Specifies whether the diagram objects can be selected when the selection region intersects with the objects or only when the complete object's bounds are within the selection region.
            </summary> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" SelectionSettings="@select" Height="600px" Nodes="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                 DiagramObjectCollection<UserHandle> handles = new DiagramObjectCollection<UserHandle>()
                 { new UserHandle(){ Name= "handle1", PathData= "M10.13,0 L1.45,0 C0.66,0,0,0.55,0,1.26 L0,10 L1.45,10 L1.45,1.26 L10.1,1.26 L10.1,0 Z M12.3,2.49 L4.36,2.49 C3.57,2.49,2.91,3.04,2.91,3.75 L2.91,12.49 C2.91,13.18,3.54,13.75,4.36,13.75 L12.3,13.75 C13.09,13.75,13.75,13.2,13.75,12.49 L13.75,3.75 C13.72,3.07,13.09,2.49,12.3,2.49 Z M12.3,12.47 L4.36,12.47 L4.36,3.75 L12.3,3.75 L12.3,12.47 Z"};
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                    DiagramSelectionSettings select = new DiagramSelectionSettings() {RubberBandSelectionMode= RubberBandSelectionMode.CompleteIntersect};
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Constraints">
            <summary>
            Enables or disables certain behaviors of the selector.  
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" Height="600px" Connectors="@nodes" />
             @code
             {
                 SfDiagramComponent diagram;
                //Initialize the node collection with node and with Expand & CollapseIcon
                DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
                protected override void OnInitialized()
                {
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                //set the ConnectorConstraints...
                Constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select
            };
                    connectors.Add(connector);
                    diagram.SelectionSettings.Connectors[0].Constraints |= ConnectorConstraints.Delete;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this selector has been updated.
            </summary>
            <param name="propertyName">string that contains the propertyname.</param>
            <param name="newVal">An object that contain newvalue, which means new value of property</param>
            <param name="oldVal">An object that contain oldvalue, which means old value of property</param>
            <param name="container">An IPaletteObject that contain IDiagramObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramSelectionSettings"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.#ctor(Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
            <summary>
            Creates a new instance of the Selector from the given Selector.
            </summary>
            <param name="src">Selector</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Clone">
            <summary>
            Creates a new selector that is a copy of the current selector.
            </summary>
            <returns>it returns selector</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSelectionSettings.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElementTooltip.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElementTooltip.UpdateToolTip(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary> 
            This method is used to set the tooltip common properties
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElementTooltip.OpenToolTip(Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.NodeBase)">
            <summary> 
            This method is used to show tooltip for specific nodes/connectors
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElementTooltip.CloseTooltip(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary> 
            This method is used to close tooltip for specific nodes/connectors
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramPoint">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.#ctor">
            <summary>
            Initializes a new instance of the DiagramPoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.#ctor(Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Creates a new instance of the DiagramPoint from the given point.
            </summary>
            <param name="src">Point.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPoint.X">
            <summary>
            Gets or sets the x-coordinate of this point.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramPoint.Y">
            <summary>
            Gets or sets the y-coordinate of this point.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                ID = "connector1",
                Type = ConnectorSegmentType.Straight,
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the DiagramPoint struct with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.Transform(Syncfusion.Blazor.Diagram.DiagramPoint,System.Double,System.Double)">
            <summary>
            Transform the point based on the rotate angle and length.
            </summary>
            <param name="point"></param>
            <param name="angle"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.FindAngle(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Find the angle between the two points.
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.Equals(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            To compare two points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.IsEmptyPoint(Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Check whether the points are given 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.DistancePoints(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Find distance between two points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.AdjustPoint(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Boolean,System.Double)">
            <summary>
            To find adjust points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.Direction(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            To find direction depends on points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.FindLength(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            To find length depends on points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.Clone">
            <summary>
            Creates a new point that is a copy of the current point. 
            </summary>
            <returns>it reurns Point</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramPoint.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramRect">
            <summary>
            Represents the width, height and position of a rectangle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref = "diagram" Width="1000px" Height="1000px" @bind-Nodes="Nodes">
            </SfDiagramComponent>    
            @code
            {
                SfDiagramComponent diagram;
                private async Task PageBounds()
                {
                    DiagramRect bounds = diagram.GetPageBounds();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.TopLeft">
            <summary>
            Gets the position of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.TopRight">
            <summary>
            Gets the position of the top-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.TopCenter">
            <summary>
            Gets or sets the position of the top-Center corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.MiddleLeft">
            <summary>
            Gets or sets the position of the middle-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.MiddleRight">
            <summary>
            Gets or sets the position of the middle-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Center">
            <summary>
            Gets or sets the position of the center of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.BottomLeft">
            <summary>
            Gets or sets the position of the bottom-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.BottomRight">
            <summary>
            Gets or sets the position of the bottom-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.BottomCenter">
            <summary>
            Gets or sets the position of the bottom-center corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.X">
            <summary>
            Gets or sets the x-axis value on the rectangle's left side.
            </summary>
            <value> The default value will be <see cref="F:System.Double.MaxValue"/></value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Y">
            <summary>
            Gets or sets the y-axis value on the rectangle's top side.
            </summary>
            <value> The default value will be <see cref="F:System.Double.MaxValue"/></value> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Width">
             <summary>
            Gets or sets the rectangle's width.
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Height">
            <summary>
            Gets or sets the rectangle's height.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramRect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramRect"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramRect.#ctor(Syncfusion.Blazor.Diagram.DiagramRect)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramRect"/> from the given Rect.
            </summary>
            <param name="src">Rect.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramRect.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a new <see cref="T:Syncfusion.Blazor.Diagram.DiagramRect"/> instance with the specified x-coordinate, y-coordinate, width, and height.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Left">
            <summary>
            Gets the x-axis value on the rectangle's left side.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Right">
            <summary>
            Gets the x-axis value on the rectangle's right side.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Top">
            <summary>
            Gets the y-axis location on the rectangle's top.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramRect.Bottom">
            <summary>
            Gets the bottom of the rectangle's y-axis value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramRect.Clone">
            <summary>
            Creates a new rect that is a copy of the current rect.
            </summary>
            <returns>it returns Rect</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramRect.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramSize">
            <summary>
            Describes the size of an object.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref = "diagram" >
            </SfDiagramComponent> 
            <SfSymbolPaletteComponent  SymbolDragPreviewSize="@SymbolPreview">
            </SfSymbolPaletteComponent >
            @code
            {
                SfDiagramComponent diagram;
                SymbolPreview = new DiagramSize
                {
                   Height = 80, Width = 80
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSize.Width">
            <summary>
            Gets or sets the width of an object.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref = "diagram" >
            </SfDiagramComponent> 
            <SfSymbolPaletteComponent SymbolDragPreviewSize="@SymbolPreview"   >
            </SfSymbolPaletteComponent >
            @code
            {
                SfDiagramComponent diagram;
                SymbolPreview = new DiagramSize
                {
                   Height = 80, Width = 80
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramSize.Height">
            <summary>
            Gets or sets the height of an object.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref = "diagram" Width="1000px" Height="1000px" @bind-Nodes="Nodes">
            </SfDiagramComponent> 
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes" SymbolDragPreviewSize="@SymbolPreview" SymbolHeight="@symbolSizeHeight" GetSymbolInfo="GetSymbolInfo" SymbolWidth="@symbolSizeWidth" SymbolMargin="@SymbolMargin">
            </SfSymbolPaletteComponent >
            @code
            {
                SfDiagramComponent diagram;
                SymbolPreview = new DiagramSize
                {
                   Height = 80, Width = 80
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramSize.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SfDiagramComponent">
            <summary>
            Renders the diagram. It contains all the properties of the diagram to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.HistoryManager">
            <summary>
            Notifies when a change is reverted or restored. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width="800px" Height="800px">
                <DiagramHistoryManager Redo="onCustomRedo"></DiagramHistoryManager>
            </SfDiagramComponent>
            @code
            {
                private void onCustomRedo(HistoryEntryBase entry)
                {
                    Node current = entry.UndoObject.Clone() as Node;
                    (entry.UndoObject as Node).AdditionalInfo[(entry.UndoObject as Node).ID] = "Description";
                    entry.RedoObject = current;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Tooltip">
            <summary>
            Gets or set the value of tooltip that should be shown when the mouse hovers over a node or connector.
            <remarks>
            For nodes and connectors, the diagram tooltip is enabled when the constraints values are set to "InheritTooltip".
            </remarks>
            </summary>
            <value> The default value will be null</value>
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" Tooltip="@tooltip" @bind- Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> connectors= new DiagramObjectCollection<Connector>(); 
            DiagramTooltip tooltip = new DiagramTooltip(){Content="Diagram Tooltip"};
            protected override void OnInitialized()  
            {  
                Node node1 = new Node() { ID = "node1", OffsetX = 100, OffsetY = 100, Tooltip=new DiagramTooltip(){Content="node1"} };  
                nodes.Add(node1);  
            }  
            }  
            ]]>  
            </code>  
            </example>            
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.BridgeDirection">
            <summary>
            Defines the direction of the bridge that is inserted when the connector segments are intersected.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.Direction.Top"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the direction of the bridge. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Left - Sets the direction of the bridge to Left.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Right - Sets the direction of bridge to Right.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Top - Sets the direction of bridge to Top.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Bottom - Sets the direction of bridge to Bottom.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="900px" BridgeDirection="Direction.Right" Connectors="@connectors">
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ID">
            <summary>
            Get or sets the unique ID of the diagram. 
            </summary>
            <value>
            The unique string value represented as ID of the diagram compoment. The default value will be the randomly generated string.
            </value>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="900px" ID="diagram">
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.BridgeDirectionChanged">
            <summary>
            Specifies the callback to trigger when the bridge direction changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DataSourceSettings">
            <summary>
            Configures the data source that is to be bound with the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent>
                <DataSourceSettings ID = "Id" ParentID="Team" DataSource="@DataSource"></DataSourceSettings>   
                <Layout Type = "LayoutType.OrganizationalChart">
                </Layout>
            </SfDiagramComponent>
            @code
            {
               public class OrgChartDataModel 
               {
                   public string Id  { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" },
               };
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Width">
            <summary>
            Defines the width of the diagram.
            </summary>
            <value> The default value is 100%</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width="900px" Connectors="@connectors">
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.WidthChanged">
            <summary>
            Specifies the callback to trigger when the width changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.HeightChanged">
            <summary>
            Specifies the callback to trigger when the height changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ChildContent">
            <summary>
            Sets the child content of the diagram component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ContextMenuSettings">
             <summary>
             Represents a shortcut menu
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent >
            <ContextMenuSettings @bind-Show="@show" @bind-ShowCustomMenuOnly="@customMenuOnly" @bind-Items="@Items" ContextMenuOpening="@BeforeOpen" ContextMenuItemClicked="@ItemClicked">
            </ContextMenuSettings>
            </SfDiagramComponent>
             @code {
            SfDiagramComponent diagram;
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
            ContextMenuSettings ContextMenuSettings;
            List<ContextMenuItem> Items;
            bool customMenuOnly = false;
            bool show = true;
            protected override void OnInitialized()
            {
            
                Items = new List<ContextMenuItem>()
                {
                         new ContextMenuItem()
                        {
                            Text = "Save As...",
                            Id = "save",
                            IconCss = "e-save",
                        },
                        new ContextMenuItem()
                        {
                            Text = "Group",
                            Id = "load",
                            IconCss = "e-group"
                        }
                };
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Constraints">
            <summary>
            Enables/disables certain behaviors of the diagram.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Default"/></value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @bind-Constraints="@diagramConstraints"  />
             @code
             {
               DiagramConstraints diagramConstraints = DiagramConstraints.Default;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConstraintsChanged">
            <summary>
            Specifies the callback to trigger when the constraint changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.InteractionController">
            <summary>
            Defines the precedence of the interactive tools. 
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.DiagramInteractions.Default"/></value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent InteractionController="DiagramInteractions.SingleSelect"  />
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.InteractionControllerChanged">
            <summary>
            Specifies the callback to trigger when the tool changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SnapSettings">
            <summary>
            Defines the grid lines and specifies how and when objects must be snapped. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height="500px">
                // Shows the horizontal grid lines
                <SnapSettings Constraints ="SnapConstraints.ShowLines" SnapAngle="10">
                    <HorizontalGridLines LineColor = "blue" LineDashArray="2,2">
                    </HorizontalGridLines>
                    <VerticalGridLines LineColor = "blue" LineDashArray="2,2">
                    </VerticalGridLines>
                </SnapSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DiagramTemplates">
            <summary>
            Represents the template of the diagram element. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  />
            <DiagramTemplates>
             <NodeTemplate>
              @{ var id = (context as Node).ID;
             <div style="height: 100%; width: 100%; background:green">
              <input type="button" value="Button1" @onclick="@OnClick" />
              </div>
              }
             </NodeTemplate>
             </DiagramTemplates>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.PageSettings">
            <summary>
            Page settings enable you to customize the appearance, width, and height of the Diagram page. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent @ref="diagram" Width="100%" Height="500px" Nodes="@nodes" Connectors="@connectors">
                <PageSettings Width = "80px" Height="300px" >
                    <PageMargin Left = "10" Right="10" Top="10" Bottom="10"></PageMargin>
                </PageSettings>
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status, and view port size of the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
                <ScrollSettings VerticalOffset="900px" HorizontalOffset="800px" >
                </ScrollSettings>
            </SfDiagramComponent>    
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Height">
            <summary>
            Defines the height of the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="900px">
            </SfDiagramComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Layout">
            <summary>
            Layout is used to auto-arrange the nodes in the Diagram area. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Height = "600px" >
                <DataSourceSettings ID = "Id" ParentID="Team" DataSource="@DataSource"></DataSourceSettings>   
                <Layout Type = "LayoutType.OrganizationalChart">
                </Layout>
            </SfDiagramComponent>
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.CommandManager">
            <summary>
            Defines a set of custom commands and binds them with a set of desired key gestures. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  Height="600px" >
                <CommandManager Commands = "@command" >
                </CommandManager>
            </SfDiagramComponent>
            @code
            {
                DiagramObjectCollection<KeyboardCommand> command = new DiagramObjectCollection<KeyboardCommand>()
                {
                    new Command()
                    {
                        Name = "CustomGroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.G, Modifiers = ModifierKeys.Control }
                    },
                    new Command()
                    {
                        Name = "CustomUngroup",
                        Gesture = new KeyGesture() { Key = DiagramKeys.U, Modifiers = ModifierKeys.Control }
                    },
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectionSettings">
            <summary>
            Defines the collection of selected items, the size and position of the selector.  
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent ref="@diagram" SelectionSettings="@select" Height="600px"  />
             @code
             {
                    DiagramSelectionSettings select = new DiagramSelectionSettings() { Width =100, Height=150 };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectionSettingsChanged">
            <summary>
            Specifies the callback to trigger when the selection settings changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DrawingObject">
            <summary>
            Defines the object to be drawn using a drawing tool. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" InteractionController="Tools" @bind-DrawingObject="@DrawingObject" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                DiagramInteractions Tools =  DiagramInteractions.ContinuousDraw;
                 IDiagramObject DrawingObject { get; set; }
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    DrawingObject = node;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DrawingObjectChanged">
            <summary>
            Specifies the callback to trigger when the drawing object changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Nodes">
            <summary>
            Defines a collection of node objects, used to visualize the geometrical information. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" />
             @code
             {
                DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node1",
                        //Size of the node
                        Height = 100,
                        Width = 100,
                        //Position of the node
                        OffsetX = 100,
                        OffsetY = 100,
                    };
                    nodes.Add(node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Connectors">
            <summary>
            Defines a collection of connector objects, used to create links between two points, nodes or ports to represent the relationships between them. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="900px" Connectors="@connectors">
            </SfDiagramComponent>
            @code
            {
              public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
              protected override void OnInitialized()
              {
                Connector connector = new Connector()
                {
                   ID="straight",
                   SourcePoint = new DiagramPoint() { X = 100, Y = 200 },
                   TargetPoint = new DiagramPoint() { X = 300, Y = 200 },
                   Segments = new DiagramObjectCollection<ConnectorSegment>()
                   {
                       //Create a new straight segment 
                       new StraightSegment(){Point=new DiagramPoint(420,300)},
                    }
                };
               connectors.Add(connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.NodesChanged">
            <summary>
            Specifies the callback to trigger when the node changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConnectorsChanged">
            <summary>
            Specifies the callback to trigger when the connector changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.PropertyChanged">
            <summary>
            Triggers when the node or connector property changes. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectionChanging">
            <summary>
            Triggers before the selection is change in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectionChanged">
            <summary>
            Triggers when the selection is changed in the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.TextChanged">
            <summary>
            Triggers when the node’s/connector's label is changed in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  TextChanged="@textedit">
            </SfDiagramComponent>
            private void textedit(TextChangeEventArgs args)
            {
                
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.TextChanging">
            <summary>
            An event that is raised when the node and connector's label is changing in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  TextChanging="@OnLabelTextChanging">
            </SfDiagramComponent>
            private void OnLabelTextChanging(TextChangeEventArgs args)
            {
               args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Created">
            <summary>
             Triggers when Diagram component is rendered.
             </summary>
             <remarks>
             The Created event notifies to perform the actions after the control is rendered in a page. 
             </remarks>
             <example>
             <code>
             <![CDATA[
             <SfDiagramComponent @ref="@Diagram"
             Width="100%"
             Height="700px"
             Nodes="nodes"
             Created="OnCreated">
             </SfDiagramComponent>
             @code
             {
             SfDiagramComponent Diagram;
             private void OnCreated(object args)
             {
             Diagram.Select(new ObservableCollection<IDiagramObject>() { Diagram.Nodes[2] });
             }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.HistoryChanged">
            <summary>
            Triggers when a change is reverted or restored(undo/redo). 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Dragging">
            <summary>
            Triggers when an element drags over another diagram element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragStart">
            <summary>
            Triggers when a symbol is dragged into the diagram from the symbol palette 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragLeave">
            <summary>
            Triggers when a symbol is dragged outside of the diagram. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragDrop">
            <summary>
            Triggers when a symbol is dragged and dropped from the symbol palette to the drawing area. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  DragDrop="DragDrop">
            </SfDiagramComponent>
            private void DragDrop(DropEventArgs args)
            {
                if (args.Element is Node)
                {
                    string id = (args.Element as NodeBase).ID;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.KeyDown">
            <summary>
            Triggers when a user presses a key. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" KeyDown="@OnKeyDown">
            </SfDiagramComponent>
            @code
            {
                private void OnKeyDown(KeyEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.KeyUp">
            <summary>
            Triggers when a user releases a key. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" KeyUp="@OnKeyUp">
            </SfDiagramComponent>
            @code
            {
                private void OnKeyUp(KeyEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.CollectionChanging">
            <summary>
            Triggers before the node/connector is add or remove from the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" CollectionChanging="@collection">
            </SfDiagramComponent>
            @code
            {
                private void collection(CollectionChangingEventArgs args)
                {
                    if (args.Element != null)
                    {
                        Console.WriteLine("CollectionChanging");
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.CollectionChanged">
            <summary>
            Triggers when the node/connector is added or removed from the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" CollectionChanged="@collection">
            </SfDiagramComponent>
            @code
            {
                private void collection(CollectionChangedEventArgs args)
                {
                    if (args.Element != null)
                    {
                        Console.WriteLine("CollectionChanged");
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SegmentCollectionChange">
            <summary>
            Triggers when the connector’s segment collection is updated. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" SegmentCollectionChange="@OnSegmentCollectionChange">
            </SfDiagramComponent>
            @code
            {
                 private void OnSegmentCollectionChange(SegmentCollectionChangeEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Click">
            <summary>
            Triggers when a node, connector or diagram is clicked.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" Click="click">
            </SfDiagramComponent>
            @code
            {
                private void click(ClickEventArgs args)
                {
                    if (args.ActualObject != null)
                    {
                        Console.WriteLine("Clicked");
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.MouseEnter">
            <summary>
            Triggers when the mouse enters a node/connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px"  MouseEnter="@MouseEnter">
            </SfDiagramComponent>
            @code
            {
              private void MouseEnter(DiagramElementMouseEventArgs args)
              {
                if ((args != null) && (args.ActualObject != null))
                {
                    Console.WriteLine("Mouse Entered");
                }
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.MouseHover">
            <summary>
            Triggers when the mouse pointer rests on the node/connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px"  MouseHover="@MouseHover">
            </SfDiagramComponent>
            @code
            {
              private void MouseHover(DiagramElementMouseEventArgs args)
              {
                if ((args != null) && (args.ActualObject != null))
                {
                    Console.WriteLine("MouseHover");
                }
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.MouseLeave">
            <summary>
            Triggers when the mouse leaves a node/connector. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px"  MouseLeave="@MouseLeave">
            </SfDiagramComponent>
            @code
            {
              private void MouseLeave(DiagramElementMouseEventArgs args)
              {
                if ((args != null) && (args.ActualObject != null))
                {
                    Console.WriteLine("MouseLeave");
                }
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ScrollChanged">
            <summary>
            Triggers when the scrollbar is updated. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Width = "1000px" Height="1000px" ScrollChanged="ScrollChanged">
            </SfDiagramComponent>
            @code
            {
               private void ScrollChanged(ScrollChangedEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.PositionChanging">
            <summary>
            Triggers while dragging the elements in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  PositionChanging="@changed">
            </SfDiagramComponent>
            private void changed(PositionChangingEventArgs args)
            {
                if (args.NewValue != null && args.OldValue != null && args.Element != null)
                {
                    Console.WriteLine("Changing");
                }
            }    
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.PositionChanged">
            <summary>
            Triggers when the node's/connector's position is changed.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  PositionChanged="@changed">
            </SfDiagramComponent>
            private void changed(PositionChangedEventArgs args)
            {
                if (args.NewValue != null && args.OldValue != null && args.Element != null)
                {
                    Console.WriteLine("Changed");
                }
            }    
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConnectionChanging">
            <summary>
            Triggers before the connector’s source or target point is connect or disconnect from the source or target.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  ConnectionChanging="ConnectionChanging">
            </SfDiagramComponent>
             private void ConnectionChanging(ConnectionChangingEventArgs args)
            {
               args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConnectionChanged">
            <summary>
            Triggers when the connector’s source or target point is connected or disconnected from the source or target.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  ConnectionChanged="ConnectionChanged">
            </SfDiagramComponent>
             private void ConnectionChanged(ConnectionChangedEventArgs args)
            {
               args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SourcePointChanging">
            <summary>
            Triggers while dragging the connector’s source end in the diagram. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" SourcePointChanging="@OnSourcePointChanging">
            </SfDiagramComponent>
            private void OnSourcePointChanging(EndPointChangingEventArgs args)
            {
                if (args.Connector != null)
                {
                    Connector connector = args.Connector;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SourcePointChanged">
            <summary>
            Triggers when the connector’s source point is changed.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" SourcePointChanged="@OnSourcePointChanged">
            </SfDiagramComponent>
            private void OnSourcePointChanged(EndPointChangedEventArgs args)
            {
                if (args.Connector != null)
                {
                    Connector connector = args.Connector;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.TargetPointChanging">
            <summary>
            Triggers while dragging the connector’s target end in the diagram.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" TargetPointChanging="@OnTargetPointChanging">
            </SfDiagramComponent>
            private void OnTargetPointChanging(EndPointChangingEventArgs args)
            {
                if (args.Connector != null)
                {
                    Connector connector = args.Connector;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.TargetPointChanged">
            <summary>
            Triggers when the connector’s target point is changed.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" TargetPointChanged="@OnTargetPointChanged">
            </SfDiagramComponent>
            private void OnTargetPointChanged(EndPointChangedEventArgs args)
            {
                if (args.Connector != null)
                {
                    Connector connector = args.Connector;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.FixedUserHandleClick">
            <summary>
            Triggers when a Fixed User Handle item is clicked. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px" FixedUserHandleClick="@fixedhandle">
            </SfDiagramComponent>
            public void fixedhandle(FixedUserHandleClickEventArgs args)
            {
            
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SizeChanging">
            <summary>
            Triggers before a node is resize.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" SizeChanging="@OnSizeChange" />
            @code
            {
                DiagramObjectCollection<Node> nodes;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    Node node = new Node()
                    {
                        // Position of the node
                        OffsetX = 250,
                        OffsetY = 250,
                        // Size of the node
                        Width = 100,
                        Height = 100,
                    };
                    nodes.Add(node);
                }
                // Size change event for the diagram
                public void OnSizeChange(SizeChangingEventArgs args)
                {
                    Console.WriteLine(args.NewValue.Nodes[0].ID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SizeChanged">
            <summary>
            Triggers when a node is resized.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent Height="600px" Nodes="@nodes" SizeChanged="@SizeChanged" />
            @code
            {
                // To define the node collection
                DiagramObjectCollection<Node> nodes;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    // A node is created and stored in the nodes collection.
                    Node node = new Node()
                    {
                        // Position of the node
                        OffsetX = 250,
                        OffsetY = 250,
                        // Size of the node
                        Width = 100,
                        Height = 100,
                        Style = new ShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                    };
                    // Add a node
                    nodes.Add(node);
                }
                // Size change event for the diagram
                public void SizeChanged(SizeChangedEventArgs args)
                {
                    Console.WriteLine(args.NewValue.Nodes[0].ID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.RotationChanging">
            <summary>
            Triggers before the diagram elements are rotate.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent RotationChanging="@RotationChanging">
            </SfDiagramComponent>
            @code
            {
                private void RotationChanging(RotationChangingEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.RotationChanged">
            <summary>
            Triggers when the diagram elements are rotated.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  RotationChanged="@RotationChanged">
            </SfDiagramComponent>
            @code
            {
                private void RotationChanged(RotationChangedEventArgs args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DataLoaded">
            <summary>
            Triggers when the diagram layout is rendered completely. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  DataLoaded="@DataLoaded">
            </SfDiagramComponent>
            @code
            {
                private void DataLoaded(object args)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SetNodeTemplate">
            <summary>
            Customizes the node template.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  @bind-Nodes="Nodes" SetNodeTemplate="SetTemplate">
            </SfDiagramComponent>
            @code
            { 
              DiagramObjectCollection<Node> Nodes = new DiagramObjectCollection<Node>();
              protected override void OnInitialized()
              {
                 StackPanel stackPanel = SetTemplate(null) as StackPanel;
                  stackPanel.Orientation = Orientation.Horizontal;
                  basicElements.Add(stackPanel);
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetCustomTool">
            <summary>
            This method allows users to customize the tool. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  @bind-Nodes="Nodes" GetCustomTool="@GetCustomTool">
            </SfDiagramComponent>
            @code
            { 
              public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
              {
              
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetCustomCursor">
            <summary>
            This method allows users to create their own cursor. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent  @bind-Nodes="Nodes" GetCustomCursor="@cursor" >
            </SfDiagramComponent>
            @code
            { 
              public string cursor(DiagramElementAction action, bool active, string handle)
              {
              
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.NodeCreating">
            <summary>
            Helps to assign the default properties of nodes. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  NodeCreating="@NodeCreating">
            </SfDiagramComponent>
            @code
            {
                private void NodeCreating(IDiagramObject obj)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConnectorCreating">
            <summary>
            Helps to assign the default properties of the connector. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent  ConnectorCreating="@ConnectorCreating">
            </SfDiagramComponent>
            @code
            {
                private void ConnectorCreating(IDiagramObject obj)
                {
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Copy">
            <summary>
            It copies the selected nodes/connectors to the clipboard. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref="diagram">
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent diagram;
                private void copy()
                {
                 diagram.Copy(); 
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Cut">
            <summary>
            It removes the selected nodes/connectors and moves them to the clipboard. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref="diagram">
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent diagram;
                private void Cut()
                {
                 diagram.Cut(); 
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Paste">
            <summary>
            Adds the given objects/ objects in the diagram clipboard to the diagram control. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent @ref="diagram">
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent diagram;
                private void Paste()
                {
                 diagram.Paste(); 
                 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.FitToPage(Syncfusion.Blazor.Diagram.FitOptions)">
            <summary>
            Fit the diagram pages based on <see cref="T:Syncfusion.Blazor.Diagram.FitOptions"/> 
            </summary>
            <param name="options">Specifies the configuration settings to fit the diagram</param>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent Diagram;
               FitOptions Options = new FitOptions(){
               Mode = FitMode.Both,
               Region = DiagramRegion.PageSetting,
               
               Diagram.FitToPage(Options);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetPageBounds(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Represents a method used to get the bounds of the page.
            </summary>
            <param name="originX">it store page bounds height value</param>
            <param name="originY">it store page bounds width value</param>
            <returns>It returns DiagramRect</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateQuad(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Represents a method used to update the quad.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateExisitingQuadObjects(Syncfusion.Blazor.Diagram.NodeBase,System.Boolean)">
            <summary>
            Represents a method used to update the quad.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdatePage">
            <summary>
            Represents a method used to update the page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetSizeValue(System.String)">
            <summary>
            Represents a method used to get size value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.BeginUpdate">
            <summary>
            This method locks the diagram to prevent its visual updates until the EndUpdate() method is called. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.EndUpdate">
            <summary>
            This method unlocks the diagram after a call to the BeginUpdate(Boolean) method and causes an immediate visual update.  
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.AddDiagramElements(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            It is used for adding nodes collection to the diagram. 
            </summary>
            <param name="items">An DiagramObjectCollection that contain Node and connectors and group</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DoLayout">
            <summary>
            It allows the user to refresh the layout at runtime. 
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetObject(System.String)">
            <summary>
            This method returns the object based on the given id. 
            </summary>
            <param name="name">An string that contain id of node/connector.</param>
            <returns>It return IDiagramObject</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.BringForward">
            <summary> 
            Visually moves the selected Node, Connector and Group over the nearest overlapping Node or connector or group. 
            </summary> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfDiagramComponent @ref="diagram"  Width="1000px" Height="500px" @bind-Nodes="@nodes"></SfDiagramComponent> 
            @code{ 
            SfDiagramComponent diagram; 
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>(); 
            protected override void OnInitialized() 
            { 
                Node node1 = new Node() { ID = "node1", Width = 90, Height = 60, OffsetX = 100, OffsetY = 100}; 
                nodes.Add(node1); 
                Node node2 = new Node() { ID = "node2", Width = 90, Height = 60, OffsetX = 240, OffsetY = 100 }; 
                nodes.Add(node2); 
                Node node3 = new Node() { ID = "node3", Width = 90, Height = 60, OffsetX = 160, OffsetY = 90 }; 
                nodes.Add(node3); 
            } 
            private void BringForward() 
            { 
                diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[0] });     
                diagram.BringForward(); 
            } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SendBackward">
            <summary> 
            Visually moves the selected Node, connector and group behind the underlying Node or Connector or Group. 
            </summary> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfDiagramComponent @ref="diagram"  Width="1000px" Height="500px" @bind-Nodes="@nodes"></SfDiagramComponent> 
            @code{ 
            SfDiagramComponent diagram; 
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>(); 
            protected override void OnInitialized() 
            { 
                Node node1 = new Node() { ID = "node1", Width = 90, Height = 60, OffsetX = 100,     OffsetY = 100}; 
                nodes.Add(node1); 
                Node node2 = new Node() { ID = "node2", Width = 90, Height = 60, OffsetX = 240, OffsetY = 100 }; 
                nodes.Add(node2); 
                Node node3 = new Node() { ID = "node3", Width = 90, Height = 60, OffsetX = 160, OffsetY = 90 }; 
                nodes.Add(node3); 
            } 
            private void SendBackward() 
            { 
                diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[2] });     
                diagram.SendBackward(); 
            } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.BringToFront">
            <summary> 
            Visually brings the selected Node, connector and group to the front over all other overlapped Nodes, Connectors and Groups. 
            </summary> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfDiagramComponent @ref="diagram"  Width="1000px" Height="500px" @bind-Nodes="@nodes"></SfDiagramComponent> 
            @code{ 
            SfDiagramComponent diagram; 
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>(); 
            protected override void OnInitialized() 
            { 
                Node node1 = new Node() { ID = "node1", Width = 90, Height = 60, OffsetX = 100,     OffsetY = 100}; 
                nodes.Add(node1); 
                Node node2 = new Node() { ID = "node2", Width = 90, Height = 60, OffsetX = 240, OffsetY = 100 }; 
                nodes.Add(node2);
                Node node3 = new Node() { ID = "node3", Width = 90, Height = 60, OffsetX = 160, OffsetY = 90 }; 
                nodes.Add(node3);             
            } 
            private void BringToFront() 
            { 
                diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[0] });     
                diagram.BringToFront(); 
            } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SendToBack">
            <summary> 
            Visually moves the selected Node, connector and group behind all the other overlapped Nodes, Connectors and Group. 
            </summary> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfDiagramComponent @ref="diagram"  Width="1000px" Height="500px" @bind-Nodes="@nodes"></SfDiagramComponent> 
            @code { 
            SfDiagramComponent diagram; 
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>(); 
            protected override void OnInitialized() 
            { 
                Node node1 = new Node() { ID = "node1", Width = 90, Height = 60, OffsetX = 100, OffsetY = 100}; 
                nodes.Add(node1); 
                Node node2 = new Node() { ID = "node2", Width = 90, Height = 60, OffsetX = 240, OffsetY = 100 }; 
                nodes.Add(node2); 
                Node node3 = new Node() { ID = "node3", Width = 90, Height = 60, OffsetX = 160, OffsetY = 90 }; 
                nodes.Add(node3); 
            } 
            private void SendToBack() 
            { 
                diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[2] });     
                diagram.SendToBack(); 
            } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.InitCommands">
            <summary> 
            This method is used to initialize the commands like copy/paste.
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.InitCommandManager(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.KeyboardCommand},System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.KeyboardCommand})">
            <summary> 
            This method is used to initialize the commandmanager.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OverrideCommands(Syncfusion.Blazor.Diagram.KeyboardCommand,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.KeyboardCommand})">
            <summary> 
            This method is used to Override the commands.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.NudgeCommand(Syncfusion.Blazor.Diagram.Direction)">
            <summary> 
            This method is used to Override the commands.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Nudge(Syncfusion.Blazor.Diagram.Direction,System.Nullable{System.Int32})">
            <summary>
            Repositions the selected object by the specified delta in the given direction.
            </summary>
            <remarks>The nudge commands move the selected elements towards up, down, left, or right by 1 pixel, by default.</remarks>
            <param name="direction">Nudge command moves the selected elements towards the specified <see cref="T:Syncfusion.Blazor.Diagram.Direction"/>.</param>
            <param name="nudgeDelta">The amount in delta by which to reposition the selected objects.</param>
            examples for the following:
            <example>
            <code>
            private void Nudge()
             {
               //Repositions the selected objects by 50 towards down direction.
               diagram.Nudge(NudgeDirection.Down, 50);
             }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ShowTooltip(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            The method is used to show the tooltip in the tooltip open mode as in custom.
            </summary>        
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind-  Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> nodes = new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {  
                Node node1 = new Node() { ID = "node1",OffsetX = 100, OffsetY = 100, Tooltip=new DiagramTooltip(){Content="node1", OpensOn = “Auto”,} };  
                nodes.Add(node1);  
                Node node2 = new Node() { ID = "node2", OffsetX = 240, OffsetY = 100, Tooltip=new DiagramTooltip(){Content="node2", OpensOn = “Custom”,} };  
                nodes.Add(node2);  
                Connector connector1=new Connector{ ID="Connector1" , Tooltip=new DiagramTooltip(){Content="connector1"} }
            }  
            public void ShowTooltip()
            {
               diagram.ShowTooltip(diagram.nodes[1] as NodeBase);
            }
            }  
            ]]>  
            </code>  
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.HideTooltip(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            The method is used to hide the tooltip in the tooltip open mode as in custom.
            </summary>
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind-  Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> nodes = new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {  
                Node node1 = new Node() { ID = "node1", OffsetX = 100, OffsetY = 100, Tooltip=new DiagramTooltip(){Content="node1", OpensOn = “Auto”,} };  
                nodes.Add(node1);  
                Node node2 = new Node() { ID = "node2", OffsetX = 240, OffsetY = 100, Tooltip=new DiagramTooltip(){Content="node2", OpensOn = “Custom”,} };  
                nodes.Add(node2);  
                Connector connector1=new Connector{ ID="Connector1" , Tooltip=new DiagramTooltip(){Content="connector1"} }
            }  
            public void HideTooltip()
            {
               diagram.HideTooltip(diagram.nodes[1] as NodeBase);
            }
            }  
            ]]>  
            </code>  
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateTooltipProperty(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Blazor.Diagram.SfDiagramComponent,Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            Represents a method used to update the tooltip property
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Delete">
            <summary> 
            This method is used to delete node/connector/group.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DeleteDiagramElement(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Node},System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.Connector})">
            <summary> 
            This method is used to delete the diagram element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateCommandManager(Syncfusion.Blazor.Diagram.CommandManager)">
            <summary> 
            This method is used to update the command manager.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragLeaveEvent">
            <summary> 
            Invoke when drag leave event is triggered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DropGroupNode(Syncfusion.Blazor.Diagram.Node)">
            <summary> 
            Invoke when  drop the group node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SymbolDrop(System.Boolean)">
            <summary> 
            Invoke when drag and drop the node/connector/group from palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragEnterEvent(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary> 
            Invoke when drag enter event is triggered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Allows the user to update all the properties. 
            </summary>
            <param name="propertyName">string that contains the propertyname.</param>
            <param name="newVal">An object that contain newvalue, which means new value of property</param>
            <param name="oldVal">An object that contain oldvalue, which means old value of property</param>
            <param name="parent">An IDiagramObject that contain IDiagramObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateBridgeDirection(Syncfusion.Blazor.Diagram.Direction)">
            <summary>
            This method is used to update bridge direction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SetSameSize(Syncfusion.Blazor.Diagram.SizingMode,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            Scales the given objects to the size of the first object in the group.
            </summary>
            <param name="sizingType">It defines sizing mode</param>
            <param name="objects">It defines nodes,connector collection</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SetDistribute(Syncfusion.Blazor.Diagram.DistributeOptions,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            It arranges the group of nodes/connectors at equal intervals within the group of nodes/connectors. 
            </summary>
            <param name="option">It defines distribution options</param>
            <param name="objects">It defines nodes,connector collection</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SetAlign(Syncfusion.Blazor.Diagram.AlignmentOptions,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase},Syncfusion.Blazor.Diagram.AlignmentMode)">
            <summary>
            Aligns the group of objects with reference to the first object in the group. 
            </summary>
            <param name="alignmentOptions">It define alignment options.</param>
            <param name="objects">It defines nodes,connector collection</param>
            <param name="alignmentMode">It define alignment mode.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ConcatSelectedObjects(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            This method is used to concadinate selected objects. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateConstraints(Syncfusion.Blazor.Diagram.DiagramConstraints)">
            <summary>
            This method is used to updated constraints. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateSnapSettings(Syncfusion.Blazor.Diagram.SnapSettings)">
            <summary>
            This method is used to update snap settings. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateHistory(Syncfusion.Blazor.Diagram.DiagramHistoryManager)">
            <summary>
            This method is used to update History.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateSnapping(Syncfusion.Blazor.Diagram.Internal.Snapping)">
            <summary>
            This method is used to update snapping.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdatePageSettings(Syncfusion.Blazor.Diagram.PageSettings)">
            <summary>
            This method is used to update pagesettings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateLayout(Syncfusion.Blazor.Diagram.Layout)">
            <summary>
            This method is used to update layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateScrollSettings(Syncfusion.Blazor.Diagram.ScrollSettings)">
            <summary>
            This method is used to update scrollsettings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateHierarchicalTree(Syncfusion.Blazor.Diagram.Internal.HierarchicalTree)">
            <summary>
            This method is used to update Hierarchical tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateComplexHierarchicalTree(Syncfusion.Blazor.Diagram.Internal.ComplexHierarchicalTree)">
            <summary>
            This method is used to update Complex Hierarchical tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DiagramStateHasChanged">
            <summary>
            This method is used to refresh the diagam.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetTransformValue">
            <summary>
            This method is used to get transform value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Rotate(Syncfusion.Blazor.Diagram.IDiagramObject,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Rotates the given nodes/connectors at the given angle. 
            </summary>
            <param name="obj">Defines the objects to be rotated</param>
            <param name="angle">Defines the angle by which the objects have to be rotated</param>
            <param name="pivot">Defines the reference point with reference to which the objects have to be rotated</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragSourceEnd(Syncfusion.Blazor.Diagram.Connector,System.Double,System.Double)">
            <summary>
             Moves the source point of the given connector
             </summary>     
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragTargetEnd(Syncfusion.Blazor.Diagram.Connector,System.Double,System.Double)">
            <summary>
             Moves the target point of the connector
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.InitializePrivateVariables">
            <summary>
             This method is used to initialize the private variables.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.InitializeDiagramElementToolTip(Syncfusion.Blazor.Diagram.DiagramElementTooltip)">
            <summary>
            This method is used to initialize the tooltip settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.InitializeContextMenuSettings(Syncfusion.Blazor.Diagram.ContextMenuSettings)">
            <summary>
             This method is used to initialize the contextmenu settings.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateDataSourceSetting(Syncfusion.Blazor.Diagram.DataSourceSettings)">
            <summary>
             This method is used to update data source settings.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateThumbConstraints(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Boolean)">
            <summary>
             This method is used to update thumb constraints.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetTooltipContent(Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
            <summary>
             Used to get tooltip content.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.CanResize(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramElementAction)">
            <summary>
             Used to check canResize constraints   of the element
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.PropertyUpdate(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
             Used to update property of diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ShouldRender">
            <summary>
            This method returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.RemoveDependentConnector(Syncfusion.Blazor.Diagram.Node)">
            <summary>
              Remove the dependent connectors if the node is deleted
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.RemoveLabels(Syncfusion.Blazor.Diagram.NodeBase,System.Collections.IList)">
            <summary>
             Remove Labels at the run time 
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.OnAfterScriptRendered">
            <summary>
            Notify the component about the required scripts are rendered in the web page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.RemovePorts(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.PointPort})">
            <summary>
            Remove Ports at the run time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.AddLabels(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.Annotation})">
            <summary>
            Add Labels at the run time
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.AddPorts(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.PointPort})">
            <summary>
            Add Ports at the run time
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.InitRemoteData">
            <summary>
            Initialize the remote data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateNameTable(System.Collections.IList)">
            <summary>
            This method is used to update nametable.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.RefreshDataSource">
            <summary>
            This method will refresh the layout based on the changes in the data source. 
            </summary>
            <returns>RefreshDataSource</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Clear">
            <summary>
            Clear all nodes, connectors and groups in the diagram
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ClearObjects">
            <summary>
            This method is used to Clears all nodes and objects in the diagram
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SaveDiagram">
            <summary>
            Serializes the diagram control as a string. 
            </summary>
            <returns>jsonData</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.LoadDiagram(System.String,System.Boolean)">
            <summary>
            Used to generate a <see cref="T:Syncfusion.Blazor.Diagram.SfDiagramComponent"/> from the given json data.
            </summary>
            <param name="data">Json data of the <see cref="T:Syncfusion.Blazor.Diagram.SfDiagramComponent"/> or <see cref="!:Syncfusion.Blazor.Diagrams.SfDiagram"/>.</param>
            <param name="isClassicData">true if the json data is <see cref="!:Syncfusion.Blazor.Diagrams.SfDiagram"/>; otherwise, false.</param>
            <returns>Diagram</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.TextChangeEvent(System.String,System.String,Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.Annotation,Syncfusion.Blazor.Diagram.TextChangeEventArgs)">
            <summary>
            Invoke when text is changed at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.TextChangingEvent(System.String,System.String,Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.Annotation,Syncfusion.Blazor.Diagram.TextChangeEventArgs)">
            <summary>
            Invoke when text is changing at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.AddAnnotation(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            This method is used to add annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetAnnotation(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.ShapeAnnotation},Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.PathAnnotation},Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to get annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.StartTextEdit(Syncfusion.Blazor.Diagram.IDiagramObject,System.String)">
            <summary>
            Edits the annotation of the node/connector. 
            </summary>
            <param name="diagramObject">Defines node/connector that contains the annotation to be edited</param>
            <param name="id">Defines annotation id to be edited in the node</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.StartEditCommand">
            <summary>
            Invoke when Edit the annotation of the node/connector. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Select(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},System.Nullable{System.Boolean})">
            <summary>
            Selects the given collection of objects.
            </summary>
            <param name="objects">Defines the collection of nodes and connectors to be selected</param>
            <param name="multipleSelection">Defines whether the existing selection has to be cleared or not</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectAll">
            <summary>
             Select all the objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UnSelect(Syncfusion.Blazor.Diagram.IDiagramObject)">
             <summary>
             Removes the given object from the selection list. 
             </summary>
            <param name="obj"> Removes the given object from selection list</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ClearSelection">
            <summary>
             It allows the user to clear the selected nodes/connectors in the diagram. 
             </summary>        
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.PrintAsync(Syncfusion.Blazor.Diagram.DiagramPrintSettings)">
             <summary> 
             Prints the diagram pages based on <see cref="T:Syncfusion.Blazor.Diagram.DiagramPrintSettings"/>. 
             </summary>
             <param name="printSettings">Specifies the configuration settings to print the diagram. </param> 
            <returns> The <see cref="T:System.Threading.Tasks.Task"/> that completes when the diagram is sent to browser print preview window for printing.</returns> 
             examples for the following:
            <example>
            <code>
             DiagramPrintSettings print = new DiagramPrintSettings();
             print.PageWidth = 816;
             print.PageHeight = 1054;
             print.Region = DiagramPrintExportRegion.PageSettings;
             print.FitToPage = true;
             print.Orientation = PageOrientation.Landscape;
             print.Margin = new DiagramThickness() { Left = 10, Top = 10, Right = 10, Bottom = 10 };
             await diagram.PrintAsync(print);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ExportAsync(System.String,Syncfusion.Blazor.Diagram.DiagramExportFormat,Syncfusion.Blazor.Diagram.DiagramExportSettings)">
             <summary> 
             Exports the rendered diagram to various file types. It supports jpeg, png, svg ,bmp and pdf file types. Exported file will get download at client machine.  
             </summary> 
             <param name="fileName">Specifies the filename without extension. </param> 
             <param name="fileFormat"> Specifies the export type for the rendered diagram </param> 
             <param name="exportSettings"> Specifies the configutation settings to export the diagram </param> 
            <remarks>Diagram supports jepg, png and svg file types. </remarks>  
             examples for the following:
            <example>
            <code>
              DiagramExportSettings export = new DiagramExportSettings();
              export.Region = DiagramPrintExportRegion.PageSettings;
              export.PageWidth = 816;
              export.PageHeight = 1054;
              export.Orientation = PageOrientation.Landscape;
              export.FitToPage = true;
              export.Margin = new DiagramThickness() { Left = 10, Top = 10, Right = 10, Bottom = 10 };
              export.ClipBounds = new DiagramRect() { X = 0, Y = 0, Width = 0, Height = 0 };
              //To export the diagram
              await diagram.ExportAsync("diagram", format, print);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ExportAsync(Syncfusion.Blazor.Diagram.DiagramExportFormat,Syncfusion.Blazor.Diagram.DiagramExportSettings)">
             <summary> 
             Exports the diagram to base64 string. Exported string can be returned.  
             </summary> 
             <param name="fileFormat">Specifies the export type for the rendered diagram.</param> 
             <param name="exportSettings"> Specifies the configutation settings to export the diagram </param> 
             <returns> The exported diagram as base64 string of the specified file type</returns> 
             examples for the following:
            <example>
            <code>
              DiagramExportSettings export = new DiagramExportSettings();
              export.Region = DiagramPrintExportRegion.PageSettings;
              export.PageWidth = 816;
              export.PageHeight = 1054;
              export.Orientation = PageOrientation.Landscape;
              export.FitToPage = true;
              export.Margin = new DiagramThickness() { Left = 10, Top = 10, Right = 10, Bottom = 10 };
              export.ClipBounds = new DiagramRect() { X = 0, Y = 0, Width = 0, Height = 0 };
              //To export the diagram
               string[] base64 = await diagram.ExportAsync(DiagramExportFormat.PNG, export);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetDiagramBounds(Syncfusion.Blazor.Diagram.DiagramPrintExportRegion,Syncfusion.Blazor.Diagram.DiagramExportFormat)">
              @private  
            <summary> 
             To get the bound of the diagram
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetObjectBounds(Syncfusion.Blazor.Diagram.DiagramExportFormat)">
            <summary> 
             To get the object bound.
            </summary> 
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Drag(Syncfusion.Blazor.Diagram.IDiagramObject,System.Double,System.Double)">
            <summary>
            It drags the given object by the specified pixels. 
            </summary>
            <param name="obj">Defines the nodes/connectors to be dragged</param>
            <param name="tx">Defines the distance by which the given objects have to be horizontally moved</param>
            <param name="ty">Defines the distance by which the given objects have to be vertically moved</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Scale(Syncfusion.Blazor.Diagram.IDiagramObject,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Scales the given objects by the given ratio. 
            </summary>
            <param name="obj">Defines the objects to be resized</param>
            <param name="sx"> Defines the ratio by which the objects have to be horizontally scaled</param>
            <param name="sy">efines the ratio by which the objects have to be vertically scaled</param>
            <param name="pivot">Defines the reference point with respect to which the objects will be resized</param>
            <returns>checkBoundaryConstraints</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Zoom(System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Allows the user to zoom in or zoom out. 
            </summary>
            <param name="factor"> Defines the factor by which the diagram is zoomed</param>
            <param name="focusPoint">Defines the point with respect to which the diagram has to be zoomed</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Pan(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            It is used to pan the diagram control to the horizontal and vertical offsets. 
            </summary>
            <param name="horizontalOffset">Defines the horizontal distance to which the diagram has to be scrolled</param>
            <param name="verticalOffset">Defines the vertical distance to which the diagram has to be scrolled</param>
            <param name="focusedPoint"> Provide the focusedPoint value</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.RemoveChild(Syncfusion.Blazor.Diagram.NodeGroup,Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            It is used to remove the child from the selected group node.
            </summary>
            <param name="group">It contains group node</param>
            <param name="child">It contains node/connector</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ResetZoom">
             <summary>
             Clears all the panning operations and removes all the panning relations of diagram control. Restores the panning position to origin of the diagram control by zoom level of One.
             </summary>
             <example>
             <code>
             <![CDATA[
             <SfDiagramComponent @ref = "diagram" Width="600px" Height="600px" Nodes="nodes">
             <SnapSettings Constraints = "@SnapConstraints.ShowLines" ></ SnapSettings >
             </ SfDiagramComponent >
             @code{
                protected override void OnInitialized()
                {
                    Node node = new Node()
                    {
                        ID = "node6",
                        Width = 50,
                        Height = 50,
                        OffsetX = 150,
                        OffsetY = 100,
                    };
                    Node node2 = new Node()
                    {
                        ID = "node7",
                        Width = 50,
                        Height = 50,
                        OffsetX = 150,
                        OffsetY = 170
                   };
                    nodes.Add(node);
                    nodes.Add(node2);
                }
                public void ZoomIn()
                {
                    diagram.Zoom(1.2, new DiagramPoint { X = 100, Y = 100 });
                }
                public void ZoomOut()
                {
                    diagram.Zoom(1 / 1.2, new DiagramPoint { X = 100, Y = 100 });
                }
                private void ResetZoom()
                {
                    diagram.ResetZoom();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.AddChild(Syncfusion.Blazor.Diagram.NodeGroup,Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            This method is used for adding child to the selected group node. 
            </summary>
            <param name="group">it contains group node</param>
            <param name="child">it contains node/connector</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.AddChildExtend(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.NodeBase,System.Int32)">
            <summary>
            Extented method of addchild.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Group">
            <summary>
            Group the selected nodes and connectors in the diagram. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Ungroup">
            <summary>
            Ungroup the selected nodes and connectors in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Undo">
            <summary>
            Restores the last action that is performed. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Redo">
            <summary>
            It is used to restore the last undo action. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.StartGroupAction">
            <summary>
            Starts the grouping of actions that will be undone/restored as a whole. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.EndGroupAction">
            <summary>
            It closes the grouping of actions that will be undone/restored as a whole.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ClearHistory">
            <summary>
            This method is used to clear the history.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Clone">
            <summary>
            This method helps to clone the diagram.
            </summary>
            <returns>Diagram</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.PropertyUpdate(Syncfusion.Blazor.Diagram.Direction,Syncfusion.Blazor.Diagram.DiagramConstraints)">
            <summary>
            This method is used to update property.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.InitHistory">
            <summary>
            This method is used to Initializes the undo redo actions
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.AddHistoryEntry(Syncfusion.Blazor.Diagram.HistoryEntryBase)">
            <summary>
            Adds the given change in the diagram control to the track
            </summary>
            <param name="entry">Defines the entry/information about a change in diagram</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateDiagramTemplates(Syncfusion.Blazor.Diagram.DiagramTemplates)">
            <summary>
            This method is used to update diagram templates.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateDrawingObject(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to update drawing objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateTool(Syncfusion.Blazor.Diagram.DiagramInteractions)">
            <summary>
            This method is used to update tool.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UpdateViewPort">
            <summary>
            This method is used to update the diagram clipboard dimension.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.BringIntoView(Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
             Bring the specified bounds into the view port of the diagram.
             </summary>
             <param name="bounds">
             Specified size of the element that should also be brought into view.                    
             </param>
             <example>
             <code>
             <![CDATA[
             <SfDiagramComponent @ref="diagram" Width="1000px" Height="500px" @bind-Nodes="@nodes"><PageSettings @bind-Orientation="@pageOrientation" @bind-MultiplePage="@IsMultiplePage"></PageSettings>
             </SfDiagramComponent>
             @code{
                     SfDiagramComponent diagram;
            
                    DiagramObjectCollection<Node> nodes;     
                    DiagramObjectCollection<Connector> connectors;
                    Create a node with out of the view port to check bring into view and bring center functionalities
                    protected override void OnInitialized()
                    {
                        nodes = new DiagramObjectCollection<Node>(){
                        new Node { ID = "node1", Width = 150, Height = 100, OffsetX = 1100, OffsetY = 900, Annotations =
                        new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation() { Content = "Node1" } } },
                    };
                    }
                    Brings the specified bounds into the view port of the diagram
                    private void BringIntoView()
                    {
                    DiagramRect bounds = new DiagramRect(950,800,500,500);
                    diagram.BringIntoView(bounds);
                    }
                    }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.BringIntoCenter(Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
             Bring the specified bounds into center of the view port of the diagram.
             </summary>
             <param name="bound">
             Specified size of the element that should also be brought into center of the viewport.                  
             </param>
             <example>
             <code>
             <![CDATA[
             <SfDiagramComponent @ref="diagram" Width="1000px" Height="500px" @bind-Nodes="@nodes"><PageSettings @bind-Orientation="@pageOrientation" @bind-MultiplePage="@IsMultiplePage"></PageSettings>
             </SfDiagramComponent>
             @code{
                     SfDiagramComponent diagram;
            
                    DiagramObjectCollection<Node> nodes;     
                    DiagramObjectCollection<Connector> connectors;
                    Create a node with out of the view port to check bring into view and bring center functionalities
                    protected override void OnInitialized()
                    {
                        nodes = new DiagramObjectCollection<Node>(){
                        new Node { ID = "node1", Width = 150, Height = 100, OffsetX = 1100, OffsetY = 900, Annotations =
                        new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation() { Content = "Node1" } } },
                    };
                    }
                    Brings the specified bounds into the center of the view port of the diagram
                    private void BringIntoCenter()
                    {
                    DiagramRect bound = new DiagramRect(950,800,500,500);
                    diagram.BringIntoCenter(bound);
                    }
                    }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SetDefaultHistory">
            <summary>
            This method is used to set default history to undo/redo.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ComponentDispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FitOptions">
            <summary>
            Defines how the diagram has to be fit into the viewport
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent Diagram;
               FitOptions Options = new FitOptions(){
               Mode = FitMode.Both,
               Region = DiagramRegion.PageSetting,
               }
               
               Diagram.FitToPage(Options);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FitOptions.Mode">
            <summary> 
            Gets or sets the Mode of the Fit Options.
            </summary> 
            <value>The default value is <see cref="F:Syncfusion.Blazor.Diagram.FitMode.Both"/> </value>
            <remarks> 
            * Both - Fits the diagram content within the viewport. 
            * Width – Fits the width of the diagram content within the viewport. 
            * Height - Fits the height of the diagram content within the viewport.
            </remarks> 
            <example>
            <code>
            <![CDATA[
            <SfDiagramComponent Width="1000px" Height="1000px">
            </SfDiagramComponent>
            @code
            {
               SfDiagramComponent Diagram;
               FitOptions Options = new FitOptions(){
               Mode = FitMode.Both,
               Region = DiagramRegion.PageSetting,
               }
               
               Diagram.FitToPage(Options);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FitOptions.Region">
             <summary> 
             Gets or sets the region in the diagram which need to be fit within the viewport. 
            </summary> 
             <value>The default value is <see cref="F:Syncfusion.Blazor.Diagram.DiagramRegion.PageSettings"/> </value>
            <remarks> 
             * PageSettings - The region within the given values( x,y, width and height) of page settings is fit within the viewport. 
             * Content – Content of the diagram without empty space around the content is fit within the viewport. 
             </remarks> 
             <example>
             <code>
             <![CDATA[
             <SfDiagramComponent Width="1000px" Height="1000px">
             </SfDiagramComponent>
             @code
             {
                SfDiagramComponent Diagram;
                FitOptions Options = new FitOptions(){
                Mode = FitMode.Both,
                Region = DiagramRegion.PageSetting,
                }
                
                Diagram.FitToPage(Options);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ContextMenuItem">
             <summary>
             Represents the context menu item model.
             </summary>
             <remarks>
             The custom context menu provides an option to add the new custom items to the context menu. Those additional custom items have to be defined and added to the Items property of the context menu.
             </remarks>
             <example>
             <code lang="Razor">
             <![CDATA[<SfDiagramComponent @ref="diagram" Height="600px" Width="90%">
            <ContextMenuSettings @bind-Show="@show"
                               @bind-ShowCustomMenuOnly="customMenuOnly" 
                            @bind-Items="@Items">
            <ContextMenuTemplate>
                @context.Text
                <span class="shortcut">@((@context.Text == "Save As...") ? "Ctrl + S" : "")</span>
            </ContextMenuTemplate>
            </ContextMenuSettings>
            </SfDiagramComponent>
             ContextMenuSettings ContextMenuSettings;
             //@code{
            List<ContextMenuItem> Items;
            bool customMenuOnly = false;
            bool show = true;
            
            protected override void OnInitialized()
            {
                nodes = new DiagramObjectCollection<Node>();
                connectors = new DiagramObjectCollection<Connector>();
            
                Items = new List<ContextMenuItem>()
                {
                        new ContextMenuItem()
                        {
                            Text = "Save As...",
                            Id = "save",
                            IconCss = "e-save",
                        },
                        new ContextMenuItem()
                        {
                            Text = "Group",
                            Id = "load",
                            IconCss = "e-group"
                        }
                };
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuItem.IconCss">
            <summary>
            Gets or sets a value indicates css class for icon to the context menu item.
            </summary>
            <remarks>
            The IconCss property defines the class/multiple classes separated by a space for the menu item that is used to include an icon. A menu item can include a font icon and sprite image.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuItem.ID">
            <summary>
            Gets or sets the ID for the context menu item.
            </summary>
            <remarks>
            Menu item ID needs to be unique to use. When creating a menu item, the user should not provide the same id to other menu items.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuItem.Items">
            <summary>
            Gets or sets a value indicates the submenu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuItem.Separator">
             <summary>
             Gets or sets a value indicates the horizontal line used to separate the menu items. Users can enable or disable the separator to group the menu item.
             </summary>
             <value> true, the separator will be added between the menuitems.
             Otherwise, false.
            The default value is false </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuItem.Text">
            <summary>
            Gets or sets a value indicates the text for a context menu item.
            </summary>
            <value> By default the text value is empty.</value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuItem.Hidden">
            <summary>
            Gets or sets a value indicates whether allows the users to show/hide the menu item.
            </summary>
            <value> true, the contextmenu item is not in visible state. Otherwise, false. The default value is false </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuItem.Disabled">
            <summary>
            Gets or sets a value indicates whether allows the users to enable/disable the menu item.
            </summary>
            <value> true, the contextmenu item is not in enable state. Otherwise, false. The default value is false </value>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ContextMenuItem.Url">
            <summary>
            Gets or sets the URL for the menu item that creates the anchor link to navigate to the URL provided.
            </summary>
            <value> By default the url value is empty.</value>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramMenuClickEventArgs">
             <summary>
             Notifies when the context menu item gets clicked.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent @ref="diagram" Height="600px" Width="90%">
            <ContextMenuSettings @bind-Show="@show"
                                 @bind-ShowCustomMenuOnly="customMenuOnly" 
                                 @bind-Items="@Items" 
                                 ContextMenuOpening="@BeforeOpen" 
                                 ContextMenuItemClicked="@ItemClicked"> 
            </ContextMenuSettings>
            </SfDiagramComponent>
             @code {
            SfDiagramComponent diagram;
            ContextMenuSettings ContextMenuSettings;
            List<ContextMenuItem> Items;
            bool customMenuOnly = false;
            bool show = true;
            
            protected override void OnInitialized()
            {
                nodes = new DiagramObjectCollection<Node>();
                connectors = new DiagramObjectCollection<Connector>();
            
                Items = new List<ContextMenuItem>()
                {
                        new ContextMenuItem()
                        {
                            Text = "Save As...",
                            Id = "save",
                            //IconCss = "glyphicon glyphicon-pencil",
                        },
                        new ContextMenuItem()
                        {
                            Text = "Group",
                            Id = "load",
                            //IconCss = "e-save"
                        }
                };
            }
            private void BeforeOpen(DiagramBeforeMenuOpenEventArgs args)
            {
                foreach (ContextMenuItem Item in args.Items)
                {
                    if (Item.Text == "Groups")
                    {
                        args.HiddenItems.Add(Item.Id);
                    }
                }
            }
            private void ItemClicked(DiagramMenuEventArgs args)
            {
                if (args.Item.Text == "Group")
                {
                    diagram.SelectAll();
                    diagram.Group();
                }
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMenuClickEventArgs.Item">
            <summary>
            Gets or sets a value indicates the selected item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramMenuOpeningEventArgs">
             <summary>
             Notifies before opening context menu
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent @ref="diagram" Height="600px" Width="90%">
            <ContextMenuSettings @bind-Show="@show"
                                 @bind-ShowCustomMenuOnly="customMenuOnly" 
                                 @bind-Items="@Items" 
                                 ContextMenuOpening="@BeforeOpen" 
                                 ContextMenuItemClicked="@ItemClicked"> 
            </ContextMenuSettings>
            </SfDiagramComponent>
             @code {
            SfDiagramComponent diagram;
            ContextMenuSettings ContextMenuSettings;
            List<ContextMenuItem> Items;
            bool customMenuOnly = false;
            bool show = true;
            
            protected override void OnInitialized()
            {
                nodes = new DiagramObjectCollection<Node>();
                connectors = new DiagramObjectCollection<Connector>();
            
                Items = new List<ContextMenuItem>()
                {
                        new ContextMenuItem()
                        {
                            Text = "Save As...",
                            Id = "save",
                            //IconCss = "glyphicon glyphicon-pencil",
                        },
                        new ContextMenuItem()
                        {
                            Text = "Group",
                            Id = "load",
                            //IconCss = "e-save"
                        }
                };
            }
            private void BeforeOpen(DiagramBeforeMenuOpenEventArgs args)
            {
                foreach (ContextMenuItem Item in args.Items)
                {
                    if (Item.Text == "Groups")
                    {
                        args.HiddenItems.Add(Item.Id);
                    }
                }
            }
            private void ItemClicked(DiagramMenuEventArgs args)
            {
                if (args.Item.Text == "Group")
                {
                    diagram.SelectAll();
                    diagram.Group();
                }
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMenuOpeningEventArgs.HiddenItems">
            <summary>
            Gets or sets a value indicating the collection of hidden items associated with context menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMenuOpeningEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether the user can prevent a menu from opening.
            </summary>        
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMenuOpeningEventArgs.Items">
            <summary>
            Gets or sets the value indicates the collection of menu items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramTooltip">
            <summary> 
            Represents the textual content that appears while the mouse is hovering over a nodes/connectors
            </summary> 
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind- Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> connectors= new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {  
                Node node1 = new Node() { ID = "node1", Constraints = NodeConstraints.Default|NodeConstraints.Tooltip ,OffsetX = 100, OffsetY = 100, Tooltip=new DiagramTooltip(){Content="node1",ShowTipPointer=false,Position=Position.BottomRight} };  
                nodes.Add(node1);  
                Connector connector1=new Connector{ ID = "Connector1" ,Constraints =  ConnectorConstraints.Default|ConnectorConstraints.Tooltip,SourceID = new DiagramPoint() { X = 100, Y = 100 } ,TargetID=new DiagramPoint() { X = 100, Y = 100 } , Tooltip=new DiagramTooltip(){Content="connector1",ShowTipPointer=True,Position=Position.TopRight} }
                connectors.Add(connector1);  
            }  
            }  
            ]]>  
            </code>  
            </example>  
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramTooltip.#ctor(Syncfusion.Blazor.Diagram.DiagramTooltip)">
            <summary>
            Creates a new instance of the Tooltip from the given tooltip.
            </summary>
            <param name="src">DiagramTooltip</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramTooltip.#ctor">
            <summary>
            Initializes a new instance of the Tooltip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramTooltip.Clone">
            <summary>
            Creates a new object that is a copy of the current tooltip. 
            </summary>
            <returns>A new object that is a copy of this tooltip</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTooltip.Template">
            <summary> 
            Gets or sets the customized content of a tooltip
            </summary> 
            <value> The default value will be null</value>
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind- Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> connectors= new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {
                ...  
                Tooltip=new DiagramTooltip(){Template=getcontent()} };  
                ...
                public string getContent()
                {
                 string content = "<p>Name : Diagram</p><p>Element: Node</p><p>Content: node1<p></p>";
                 return content;
                }  
            }  
            ]]>  
            </code>  
            </example>      
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTooltip.Content">
            <summary> 
            Gets or set the textual content of the tooltip.
            </summary> 
            <value> The default value will be null</value>
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind- Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> connectors= new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {
                ...  
                Tooltip=new DiagramTooltip(){Content="NodeTooltip"} };  
                ...
            }  
            ]]>  
            </code>  
            </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTooltip.ShowTipPointer">
            <summary>
            Gets or sets a value indicates whether allows the users to show/hide the tip pointer
            </summary>
            <value>true, if the tip pointer is visible; otherwise, false.</value>
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind- Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> connectors= new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {
                ...  
                Tooltip=new DiagramTooltip(){ShowTipPointer=True} };  
                ...
            }  
            ]]>  
            </code>  
            </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTooltip.Position">
            <summary>
            Gets or sets the position of the Tooltip.
            </summary>
            <value>The default value is <see cref="F:Syncfusion.Blazor.Popups.Position.BottomRight"/> </value>
            <table>
            <tr>
            <td>The following options are used to define the position of the tooltip </td>
            </tr>
            <tr>
            <td>TopCenter - Positions the Tooltip to the top-center of the target element.</td>
            </tr>
            <tr>
            <td>TopLeft - Positions the Tooltip to the top-left of the target element.</td>
            </tr>
            <tr>
            <td>TopRight - Positions the Tooltip to the top-right of the target element.</td>
            </tr>
            <tr>
            <td>BottomLeft - Positions the Tooltip to the bottom-left of the target element.</td>
            </tr>
            <tr>
            <td>BottomCenter - Positions the Tooltip to the bottom-Center of the target element.</td>
            </tr>
            <tr>
            <td>BottomRight - Positions the Tooltip to the bottom-Right of the target element.</td>
            </tr>
            <tr>
            <td>LeftTop - Positions the Tooltip to the left-top of the target element.</td>
            </tr>
            <tr>
            <td>LeftCenter - Positions the Tooltip to the left-center of the target element.</td>
            </tr>
            <tr>
            <td>LeftBottom - Positions the Tooltip to the left-bottom of the target element.</td>
            </tr>
            <tr>
            <td>RightTop - Positions the Tooltip to the right-top of the target element.</td>
            </tr>
            <tr>
            <td>RightCenter- Positions the Tooltip to the right-center of the target element.</td>
            </tr>
            <tr>
            <td>RightBottom- Positions the Tooltip to the right-bottom of the target element.</td>
            </tr>
            </table>
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind- Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> connectors= new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {
                ...  
                Tooltip=new DiagramTooltip(){Position=Position.LeftBottom} };  
                ...
            }  
            ]]>  
            </code>  
            </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTooltip.OpensOn">
            <summary>
            Gets or sets the type of open mode to display the Tooltip content.
            The available open modes are Auto, Hover, Click and Custom.
            </summary>
            <value>The default value is "Auto"</value>        
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind- Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> connectors= new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {
                ...  
                Tooltip=new DiagramTooltip(){OpensOn="Custom"} };  
                ...
            }  
            ]]>  
            </code>  
            </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTooltip.AnimationSettings">
            <summary>
            Gets or sets the user to enable the animation to the tooltip.
            </summary>
            <value>The default value is null</value>
            <example>  
            <code>  
            <![CDATA[  
            <SfDiagramComponent @ref="diagram” Width="1000px" Height="500px" @bind- Nodes="@nodes"></SfDiagramComponent>  
            @code{  
            SfDiagramComponent diagram;  
            DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();  
            DiagramObjectCollection<Connector> connectors= new DiagramObjectCollection<Connector>();  
            protected override void OnInitialized()  
            {  
               ...
               Tooltip=new DiagramTooltip(){AnimationSettings=new AnimationModel()
               {
                  Open = new TooltipAnimationSettings(){Effect = Effect.FadeZoomIn,Duration=100},
                  Close = new TooltipAnimationSettings(){Effect = Effect.FadeZoomOut,Duration=50}
               };  
               ...  
            }  
            ]]>  
            </code>  
            </example>  
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent">
             <summary>
             Represents an overview component for navigating a large and complex diagram. It helps to see overview <see cref="T:Syncfusion.Blazor.Diagram.SfDiagramComponent"/> including the view outside of view port which helps the end-user with navigation. End-users can pan the diagram using overview component by panning, resizing, drawing and tapping the focus rect in Overview component. 
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent @ref = "diagram" Height="600px" Width="90%" ID="diagram" @bind-Nodes="nodes"
                                @bind-Connectors="connectors">
            </SfDiagramComponent>
            <SfDiagramOverviewComponent Width = "400" Height="300" SourceID="diagram" Constraints="DiagramOverviewConstraints.Zoom"></SfDiagramOverviewComponent>
            @code {
                SfDiagramComponent diagram; DiagramObjectCollection<Node> nodes; DiagramObjectCollection<Connector> connectors;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    connectors = new DiagramObjectCollection<Connector>();
                    Node node1 = new Node()
                    {
                        ID = "node1",
                        Height = 100,
                        Width = 100,
                        OffsetX = 100,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    Node node2 = new Node()
                    {
                        ID = "node2",
                        Height = 100,
                        Width = 100,
                        OffsetX = 300,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    nodes.Add(node1); nodes.Add(node2);
                    Connector connector1 = new Connector()
                    {
                        ID = "connector1",
                        SourceID = "node1",
                        TargetID = "node2",
                        Type = ConnectorSegmentType.Straight,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeWidth = 2
                        }
                    };
                    connectors.Add(connector1);
                }
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.SourceID">
             <summary>
             Gets or sets the diagram reference ID for the rendering its overall view.
             </summary>
             <value>
             The String value represents the unique ID of the source diagram. The default value is null.
             </value>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent @ref = "diagram" Height="600px" Width="90%" ID="diagram" @bind-Nodes="nodes"
                                @bind-Connectors="connectors">
            </SfDiagramComponent>
            <SfDiagramOverviewComponent Width = "400" Height="300" SourceID="diagram"></SfDiagramOverviewComponent>
            @code {
                SfDiagramComponent diagram; DiagramObjectCollection<Node> nodes; DiagramObjectCollection<Connector> connectors;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    connectors = new DiagramObjectCollection<Connector>();
                    Node node1 = new Node()
                    {
                        ID = "node1",
                        Height = 100,
                        Width = 100,
                        OffsetX = 100,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    Node node2 = new Node()
                    {
                        ID = "node2",
                        Height = 100,
                        Width = 100,
                        OffsetX = 300,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    nodes.Add(node1); nodes.Add(node2);
                    Connector connector1 = new Connector()
                    {
                        ID = "connector1",
                        SourceID = "node1",
                        TargetID = "node2",
                        Type = ConnectorSegmentType.Straight,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeWidth = 2
                        }
                    };
                    connectors.Add(connector1);
                }
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.Height">
             <summary>
             Gets or sets the height of the overview component.
             </summary>
             <value>
             The height of the <see cref="T:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent"/>. The default value is 100%.
             </value>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent @ref = "diagram" Height="600px" Width="90%" ID="diagram" @bind-Nodes="nodes"
                                @bind-Connectors="connectors">
            </SfDiagramComponent>
            <SfDiagramOverviewComponent Width = "400" Height="300" SourceID="diagram"></SfDiagramOverviewComponent>
            @code {
                SfDiagramComponent diagram; DiagramObjectCollection<Node> nodes; DiagramObjectCollection<Connector> connectors;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    connectors = new DiagramObjectCollection<Connector>();
                    Node node1 = new Node()
                    {
                        ID = "node1",
                        Height = 100,
                        Width = 100,
                        OffsetX = 100,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    Node node2 = new Node()
                    {
                        ID = "node2",
                        Height = 100,
                        Width = 100,
                        OffsetX = 300,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    nodes.Add(node1); nodes.Add(node2);
                    Connector connector1 = new Connector()
                    {
                        ID = "connector1",
                        SourceID = "node1",
                        TargetID = "node2",
                        Type = ConnectorSegmentType.Straight,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeWidth = 2
                        }
                    };
                    connectors.Add(connector1);
                }
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.Width">
             <summary>
             Gets or sets the width of the overview component.
             </summary>
             <value>
             The width of the <see cref="T:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent"/>. The default value is 100%.
             </value>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent @ref = "diagram" Height="600px" Width="90%" ID="diagram" @bind-Nodes="nodes"
                                @bind-Connectors="connectors">
            </SfDiagramComponent>
            <SfDiagramOverviewComponent Width = "400" Height="300" SourceID="diagram"></SfDiagramOverviewComponent>
            @code {
                SfDiagramComponent diagram; DiagramObjectCollection<Node> nodes; DiagramObjectCollection<Connector> connectors;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    connectors = new DiagramObjectCollection<Connector>();
                    Node node1 = new Node()
                    {
                        ID = "node1",
                        Height = 100,
                        Width = 100,
                        OffsetX = 100,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    Node node2 = new Node()
                    {
                        ID = "node2",
                        Height = 100,
                        Width = 100,
                        OffsetX = 300,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    nodes.Add(node1); nodes.Add(node2);
                    Connector connector1 = new Connector()
                    {
                        ID = "connector1",
                        SourceID = "node1",
                        TargetID = "node2",
                        Type = ConnectorSegmentType.Straight,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeWidth = 2
                        }
                    };
                    connectors.Add(connector1);
                }
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.Constraints">
             <summary>
             Gets or sets the value that enables the interactions (zoom, pan, draw and tap) in overview component to view diagram. For example, when zoom enabled - user can zoom the diagram by resizing the rect in overview component.
             </summary>
             <value>
             <see cref="T:Syncfusion.Blazor.Diagram.DiagramOverviewConstraints"/> flags enum that specifies which interactions of the <see cref="T:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent"/> are enabled. The default value is <see cref="F:Syncfusion.Blazor.Diagram.DiagramOverviewConstraints.Default"/>
             </value>
             <example>
             <code lang="Razor">
             <![CDATA[
             <SfDiagramComponent @ref = "diagram" Height="600px" Width="90%" ID="diagram" @bind-Nodes="nodes"
                                @bind-Connectors="connectors">
            </SfDiagramComponent>
            <SfDiagramOverviewComponent Width = "400" Height="300" SourceID="diagram" Constraints="DiagramOverviewConstraints.Zoom | DiagramOverviewConstraints.Pan"></SfDiagramOverviewComponent>
            @code {
                SfDiagramComponent diagram; DiagramObjectCollection<Node> nodes; DiagramObjectCollection<Connector> connectors;
                protected override void OnInitialized()
                {
                    nodes = new DiagramObjectCollection<Node>();
                    connectors = new DiagramObjectCollection<Connector>();
                    Node node1 = new Node()
                    {
                        ID = "node1",
                        Height = 100,
                        Width = 100,
                        OffsetX = 100,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    Node node2 = new Node()
                    {
                        ID = "node2",
                        Height = 100,
                        Width = 100,
                        OffsetX = 300,
                        OffsetY = 100,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeColor = "white",
                            StrokeWidth = 1
                        }
                    };
                    nodes.Add(node1); nodes.Add(node2);
                    Connector connector1 = new Connector()
                    {
                        ID = "connector1",
                        SourceID = "node1",
                        TargetID = "node2",
                        Type = ConnectorSegmentType.Straight,
                        Style = new ShapeStyle()
                        {
                            Fill = "#6BA5D7",
                            StrokeWidth = 2
                        }
                    };
                    connectors.Add(connector1);
                }
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent"/> class.
            </summary>
            <param name="parent">It provides sfdiagramcomponent</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.OnInitializedAsync">
            <summary>
            This method is invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occur.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering, otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Overview.SfDiagramOverviewComponent.OverviewDispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs">
            <summary>
            Notifies the mouse events, while interacting on overview panel
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.IsPan">
            <summary>
             Represents the scroller related actions to conform whether the scroller is updated or not in UI level. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.AltKey">
            <summary>
            Returns whether the alt key has been pressed or not. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.ClientX">
            <summary>
            Represents the horizontal coordinate of a touch point relative to the  viewport. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.ClientY">
            <summary>
            Represents the vertical coordinate of a touch point relative to the viewport.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.OffsetX">
            <summary>
            Represents the x coordinate in the diagram where the mouse events happened.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.OffsetY">
            <summary>
            Represents the y coordinate in the diagram where the mouse events happened.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.CtrlKey">
            <summary>
            Returns whether the ctrl key has been pressed or not. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.Detail">
            <summary>
            Represents the title of the symbol group. By default, it is empty.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.MetaKey">
            <summary>
            Represents whether the mac meta key is pressed inside the diagram or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.ScreenX">
            <summary>
             Represents the horizontal distance between the left side of the screen. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.ScreenY">
            <summary>
            Represents the vertical distance between the top side of the screen. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.ShiftKey">
            <summary>
            Returns whether the shift key has been pressed or not. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.Type">
            <summary>
            Represents the type of action like mouse movement, down or up in the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.WheelDelta">
            <summary>
            Return the mouse scroll bar wheel data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.DiagramGetBoundingClientRect">
            <summary>
            Represents the position of the diagram where it is rendered.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.DiagramCanvasScrollBounds">
            <summary>
            Represents the scroller’s left, top, width and height of the diagram. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.Key">
            <summary>
            Represents the key which is pressed inside the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.KeyCode">
            <summary>
            Represents the key code which is pressed inside the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.Button">
            <summary>
            Represents the button that has been clicked in the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.Touches">
            <summary>
            Represents the collection of touches while is tap inside the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Overview.OverviewMouseEventArgs.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewPanelTouches.PageX">
            <summary>
             Represents the horizontal distance between the left side of the diagram page. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewPanelTouches.PageY">
            <summary>
            Represents the vertical distance between the left side of the diagram page.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewPanelTouches.ScreenX">
            <summary>
            Represents the horizontal distance between the left side of the screen. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewPanelTouches.ScreenY">
            <summary>
            Represents the vertical distance between the top side of the screen. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewPanelTouches.ClientX">
            <summary>
            Represents the horizontal coordinate of a touch point relative to the  viewport. 
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Overview.OverviewPanelTouches.ClientY">
            <summary>
            Represents the vertical coordinate of a touch point relative to the viewport.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.#ctor(Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent"/> class..
            </summary>
            <param name="paletteComponent">It defines palette.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.InvokeDiagramEvents(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs)">
            <summary>
            Used to invoke the diagram's touch events while dragging and dropping the objects from the palette.
            </summary>
            <param name="args">An JSMouseEventArgs that contains the event data.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.InvokePaletteEvents(Syncfusion.Blazor.Diagram.Internal.JSMouseEventArgs,System.String)">
            <summary>
            Used to invoke the palette events
            </summary>
            <param name="args">An JSMouseEventArgs that contains the event data.</param>
            <param name="Id">An string that contains the id value.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.SymbolPaletteDragEnter(System.Object)">
             <summary>
            It invokes when dragging the symbols from the palette.
             </summary>
             <param name="value">An object that contains diagram id</param>
             <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.SymbolPaletteDragLeave">
            <summary>
            It invokes when leaving the symbols from the palette.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.SymbolPaletteDrop(System.Object,System.Boolean)">
            <summary>
             It invokes when dragging and dropping the symbols from the palette.
            </summary>
            <param name="value">An object that contains Symbol information.</param>
            <param name="isTouch">It contains bool value. </param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.MouseDown(System.String)">
            <summary>
            It invokes when performing mouse down in the SymbolPalette.
            </summary>
            <param name="Id">string</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.MouseMove(System.String)">
            <summary>
             It invokes when performing the mousemove in the SymbolPalette.
            </summary>
            <param name="Id">string</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.MouseLeave">
            <summary>
            It invokes when performing mouseleave in the SymbolPalette.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.MouseUp">
            <summary>
             It invokes when performing mouseup in the SymbolPalette.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Internal.SfSymbolPaletteEventHandler.ElementDropToOutSideDiagram">
            <summary>
            It is invoked while dropping the symbol outside the diagram.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent">
            <summary>
            Represents how to display a collection of palettes. The palette shows a set of nodes and connectors. It allows you to drag and drop the nodes and connectors into the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes" SymbolDragPreviewSize="@SymbolPreview" SymbolHeight="@symbolSizeHeight" GetSymbolInfo="GetSymbolInfo" SymbolWidth="@symbolSizeWidth" SymbolMargin="@SymbolMargin">
            </SfSymbolPaletteComponent >
            @code
            { 
                DiagramSize SymbolPreview;
                SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
                double symbolSizeWidth;
                double symbolSizeHeight;
                DiagramObjectCollection<Palette> Palettes = new DiagramObjectCollection<Palette>();
                DiagramObjectCollection<NodeBase> TNodes = new DiagramObjectCollection<NodeBase>();
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    return SymbolInfo;
                }
                protected override void OnInitialized()
                {
                    SymbolPreview = new DiagramSize();
                    SymbolPreview.Width = 80;
                    SymbolPreview.Height = 80;
                    symbolSizeWidth = 50;
                    symbolSizeHeight = 50;
                    TNodes = new DiagramObjectCollection<NodeBase>();
                    Node TNode2 = new Node()
                    { 
                        ID = "node1", 
                        Shape = new FlowShape() { Type = NodeShapes.Flow, Shape = NodeFlowShapes.Decision }  
                    };
                    TNodes.Add(TNode2);
                    Palettes = new DiagramObjectCollection<Palette>()
                    {
                        new Palette(){Symbols =TNodes,Title="Flow Shapes",ID="Flow Shapes" },
                    };
                }
            }
            ]]>
            </code>
            </example>
            <summary>
            Represents how to display a collection of palettes. The palette shows a set of nodes and connectors. It allows you to drag and drop the nodes and connectors into the diagram. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes" SymbolDragPreviewSize="@SymbolPreview" SymbolHeight="@symbolSizeHeight" GetSymbolInfo="GetSymbolInfo" SymbolWidth="@symbolSizeWidth" SymbolMargin="@SymbolMargin">
            </SfSymbolPaletteComponent >
            @code
            { 
                DiagramSize SymbolPreview;
                SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
                double symbolSizeWidth;
                double symbolSizeHeight;
                DiagramObjectCollection<Palette> Palettes = new DiagramObjectCollection<Palette>();
                DiagramObjectCollection<NodeBase> TNodes = new DiagramObjectCollection<NodeBase>();
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    return SymbolInfo;
                }
                protected override void OnInitialized()
                {
                    SymbolPreview = new DiagramSize();
                    SymbolPreview.Width = 80;
                    SymbolPreview.Height = 80;
                    symbolSizeWidth = 50;
                    symbolSizeHeight = 50;
                    TNodes = new DiagramObjectCollection<NodeBase>();
                    Node TNode2 = new Node()
                    { 
                        ID = "node1", 
                        Shape = new FlowShape() { Type = NodeShapes.Flow, Shape = NodeFlowShapes.Decision }  
                    };
                    TNodes.Add(TNode2);
                    Palettes = new DiagramObjectCollection<Palette>()
                    {
                        new Palette(){Symbols =TNodes,Title="Flow Shapes",ID="Flow Shapes" },
                    };
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.PrepareSymbols(Syncfusion.Blazor.Diagram.IDiagramObject,System.Boolean)">
            <summary>
            Used to prepare symbols
            </summary>
            <param name="symbol">IDiagramObject</param>
            <param name="isMeasure">symbol</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.GetSymbolDescription(Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo,System.Double,Syncfusion.Blazor.Diagram.StackPanel,Syncfusion.Blazor.Diagram.IDiagramObject,System.Boolean)">
            <summary>
            Used to get a symbol description
            </summary>
            <param name="symbolInfo">SymbolInfo</param>
            <param name="width">double</param>
            <param name="parent">StackPanel</param>
            <param name="symbol">IDiagramObject</param>
            <param name="isPanelAvailable">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.GetPreviewSymbolSize(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
             Used to get a symbol preview size
            </summary>
            <param name="symbol">NodeBase</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.GetSymbolSize(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            Used to get a symbol size
            </summary>
            <param name="symbol">NodeBase</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ArrangeChild(Syncfusion.Blazor.Diagram.NodeGroup,System.Double,System.Double,System.Boolean)">
            <summary>
            Used to arrange the child element.
            </summary>
            <param name="obj">NodeGroup</param>
            <param name="x">double</param>
            <param name="y">double</param>
            <param name="drop">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.InitSymbols(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            Used to intialize symbols
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.UpdateDictionaryValue(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            Used to update dictionary values
            </summary>
            <param name="symbol">symbol</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.UpdateMeasureElements">
            <summary>
            Used to measure elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.UpdateElements(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            Used to update symbols.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.PaletteMeasureBounds(Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.SymbolPalette.Palette)">
            <summary>
             Used to measure the bounds of a symbol.
            </summary>
            <param name="paletteSymbol">NodeBase</param>
            <param name="symbolPaletteGroup">Palette</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.AddPaletteSymbol(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            Used to add a symbol in a palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.AddPaletteSymbols(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.SymbolPalette.Palette})">
            <summary>
            Used to add palette items.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.UpdatePalettes">
            <summary>
            Used to update palettes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.GetContainer(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramContainer)">
            <summary>
            Used to get a container.
            </summary>
            <param name="obj">IDiagramObject</param>
            <param name="container">DiagramContainer</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.GetSymbolPreview(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            Used to get the preview of a symbol.
            </summary>
            <param name="newNode">NodeBase</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.MeasureAndArrangeSymbol(Syncfusion.Blazor.Diagram.DiagramElement)">
            <summary>
            Used to measure and arrange the diagram elements.
            </summary>
            <param name="content">DiagramElement</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ScaleConnectorSymbol(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramContainer,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Used to scale the connector symbol.
            </summary>
            <param name="symbol">IDiagramObject</param>
            <param name="symbolContainer">DiagramContainer</param>
            <param name="sw">double</param>
            <param name="sh">double</param>
            <param name="width">double</param>
            <param name="height">double</param>
            <param name="check">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.MeasureChild(Syncfusion.Blazor.Diagram.DiagramElement)">
            <summary>
            Used to meausre the child element.
            </summary>
            <param name="container">DiagramElement</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ScaleGroup(Syncfusion.Blazor.Diagram.DiagramElement,System.Double,System.Double,Syncfusion.Blazor.Diagram.IDiagramObject,System.Boolean)">
            <summary>
            Used to scale group symbols.
            </summary>
            <param name="child">DiagramElement</param>
            <param name="w">double</param>
            <param name="h">double</param>
            <param name="symbol">IDiagramObject</param>
            <param name="preview">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ScaleChildren(Syncfusion.Blazor.Diagram.DiagramElement,System.Double,System.Double,Syncfusion.Blazor.Diagram.IDiagramObject,System.Boolean)">
            <summary>
            Used to scale the children.
            </summary>
            <param name="container">DiagramElement</param>
            <param name="w">double</param>
            <param name="h">double</param>
            <param name="symbol">IDiagramObject</param>
            <param name="preview">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ScaleGroupNode(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramContainer,System.Double,System.Double,System.Boolean)">
            <summary>
            Used to scale the group node.
            </summary>
            <param name="symbol">IDiagramObject</param>
            <param name="symbolContainer">DiagramContainer</param>
            <param name="width">double</param>
            <param name="height">double</param>
            <param name="preview">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ScaleElement(Syncfusion.Blazor.Diagram.DiagramElement,System.Double,System.Double)">
            <summary>
            Used to scale the element.
            </summary>
            <param name="element">DiagramElement</param>
            <param name="sw">double</param>
            <param name="sh">double</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ScaleSymbol(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramContainer,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Used to scale the symbol.
            </summary>
            <param name="symbol">IDiagramObject</param>
            <param name="symbolContainer">DiagramContainer</param>
            <param name="sw">double</param>
            <param name="sh">double</param>
            <param name="width">double</param>
            <param name="height">double</param>
            <param name="check">bool</param>
            <param name="preview">bool</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Targets">
            <summary>
            Represents the collection of diagram instances that are to be added to perform the drag and drop functionalities with multiple diagrams.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent   SymbolDragPreviewSize="60" >
            </SfSymbolPaletteComponent >
            <SfDiagramComponent   @ref="diagram"/>
            @code{
            SfDiagramComponent diagram;
            protected override async Task OnAfterRenderAsync(bool firstRender){
            PaletteInstance.Targets = new DiagramObjectCollection<SfDiagramComponent>() { };
            PaletteInstance.Targets.Add(diagram);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Width">
            <summary>
            Gets or sets the width of the symbol palette.
            </summary>
            <value>The width of symbol palette. The default is 100%</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Width="600px" >
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Height">
            <summary>
            Gets or sets the height of the symbol palette.
            </summary>
            <value>The Height of symbol palette. The default is 100%</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" >
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.AllowDrag">
            <summary>
            Represents whether the symbols can be dragged from the palette or not. 
            </summary>
            <value>true, We can drag symbols from palette; Otherwise false.</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent AllowDrag="true" Height="600px" >
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ChildContent">
            <summary>
            Sets Child content for the symbol Palette component
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolWidth">
            <summary>
            Gets or sets the width of the symbol which will be positioned inside the palette. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent  Height="600px"   SymbolWidth="50" >
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolHeight">
            <summary>
            Gets or sets the Height of the symbol which will be positioned inside the palette.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent  SymbolHeight="50">
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolDragPreviewSize">
            <summary>
            Represents the size of the symbol preview while dragging a symbol from the palette.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent   SymbolDragPreviewSize="60" >
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolDiagramPreviewSize">
            <summary>
            Represents the customization of the drag size of the individual palette items.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent SymbolDiagramPreviewSize="60" >
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolPaletteTemplates">
            <summary>
            Sets a segment of the UI content, implemented as a delegate that writes the content of a Node . 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px">
            <SymbolPaletteTemplates>
             <NodeTemplate>
              @{ var id = (context as Node).ID;
             <div style="height: 100%; width: 100%; background:green">
              <input type="button" value="Button1" @onclick="@OnClick" />
              </div>
              }
             </NodeTemplate>
             </SymbolPaletteTemplates>
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Palettes">
            <summary>
             Represents how to display a collection of similar symbols and annotates the group textually with its heading and the unique id of a symbol group. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes">
            <SymbolPaletteTemplates>
             <NodeTemplate>
              @{ var id = (context as Node).ID;
             <div style="height: 100%; width: 100%; background:green">
              <input type="button" value="Button1" @onclick="@OnClick" />
              </div>
              }
             </NodeTemplate>
             </SymbolPaletteTemplates>
            </SfSymbolPaletteComponent >
            @code
            { 
            DiagramObjectCollection<Palette> Palettes;
             Palettes = new DiagramObjectCollection<Palette>(){
             new Palette(){Symbols =Tnodes,Title="Flow Shapes",ID="Flow Shapes" },
             };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolMargin">
            <summary>
            Sets an  extra space around the outer boundaries of an element.
            </summary>
            <value> <see cref="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolMargin"/>(10,10,10,10)</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent  SymbolMargin="@SymbolMargin" SymbolHeight="50">
            </SfSymbolPaletteComponent >
            @code{
            SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.PaletteExpandMode">
            <summary>
            Specifies the option to expand single or multiple palette at a time.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.ExpandMode"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.ExpandMode.Multiple"/>
            </value>
            <remarks>
            If the <c>ExpandMode</c> is <c>Multiple</c> when clicking on the collapsed icon, the clicked palette will get expanded and at the same time, other palettes are maintained in their previous state.
            If the <c>ExpandMode</c> is <c>Single</c> when clicking on the collapsed icon, the clicked palette will get expanded and the rest of all the palettes gets collapsed.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfSymbolPaletteComponent @ref="@palette"
                                       Width="80%"
                                       Height="445px"
                                       PaletteExpandMode="@expandMode"
                                       Palettes="@palettes">
            </SfSymbolPaletteComponent>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.RefreshSymbols">
            <summary> 
            The method allows the user to redraw the symbols dynamically in SymbolPalette instead of re-rendering the complete Diagram component.
            </summary>       
            <example>
            <code>
            <![CDATA[
            <SfSymbolPaletteComponent @ref="@palette" 
                                      Width="100%"
                                      Height="700px">
            </SfSymbolPaletteComponent>
            @code
            {
                SfSymbolPaletteComponent palette;
                private void RefreshPalette(ButtonChangeArgs args)
                {
                    palette.RefreshSymbols();
                }   
            }    
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.NodeCreating">
            <summary>
            Represents the default properties of the nodes to be returned.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ConnectorCreating">
            <summary>
            Represents the default properties of the connectors to be returned. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.GetSymbolInfo">
            <summary>
            Represents the size, appearance and description of a symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SelectionChanged">
            <summary>
            Triggers after the object selection changes in the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Expanding">
            <summary>
            The event will be Triggers before the item gets collapsed/expanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.OnAfterScriptRendered">
             <summary>
            Notifies the component for the required scripts loaded.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ShouldRender">
            <summary>
            This method  returns a boolean to indicate if a component’s UI can be rendered. 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.InvokeSymbolPaletteEvents(System.String,System.Object)">
            <summary>
            Invokes the symbol palette event
            </summary>
            <param name="eventName">SymbolPaletteEvent</param>
            <param name="args">object</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.AddPaletteItem(System.String,Syncfusion.Blazor.Diagram.NodeBase,System.Boolean)">
            <summary>
            Used to add the palette item as nodes or connectors in palettes. 
            </summary>
            <param name="paletteName">An string that contain paletteName</param>
            <param name="paletteSymbol">An NodeBase that contain node or connector</param>
            <param name="isChild">An bool that  contain palette item contains child or not </param>
            <example>
            <code>
            <![CDATA[
            Node TNode2 = new Node()
            { 
                Shape = new FlowShape() { Type = NodeShapes.Flow, Shape = FlowShapeType.Decision }
            };
            PaletteInstance.AddPaletteItem("Flow Shapes", TNode2, false);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.AddPalette(Syncfusion.Blazor.Diagram.SymbolPalette.Palette,System.Boolean)">
            <summary>
            Used to add the palette.
            </summary>
            <param name="palette">Palette</param>
            <param name="canInitSymbols">bool</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.AddPalettes(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.SymbolPalette.Palette})">
            <summary>
            Used to add particular palettes to the symbol palette at runtime.
            </summary>
            <param name="palettes">An DiagramObjectCollection that contain collection of palettes</param>
            <example>
            <code>
            <![CDATA[
            DiagramObjectCollection<Palette> NewPalettes = new DiagramObjectCollection<Palette>()
            {
                new Palette() { Symbols = T3nodes,Title = "New palette1",ID = "newPalette1" },
                new Palette() { Symbols = T4nodes,Title = "New palette2",ID = "newPalette2" },
            };
            PaletteInstance.AddPalettes(NewPalettes);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.RemovePalettes(System.String)">
            <summary>
            Used to remove particular palettes from the symbol palette at runtime.
            </summary>
            <param name="id">An string that contains palette id</param>
            <example>
            <code>
            <![CDATA[
            PaletteInstance.RemovePalettes("Flow Shapes");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.GetSizeValue(System.String)">
            <summary>
            Used to get the sizevalue
            </summary>
            <param name="real">string</param>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.RemovePaletteItem(System.String,System.String)">
            <summary>
            Used to remove the palette item such as nodes or connectors from the palettes.
            </summary>
            <param name="paletteName">An string that contains palette name</param>
            <param name="symbolId">An string that contains symbol id</param>
            <example>
            <code>
            <![CDATA[
            PaletteInstance.RemovePaletteItem("Flow Shapes", "node1");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.SymbolPaletteStateHasChanged">
            <summary>
            It used to rerender the symbol palette component
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.RenderPreviewSymbol">
            <summary>
            It is used to render the preview symbol
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.UpdateSymbolDragSize">
            <summary>
             It used to update symbol drag size.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.GetPaletteSymbols(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            It is used to get symbols from the palette
            </summary>
            <param name="node">IDiagramObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.OnExpandingEvent(Syncfusion.Blazor.Navigations.ExpandEventArgs)">
            <summary>
            It invokes when expanding the SymbolPalette
            </summary>
            <param name="args">ExpandEventArgs</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol palette objects has been updated.
            </summary>
            <param name="propertyName">string that contains the propertyname.</param>
            <param name="newVal">An object that contain newvalue, which means new value of property</param>
            <param name="oldVal">An object that contain oldvalue, which means old value of property</param>
            <param name="container">An IDiagramObject that contain IDiagram Object value</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.Clone">
            <summary>
            Creates a new palette that is a copy of the current palette. 
            </summary>
            <returns>Throws not implemented exception</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.UpdateSymbolPaletteTemplates(Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates)">
            <summary>
            It used to update symbol palette templates
            </summary>
            <param name="symbolPaletteTemplates">SymbolPaletteTemplates</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SfSymbolPaletteComponent.ComponentDispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject">
            <summary>
            Represents the base class for all the symbol palette objects. It is used to handle common actions like property changes in any symbol palette objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject)">
            <summary>
            Invoked whenever the effective value of any property in this Symbol palette object has been updated. 
            </summary>
            <param name="propertyName">string that contains the propertyname.</param>
            <param name="newVal">An object that contain newvalue, which means new value of property</param>
            <param name="oldVal">An object that contain oldvalue, which means old value of property</param>
            <param name="container">An IPaletteObject that contain palette object</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.Palette">
            <summary>
            A palette displays a set of similar symbols and annotates the group textually with its heading. 
            </summary>
            <example>
            <code>
            <![CDATA[
            new Palette()
            {
                Id = "BasicShape",
                Expanded = true,
                Symbols = BasicShape,
                Title = "Basic Shapes",
                IconCss = "e-ddb-icons e-basic"
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.ID">
            <summary>
             Represents the unique id of a symbol group. By default, it is empty. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes">
            </SfSymbolPaletteComponent >
            @code
            { 
            DiagramObjectCollection<Palette> Palettes;
             Palettes = new DiagramObjectCollection<Palette>(){
             new Palette(){Symbols =Tnodes,Title="Flow Shapes",ID="Flow Shapes" },
             };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.IsExpanded">
            <summary>
            Gets or sets whether the palette items are to be expanded or not. By default, it is true. 
            </summary>
            <value>true, palette items are to be expanded; Otherwise false.</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes">
            </SfSymbolPaletteComponent >
            @code
            { 
            DiagramObjectCollection<Palette> Palettes;
             Palettes = new DiagramObjectCollection<Palette>(){
             new Palette(){Symbols =Tnodes,Title="Flow Shapes",ID="Flow Shapes",IsExpanded = false },
             };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.Title">
            <summary>
            Represents the title of the symbol group. By default, it is empty.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes">
            </SfSymbolPaletteComponent >
            @code
            { 
            DiagramObjectCollection<Palette> Palettes;
             Palettes = new DiagramObjectCollection<Palette>(){
             new Palette(){Symbols =Tnodes,Title="Flow Shapes",ID="Flow Shapes",IsExpanded = false },
             };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.IconCss">
            <summary>
            Represents the class of the symbol group. By default, it is empty.
            </summary>
            <value>the default value is empty</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes">
            </SfSymbolPaletteComponent >
            @code
            { 
            DiagramObjectCollection<Palette> Palettes;
             Palettes = new DiagramObjectCollection<Palette>(){
             new Palette(){Symbols =Tnodes,Title="Flow Shapes",ID="Flow Shapes",IsExpanded = false },
             };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.Symbols">
            <summary>
            Represents the collection of predefined symbols.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px" Palettes="@Palettes">
            </SfSymbolPaletteComponent >
            @code
            { 
            DiagramObjectCollection<Palette> Palettes;
             Palettes = new DiagramObjectCollection<Palette>(){
             new Palette(){Symbols =Tnodes,Title="Flow Shapes",ID="Flow Shapes",IsExpanded = false },
             };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol palette object has been updated.
            </summary>
            <param name="propertyName">string that contains the propertyname.</param>
            <param name="newVal">An object that contain newvalue, which means new value of property</param>
            <param name="oldVal">An object that contain oldvalue, which means old value of property</param>
            <param name="container">An IPaletteObject that contain palette object</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol palette object has been updated.
            </summary>
            <param name="propertyName">string that contains the propertyname.</param>
            <param name="newVal">An object that contain newvalue, which means new value of property</param>
            <param name="oldVal">An object that contain oldvalue, which means old value of property</param>
            <param name="container">An IDiagramObject that contain IDiagram object</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.Clone">
            <summary>
            Creates a new palette that is a copy of the current palette. 
            </summary>
            <returns>Palette</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.Palette.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo">
            <summary>
            Represents the size and description of a symbol. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px"   GetSymbolInfo="GetSymbolInfo" >
            </SfSymbolPaletteComponent >
            @code
            { 
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    return SymbolInfo;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo.Height">
            <summary>
            Represents the height of the symbol to be drawn over the palette. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px"   GetSymbolInfo="GetSymbolInfo" >
            </SfSymbolPaletteComponent >
            @code
            { 
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Height = 80;
                    return SymbolInfo;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo.Width">
            <summary>
            Represents the width of the symbol to be drawn over the palette. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px"   GetSymbolInfo="GetSymbolInfo" >
            </SfSymbolPaletteComponent >
            @code
            { 
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Width = 80;
                    return SymbolInfo;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo.Fit">
            <summary>
            Represents whether the symbol can fit into the size that is defined by the symbol palette.. 
            </summary>
            <value>true, we can fit the  symbol that is defined by the symbol palette; Otherwise false.The default value is false.</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px"   GetSymbolInfo="GetSymbolInfo" >
            </SfSymbolPaletteComponent >
            @code
            { 
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    return SymbolInfo;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo.Description">
            <summary>
            Specifies the text to be displayed and how that is to be handled. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px"   GetSymbolInfo="GetSymbolInfo" >
            </SfSymbolPaletteComponent >
            @code
            { 
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Description = new SymbolDescription() { Text = text };
                    return SymbolInfo;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolInfo.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolDescription">
            <summary>
            Represents the textual description of a symbol. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px"   GetSymbolInfo="GetSymbolInfo" >
            </SfSymbolPaletteComponent >
            @code
            { 
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    string text = null;
                    if (symbol is Node)
                    {
                        text = ((symbol as Node).Shape as Shape).Type.ToString() + (symbol as Node).ID;
                    }
                    SymbolInfo.Description = new SymbolDescription() { Text = text };
                    return SymbolInfo;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolDescription.Text">
            <summary>
            Represents the textual information to be displayed in the symbol. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px"   GetSymbolInfo="GetSymbolInfo" >
            </SfSymbolPaletteComponent >
            @code
            { 
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    string text = null;
                    if (symbol is Node)
                    {
                        text = ((symbol as Node).Shape as Shape).Type.ToString() + (symbol as Node).ID;
                    }
                    SymbolInfo.Description = new SymbolDescription() { Text = text };
                    return SymbolInfo;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolDescription.TextOverflow">
            <summary>
            Specifies a value that indicates whether to render ellipses (...) to indicate text overflow. By default, it is wrapped.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px"   GetSymbolInfo="GetSymbolInfo" >
            </SfSymbolPaletteComponent >
            @code
            { 
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    string text = null;
                    if (symbol is Node)
                    {
                        text = ((symbol as Node).Shape as Shape).Type.ToString() + (symbol as Node).ID;
                    }
                    SymbolInfo.Description = new SymbolDescription() { Text = text,TextOverflow=TextOverflow.Wrap, };
                    return SymbolInfo;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolDescription.TextWrapping">
            <summary>
            Wraps the text to the next line when it exceeds its bounds. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px"   GetSymbolInfo="GetSymbolInfo" >
            </SfSymbolPaletteComponent >
            @code
            { 
                private SymbolInfo GetSymbolInfo(IDiagramObject symbol)
                {
                    SymbolInfo SymbolInfo = new SymbolInfo();
                    SymbolInfo.Fit = true;
                    string text = null;
                    if (symbol is Node)
                    {
                        text = ((symbol as Node).Shape as Shape).Type.ToString() + (symbol as Node).ID;
                    }
                    SymbolInfo.Description = new SymbolDescription() { Text = text,TextWrapping= TextWrap.Wrap };
                    return SymbolInfo;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolDescription.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteSelectionChangedEventArgs">
            <summary>
            Notifies when the selection objects change in the symbol palette. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Palettes="@Palettes" SelectionChanged="PaletteSelectionChange">
            </SfSymbolPaletteComponent>
            private void PaletteSelectionChange(PaletteSelectionChangedEventArgs args)
            {
                String oldID = args.OldValue;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteSelectionChangedEventArgs.OldValue">
            <summary>
            Returns the old palette item ID that is selected.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Palettes="@Palettes" SelectionChanged="PaletteSelectionChange">
            </SfSymbolPaletteComponent>
            private void PaletteSelectionChange(PaletteSelectionChangedEventArgs args)
            {
                String oldID = args.OldValue;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteSelectionChangedEventArgs.NewValue">
            <summary>
            Returns the new palette item ID that is selected.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Palettes="@Palettes" SelectionChanged="PaletteSelectionChange">
            </SfSymbolPaletteComponent>
            private void PaletteSelectionChange(PaletteSelectionChangedEventArgs args)
            {
                String newID = args.NewValue;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs">
            <summary>
            Notifies when the palette items are expanded or collapsed in the symbol palette. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfSymbolPaletteComponent  Expanding="OnExpanding">
            </SfSymbolPaletteComponent>
            private void OnExpanding(PaletteExpandingEventArgs args)
            {
                if (args.Cancel)
                {
                    args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs.Index">
            <summary>
            Represents the index of the palette item being selected.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfSymbolPaletteComponent  Expanding="OnExpanding">
            </SfSymbolPaletteComponent>
            private void OnExpanding(PaletteExpandingEventArgs args)
            {
              args.Index = 2;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs.IsExpanded">
            <summary>
            Represents the value if the palette item is expanded. 
            </summary>
            <value>true, The palette item is expanded; Otherwise false.The default value is false.</value>
            <example>
            <code>
            <![CDATA[
            <SfSymbolPaletteComponent  Expanding="OnExpanding">
            </SfSymbolPaletteComponent>
            private void OnExpanding(PaletteExpandingEventArgs args)
            {
              args.IsExpanded = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs.Cancel">
            <summary>
            Gets or sets that indicate whether the palette item expand or collapse is to be canceled. 
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfSymbolPaletteComponent  Expanding="OnExpanding">
            </SfSymbolPaletteComponent>
            private void OnExpanding(PaletteExpandingEventArgs args)
            {
                if (args.Cancel)
                {
                    args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.PaletteExpandingEventArgs.Palette">
            <summary>
            Represents the properties of the palette item being selected.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfSymbolPaletteComponent  Expanding="OnExpanding">
            </SfSymbolPaletteComponent>
            private void OnExpanding(PaletteExpandingEventArgs args)
            {
              args.Palette= new Palette(){};
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin">
            <summary>
            Specifies the extra space around the outer boundaries of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent  SymbolMargin="@SymbolMargin" SymbolHeight="50">
            </SfSymbolPaletteComponent >
            @code{
            SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Bottom">
            <summary>
            Gets or sets the extra space at the bottom of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent  SymbolMargin="@SymbolMargin" SymbolHeight="50">
            </SfSymbolPaletteComponent >
            @code{
            SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Left">
            <summary>
            Gets or sets the extra space at the left of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent  SymbolMargin="@SymbolMargin" SymbolHeight="50">
            </SfSymbolPaletteComponent >
            @code{
            SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Right">
            <summary>
            Gets or sets the extra space at the right of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent  SymbolMargin="@SymbolMargin" SymbolHeight="50">
            </SfSymbolPaletteComponent >
            @code{
            SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Top">
            <summary>
            Gets or sets the extra space at the top of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent  SymbolMargin="@SymbolMargin" SymbolHeight="50">
            </SfSymbolPaletteComponent >
            @code{
            SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.SymbolPalette.IPaletteObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol margin has been updated.
            </summary>
            <param name="propertyName">string that contains the propertyname.</param>
            <param name="newVal">An object that contain newvalue, which means new value of property</param>
            <param name="oldVal">An object that contain oldvalue, which means old value of property</param>
            <param name="container">An IPaletteObject that contain IPaletteObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Clone">
            <summary>
            Creates a new SymbolMargin that is a copy of the current SymbolMargin. 
            </summary>
            <returns>SymbolMargin</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.OnPropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked when the effective value of any property on this Symbol margin has been updated.
            </summary>
            <param name="propertyName">string that contains the propertyname.</param>
            <param name="newVal">An object that contain newvalue, which means new value of property</param>
            <param name="oldVal">An object that contain oldvalue, which means old value of property</param>
            <param name="container">An IDiagramObject that contain IDiagram object</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolMargin.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates">
            <summary>
            Represents a segment of UI content, implemented as a delegate that writes the content of a Node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px">
            <SymbolPaletteTemplates>
             <NodeTemplate>
              @{ var id = (context as Node).ID;
             <div style="height: 100%; width: 100%; background:green">
              <input type="button" value="Button1" @onclick="@OnClick" />
              </div>
              }
             </NodeTemplate>
             </SymbolPaletteTemplates>
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.Parent">
            <summary>
            Gets or sets instance of  SfDiagramComponent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.NodeTemplate">
            <summary>
            A NodeTemplate represents a segment of the UI to be rendered for a Node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPaletteComponent Height="600px">
            <SymbolPaletteTemplates>
             <NodeTemplate>
              @{ var id = (context as Node).ID;
             <div style="height: 100%; width: 100%; background:green">
              <input type="button" value="Button1" @onclick="@OnClick" />
              </div>
              }
             </NodeTemplate>
             </SymbolPaletteTemplates>
            </SfSymbolPaletteComponent >
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.Initialize(Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates)">
            <summary>
            It is used to initialize the palette templates.
            </summary>
            <param name="template">SymbolPaletteTemplates</param>
            <returns>SymbolPaletteTemplates</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SymbolPalette.SymbolPaletteTemplates.Dispose">
            <summary>
            This method releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommandHandler">
            <summary>
            Defines the behavior of commands
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.#ctor(Syncfusion.Blazor.Diagram.SfDiagramComponent)">
            <summary>
            To initialize the instance of command handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Scroll(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Invoke when we scroll the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Zoom(System.Double,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            Invoke when we zoom the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.FindTarget(Syncfusion.Blazor.Diagram.CommonElement,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            To find the target element under the mouse.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetNearestSnapPoint(System.Double,System.Double[],System.Double)">
            <summary>
            To get nearest snap point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetSnappingPoints(Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            To get snapping point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetDrawingObject(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs,Syncfusion.Blazor.Diagram.DiagramPoint[],Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            To get drawing object while we try to draw.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetCloneObject(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint[],Syncfusion.Blazor.Diagram.DiagramPoint)">
            <summary>
            This method is used to get the clone object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ShowTooltip(System.String,System.Boolean)">
            <summary>
            Shows tooltip for corresponding diagram object
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateLayout">
            <summary>
            Invoke while update the layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CloseTooltip">
            <summary>
            This method is used to close the tooltip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ClearObjectSelection(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to clear the selection of object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DragOverElement(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            Invoke when performing drag over the element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ClearSelection(System.Nullable{System.Boolean})">
             <summary>
            This method is used to clear the selection of node/connector/ group.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ClearSelectedItems">
             <summary>
            This method is used to clear the selected items.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.HasSelection">
             <summary>
            Check whether the items has selection or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.IsSelected(Syncfusion.Blazor.Diagram.IDiagramObject)">
             <summary>
            Check whether the element is selected or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.RotateObjects(Syncfusion.Blazor.Diagram.IDiagramObject,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.NodeBase},System.Double,Syncfusion.Blazor.Diagram.DiagramPoint,System.Boolean)">
             <summary>
            Invoke while rotate the object
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Copy">
            <summary>
            Copy method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CopyObjects">
            <summary>
            copyObjects method
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Cut">
            <summary>
            Cut method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CloneConnector(Syncfusion.Blazor.Diagram.Connector,System.Boolean)">
             <summary>
            Invoke while clone the connector.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CloneGroup(Syncfusion.Blazor.Diagram.NodeGroup,System.Boolean)">
             <summary>
            Invoke while clone the group.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CloneNode(Syncfusion.Blazor.Diagram.Node,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Boolean)">
             <summary>
            Invoke while clone the node.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ExpandNode(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Boolean)">
             <summary>
            Invoke while expand the node.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ExpandCollapse(Syncfusion.Blazor.Diagram.Node,System.Boolean,Syncfusion.Blazor.Diagram.SfDiagramComponent)">
             <summary>
            Invoke while performing expand and collapse action.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetParentExpand(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.SfDiagramComponent,System.Boolean,Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            Check the parent is expand mode or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CloneSubProcesses(Syncfusion.Blazor.Diagram.Node)">
             <summary>
            Invoke while clone the subprocesses
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Paste">
             <summary>
            Invoke while performing paste operation.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateClonedConnector(Syncfusion.Blazor.Diagram.Connector,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.NodeBase},System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.IDiagramObject})">
            <summary>
            This method is used to update the cloned connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateClonedNode(Syncfusion.Blazor.Diagram.Node,System.Collections.Generic.Dictionary{System.String,Syncfusion.Blazor.Diagram.NodeBase},System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.IDiagramObject})">
            <summary>
            This method is used to update cloned node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CopyProcesses(Syncfusion.Blazor.Diagram.Node)">
             <summary>
            Invoke while copy the element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.RotatePoints(Syncfusion.Blazor.Diagram.Connector,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to get rotate points.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetChildren(Syncfusion.Blazor.Diagram.NodeGroup,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.NodeBase})">
             <summary>
            This method is used to get children of group node.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SnapAngle(System.Double)">
             <summary>
            This method is used to find snap angle.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.RotateSelectedItems(System.Double)">
             <summary>
            Invoke while rotate the selected items.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.AddObjectToDiagram(Syncfusion.Blazor.Diagram.NodeBase)">
             <summary>
            Invoke while add the object to diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.StartTextEdit(Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            Invoke while start to perform textedit.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.AddTextBox(Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to add textbox. 
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Select(Syncfusion.Blazor.Diagram.IDiagramObject,System.Nullable{System.Boolean})">
             <summary>
            Invoke while select the object.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetSelectedObject">
             <summary>
            This method is used to get selected objects.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UnSelect(Syncfusion.Blazor.Diagram.IDiagramObject)">
             <summary>
            Invoke when unselect the connector/node/group.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DrawSelectionRectangle(Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            Invoke while draw the rectangle.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DoRubberBandSelection(Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            Invoke while select the object through rubber band.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.RefreshDiagram">
             <summary>
            This method is used to refresh the diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.IsGroupObjects(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},System.String)">
             <summary>
            When select group children as rubber band selection, check the node is in selected item.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetSelectionItems(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject})">
             <summary>
            Get selected item, when select item as rubber band selection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SelectObjects(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},System.Nullable{System.Boolean},System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject})">
             <summary>
            Invoke when select the object.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.FindParent(Syncfusion.Blazor.Diagram.Node)">
             <summary>
            This method is used to find parent of children node.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SelectProcesses(Syncfusion.Blazor.Diagram.Node)">
             <summary>
            Invoke while select the subprocesses
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SelectBpmnSubProcesses(Syncfusion.Blazor.Diagram.NodeBase)">
             <summary>
            Invoke while select the BPMN subprocesses
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.HasProcesses(Syncfusion.Blazor.Diagram.Node)">
             <summary>
            Check the node has bpmn subprocesses or not.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SelectGroup(Syncfusion.Blazor.Diagram.NodeGroup)">
             <summary>
            Invoke while select the group.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SnapPoint(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramPoint,System.Double,System.Double)">
             <summary>
            This method is used to get snap point.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SnapConnectorEnd(Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramElementAction)">
             <summary>
            This method is used to get snap connector end.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.RenderHelper(Syncfusion.Blazor.Diagram.DiagramSelectionSettings)">
             <summary>
            This method is used to render helper object.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateConnectorProperties">
             <summary>
            This method is used to update connector properties.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateConnectorBounds(Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            This method is used to update connector bounds.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ScaleSelectedItems(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to scale the selected items.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateSelector">
             <summary>
            This method is used to update the selector.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateThumbConstraints">
             <summary>
            This method is used to update the thumb constraints.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SnappingInstance">
              @private  
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DragSelectedObjects(System.Double,System.Double)">
             <summary>
            Invoke while drag the selected items.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Drag(Syncfusion.Blazor.Diagram.NodeBase,System.Double,System.Double,System.Boolean)">
             <summary>
            Invoke while drag the node/connector/group.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DragSourceEnd(Syncfusion.Blazor.Diagram.Connector,System.Double,System.Double,System.Nullable{System.Boolean},System.Nullable{Syncfusion.Blazor.Diagram.DiagramElementAction},Syncfusion.Blazor.Diagram.BezierSegment,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Syncfusion.Blazor.Diagram.IDiagramObject,System.String)">
             <summary>
            Invoke while drag the source end of connector.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DragTargetEnd(Syncfusion.Blazor.Diagram.Connector,System.Double,System.Double,System.Nullable{System.Boolean},System.Nullable{Syncfusion.Blazor.Diagram.DiagramElementAction},Syncfusion.Blazor.Diagram.BezierSegment,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Boolean})">
             <summary>
            Invoke while drag the target end of connector.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DragControlPoint(Syncfusion.Blazor.Diagram.Connector,System.Double,System.Double,System.Nullable{System.Int32})">
             <summary>
            Invoke while drag the control point of connector.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.InvokeContextMenuEvents(System.String,System.Object)">
             <summary>
            To alert the context menu event when a navigation component triggers an event
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.InvokeDiagramEvents(System.String,System.Object)">
             <summary>
            Invoke diagram events while any interaction in diagram.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DisConnect(Syncfusion.Blazor.Diagram.IDiagramObject,System.Nullable{Syncfusion.Blazor.Diagram.DiagramElementAction})">
             <summary>
            Invoke while disconnect the connection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateConnectorTargetPort(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.ConnectionObject,Syncfusion.Blazor.Diagram.ConnectionObject,System.Nullable{Syncfusion.Blazor.Diagram.DiagramElementAction})">
            <summary>
            This method is used to update target port of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Connect(Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
             <summary>
            Invoke while trying to connect the connection
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateNodeConnectionChangeEvent(Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.ConnectionObject,Syncfusion.Blazor.Diagram.ConnectionObject,Syncfusion.Blazor.Diagram.Node)">
            <summary>
            This method is used to update connection change event for node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdatePortConnectionChangeEvent(Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.ConnectionObject,Syncfusion.Blazor.Diagram.ConnectionObject,Syncfusion.Blazor.Diagram.DiagramMouseEventArgs,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to update connection change event for port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.RenderHighlighter(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs,System.Nullable{System.Boolean})">
             <summary>
            This method is used to render highlighter
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DrawHighlighter(Syncfusion.Blazor.Diagram.CommonElement)">
             <summary>
            Invoke while draw highlighter element.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.TranslateBezierPoints(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramElementAction,System.Double,System.Double,Syncfusion.Blazor.Diagram.BezierSegment,Syncfusion.Blazor.Diagram.DiagramPoint,System.Nullable{System.Boolean})">
            <summary>
             Translate the bezier points during the interaction
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.DragConnectorEnds(Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramPoint,System.Int32,Syncfusion.Blazor.Diagram.IDiagramObject,System.String)">
             <summary>
            Invoke while drag the connector ends.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateConnectorSegments">
             <summary>
            This method is used to update the connector segments.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateBezierSegmentProperties(Syncfusion.Blazor.Diagram.BezierSegment,Syncfusion.Blazor.Diagram.BezierSegment)">
             <summary>
            This method is used to update bezier segment properties.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CanDisconnect(Syncfusion.Blazor.Diagram.DiagramElementAction,Syncfusion.Blazor.Diagram.DiagramMouseEventArgs,System.String,System.String)">
             <summary>
            Check whether we can connect the connection or not 
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ChangeSegmentLength(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.IDiagramObject,System.String,System.Boolean)">
             <summary>
            This method is used to change the segment length
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ChangeSourceEndToNode(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Node)">
             <summary>
            This method is used to change the source end to node.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ChangeSourceEndToPort(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Node,System.String)">
             <summary>
            This method is used to change the source end to port.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ConnectorSegmentChange(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.DiagramRect,System.Boolean)">
             <summary>
            This method is used to change the connector segment.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateSegmentDirection(System.Boolean,Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            This method is used to update the segment direction.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateSegmentLength(Syncfusion.Blazor.Diagram.Node,Syncfusion.Blazor.Diagram.Connector)">
             <summary>
            This method is used to update segment length.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetAllDescendants(Syncfusion.Blazor.Diagram.NodeBase,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.NodeBase},System.Boolean,System.Boolean)">
             <summary>
            This method is used to get all descendants.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Scale(Syncfusion.Blazor.Diagram.NodeBase,System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.IDiagramObject,System.Boolean)">
             <summary>
            This method is used scale the object.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ScaleGroup(Syncfusion.Blazor.Diagram.NodeGroup,System.Double,System.Double,Syncfusion.Blazor.Diagram.IDiagramObject,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.NodeBase,System.Collections.Generic.List{Syncfusion.Blazor.Diagram.NodeBase})">
             <summary>
            This method is used to scale the group node.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ScalePreview(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean)">
             <summary>
            This method is used scale the preview.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CheckBoundaryConstraints(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramRect)">
             <summary>
            This method is used to check boundary constraints.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SameSize(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase},Syncfusion.Blazor.Diagram.SizingMode)">
             <summary>
            Scales the given objects to the size of the first object in the group
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Distribute(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase},Syncfusion.Blazor.Diagram.DistributeOptions)">
            <summary>
            The selected objects are equally spaced within the selection boundary.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Align(Syncfusion.Blazor.Diagram.DiagramObjectCollection{Syncfusion.Blazor.Diagram.NodeBase},Syncfusion.Blazor.Diagram.AlignmentOptions,Syncfusion.Blazor.Diagram.AlignmentMode)">
            <summary>
            To align the selected or defined objects such as nodes and connectors with respect to the selection boundary
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateInnerParentProperties(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            This method is used to update inner parent properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ScalePreviewObject(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.DiagramSelectionSettings,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Apply scaling value for the preview item.
            </summary>
            <param name="sw"></param>
            <param name="sh"></param>
            <param name="pivot"></param>
            <param name="refObject"></param>
            <param name="uWidth"></param>
            <param name="uHeight"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ScaleObject(System.Double,System.Double,Syncfusion.Blazor.Diagram.DiagramPoint,Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            This method is used to scale objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateNodeSize(Syncfusion.Blazor.Diagram.Internal.Matrix,Syncfusion.Blazor.Diagram.Node,System.Double,System.Double,Syncfusion.Blazor.Diagram.NodeBase,Syncfusion.Blazor.Diagram.DiagramPoint)">
             <summary>
            This method is used to update the node's size.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ScaleConnector(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Internal.Matrix)">
            <summary>
            This method is used to scale connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdatePathElementOffset(Syncfusion.Blazor.Diagram.Connector)">
            <summary>
            This method is used to update path element's offset value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Group">
            <summary>
            Invoke when we group the nodes/connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Ungroup(Syncfusion.Blazor.Diagram.Node)">
            <summary>
            Invoke when we ungroup the nodes/connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ResetDependentConnectors(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            This method is used to reset the connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.StartGroupAction">
            <summary>
            Starts grouping the actions that will be undone/restored as a whole
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.EndGroupAction">
            <summary>
             Closes grouping the actions that will be undone/restored as a whole
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.AddHistoryEntry(Syncfusion.Blazor.Diagram.InternalHistoryEntry)">
            <summary>
             Adds the given change in the diagram control to the track
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetSubProcess(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
             This method is used to get subprocess element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SendForward(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
             Send the selected nodes or connectors forward 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateZIndexBySendForward(Syncfusion.Blazor.Diagram.NodeBase,System.Collections.Generic.List{System.Int32})">
             <summary>
            This method is used to update the ZIndex value by send forward command.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SendBackward(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
             Send the selected nodes or connectors back
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateZIndexBySendBackward(Syncfusion.Blazor.Diagram.NodeBase,System.Collections.Generic.List{System.Int32})">
             <summary>
            This method is used to update the ZIndex value by send backward command.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateSelectedItemsCollection(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.NodeBase})">
             <summary>
            This method is used to update selected elements collection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateGroup(Syncfusion.Blazor.Diagram.NodeGroup,System.Int32)">
            <summary>
             This method is used to update the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.BringToFront(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
             Bring the selected nodes or connectors to front
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SendToBack(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
             Send the selected nodes or connectors back 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.UpdateSelectedElements(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.NodeBase})">
            <summary>
            This method is use to update the selected elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ClipBoardObject.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandle">
            <summary>
            Represents the behavior of fixeduserhandle. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandle.#ctor(Syncfusion.Blazor.Diagram.FixedUserHandle)">
            <summary>
            Creates a new instance of the FixedUserHandle from the given FixedUserHandle. 
            </summary>
            <param name="src">FixedUserHandle.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.FixedUserHandle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.ID">
            <summary>
            Gets or sets the unique id of the diagram object.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.PathData">
            <summary>
            Gets or sets the shape information of the fixed user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Fill">
            <summary>
            Gets or sets the fill color of the fixed user handle.
            </summary>
            <value>The default value is transparent</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Fill="green",
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Stroke">
            <summary>
            Gets or sets the stroke color of the fixed user handle container.
            </summary>
            <value>The default value is transparent</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        Stroke ="orange",
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.IconStrokeThickness">
            <summary>
            Gets or sets the stroke width of the fixed user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        IconStrokeThickness  = 2,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Height">
            <summary>
            Gets or sets the height of the fixed user handle.
            </summary>
            <value>The default value is 10px</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25,
                        Width = 25,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Width">
            <summary>
            Gets or sets the width of the fixed user handle.
            </summary>
            <value>The default value is 10px</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25,
                        Width = 25,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.CornerRadius">
            <summary>
            Gets or sets the corner radius of the fixed user handle container.
            </summary>
            <value>The default value is 0</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        CornerRadius = 10,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.IconStroke">
            <summary>
            Gets or sets the stroke color of the fixed user handle.
            </summary>
            <value>The default value is black</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        IconStroke="red",
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.StrokeThickness">
            <summary>
            Gets or sets the stroke width of the fixed user handle container.
            </summary>
            <value>The default value is 1px</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        StrokeThickness = 10,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Padding">
            <summary>
            Gets or sets the space between the fixed user handle and the container.
            </summary>
            <value>The default value is 0</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Padding= new DiagramThickness() {Bottom=4, Left=4, Right=4, Top=4 },
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Visibility">
            <summary>
            Gets or sets the visibility of the fixed user handle. By default, it is True.
            </summary>
            <value>true,The visibility of fixed user handle is in visibile state;Otherwiese, false</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Visibility = true,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandle.Clone">
            <summary>
            Creates a new object that is a copy of the current FixedUserHandle.
            </summary>
            <returns>It returns FixedUserHandle</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandle.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeFixedUserHandle">
            <summary>
            Represents the node’s fixed user handle. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.#ctor(Syncfusion.Blazor.Diagram.NodeFixedUserHandle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeFixedUserHandle"/> from the given NodeFixedUserHandle.
            </summary>
            <param name="src">NodeFixedUserHandle.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeFixedUserHandle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.Offset">
            <summary>
            Gets or sets the position of the node fixed user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                FixedUserHandles = new DiagramObjectCollection<NodeFixedUserHandle>()
                {
                    new NodeFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25,
                        Width = 25,
                        Offset = 0.5,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.Margin">
            <summary>
            Gets or sets the extra space around the outer boundaries of the fixed user handle.
            </summary>
            <value>By default,it is 0 from all the sides.</value>
            <example>
            <code lang="Razor">
            <![CDATA[
            Node node = new Node()
            {
                FixedUserHandles = new DiagramObjectCollection<NodeFixedUserHandle>()
                {
                    new NodeFixedUserHandle()
                    {
                        Margin = new DiagramThickness() { Right = 20 },
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.Clone">
            <summary>
            Creates a new object that is a copy of the current NodeFixedUserHandle.
            </summary>
            <returns>NodeFixedUserHandle</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle">
            <summary>
            Represents the connector fixed user handle.
            </summary>
            <remarks>
            The fixed user handles are used to add some frequently used commands around the node and connector even without selecting it.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                SourcePoint = new DiagramPoint() { X = 100, Y = 100 },
                TargetPoint = new DiagramPoint() { X = 200, Y = 200 },
                Type = ConnectorSegmentType.Orthogonal,
                Style = new TextStyle() { StrokeColor = "#6495ED" },
                // A fixed user handle is created and stored in the fixed user handle collection of the Connector.
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25,
                        Width = 25,
                        Offset = 0.5,
                        Alignment = FixedUserHandleAlignment.After,
                        Displacement = new DiagramPoint { Y = 10 },
                        Visibility = true,Padding = new DiagramThickness() { Bottom = 1, Left = 1, Right = 1, Top = 1 },
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.#ctor(Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/> from the given <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/>.
            </summary>
            <param name="src">ConnectorFixedUserHandle.</param>
            
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Offset">
            <summary>
            Gets or sets the position of the connector fixed user handle. By default, it is 0.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25,
                        Width = 25,
                        Offset = 0.5,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Alignment">
            <summary>
            Gets or sets the alignment of the fixed user handle.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.Center"/></value> 
            <remarks>
            The below list explains the alignment options.
            <table style = "border: none">
            <tr>
            <td style = "border:none">1. Center, aligns the fixedUserHandle on the connector segment.</td>
            </tr>
            <tr>
            <td style = "border:none">2. Before, aligns the fixedUserHandle on top of a connector segment.</td>
            </tr>
            <tr>
            <td style = "border:none">3. After, aligns the fixedUserHandle at the bottom of a connector segment.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Height = 25,
                        Width = 25,
                        Offset = 0.5,
                        Alignment = FixedUserHandleAlignment.After,
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Displacement">
            <summary>
            Gets or sets the displacement(margin) of the fixed user handle. Applicable only if the parent is a connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            Connector connector = new Connector()
            {
                FixedUserHandles = new DiagramObjectCollection<ConnectorFixedUserHandle>()
                {
                    new ConnectorFixedUserHandle()
                    {
                        ID = "user1",
                        Alignment = FixedUserHandleAlignment.After,
                        Displacement = new DiagramPoint { Y = 10 },
                    }
                },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Clone">
            <summary>
            Creates a new object that is a copy of the current <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/>.
            </summary>
             <returns>It returns ConnectorFixedUserHandle</returns>        
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.UserHandle">
            <summary>
            Represents how to execute the commonly or frequently used commands around the nodes, connectors and groups. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.UserHandle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Name">
            <summary>
            Gets or sets the name of the user handle.
            </summary>
            <value> The default value will be <see cref="F:System.String.Empty"/></value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.ID">
            <summary>
            Gets or sets the unique id of the diagram object. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.PathData">
            <summary>
            Represents the custom geometry(shape) of the user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                      PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z"
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Source">
            <summary>
            Gets or sets the image source of the user handle. Applicable only if it is an image. 
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       Source="https://www.w3schools.com/images/w3schools_green.jpg",
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.BackgroundColor">
            <summary>
            Gets or sets the background color of the user handle.
            </summary>
            <value> The default value is black</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       BackgroundColor= "red",
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Side">
            <summary>
            Gets or sets the position of user Handle
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.Direction.Top"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the direction of the userhandle. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Left - Sets the direction of the userhandle to Left.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Right - Sets the direction of userhandle to Right.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Top - Sets the direction of userhandle to Top.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Bottom - Sets the direction of userhandle to Bottom.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       BackgroundColor= "red",
                      Side= Direction.Bottom,
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.BorderColor">
            <summary>
            Gets or sets the border color of the user handle. 
            </summary>
            <value> The default value will be <see cref="F:System.String.Empty"/></value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       BorderColor= "red",
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.BorderWidth">
            <summary>
            Gets or sets the border width of the user handle. 
            </summary>
            <value> The default value is 0.5</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       BorderWidth= 8,
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Size">
            <summary>
            Gets or sets the size of the user handle.
            </summary>
            <value> The default value is 25</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       Size= 8,
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.PathColor">
            <summary>
            Gets or sets the stroke color of the shape.
            </summary>
            <value> The default value is white</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       PathColor= "brown"
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Displacement">
            <summary>
            Gets or sets the displacement(margin) of the user handle. Applicable only if the parent is a connector. 
            </summary>
            <value> The default value is 10</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       Displacement= 10,
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Visible">
            <summary>
            Gets or sets the visibility of the user handle.By default, it is true.
            </summary>
            <value>true, which means the user handle is in visible state; Otherwise, false.</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       Displacement= 10,
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Offset">
            <summary>
            Gets or sets the X and Y coordinates of the user handle.
            </summary>
            <value>The default value is 0</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       Offset = 0.3
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Margin">
            <summary>
            Gets or sets the extra space around the outer boundaries of the user handle. Applicable only if the parent is a node.
            </summary>
            <value>By default,it is 0 from all the sides.</value> 
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.VisibleTarget">
             <summary>
             Gets or sets whether the Userhandle is for Node, Connector or RuberBandSelection.
             </summary>
             <value>The Default of the VisibleTarget is Node</value> 
             <example>
             <code lang="Razor">
             <![CDATA[
             UserHandle cloneHandle = new UserHandle()
            {
                    Name = "clone",
                    Offset = 0,
                    Visible = true,
                    VisibleTarget = VisibleTarget.Node;
                    Side = Direction.Top,
                    Margin = new DiagramThickness { Top = 0, Bottom = 0, Left = 0, Right = 0 },                          
            };
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the user handle. 
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Center"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the Horizontal Alignment of the userhandle. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Stretch - Stretches the diagram element throughout the userhandle.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Left - Aligns the diagram element at the left of the userhandle.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Right - Aligns the diagram element at the right of the userhandle.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Center - Aligns the diagram element at the center of the userhandle.</td>
            </tr>
            <tr>
            <td style = "border: none"> 5. Auto - Aligns the diagram element based on the characteristics of the userhandle.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the user handle.
            </summary>
            <value> The default value will be <see cref="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Center"/></value> 
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following options are used to define the Vertical Alignment of the userhandle. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1. Stretch  - Stretches the diagram element throughout the userhandle.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2. Top - Aligns the diagram element at the top of the userhandle.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3. Bottom - Aligns the diagram element at the bottom of the userhandle.</td>
            </tr>
            <tr>
            <td style = "border: none"> 4. Center - Aligns the diagram element at the center of the userhandle.</td>
            </tr>
            <tr>
            <td style = "border: none"> 5. Auto - Aligns the diagram element based on the characteristics of the userhandle.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                       Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
                };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Template">
            <summary>
            Gets or sets the geometry of the html element.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagramComponent>
            <DiagramTemplates>
             <UserHandleTemplate>
              @{ var id = (context as Node).ID;
             <div style="height: 100%; width: 100%; background:green">
              <input type="button" value="Button1" @onclick="@OnClick" />
              </div>
              }
             </UserHandleTemplate>
             </DiagramTemplates>
             </SfDiagramComponent>
             @code
             {
                UserHandle = new UserHandle()
                {
                     Name = "user1",
                      ID="user2",
                };
                }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UserHandle.#ctor(Syncfusion.Blazor.Diagram.UserHandle)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.UserHandle"/> from the given UserHandle.
            </summary>
            <param name="src">UserHandle.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UserHandle.Clone">
            <summary>
            Creates a new user handle that is a copy of the current user handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UserHandle.Dispose">
            <summary>
            This method releasing all unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
