<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor.Navigations</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse">
            <summary>
            A class that represents the animation to appear while collapsing the <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/>.
            </summary>
            <remarks>
            You can apply the animation effect and transform duration for accordion collapse action by specifying value to corresponding property.
            </remarks>
            <example>
            <code><![CDATA[
            <SfAccordion>
                <AccordionAnimationSettings>
                    <AccordionAnimationCollapse Effect="AnimationEffect.FadeOut" Duration="300"></AccordionAnimationCollapse>
                </AccordionAnimationSettings>
            </SfAccordion> 
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Duration">
            <summary> 
            Gets or sets the time duration to transform content on collapse action. 
            </summary> 
            <value> 
            If we set the duration value, then the content transforms with in specified duration otherwise the default duration value `400` is set.
            </value> 
            <remarks> 
            The interval value accepts in milliseconds. 
            </remarks>
            <example> 
            <code><![CDATA[ 
            <SfAccordion>
                <AccordionAnimationSettings>
                    <AccordionAnimationCollapse Duration="500"></AccordionAnimationCollapse>
                </AccordionAnimationSettings>
            </SfAccordion> 
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Easing">
            <summary>
            Gets or sets the easing effect applied when transforming the content.
            </summary>
            <value>
            If we set the easing value, then the specified easing effect is applied for expand action otherwise the default easing value <c>linear</c> is set.
            </value>
            <remarks>
            This property will accepts the `animation-timing-function` css values to apply content transition accordingly.   
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Effect">
            <summary> 
            Gets or sets the animation effect for accordion item collapse action. 
            </summary> 
            <value> 
            One of the <see cref="T:Syncfusion.Blazor.AnimationEffect"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.AnimationEffect.SlideUp"/> 
            </value> 
            <remarks>
            Animation effect were disabled by setting <see cref="F:Syncfusion.Blazor.AnimationEffect.None"/> to <c>Effect</c> property.
            </remarks>
            <example> 
            <code><![CDATA[ 
            <SfAccordion>
                <AccordionAnimationSettings>
                    <AccordionAnimationCollapse Effect="AnimationEffect.SlideDown"></AccordionAnimationCollapse>
                </AccordionAnimationSettings>
            </SfAccordion> 
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionAnimationExpand">
            <summary>
            A class that represents the animation to appear while expanding the <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/>.
            </summary>
            <remarks>
            You can apply the animation effect and transform duration for accordion expand action by specifying value to corresponding property.
            </remarks>
            <example>
            <code><![CDATA[
            <SfAccordion>
                <AccordionAnimationSettings>
                    <AccordionAnimationExpand Effect="AnimationEffect.FadeIn" Duration="300"></AccordionAnimationExpand>
                </AccordionAnimationSettings>
            </SfAccordion> 
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Duration">
            <summary> 
            Gets or sets the time duration to transform content on expand action. 
            </summary> 
            <value> 
            If we set the duration value, then the content transforms with in specified duration otherwise the default duration value `400` is set.
            </value> 
            <remarks> 
            The interval value accepts in milliseconds. 
            </remarks>
            <example> 
            <code><![CDATA[ 
            <SfAccordion>
                <AccordionAnimationSettings>
                    <AccordionAnimationExpand Duration="500"></AccordionAnimationExpand>
                </AccordionAnimationSettings>
            </SfAccordion> 
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Easing">
            <summary>
            Gets or sets the easing effect applied when transforming the content.
            </summary>
            <value>
            If we set the easing value, then the specified easing effect is applied for expand action otherwise the default easing value <c>linear</c> is set.
            </value>
            <remarks>
            This property will accepts the `animation-timing-function` css values to apply content transition accordingly.   
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Effect">
            <summary>
            Gets or sets the animation effect for accordion item expand action. 
            </summary> 
            <value> 
            One of the <see cref="T:Syncfusion.Blazor.AnimationEffect"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.AnimationEffect.SlideDown"/> 
            </value> 
            <remarks>
            Animation effect were disabled by setting <see cref="F:Syncfusion.Blazor.AnimationEffect.None"/> to <c>Effect</c> property.
            </remarks>
            <example> 
            <code><![CDATA[ 
            <SfAccordion>
                <AccordionAnimationSettings>
                    <AccordionAnimationExpand Effect="AnimationEffect.SlideUp"></AccordionAnimationExpand>
                </AccordionAnimationSettings>
            </SfAccordion> 
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionAnimationSettings">
            <summary>
            A class that represents the animations to appear on expand and collapse action of <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/>.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Navigations.AccordionAnimationExpand"/> and <see cref="T:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse"/> can be used to set expand and collapse animation for accordion item respectively.
            </remarks>
            <example>
            <code><![CDATA[
            <SfAccordion>
                <AccordionAnimationSettings>
                    <AccordionAnimationExpand Effect="AnimationEffect.FadeIn" Duration="500"></AccordionAnimationExpand>
                    <AccordionAnimationCollapse Effect="AnimationEffect.FadeOut" Duration="500"></AccordionAnimationCollapse>
                </AccordionAnimationSettings>
            </SfAccordion> 
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent">
            <summary>
            Gets or sets the Child Content for the Accordion Animation Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.Collapse">
            <summary>
            Gets or sets the animation to appear while collapsing the <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/>.
            </summary>
            <value>
            If we set the collapse animation, then the provided <see cref="T:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse"/> value is applied for collapse action, otherwise the default `null` value is set.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.Expand">
            <summary>
            Gets or sets the animation to appear while expanding the <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/>.
            </summary>
            <value>
            If we set the expand animation, then the provided <see cref="T:Syncfusion.Blazor.Navigations.AccordionAnimationExpand"/> value is applied for expand action, otherwise the default `null` value is set.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandMode">
            <summary>
            Specifies the option to expand single or multiple panel at a time.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandMode.Single">
            <summary>
            Denotes single panel expansion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandMode.Multiple">
            <summary>
            Denotes multiple panel expansion.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionEvents">
            <summary>
            Configure event handlers to handle the events with the Accordion component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Clicked">
            <summary>
            The event triggers when clicking anywhere within the Accordion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Created">
            <summary>
            The event triggers once the control rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Destroyed">
            <summary>
            The event triggers when the control gets destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Expanded">
            <summary>
            The event triggers after the item gets expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Expanding">
            <summary>
            The event triggers before the item gets expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Collapsed">
            <summary>
            The event triggers after the item gets collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Collapsing">
            <summary>
            The event triggers before the item gets collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionItem">
            <summary>
            A class that represents accordion panels of <see cref="T:Syncfusion.Blazor.Navigations.SfAccordion"/> component.
            </summary>
            <remarks>
            You can render header and content of accordion by specifying value to corresponding property.=
            </remarks>
            <example>
            In the below code example, a basic accordion panel has been added using <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/> tag directive.
            <code><![CDATA[
            <SfAccordion>
                <AccordionItems>
                    <AccordionItem Header="ASP.NET">
                        <ContentTemplate>
                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Header="ASP.NET MVC">
                        <ContentTemplate>
                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Header="JavaScript">
                        <ContentTemplate>
                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.ChildContent">
            <summary>
            Gets or sets the child content for the accordion item.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of accordion header.
            </summary>
            <value>
            A template content that specifies the visualization of accordion header. The default value is <c>null</c>.
            </value>        
            <example>
            <code><![CDATA[
            <SfAccordion>
                <AccordionItems>
                    <AccordionItem Content="C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.">
                        <HeaderTemplate>
                            <div class="header-text">C Sharp(C#)</div>
                        </HeaderTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of accordion content.
            </summary>
            <value>
            A template content that specifies the visualization of accordion content. The default value is <c>null</c>.
            </value>        
            <example>
            <code><![CDATA[
            <SfAccordion>
                <AccordionItems>
                    <AccordionItem Header="C Sharp(C#)">
                        <ContentTemplate>
                            <div class="content-text">C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.</div>
                        </ContentTemplate>     
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Content">
            <summary>
            Gets or sets the text content to be displayed for accordion item.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.CssClass">
            <summary>
            Gets or sets the classes for accordion item to customize the accordion header and content.
            </summary>
            <value> 
            If we set the css class, then the custom class is applied for accordion item. The default value is <c>null</c>. 
            </value>
            <example> 
            <code><![CDATA[ 
            <SfAccordion>
                <AccordionItems>
                    <AccordionItem CssClass="item1">
                        <HeaderTemplate>
                            Margeret Peacock
                        </HeaderTemplate>
                        <ContentTemplate>
                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Disabled">
            <summary>
            Gets or sets whether the accordion panel is disabled or not.
            </summary>
            <value>
            <c>true</c>, to disable the accordion panel. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Expanded">
            <summary>
            Gets or sets a value that indicates whether the accordion panel is expanded or not.
            </summary>
            <value>
            <c>true</c>, to expand the accordion panel. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Header">
            <summary>
            Gets or sets the header text to be displayed for accordion item.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.IconCss">
            <summary>
            Gets or sets a CSS class string to include an icon or image for accordion header. 
            </summary>
            <value>
            Accepts a CSS class string separated by space to include an icon or image for the accordion item. The default value is <c>null</c>.
            </value>
            <remarks>
            This property value is only applied for accordion header. 
            </remarks>
            <example>
            <code><![CDATA[
            <SfAccordion>
                <AccordionItems>
                    <AccordionItem  IconCss="e-icons e-home" Content="Home icon rendered in header"></AccordionItem>
                </AccordionItems>
            </SfAccordion>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Visible">
            <summary>
            Gets or sets whether the accordion panel is hidden or not.
            </summary>
            <value>
            <c>false</c>, to hide the accordion panel. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Id">
            <summary>
            Gets or sets the unique ID for accordion item.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.ExpandedChanged">
            <summary>
            Gets or sets a callback when <see cref="P:Syncfusion.Blazor.Navigations.AccordionItem.Expanded"/> property changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionItem.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionItems">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/>.
            </summary>
            <remarks>
            To generate dynamic <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/> based on collection, use <c>@foreach</c> within <see cref="T:Syncfusion.Blazor.Navigations.AccordionItems"/> tag directive.
            </remarks>
            <example>
            In the below code example, a basic accordion has been rendered using <see cref="T:Syncfusion.Blazor.Navigations.AccordionItems"/> tag directive.
            <code><![CDATA[
            <SfAccordion>
                <AccordionItems>
                    <AccordionItem Header="ASP.NET">
                        <ContentTemplate>
                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Header="ASP.NET MVC">
                        <ContentTemplate>
                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Header="JavaScript">
                        <ContentTemplate>
                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItems.ChildContent">
            <summary>
            Gets or sets the child content for the accordion items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItems.Items">
            <summary>
            Gets or sets the list of accordion items to be rendered in accordion.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionItems.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionClickArgs">
            <summary>
            Provides the information about the accordion click action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionClickArgs.Item">
            <summary>
            Gets the accordion item that is being clicked. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionClickArgs.Name">
            <summary>
            Gets the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionClickArgs.OriginalEvent">
            <summary>
             Gets the mouse event informations.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandEventArgs">
            <summary>
            Provides the information about the accordion item expanding action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Cancel">
            <summary>
            Gets or sets whether the prevent the expanding action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Index">
            <summary>
            Gets or sets the accordion item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.IsExpanded">
            <summary>
            Gets the expand or collapse state of accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Item">
            <summary>
            Gets the accordion item that is being expand or collapse. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Name">
            <summary>
            Gets the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CollapseEventArgs">
            <summary>
            Provides the information about the accordion item collapse action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandedEventArgs">
            <summary>
            Provides the information about the accordion item expanded action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.Index">
            <summary>
            Gets or sets the accordion item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.IsExpanded">
            <summary>
            Gets the expanded or collapsed state of accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.Item">
            <summary>
            Gets the accordion item that is being expanded or collapsed. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.Name">
            <summary>
            Gets the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CollapsedEventArgs">
            <summary>
            Provides the information about the accordion item collapsed action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionItemModel">
            <summary>
            Provides information about the accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.HeaderTemplate">
            <summary>
            Gets or sets the template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of accordion header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.ContentTemplate">
            <summary>
            Gets or sets the template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of accordion content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Content">
            <summary>
            Gets or sets the text content to be displayed for accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.CssClass">
            <summary>
            Gets or sets the classes for accordion item to customize the accordion header and content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Disabled">
            <summary>
            Gets or sets whether the accordion panel is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Expanded">
            <summary>
            Gets or sets a value that indicates whether the accordion panel is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Header">
            <summary>
            Gets or sets the header text to be displayed for accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.IconCss">
            <summary>
            Gets or sets a CSS class string to include an icon or image for accordion header. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Visible">
            <summary>
            Gets or sets whether the accordion panel is hidden or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Id">
            <summary>
            Gets or sets the unique ID for accordion item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfAccordion">
            <summary>
            Accordion is a vertically collapsible panel that displays one or more panels at a time.
            </summary>
            <remarks>
            Accordion items can be populated by specifying <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/> within <see cref="T:Syncfusion.Blazor.Navigations.AccordionItems"/> tag directive.
            </remarks>
            <example>
            In the below code example, a basic accordion component initialized with <see cref="T:Syncfusion.Blazor.Navigations.AccordionItems"/> tag directive.
            <code><![CDATA[
            <SfAccordion>
                <AccordionItems>
                    <AccordionItem Header="ASP.NET">
                        <ContentTemplate>
                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Header="ASP.NET MVC">
                        <ContentTemplate>
                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Header="JavaScript">
                        <ContentTemplate>
                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ID">
            <summary>
            Gets or sets the unique Id value for accordion component.
            </summary>
            <value>
            If we set the id, then the id value set for accordion element. The default value is `null`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ChildContent">
            <summary>
            Gets or sets the child content of accordion component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.Items">
            <summary>
            Gets or sets the list of accordion items that will be populated using the <see cref="T:Syncfusion.Blazor.Navigations.AccordionItems"/> tag directive. 
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Navigations.AccordionItems"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndices" /> property is persisted.
            </summary>
            <value>
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.
            </value>
            <remarks>
            Component's <see cref="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndices"/> property will be stored in browser local storage to persist component's state when page reloads.
            It is mandatory to provide <see cref="P:Syncfusion.Blazor.Navigations.SfAccordion.ID"/> to persist <c>ExpandedIndices</c> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.LoadOnDemand">
            <summary>
            Gets or sets whether to render all the accordion content on initial load or not.
            </summary>
            <value>
            If we set <c>false</c>, then all the contents are rendered on initial load, The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.EnableRtl">
            <summary>
            Gets or sets whether the right to left direction is enabled for accordion component.
            </summary>
            <value> 
            true, the right to left direction is enabled for accordion component. The default value is `false`. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandMode">
            <summary>
            Gets or sets a value that indicates options to expand a single or multiple panels at a time.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.ExpandMode"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.ExpandMode.Multiple"/>
            </value>
            <remarks>
            If the <c>ExpandMode</c> is <c>Single</c>, only one <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/> will expand at a time.
            If the <c>ExpandMode</c> is <c>Multiple</c>, more than one <see cref="T:Syncfusion.Blazor.Navigations.AccordionItem"/> will expand at a time.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndices">
            <summary> 
            Gets or sets the index of items that is expanded on the initial load. 
            </summary> 
            <value> 
            If we set the index value, then specified index items were expanded otherwise the default <c>null</c> value is set.  
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfAccordion @bind-ExpandedIndices="@ExpandedIndices">
                <AccordionItems>
                    <AccordionItem Header="ASP.NET">
                        <ContentTemplate>
                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Header="ASP.NET MVC">
                        <ContentTemplate>
                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.
                        </ContentTemplate>
                    </AccordionItem>
                    <AccordionItem Header="JavaScript">
                        <ContentTemplate>
                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
            @code{
                int[] ExpandedIndices = new int[] { 0, 1 };
            }
            ]]></code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndicesChanged">
            <summary>
            Invokes when index of expanded items were changed.
            </summary>
            <value> 
            Fired when expanded item index changes.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.Height">
            <summary> 
            Gets or sets the height of the accordion element in pixels/number/percentage. 
            </summary> 
            <value> 
            If we set the height value, then the accordion will render based on specified height otherwise the default height value `auto` is set.  
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfAccordion Height="500px"></SfAccordion> 
            ]]></code>
            </example> 
            <remarks>
            If we set number values, then it is considered as pixels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.Width">
            <summary> 
            Gets or sets the width of the accordion element in pixels/number/percentage. 
            </summary> 
            <value> 
            If we set the width value, then the accordion will render based on specified width otherwise the default width value `100%` is set.  
            </value>
            <example>
            <code><![CDATA[
            <SfAccordion Width="500px"></SfAccordion>
            ]]></code>
            </example>
            <remarks>
            If we set number values, then it is considered as pixels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.HtmlAttributes">
            <summary> 
            Gets or sets a collection of additional attributes that will applied to the accordion element. 
            </summary> 
            <remarks>
            Additional attributes can be added by specifying as in-line attributes or by specifying <c>@attributes</c> directive.
            </remarks> 
            <value> 
            It allows the accordion component to render non-declared attributes. The default value is `null`. 
            </value>
            <example> 
            <code><![CDATA[ 
            <SfAccordion name="accordion"></SfAccordion>
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.Select(System.Int32)">
            <summary>
            Sets focus to the specified index item header in Accordion.
            </summary>
            <param name="index">Number value that determines which item should be focused.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.SelectAsync(System.Int32)">
            <summary>
            Sets focus to the specified index item header in Accordion.
            </summary>
            <param name="index">Number value that determines which item should be focused.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.CreatedEvent">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnAccordionClick(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerExpandingEvent(System.Nullable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerExpandedEvent(Syncfusion.Blazor.Navigations.ExpandEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerCollapsingEvent(System.Nullable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerCollapsedEvent(Syncfusion.Blazor.Navigations.ExpandEventArgs)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender">
            <summary>
            Specifies the accordion item renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.Item">
            <summary>
            Gets or sets the accordion item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.ChildContent">
            <summary> 
            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items"/> property. 
            </summary> 
            <value> 
            The template content. The default value is <c>null</c>. 
            </value> 
            <remarks> 
            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items"/> property. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.CssClass">
            <summary> 
            Gets or sets CSS class string to customize the appearance of menu. 
            </summary> 
            <value> 
            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.EnableRtl">
            <summary>
            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.
            </summary> 
            <value> 
            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items">
            <summary>
            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.ShowItemOnClick">
            <summary>
            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. 
            </summary> 
            <value> 
            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.EnableScrolling">
            <summary>
            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.CloseMenuAsync(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            To update the child properties
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.IconCss">
            <summary>
            Gets or sets a value that indicates the class to include icons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Id">
            <summary>
            Gets or sets a value that indicates the menu item id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Separator">
            <summary>
            Gets or sets a value that indicates whether to enble or disable the separator.
            The separator is either horizontal or vertical lines used to group menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Disabled">
            <summary>
            Gets or sets a value that indicates the menu item disable state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Hidden">
            <summary>
            Gets or sets a value that indicates the menu item hidden state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Text">
            <summary>
            Gets or sets a value that indicates the text of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Url">
            <summary>
            Gets or sets a value that indicates the URL of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.HtmlAttributes">
            <summary>
            Gets or sets a value that indicates additional attributes to the menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.PagerKeyUtilExtension">
            <summary>
            Handles the pager locale key.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ToolbarContent">
            <summary>
            Specifies toolbar content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Item">
            <summary>
            Defines the toolbar item model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Index">
            <summary>
            Defines toolbar item index.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor toolbar component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs">
            <summary>
            A class that holds options to control the toolbar item clicked action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.TargetParentDataIndex">
            <summary>
            Gets or sets the data index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.ToolbarItemIndex">
            <summary>
            Gets or sets the toolbar item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.IsPopupElement">
            <summary>
            Gets or sets the item from popup element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1">
            <summary>
            Specifies the complex list items.
            </summary>
            <typeparam name="TValue">"TypeParam".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.TreeOptions">
            <summary>
            Specifies the TreeOption field values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.HasChild">
            <summary>
            Specifies the treeview node has child or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.MappedData">
            <summary>
            Specifies the Treeview mapped data values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.RandomID">
            <summary>
            Specifies the Treeview node data id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.Index">
            <summary>
            Specifies the index position of Treeview node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.ListModel">
            <summary>
            Specifies the treeview list base option model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.ListData">
            <summary>
            Specifies the datasource of list element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.TreeNodeLevel">
            <summary>
            Specifies the tree node level of treeview nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1">
            <summary>
            Specifies the ComplexCreateList.
            </summary>
            <typeparam name="TValue">"TypeParam".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListData">
            <summary>
            Specifies the datasource of list element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.TreeOptions">
            <summary>
            Specifies the TreeOption field values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.TreeItemCreating">
            <summary>
            Specifies the TreeItemCreating event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.TreeNodeLevel">
            <summary>
            Specifies the tree node level of treeview nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListModel">
            <summary>
            Specifies the treeview list base option model.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.InvokeTreeItemCreating(`0,Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping{System.Collections.Generic.List{`0}},System.Int32)">
            <summary>
            Returns TreeItemCreatedArgs for a list item for which TreeItemCreating event invoked.
            </summary>
            <param name="item">"Specifies the item".</param>
            <param name="mappedData">"Specifies the mappedData".</param>
            <param name="nodeLevel">"Specifies the nodeLevel".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.MapSettings(Syncfusion.Blazor.Navigations.Internal.ListModel,System.Boolean)">
            <summary>
            Maps the default setting for the list generated.
            </summary>
            <param name="options">"Specifies the options field".</param>
            <param name="isField">"Specifies the isField attribute".</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListBasePropertyMapper`1">
            <summary>
            ListBase Property.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListBasePropertyMapper`1.PropertyMapper(`1,`1)">
            <summary>
            Specifies the property mapper.
            </summary>
            <param name="customizedProp">"Specifes the customised prop".</param>
            <param name="mappedProp">"Specifies the mapped property".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.GetDefaultListOptions">
            <summary>
            Sets and returns default listbase properties values to the listbase options.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeViewListItems`1">
            <exclude/>
            <summary>
            Specifies the TreeViewListItems class.
            </summary>
            <typeparam name="TValue">"TypeParam".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewListItems`1.TreeItemCreating">
            <summary>
            TreeItem creating.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewListItems`1.ItemsCreating">
            <summary>
            ItemCreating variable.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1">
            <summary>
            Specifies the TreeOption class.
            </summary>
            <typeparam name="TValue">"TValue".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.ChildData">
            <summary>
            Specifies the Child data of node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.TreeViewFields">
            <summary>
            Specifies the Treeview fields value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsExpanded">
            <summary>
            Specifies the Treeview node is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsFullRowSelect">
            <summary>
            Specifies the fullrow selection enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IconClass">
            <summary>
            Specifies the IconClass of Treeview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsSelected">
            <summary>
            Specifies the node is selected or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsChecked">
            <summary>
            Specifies the Treeview node checked or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.NodeLevel">
            <summary>
            Specifies the Treeview node level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsTree">
            <summary>
            Specifies the tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.NodeTemplate">
            <summary>
            Specifies the Treeview node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.FullRowNavigate">
            <summary>
            Specifies the full row navigate of Treeview node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsEdit">
            <summary>
            Specifies the editing mode in node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsDisabled">
            <summary>
            Specifies the node disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsLoaded">
            <summary>
            Specifies the node already loaded or not in DOM
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1">
            <summary>
            Specifies the TreeItemCreatedArgs.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.TreeOptions">
            <summary>
            Specifies the TreeOptions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.NodeLevel">
            <summary>
            Specifies the NodeLevel argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.ItemData">
            <summary>
            Specifies the ItemData argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.Item">
            <summary>
            Specifies the Item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.Options">
            <summary>
            Specifies the Options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.Text">
            <summary>
            Specifies the Text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.FieldsMapping">
            <summary>
            Specifies the Treeview field mappings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Child">
            <summary>
            Specifies the child attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Expanded">
            <summary>
            Specifies the Expanded field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.HasChildren">
            <summary>
            Specifies the HasChildren field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.HtmlAttributes">
            <summary>
            Specifies the HtmlAttributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.IconCss">
            <summary>
            Specifies the IconCss field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Id">
            <summary>
            Specifies the Id field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.ImageUrl">
            <summary>
            Specifies the ImageUrl field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.IsChecked">
            <summary>
            Specifies the IsChecked field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Selected">
            <summary>
            Specifies the Selected field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Text">
            <summary>
            Specifies the Text field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Tooltip">
            <summary>
            Specifies the Tooltip field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Url">
            <summary>
            Specifies the Url field attribute.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1">
            <summary>
            Specifies the field values Mapping.
            </summary>
            <typeparam name="T">"T".</typeparam>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Child">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Expanded">
            <summary>
            Specifies the Expanded field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.HasChildren">
            <summary>
            Specifies the HasChildren field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.IconCss">
            <summary>
            Specifies the IconCss field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Id">
            <summary>
            Specifies the Id field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.ImageUrl">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.IsChecked">
            <summary>
            Specifies the IsChecked field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Selected">
            <summary>
            Specifies the Selected field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Text">
            <summary>
            Specifies the Text field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Tooltip">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Url">
            <summary>
            Specifies the URL field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.HtmlAttributes">
            <summary>
            Specifies the HtmlAttriibutes field.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1">
            <summary>
            Specifies the item created event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1.ItemData">
            <summary>
            Specifies the ItemData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1.Item">
            <summary>
            Specifies the Item value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1.Text">
            <summary>
            Specifies the Text of the item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping">
            <summary>
            Specifies the TreeFieldsMapping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.ParentID">
            <summary>
            Specifies the ParentId.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.DataManager">
            <summary>
            Specifies the item DataManager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.Query">
            <summary>
            Specifies the Query.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.TableName">
            <summary>
            Specifies the TableName.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.Children">
            <summary>
            Specifies the Children.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ListModel">
            <summary>
            Specifies Treeview Options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ExpandCollapse">
            <summary>
            Specifies to show collapsible icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ExpandIconClass">
            <summary>
            Specifies the customizable expand icon class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.Fields">
            <summary>
            Specifies that fields that mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ItemNavigable">
            <summary>
            If set true to this property then the entire list will be navigate-able instead of text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ShowIcon">
            <summary>
            Specifies to show icon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel">
            <summary>
            Specifies class for expand / collapse animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel">
            <summary>
            Specifies the class for expand animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel.Effect">
            <summary>
            Specifies the animation effect for expanding the TreeView node.
            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel">
            <summary>
            Specifies the class for collapse animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel.Effect">
            <summary>
            Specifies the animation effect for collapsing the TreeView node.
            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsMultiSelect">
            <summary>
            Specifies the MultiSelect argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsCtrKey">
            <summary>
            Specifies the control key is pressed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsShiftKey">
            <summary>
            Specifies the shift key is pressed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.Nodes">
            <summary>
            Specifies the Node data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsInteracted">
            <summary>
            Specifies the nodes are selected in manual interaction or dynamic interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.Action">
            <summary>
            Specifies the action to be performed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.NodeData">
            <summary>
            Specifies the Node Data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs">
            <summary>
            Expand event args.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs.IsLoaded">
            <summary>
            Specifies the loaded argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs.NodeLevel">
            <summary>
            Specifies the Node level.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DragLi">
            <summary>
            Specifies the Drageed List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DropLi">
            <summary>
            Specifies the Dropped List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DropParentLi">
            <summary>
            Specifies the Dropped parent List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DragParentLi">
            <summary>
            Specifies the Dragged parent List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.Pre">
            <summary>
            Specifies the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.SrcTree">
            <summary>
            Specifies the Source Tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.IsExternalDrag">
            <summary>
            Specifies the external drag and drop is true or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ITreeView">
            <summary>
            Interface for SfTreeView component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ITreeView.UpdateAnimationProperties(Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings)">
            <summary>
            Update animation settings property.
            </summary>
            <param name="animationSettings">"Specifies the animationSettings parameter".</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType">
            <summary>
            An enum type that denotes the Treeview data source types.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType.SelfReferential">
            <summary>
            Specifies 'SelfReferential' Data type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType.Hierarchical">
            <summary>
            Specifies 'Hierarchical' Data type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType.RemoteData">
            <summary>
            Specifies 'RemoteData' Data type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1">
            <summary>
            List generation of TreeView component.
            </summary>
            <typeparam name="TValue">"TValue paramater".</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">"First render".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GettingQuery(Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping,System.Object)">
            <summary>
            Getting Query values for Remote data source.
            </summary>
            <param name="mapper">"Specfies the mapper field".</param>
            <param name="value">"Specifies the value".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetQuery(Syncfusion.Blazor.Data.Query)">
            <summary>
            Update Cloned query value for Remote data binding.
            </summary>
            <param name="query">"Specifies the QUERY parameter".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.SerializeModel">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.AddNodeData(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Adding treeview nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.CheckForRemoteHasChild(System.Collections.Generic.List{System.Object})">
            <summary>
            Update Has Child after remove operation in Remote Data
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.RemoveNodes(System.String[])">
            <summary>
            Removing treeview nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetTreeViewData(System.String)">
            <summary>
            Return treeview node data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetRemoteNodeData(System.String)">
            <summary>
            Get the node data for remote data
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetNodeDetails(System.String)">
            <summary>
            Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1">
            <summary>
             A class used for configuring the TreeView fields setting properties.
            </summary>
            <typeparam name="TValue">"Specifies the Tvalue parameter".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Child">
            <summary>
            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.DataSource">
            <summary>
            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Expanded">
            <summary>
            Specifies the mapping field for expand state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.HasChildren">
            <summary>
            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.HtmlAttributes">
            <summary>
            Specifies the mapping field for htmlAttributes to be added to the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.DataManager">
            <summary>
            The DataManager is used to performing data operations in applications.
            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.IconCss">
            <summary>
            Specifies the mapping field for icon class of each TreeView node that will be added before the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Id">
            <summary>
            Specifies the ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.ImageUrl">
            <summary>
            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.IsChecked">
            <summary>
            Specifies the field for checked state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.NavigateUrl">
            <summary>
            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.ParentID">
            <summary>
            Specifies the parent ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Query">
            <summary>
            This paramter will execute along with data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Selected">
            <summary>
            Specifies the mapping field for selected state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.TableName">
            <summary>
            Specifies the table name used to fetch data from a specific table in the server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Text">
            <summary>
            Specifies the mapping field for text displayed as TreeView node's display text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Tooltip">
            <summary>
            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Children">
            <summary>
            Specifies the child.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Specifies the child property update.
            </summary>
            <param name="prop">"Specifies the prop details".</param>
            <param name="details">"Specifies the details".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator.PreviousIndex">
            <exclude/>
            <summary>
            Gets or sets the index of Breadcrumb's item which is rendered before the separator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem.Item">
            <exclude/>
            <summary>
            Gets or sets the item in the list of Breadcrumb items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem.Index">
            <exclude/>
            <summary>
            Gets or sets the index of the item in the list of Breadcrumb items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems.Items">
            <exclude/>
            <summary>
            Gets or sets the list of Breadcrumb items.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems.ClosePopup">
            <exclude/>
            <summary>
            Closes the popup if it is opened when the <c>OverflowMode</c> is <c>Menu</c>.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AppBarSeparator">
            <summary>
            Represents a component which displays a line to visually group or separate the AppBar contents.
            </summary>
            <remarks>
            <c>AppBarSeparator</c> shows a vertical line which used to group AppBar contents 
            by separating single or group of AppBar contents.
            </remarks>
            <value> 
            It allows to group the Appbar contents. 
            </value>
            <example> 
            <code><![CDATA[ 
            <SfAppBar>
            <SfButton CssClass="e-inherit" IconCss="e-icons e-home"></SfButton>
            <AppBarSeparator />
            <SfButton CssClass="e-inherit" IconCss="e-icons e-pan"></SfButton>
            </SfAppBar>
            ]]></code> 
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AppBarSpacer">
            <summary>
            Represents a component that introduce spacing between the AppBar contents which gives an additional space on content layout.
            </summary>
            <remarks>
            <c>AppBarSpacer</c> provides the space between the components. 
            So, user can tune the spacing between the content like right or left.
            </remarks>
            <value> 
            It provides space between the Appbar contents. 
            </value>
            <example> 
            <code><![CDATA[
            <SfAppBar>
            <SfButton CssClass="e-inherit" IconCss="e-icons e-home"></SfButton>
            <AppBarSpacer />
            <SfButton CssClass="e-inherit" IconCss="e-icons e-pan"></SfButton>
            </SfAppBar>
            ]]></code> 
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AppBarMode">
            <summary>
            Specifies the height mode of the <see cref="T:Syncfusion.Blazor.Navigations.SfAppBar"/> component which define the height of the AppBar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.AppBarMode.Regular">
            <summary>
            Specifies default height for the AppBar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.AppBarMode.Prominent">
            <summary>
            Specifies longer height for the AppBar to show the longer titles, images, or to provide a stronger presence.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.AppBarMode.Dense">
            <summary>
            Specifies compressed (short) height for AppBar to accommodate all the app bar content in a denser layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AppBarPosition">
            <summary>
            Specifies the position of the <see cref="T:Syncfusion.Blazor.Navigations.SfAppBar"/> component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.AppBarPosition.Top">
            <summary>
            Position the AppBar at the top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.AppBarPosition.Bottom">
            <summary>
            Position the AppBar at the bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AppBarColor">
            <summary>
            Specifies the color of the <see cref="T:Syncfusion.Blazor.Navigations.SfAppBar"/> component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.AppBarColor.Light">
            <summary>
            Use light color for AppBar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.AppBarColor.Dark">
            <summary>
            Use dark color for AppBar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.AppBarColor.Primary">
            <summary>
            Use primary color for AppBar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.AppBarColor.Inherit">
            <summary>
            Inherit color from parent for AppBar. AppBar background and colors inherited from it's parent element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfAppBar">
            <summary>
            The AppBar displays the information and actions related to the current application screen. It is used to show branding, screen titles, navigation, and actions.
            </summary>
            <remarks>
            AppBar component can be populated by specifying the child components within <see cref="T:Syncfusion.Blazor.Navigations.SfAppBar"/> tag directive.
            Support to inherit colors from AppBar provided to <c>SfButton</c>, <c>SfDropDownButton</c>, <c>SfMenu</c> and <c>SfTextBox</c>. 
            Set <c>CssClass</c> property with <code>e-inherit</code> CSS class to inherit the background and color from AppBar. 
            </remarks>
            <example>
            The below example shows AppBar with Primary Button.
            <code><![CDATA[
            <SfAppBar> 
                <SfButton IsPrimary="true">Primary</SfButton>
            </SfAppBar>
            ]]></code>
            The below example shows AppBar with Buttons which inherits colors from AppBar.
            <code><![CDATA[
            <SfAppBar>
            <SfButton CssClass="e-inherit" IconCss="e-icons e-home"></SfButton>
            <AppBarSeparator />
            <SfButton CssClass="e-inherit" IconCss="e-icons e-pan"></SfButton>
            </SfAppBar>
            ]]></code>
            The below example, AppBarSpacer component used to align the Buttons on left and right.
            <code><![CDATA[
            <SfAppBar>
            <SfButton CssClass="e-inherit" IconCss="e-icons e-home"></SfButton>
            <AppBarSpacer />
            <SfButton CssClass="e-inherit" IconCss="e-icons e-pan"></SfButton>
            <SfButton CssClass="e-inherit" IconCss="e-icons e-close"></SfButton>
            </SfAppBar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAppBar.Mode">
            <summary>
            Gets or sets mode of the AppBar that defines the AppBar height. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.AppBarMode"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.AppBarMode.Regular"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAppBar.Position">
            <summary>
            Gets or sets position of the AppBar.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.AppBarPosition"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.AppBarPosition.Top"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAppBar.CssClass">
            <summary> 
            Gets or sets the custom classes to customize the AppBar component.  
            </summary>
            <remarks> 
            Accepts single/multiple classes (separated by a space) to be used for AppBar customization. 
            </remarks>
            <value> 
            If we set the css class, then the custom class is applied for AppBar. The default value is <c>string.Empty</c>. 
            </value>
            <example>
            In the below example AppBar background and color is customized using <c>CssClass</c> property.
            <code><![CDATA[ 
            <SfAppBar CssClass="custom-appbar">
            <SfButton CssClass="e-inherit" IconCss="e-icons e-menu"></SfButton>
            </SfAppBar>
            <style>
            .custom-appbar {
            background: #adadb1;
            color: #fff;
            }
            </style>
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAppBar.IsSticky">
            <summary> 
            Gets or sets whether the AppBar position is fixed or not while scrolling the page. 
            </summary> 
            <value> 
            <c>true</c>, The AppBar will be sticky while scrolling. The default value is <c>false</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAppBar.HtmlAttributes">
            <summary> 
            Gets or sets a collection of additional attributes that will be applied to the AppBar element. 
            </summary> 
            <remarks> 
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. 
            </remarks> 
            <value> 
            It allows the AppBar component to render non-declared attributes. The default value is `null`. 
            </value>
            <example>
            In the below code example, Elevation of the AppBar customized using <c>@attributes</c> directive.
            <code><![CDATA[ 
            <SfAppBar @attributes="customAttribute">
            <SfButton CssClass="e-inherit" IconCss="e-icons e-home"></SfButton>
            </SfAppBar> 
            @code{ 
               Dictionary<string, object> customAttribute = new Dictionary<string, object>() 
               { 
                   { "style", "box-shadow: 0 5px 5px -3px rgba(0,0,0,.06), 0 8px 10px 1px rgba(0,0,0,.042), 0 3px 14px 2px rgba(0,0,0,.036)" } 
               }; 
            } 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAppBar.ColorMode">
            <summary>
            Gets or sets the color mode that defines the color of AppBar component.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.AppBarColor"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.AppBarColor.Light"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAppBar.ChildContent">
            <summary>
            Gets or sets the child content of AppBar component.
            </summary>
            <value>
            The value used to build the content.
            </value>
            <example>
            The below example, AppBarSpacer component used to align the Buttons on left and right.
            <code><![CDATA[
            <SfAppBar>
            <SfButton CssClass="e-inherit" IconCss="e-icons e-home"></SfButton>
            <AppBarSpacer />
            <SfButton CssClass="e-inherit" IconCss="e-icons e-pan"></SfButton>
            <SfButton CssClass="e-inherit" IconCss="e-icons e-close"></SfButton>
            </SfAppBar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAppBar.Created">
            <summary> 
            Triggers when the component is created.  
            </summary> 
            <value> 
            Fired when AppBar created. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAppBar.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
            <value> 
            Fired when AppBar destroyed. 
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAppBar.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAppBar.OnParametersSet">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAppBar.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbItem">
            <summary>
            A class that represents breadcrumb component item of <see cref="T:Syncfusion.Blazor.Navigations.SfBreadcrumb"/> component.
            </summary>
            <remarks>
            You can render icon only, text only, icon and text breadcrumb item by specifying value to corresponding property.
            Additional attributes can be added to Breadcrumb item using <c>@attributes</c> directive.
            </remarks>
            <example>
            In the below code example, a basic Breadcrumb item has been added using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                    <BreadcrumbItem Text="Breadcrumb" Url="https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent">
            <summary>
            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text"/> content.
            </summary>
            <value>
            The template content. The default value in <c>null</c>.
            </value>
            <example>
            In the below code example, content has been set to <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> using <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text"/> property and <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent"/> property.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text">
            <summary>
            Gets or sets the text content of the Breadcrumb item.
            </summary>
            <value>
            Accepts a string value. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            Set child content within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> tag directive, to render as HTML content.
            </remarks>
            <example>
            In the below code example, content has been set to <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> using <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text"/> property and <c>ChildContent</c> property.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem>Home</BreadcrumbItem>
                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url">
            <summary>
            Gets or sets the Url of the Breadcrumb item and that will be navigated when clicked.
            </summary>
            <value>
            Accepts Url string value. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            When Url has not been set, you can customize the item navigation using <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked"/> event.
            </remarks>
            <example>
            <code><![CDATA[
            <SfBreadcrumb">
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.IconCss">
            <summary>
            Gets or sets a CSS class string to include an icon or image for the breadcrumb item. 
            </summary>
            <value>
            Accepts a CSS class string separated by space to include an icon or image for the breadcrumb item. The default value is <c>String.Empty</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem IconCss="e-icons e-home"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Disabled">
            <summary>
            Gets or sets whether the Breadcrumb item is disabled or not.
            </summary>
            <value>
            <c>true</c>, if the Breadcrumb item is disabled. The default value is <c>false</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfBreadcrumb">
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Disabled="true" Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.
            </summary>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            </remarks>
            <example>
            In the below code example, title attribute added as inline in <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" title="Home"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbItems">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/>.
            </summary>
            <remarks>
            To generate dynamic <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> based on collection, use <c>@foreach</c> within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive.
            </remarks>
            <example>
            In the below code example, a basic Breadcrumb has been rendered using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent">
            <exclude/>
            <summary>
            Specifies the child content for the Breadcrumb items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates">
            <summary>
            Represents template options in <see cref="T:Syncfusion.Blazor.Navigations.SfBreadcrumb"/> component.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> or <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/> can be set <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates"/> tag directive.
            To access template's context parameter use <c>@context</c> in both <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> and <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/>.
            </remarks>
            <example>
            In the below code example, both <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> and <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/> has been specified.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations"></BreadcrumbItem>
                </BreadcrumbItems>
                <BreadcrumbTemplates>
                    <ItemTemplate>
                        <i>@context.Text</i>
                    </ItemTemplate>
                    <SeparatorTemplate>
                        <span class="e-icons e-arrow"></span>
                    </SeparatorTemplate>
                </BreadcrumbTemplates>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of breadcrumb items.
            Here, context refers to the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> for which the template is applied.
            </summary>
            <value>
            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.
            </value>
            <remarks>
            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> properties.
            Specify <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates"/> tag directive.
            </remarks>        
            <example>
            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations"></BreadcrumbItem>
                </BreadcrumbItems>
                <BreadcrumbTemplates>
                    <ItemTemplate>
                        <i>@context.Text</i>
                    </ItemTemplate>
                </BreadcrumbTemplates>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of breadcrumb items separator.
            Here, context refers to the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> for previous and current item which the template is applied.
            </summary>
            <value>
            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.
            </value>
            <remarks>
            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> properties.
            Specify <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/> within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates"/> tag directive.
            </remarks>
            <example>
            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations"></BreadcrumbItem>
                </BreadcrumbItems>
                <BreadcrumbTemplates>
                    <SeparatorTemplate>
                        <span class="e-icons e-arrow"></span>
                    </SeparatorTemplate>
                </BreadcrumbTemplates>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode">
            <summary>
            Specifies how to display Breadcrumb items in <see cref="T:Syncfusion.Blazor.Navigations.SfBreadcrumb"/> component when the Breadcrumb items exceeds Breadcrumb container or <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Menu">
            <summary>
            Shows the number of Breadcrumb items that can be accommodated within the container space, and creates a sub menu with the remaining items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Hidden">
            <summary>
            The specified <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/> count will be visible and the remaining items will be hidden. While clicking on the previous item, the hidden item will become visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Collapsed">
            <summary>
            Only the first and last items will be visible, and the remaining items will be hidden with collapsed icon. When the collapsed icon is clicked, all items become visible and scroll will be enabled if the space is not enough to show all items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Wrap">
            <summary>
            Wraps the items on multiple lines when the Breadcrumb’s width exceeds the container space.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Scroll">
            <summary>
            Shows an HTML scroll bar when the Breadcrumb’s width exceeds the container space.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.None">
            <summary>
            Shows all the items on a single line.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemRendering"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs.Item">
            <summary>
            Gets or sets the Breadcrumb item that is being render. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs.Cancel">
            <summary>
            Gets or sets whether the rendering of Breadcrumb item should be canceled or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs.Item">
            <summary>
            Gets the clicked Breadcrumb item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfBreadcrumb">
            <summary>
            Breadcrumb component is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.
            The aim is to make the user aware of their current position in a hierarchy of website links.
            </summary>
            <remarks>
            Breadcrumb items can be populated either by specifying <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Url"/> property or by specifying <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> within <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive.
            <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate"/> and <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate"/> can be used to customize the Breadcrumb component UI using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates"/> tag directive.
            </remarks>
            <example>
            In the below code example, a basic Breadcrumb component initialized with <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                    <BreadcrumbItem Text="Breadcrumb" Url="https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Url">
            <summary>
            Gets or sets the Url based on which the Breadcrumb items are generated.
            </summary>
            <value>
            The value as a Url string to generate Breadcrumb items. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            You can specify only absolute Url to this property.
            </remarks>
            <example>
            <code><![CDATA[
            <SfBreadcrumb Url="https://blazor.syncfusion.com/demos/breadcrumb/navigation">
            </SfBreadcrumb>
            ]]></code>
            </example>
            <seealso cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Items">
            <summary>
            Gets or sets the list of breadcrumb items that will be populated using the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/> tag directive. 
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItems"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url"/> of the active breadcrumb item.
            </summary>
            <value>
            This property contains Url string of active breadcrumb item.
            </value>
            <remarks>
            This property is updated only when the <see cref="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url" /> has value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfBreadcrumb>
                <BreadcrumbItems ActiveItem="@activeItem">
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                    <BreadcrumbItem Text="Breadcrumb" Url="https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            @code {
                private string activeItem = "https://blazor.syncfusion.com/demos/menu-bar/default-functionalities";
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems">
            <summary>
            Gets or sets the maximum number of breadcrumb items to be visible in the breadcrumb component.
            If the number of items exceeds this count, then items are rendered based on <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode"/> property. 
            </summary>
            <value>
            The number of breadcrumb items to be visible in breadcrumb component. The default value is <c>0</c>. 
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/> is applicable only if the number of <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> is greater than <c>2</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode">
            <summary>
            Gets or sets a value that indicates how to display breadcrumb items when the breadcrumb items count exceeds <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems"/>.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Menu"/>
            </value>
            <remarks>
            If the <c>OverflowMode</c> is <c>Hidden</c>, the exceeded items will be hidden and while clicking on the previous item, the hidden item will become visible.
            If the <c>OverflowMode</c> is <c>Collapsed</c>,  only the first and last items will be visible, and the remaining items will be hidden with collapsed icon.
            When the collapsed icon is clicked, all items become visible and scroll will be enabled if the space is not enough to show all items. 
            If the <c>OverflowMode</c> is <c>Menu</c>, it shows the number of breadcrumb items that can be accommodated within the container space, and creates a sub menu with the remaining items.
            If the <c>OverflowMode</c> is <c>Wrap</c>, it wraps the items on multiple lines when the Breadcrumb’s width exceeds the container space.
            If the <c>OverflowMode</c> is <c>Scroll</c>, it shows an HTML scroll bar when the Breadcrumb’s width exceeds the container space.
            If the <c>OverflowMode</c> is <c>None</c>, it shows all the items on a single line.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation">
            <summary>
            Gets or sets whether the built-in item navigation is enabled or not. The breadcrumb component navigates to url based on the item clicked by user.
            </summary>
            <value>
            <c>true</c>, if built-in item navigation is enabled; otherwise, <b>false</b>.The default value is <c>true</c>.
            </value>
            <remarks>
            You can handle navigation in using <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked"/> event by setting <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation"/> as <c>false</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableActiveItemNavigation">
            <summary>
            Gets or sets whether the navigation is enabled for active item (last breadcrumb item).
            </summary>
            <value>
            <c>true</c>, if the navigation is enabled for last breadcrumb item and it is clickable. otherwise, <b>false</b>.The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem" /> property is persisted.
            </summary>
            <value>
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.
            </value>
            <remarks>
            Component's <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem"/> property will be stored in browser local storage to persist component's state when page reloads.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableRtl">
            <summary>
            Gets or sets whether the right to left direction is enabled for breadcrumb component.
            </summary>
            <value>
            <c>true</c>, if the right to left direction is enabled for breadcrumb component. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Disabled">
            <summary>
            Gets or sets whether the breadcrumb component is disabled or not.
            </summary>
            <value>
            <c>true</c>, if the breadcrumb component is disabled. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will applied to the Breadcrumb container element.
            </summary>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            </remarks>
            <example>
            In the below code example, Breadcrumb width has been specified as style attribute in <see cref="T:Syncfusion.Blazor.Navigations.SfBreadcrumb"/> tag directive.
            <code><![CDATA[
            <SfBreadcrumb style="width:200px">
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Home" Url="https://blazor.syncfusion.com/demos/"></BreadcrumbItem>
                    <BreadcrumbItem Text="Components" Url="https://blazor.syncfusion.com/demos/datagrid/overview"></BreadcrumbItem>
                    <BreadcrumbItem Text="Navigations" Url="https://blazor.syncfusion.com/demos/menu-bar/default-functionalities"></BreadcrumbItem>
                    <BreadcrumbItem Text="Breadcrumb" Url="https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent">
            <exclude />
            <summary>
            Gets or sets the child content of Breadcrumb component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItemChanged">
            <exclude/>
            <summary>
            Gets or sets a callback that updates the bound active item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemRendering">
            <summary>
            Gets or sets an event callback that is raised while rendering <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/>.
            </summary>
            <remarks>
            You can customize the breadcrumb items rendering using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs"/>.
            </remarks>
            <example>
            In the below code example, the breadcrumb item text is changed to lower casing using <c>ItemRendering</c> event.
            <code><![CDATA[
            <SfBreadcrumb ItemRendering="@ItemRendering">
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Program Files"></BreadcrumbItem>
                    <BreadcrumbItem Text="Commom Files"></BreadcrumbItem>
                    <BreadcrumbItem Text="Services"></BreadcrumbItem>
                    <BreadcrumbItem Text="Config.json"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            @code {
                private void ItemRendering(BreadcrumbItemRenderingEventArgs args) {
                    args.Item.Text = args.Item.Text.ToLower();
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked">
            <summary>
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbItem"/> is clicked. 
            </summary>
            <remarks>
            You can customize the item navigation using <see cref="T:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs"/> by setting <seealso cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation"/> as <c>false</c>.
            The event is raised for UI based click only.
            </remarks>
            <example>
            <code><![CDATA[
            @inject NavigationManager NavigationManager
            <SfBreadcrumb ItemClicked="@ItemClicked" EnableNavigation="false">
                <BreadcrumbItems>
                    <BreadcrumbItem Text="Program Files" Url="programfiles"></BreadcrumbItem>
                    <BreadcrumbItem Text="Commom Files" Url="commomfiles"></BreadcrumbItem>
                    <BreadcrumbItem Text="Services" Url="services"></BreadcrumbItem>
                    <BreadcrumbItem Text="Config" Url="config"></BreadcrumbItem>
                </BreadcrumbItems>
            </SfBreadcrumb>
            @code {
                private void ItemClicked(BreadcrumbClickedEventArgs args) {
                    NavigationManager.NavigateTo(args.Item.Url);
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfBreadcrumb.ChangeMaxItems(System.Int32)">
            <exclude/>
            <summary>
            Changes the maximum number of Breadcrumb items to be visible in the Breadcrumb component.
            If the number of items exceeds this count, then items are rendered based on <see cref="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode"/> property. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfBreadcrumb.ResizeHandler">
            <exclude/>
            <summary>
            Used to handle responsiveness when browser's window is resized.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfBreadcrumb.ClosePopup">
            <exclude/>
            <summary>
            Closes the popup if it is opened when the <c>OverflowMode</c> is <c>Menu</c>.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CarouselItem">
            <summary>
            A class that represents the Carousel item of <see cref="T:Syncfusion.Blazor.Navigations.SfCarousel"/> component.
            </summary>
            <example> 
            In the below code example, a basic Carousel has been rendered using <see cref="T:Syncfusion.Blazor.Navigations.CarouselItem"/> tag directive. 
            <code><![CDATA[ 
            <SfCarousel>
                <CarouselItem><div>Slide 1</div></CarouselItem>
                <CarouselItem><div>Slide 2</div></CarouselItem>
                <CarouselItem><div>Slide 3</div></CarouselItem>
            </SfCarousel>
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.CarouselItem.ChildContent">
            <summary>
            Child Content for the Carousel item.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.CarouselItem.CssClass">
            <summary>
            Gets or sets the classes for carousel item to customize the carousel item.
            </summary>
            <value> 
            If we set the css class, then the custom class is applied for carousel item. The default value is `null`. 
            </value>
            <example> 
            <code><![CDATA[ 
            <SfCarousel> 
                <CarouselItem CssClass="item1"><div>Slide 1</div></CarouselItem>
                <CarouselItem CssClass="item2"><div>Slide 2</div></CarouselItem>
                <CarouselItem CssClass="item3"><div>Slide 3</div></CarouselItem>
            </SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.CarouselItem.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to the carousel item element.
            </summary>
            <value> 
            It allows the carousel item element to render non-declared attributes. The default value is `null`. 
            </value>
            <example> 
            <code><![CDATA[ 
            <SfCarousel>
                <CarouselItem HtmlAttributes="customAttribute"><div>Slide 1</div></CarouselItem>
                <CarouselItem><div>Slide 2</div></CarouselItem>
                <CarouselItem><div>Slide 3</div></CarouselItem>
            </SfCarousel>
            @code{ 
               Dictionary<string, object> customAttribute = new Dictionary<string, object>() 
               { 
                   { "aria-label", "slide1" } 
               }; 
            } 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.CarouselItem.Interval">
            <summary>
            Gets or sets the auto transition time in milliseconds for individual carousel items. 
            </summary>
            <value> 
            If we set the interval value, then the slide transition begins after the specified time interval for individual carousel items otherwise the default interval value 5000 is set.  
            </value>
            <example> 
            <code><![CDATA[ 
            <SfCarousel> 
                <CarouselItem Interval="3000"><div>Slide 1</div></CarouselItem>
                <CarouselItem><div>Slide 2</div></CarouselItem>
                <CarouselItem><div>Slide 3</div></CarouselItem>
            </SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.CarouselItem.Template">
            <summary>
            Gets or sets template to customize the carousel item.
            </summary>
            <value>
            A template content that specifies the visualization of carousel item. The default value is <c>null</c>.
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfCarousel> 
                <CarouselItem><Template><div>Slide 1</div></Template></CarouselItem>
                <CarouselItem><Template><div>Slide 2</div></Template></CarouselItem>
                <CarouselItem><Template><div>Slide 3</div></Template></CarouselItem>
            </SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.CarouselItem.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.CarouselItem.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CarouselButtonVisibility">
            <summary>
            Specifies how to display the navigation buttons in <see cref="T:Syncfusion.Blazor.Navigations.SfCarousel"/> component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.CarouselButtonVisibility.Hidden">
            <summary>
            Hides the navigation buttons and play button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.CarouselButtonVisibility.Visible">
            <summary>
            Shows the navigation buttons and play button always.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.CarouselButtonVisibility.VisibleOnHover">
            <summary>
            Shows the navigation buttons and play button only when mouse enters the carousel and hides when mouse leaves.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CarouselAnimationEffect">
            <summary>
            Specifies the animation effect which need to be applied on transition of <see cref="T:Syncfusion.Blazor.Navigations.SfCarousel"/> component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.CarouselAnimationEffect.None">
            <summary>
            Applies no animation effect on slide transitions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.CarouselAnimationEffect.Slide">
            <summary>
            Applies slide animation effect on slide transitions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.CarouselAnimationEffect.Fade">
            <summary>
            Applies fade animation effect on slide transitions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.CarouselAnimationEffect.Custom">
            <summary>
            Applies custom animation effect on slide transitions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CarouselSlideDirection">
            <summary>
            Specifies the slide direction in which transition of <see cref="T:Syncfusion.Blazor.Navigations.SfCarousel"/> component occurs.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.CarouselSlideDirection.Next">
            <summary>
            Applies when slide transition towards next direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.CarouselSlideDirection.Previous">
            <summary>
            Applies when slide transition towards previous direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfCarousel">
            <summary>
            The carousel component is a slide show of images, contents or images with contents.
            </summary>
            <remarks>
            Carousel items can be populated by specifying <see cref="T:Syncfusion.Blazor.Navigations.CarouselItem"/> within <see cref="T:Syncfusion.Blazor.Navigations.SfCarousel"/> tag directive.
            </remarks>
            <example>
            In the below code example, a basic Carousel component initialized with <see cref="T:Syncfusion.Blazor.Navigations.CarouselItem"/> tag directive.
            <code><![CDATA[
            <SfCarousel>
                <CarouselItem><div>Slide 1</div></CarouselItem>
                <CarouselItem><div>Slide 2</div></CarouselItem>
                <CarouselItem><div>Slide 3</div></CarouselItem>
            </SfCarousel>
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfCarousel.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfCarousel.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfCarousel.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.ChildContent">
            <exclude />
            <summary>
            Gets or sets the child content of Carousel component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.AutoPlay">
            <summary> 
            Gets or sets whether the slide transition is automatic or manual. 
            </summary> 
            <value> 
            false, the slide transition has been stopped otherwise the slide transition plays. The default value is `true`. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.CssClass">
            <summary> 
            Gets or sets the custom classes to customize the Carousel component.  
            </summary> 
            <value> 
            If we set the css class, then the custom class is applied for carousel. The default value is `null`. 
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfCarousel CssClass="custom-carousel e-custom-animation"></SfCarousel> 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads.
            </summary>
            <value> 
            true, the <see cref="P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex" /> property is persisted. The default value is `false`. 
            </value>
            <remarks> 
            To persist the <see cref="P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex" /> property, it is mandatory to provide the <see cref="P:Syncfusion.Blazor.Navigations.SfCarousel.ID" /> property.
            </remarks> 
            <example>
            <code><![CDATA[ 
            <SfCarousel Id="CarouselSlide" EnablePersistence="true"></SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.EnableRtl">
            <summary>
            Gets or sets whether the right to left direction is enabled for Carousel component.
            </summary>
            <value> 
            true, the right to left direction is enabled for carousel component. The default value is `false`. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.EnableTouchSwipe">
            <summary> 
            Gets or sets whether the slide transition should occur or not when performing swipe action. 
            </summary> 
            <value> 
            true, the slide transition with swipe action in touch screen works otherwise touch swipe action does not work. The default value is `true`. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.Height">
            <summary> 
            Gets or sets the height of the Carousel in pixels/number/percentage. Number value is considered as pixels. 
            </summary> 
            <value> 
            If we set the height value, then the carousel will render based on specified height otherwise the default height value `auto` is set.  
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfCarousel Height="500px"></SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.HtmlAttributes">
            <summary> 
            Gets or sets a collection of additional attributes that will applied to the carousel element. 
            </summary> 
            <remarks> 
            Additional attributes can be added by specifying <c>HtmlAttributes</c> directive. 
            </remarks> 
            <value> 
            It allows the carousel component to render non-declared attributes. The default value is `null`. 
            </value>
            <example> 
            <code><![CDATA[ 
            <SfCarousel HtmlAttributes="customAttribute"></SfCarousel> 
            @code{ 
               Dictionary<string, object> customAttribute = new Dictionary<string, object>() 
               { 
                   { "aria-label", "Slide show of current News" } 
               }; 
            } 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.ID">
            <summary>
            Gets or sets the unique Id value for carousel component.
            </summary>
            <value>
            If we set the id, then the id value set for carousel element. The default value is `null`.
            </value>
            <example>
            <code><![CDATA[ 
            <SfCarousel Id="CarouselForNews"></SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.AnimationEffect">
            <summary>
            Gets or sets the animation effects applies to the slide transition. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.CarouselAnimationEffect" /> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.CarouselAnimationEffect.Slide"/>
            </value>
            <example> 
            <code><![CDATA[ 
            <SfCarousel AnimationEffect="CarouselAnimationEffect.Fade">
                <CarouselItem><div>Slide 1</div></CarouselItem>
                <CarouselItem><div>Slide 2</div></CarouselItem>
                <CarouselItem><div>Slide 3</div></CarouselItem>
            </SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.Loop">
            <summary> 
            Gets or sets whether the slide transition should loop or end when reaches the last slide of the carousel. 
            </summary> 
            <value> 
            false, the slide transition has been stopped at end of the last slide otherwise the slide transition plays continuously. The default value is `true`. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.Interval">
            <summary> 
            Gets or sets the amount of delay time to transition slides automatically. 
            </summary> 
            <value> 
            If we set the interval value, then the slide transition begins after the specified time interval otherwise the default interval value 5000 is set.  
            </value> 
            <remarks> 
            The interval value accepts in milliseconds. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfCarousel Interval="4000"></SfCarousel> 
            ]]></code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.PartialVisible">
            <summary>
            Gets or sets whether the partial slides are rendered or not. 
            </summary>
            <value>
            true, the partial slides are rendered. The default value is `false`.
            </value>
            <remarks>Shows the next and previous slides partially. So, user can identify that more slides are yet to display. Slide animation only applicable if the PartialVisible is enabled.
            </remarks>
            In the below example, Previous/next slides visible range can be customized using the css class.
            <example> 
            <code><![CDATA[ 
            <SfCarousel PartialVisible="true"></SfCarousel> 
            <style 
             .e-partial .e-carousel-slide-container {
               padding: 0 150px;
             }
            </style>
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex">
            <summary> 
            Gets or sets the index of the current carousel item. 
            </summary> 
            <value> 
            If we set the index value, then the slides begin from specified index otherwise the default index value 0 is set.  
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfCarousel SelectedIndex="1"></SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndexChanged">
            <summary>
            Invokes when index of the active slide changed.
            </summary>
            <value> 
            Fired when SelectedSlideIndex changes. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.ButtonsVisibility">
            <summary> 
            Gets or sets whether to show previous/next navigation buttons or not. 
            </summary> 
            <value> 
            One of the <see cref="T:Syncfusion.Blazor.Navigations.CarouselButtonVisibility"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.CarouselButtonVisibility.Visible"/> 
            </value> 
            <example>
            <code><![CDATA[ 
            <SfCarousel ButtonsVisibility="CarouselButtonVisibility.VisibleOnHover"></SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.ShowIndicators">
            <summary> 
            Gets or sets whether to show indicators or not. 
            </summary> 
            <value> 
            false, the slide transition indicators will not be shown otherwise the indicators is shown. The default value is `true`. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.ShowPlayButton">
            <summary> 
            Gets or sets whether to show play button or not to play or pause the transitions. 
            </summary> 
            <value> 
            true, the slide transition play/pause button will be shown otherwise the button is not shown. The default value is `false`. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.Width">
            <summary> 
            Gets or sets the width of the Carousel in pixels/number/percentage. Number value is considered as pixels. 
            </summary> 
            <value> 
            If we set the width value, then the carousel will render based on specified width otherwise the default width value `auto` is set.  
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfCarousel Width="500px"></SfCarousel> 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.PreviousButtonTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of previous navigation button.
            </summary>
            <value>
            A template content that specifies the visualization of previous navigation button. The default value is <c>null</c>.
            </value>        
            <example>
            In the below code example, previous navigation button are customized with chevron double icons.
            <code><![CDATA[
            <SfCarousel>
                <CarouselItem><div>Slide 1</div></CarouselItem>
                <CarouselItem><div>Slide 2</div></CarouselItem>
                <CarouselItem><div>Slide 3</div></CarouselItem>
                <PreviousButtonTemplate>
                    <SfButton CssClass="e-flat e-round" IconCss="e-icons e-chevron-left-double"></SfButton >
                </PreviousButtonTemplate>
            </SfCarousel>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.NextButtonTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of next navigation button.
            </summary>
            <value>
            A template content that specifies the visualization of next navigation button. The default value is <c>null</c>.
            </value>        
            <example>
            In the below code example, next navigation button are customized with chevron double icons.
            <code><![CDATA[
            <SfCarousel>
                <CarouselItem><div>Slide 1</div></CarouselItem>
                <CarouselItem><div>Slide 2</div></CarouselItem>
                <CarouselItem><div>Slide 3</div></CarouselItem>
                <NextButtonTemplate>
                    <SfButton CssClass="e-flat e-round" IconCss="e-icons e-chevron-right-double"></SfButton >
                </NextButtonTemplate>
            </SfCarousel>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.IndicatorsTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of indicators.
            Here, context refers to the Index and SelectedIndex value.
            </summary>
            <value>
            A template content that specifies the visualization of indicators. The default value is <c>null</c>.
            </value>
            <remarks>
            Use the template's context parameter <c>Index</c> which returns current index of the slide and <c>SelectedIndex</c> which returns the index of active slide.
            With the <c>SelectedIndex</c> parameter, you can differentiate the active indicator.
            </remarks>        
            <example>
            <code><![CDATA[
            <SfCarousel>
                <CarouselItem><div>Slide 1</div></CarouselItem>
                <CarouselItem><div>Slide 2</div></CarouselItem>
                <CarouselItem><div>Slide 3</div></CarouselItem>
                <IndicatorsTemplate>
                    @if(context.SelectedIndex == context.Index)
                    {
                        <div class="indicator active" indicator-index="@context.Index"></div>
                    }
                    else
                    {
                        <div class="indicator" indicator-index="@context.Index"></div>
                    }
                </IndicatorsTemplate>
            </SfCarousel>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.PlayButtonTemplate">
            <summary>
            Gets or sets template as <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, that defines custom appearance of play/pause button.
            </summary>
            <value>
            A template content that specifies the visualization of play/pause button. The default value is <c>null</c>.
            </value>
            <remarks>
            Based on AutoPlay value or click action of the play/pause button, you can decide whether the play or pause button to be rendered.
            </remarks>        
            <example>
            <code><![CDATA[
            <SfCarousel @ref="CarouselRef">
                <CarouselItem><div>Slide 1</div></CarouselItem>
                <CarouselItem><div>Slide 2</div></CarouselItem>
                <CarouselItem><div>Slide 3</div></CarouselItem>
                <PlayButtonTemplate>
                    <SfButton CssClass="e-flat e-round" IconCss="@playPauseIcon" @onclick="@OnPlayClick" IsToggle="true"></SfButton>
                </PlayButtonTemplate>
            </SfCarousel>
            @code{
               SfCarousel CarouselRef;
               private string playPauseIcon = "e-icons e-pause";
               private void OnPlayClick()
                {
                    if (!CarouselRef.AutoPlay)
                    {
                        playPauseIcon = "e-icons e-pause";
                        CarouselRef.Play();
                    }
                    else
                    {
                        playPauseIcon = "e-icons e-play";
                        CarouselRef.Pause();
                    }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfCarousel.PauseOnHover">
            <summary>
            Gets or sets whether the auto play slides pause on mouse hover or not.
            </summary>
            <value>
            false, the slide transition has been played on mouse enters to carousel otherwise the slide transition paused. The default value is `true`.
            </value>
            <remarks>
            This property applicable when <see cref="P:Syncfusion.Blazor.Navigations.SfCarousel.AutoPlay"/> value is true.
            </remarks>
            <example>
            <code><![CDATA[
            <SfCarousel PauseOnHover="false"></SfCarousel>
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfCarousel.Play">
            <summary>
            Starts the transition of carousel items.
            </summary>
            <value> 
            It allows the carousel to starts the transition of items. 
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfCarousel.Pause">
            <summary>
            Pauses the transition of carousel items.
            </summary>
            <value> 
            It allows the carousel to pauses the transition of items. 
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfCarousel.PreviousAsync">
            <summary>
            Navigates to previous carousel item.
            </summary>
            <value> 
            Move to previous carousel item. 
            </value>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfCarousel.NextAsync">
            <summary>
            Navigates to next carousel item.
            </summary>
            <value> 
            Move to next carousel item. 
            </value>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfCarousel.MoveToAsync(System.Int32)">
            <summary>
            Navigates to specific carousel item.
            </summary>
            <value> 
            Move to carousel item at desired index. 
            </value>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.IndicatorsTemplateContext">
            <summary>
            A class that holds the options for the IndictorsTemplate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.IndicatorsTemplateContext.Index">
            <summary>
            Returns the current slide index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.IndicatorsTemplateContext.SelectedIndex">
            <summary>
            Returns the active slide index.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfContextMenu`1">
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <example>
            In the below code example, showcases a basic context menu.
            <code><![CDATA[
            <SfContextMenu Target="#contextmenutarget" TValue="MenuItem">
            <MenuItems>
            <MenuItem Text="Cut" IconCss="e-cm-icons e-cut"></MenuItem>
            <MenuItem Text="Copy" IconCss="e-cm-icons e-copy"></MenuItem>
            <MenuItem Text="Paste" IconCss="e-cm-icons e-paste"></MenuItem>
            </MenuItems>
            </SfContextMenu>
            ]]></code>
            </example>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <example>
            In the below code example, showcases a basic context menu.
            <code><![CDATA[
            <SfContextMenu Target="#contextmenutarget" TValue="MenuItem">
            <MenuItems>
            <MenuItem Text="Cut" IconCss="e-cm-icons e-cut"></MenuItem>
            <MenuItem Text="Copy" IconCss="e-cm-icons e-copy"></MenuItem>
            <MenuItem Text="Paste" IconCss="e-cm-icons e-paste"></MenuItem>
            </MenuItems>
            </SfContextMenu>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.Filter">
            <summary>
            Gets or sets a value that indicates the filter selector in which element the context menu should be opened inside the sepcified target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.Target">
            <summary>
            Gets or sets a value that indicates the target element selector in which the context menu should be opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.ShowOn">
            <summary>
            Gets or sets a value that indicates an event to open the context menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.OpenActionEvents">
            <summary>
            Gets or sets a value that indicates an event to open the context menu.
            </summary>
            <value>
            Accepts a string value. The default value is <c>contextmenu</c>.
            </value>
            <remarks>
            The list of events supports to open the context menu are contextmenu, mousedown, mouseup, touchstart, mouseleave etc. The event must be different from <c> CloseActionEvents. </c>
            </remarks>
            <example>
            In the below code example, <c>contextmenu</c> event is set to open the context menu.
            <code><![CDATA[
            <div id="target">Right click or touch hold to open the context menu.</div>
            <SfContextMenu Target="#target" TValue="MenuItem" OpenActionEvents=”OpenAction”>
            <MenuItems>
                <MenuItem Text="Cut"></MenuItem>
                <MenuItem Text="Copy"></MenuItem>
                <MenuItem Text="Paste"></MenuItem>
            </MenuItems>
            </SfContextMenu>
            @code {
                private string OpenAction = “contextmenu”;
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.CloseActionEvents">
            <summary>
            Gets or sets a value that indicates an event to close the context menu.
            </summary>
            <value>
            Accepts a string value. The default value is <c>mousedown, touchstart</c>.
            </value>
            <remarks>
            The list of events supports to close the context menu are mousedown, mouseup, click, touchstart, mouseleave, touchend. The event must be different from <c> OpenActionEvents. </c>
            </remarks>
            <example>
            In the below code example, <c>contextmenu</c> event is set to close the context menu.
            <code><![CDATA[
            <div id="target">Right click or touch hold to open the context menu.</div>
            <SfContextMenu Target="#target" TValue="MenuItem" CloseActionEvents=”CloseAction”>
            <MenuItems>
                <MenuItem Text="Cut"></MenuItem>
                <MenuItem Text="Copy"></MenuItem>
                <MenuItem Text="Paste"></MenuItem>
            </MenuItems>
            </SfContextMenu>
            @code {
                private string CloseAction = “mousedown touchstart”;
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.Close">
            <summary>
            Closes the context menu if it is opened.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.Open(System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Opens the  context menu in specified position. If the positions are not specified, the context menu
            will open at its rendered position.
            </summary>
            <param name = "clientX">Specifies the horizontal position of the context menu.</param>
            <param name = "clientY">Specifies the vertical position of the context menu.</param>
            <param name = "enableCollision">Specifies the collision detection of the context menu.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.OpenContextMenuAsync(System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuEffect">
            <summary>
            Menu animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.SlideDown">
            <summary>
            Defines menu effect as SlideDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.None">
            <summary>
            Defines menu effect as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.ZoomIn">
            <summary>
            Defines menu effect as ZoomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.FadeIn">
            <summary>
            Defines menu effect as FadeIn.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Orientation">
            <summary>
            Specifies the option for orientation mode of Menu. By default, component rendered in Horizontal orientation mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Orientation.Horizontal">
            <summary>
            Defines menu orientation as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Orientation.Vertical">
            <summary>
            Defines menu orientation as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1">
            <summary>
            Provides the information about OnOpen/OnClose event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Cancel">
            <summary>
            Gets or sets a value that indicates whether to allow or prevent the open/close action of menu bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Element">
            <summary>
            Gets or sets a value that indicates the menu container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Items">
            <summary>
            Gets or sets a value that indicates the current menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Name">
            <summary>
            Gets or sets a value that indicates the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.ParentItem">
            <summary>
            Gets or sets a value that indicates the parent item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.ScrollHeight">
            <summary>
            Gets or sets a value that indicates the menu container height to show the scrollable menu.
            It is applicable only when the EnableScrolling property is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Top">
            <summary>
            Gets or sets a value that indicates the clientY position of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Left">
            <summary>
            Gets or sets a value that indicates the clientX position of the menu.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuEventArgs`1">
            <summary>
            Provides the information about the OnItemRender/ItemSelected event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Element">
            <summary>
            Gets or sets a value that indicates the menu container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Event">
            <summary>
            Gets or sets a value that indicates the item select event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Item">
            <summary>
            Gets or sets a value that indicates the selected item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Name">
            <summary>
            Gets or sets a value that indicates the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1">
            <summary>
            Provides the information about the Opened/Closed event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.Element">
            <summary>
            Gets or sets a value that indicates the menu container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.Items">
            <summary>
            Gets or sets a value that indicates the current menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.Name">
            <summary>
            Gets or sets a value that indicates name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.ParentItem">
            <summary>
            Gets or sets a value that indicates the parent item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.NavigationIndex">
            <summary>
            Gets or sets a value that indicates the Navigation Index.
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuItemModel">
            <summary>
            Provides the information about MenuItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItemModel.Items">
            <summary>
            Gets or sets a value that indicates the list of menu item model.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuAnimationSettings">
            <summary>
            Specifies the animation settings for the menu open.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuAnimationSettings.Duration">
            <summary>
            Specifies the time duration to transform object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuAnimationSettings.Easing">
            <summary>
            Specifies the easing effect applied while transform.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuAnimationSettings.Effect">
            <summary>
            Specifies the effect that shown in the sub menu transform.
            The possible effects are:
             None: Specifies the sub menu transform with no animation effect.
             SlideDown: Specifies the sub menu transform with slide down effect.
             ZoomIn: Specifies the sub menu transform with zoom in effect.
             FadeIn: Specifies the sub menu transform with fade in effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuEvents`1">
            <summary>
            Used to configure the menu events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.OnClose">
            <summary>
            Gets or sets an event callback that is raised before closing the sub menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.OnItemRender">
            <summary>
            Gets or sets an event callback that is raised while rendering each menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.OnOpen">
            <summary>
            Gets or sets an event callback that is raised before  opening the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.Created">
            <summary>
            Gets or sets an event callback that is raised when rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.Closed">
            <summary>
            Gets or sets an event callback that is raised after closing the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.Opened">
            <summary>
             Gets or sets an event callback that is raised after opening the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.ItemSelected">
            <summary>
             Gets or sets an event callback that is raised after selecting menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuFieldSettings">
            <summary>
            Configures the field options of the Menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Children">
            <summary>
            Gets or sets a value that indicates the children field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.IconCss">
            <summary>
            Gets or sets a value that indicates the CSS icon field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.ItemId">
            <summary>
            Gets or sets a value that indicates the itemId field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.ParentId">
            <summary>
            Gets or sets a value that indicates the parentId field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Separator">
            <summary>
            Gets or sets a value that indicates the separator field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Disabled">
            <summary>
            Gets or sets a value that indicates the disabled field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Hidden">
            <summary>
            Gets or sets a value that indicates the hidden field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Text">
            <summary>
            Gets or sets a value that indicates the text field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Url">
            <summary>
            Gets or sets a value that indicates the URL field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.HtmlAttributes">
            <summary>
            Gets or sets a value that indicates the @attributes (additional attributes) field for Menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuItem">
            <summary>
            Used to configure the items which is going to render as menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.ChildContent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the menu Item that is used to include an icon.
            Menu Item can include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Id">
            <summary>
            Gets or sets a value that indicates the id for menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Items">
            <summary>
            Gets or sets a value that indicates the sub menu items that is the array of MenuItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Separator">
            <summary>
            Gets or sets whether to enable/disable separator between the menu items.
            </summary>
            <remarks>
            Separator are either horizontal or vertical lines used to group menu items.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Disabled">
            <summary>
            Gets or sets whether to enable or disable the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Hidden">
            <summary>
            Gets or sets whether to hide or show the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Text">
            <summary>
            Gets or sets a value that indicates the text for menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Url">
            <summary>
            Gets or sets a value that indicates the URL for menu item that creates the anchor link to navigate to the url provided.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.HtmlAttributes">
            <summary>
            Gets or sets a value that indicates the additional HTML attributes such as style, title etc., to the menu item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.MenuItem.Dispose">
            <summary>
            Disposes unmanaged resources in the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuItems">
            <summary>
            List of items that is used to configure menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItems.ChildContent">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuTemplates`1">
            <summary>
            Used to specify templates for rendering menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuTemplates`1.Template">
            <summary>
            Specifies the template for Menu.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfMenu`1">
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.HamburgerMode">
            <summary>
            Gets or sets a value that indicates whether to enable or disable the hamburger mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.Orientation">
            <summary>
            Gets or sets a value that indicates the orientation of menu whether it can be horizontal or vertical.
            </summary>
            <value> 
            One of the <see cref="P:Syncfusion.Blazor.Navigations.SfMenu`1.Orientation"/> enumeration. The default value is <c>Orientation.Horizontal</c>/> 
            </value> 
            <remarks> 
            If the <c>Orientation</c> is <c>Horizontal</c>, the menu items will be aligned horizontally. 
            If the <c>Orientation</c> is <c>Vertical</c>, the menu items will be aligned vertically. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.Target">
            <summary>
            Gets or sets a value that indicates the target element to open/close Menu while click in Hamburger mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.Title">
            <summary>
            Gets or sets a value that indicates the title text for hamburger mode in Menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.GetItemIndex(`0,System.Boolean)">
            <summary>
            Gets the index of the menu item from the menu based on the given argument.
            </summary>
            <param name = "item">Item to be passed to get the index.</param>
            <param name = "isUniqueId">Set `true` if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.Open">
            <summary>
            Opens the menu in the hamburger mode.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.OpenAsync">
            <summary>
            Opens the menu in the hamburger mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.Close">
            <summary>
            Closes the Menu if it is opened in hamburger mode.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.CloseAsync">
            <summary>
            Closes the Menu if it is opened in hamburger mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.DocumentMouseDownAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.PagerTemplateContext">
            <summary>
            Represents a class that provides information about <see cref="T:Syncfusion.Blazor.Navigations.SfPager"/> which as context for <see cref="P:Syncfusion.Blazor.Navigations.SfPager.Template"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PagerTemplateContext.CurrentPage">
            <summary>
            Gets the page number of the current page displayed in the pager.
            </summary>
            <value>
            The page number of the current page displayed.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PagerTemplateContext.PageSize">
            <summary>
            Gets or sets the number of items shown on a single page of the pager.
            </summary>
            <value>
            The number of items shown on a single page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PagerTemplateContext.PageSizes">
            <summary>
            Gets the list of items in the Pager dropdown.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PagerTemplateContext.TotalItemsCount">
            <summary>
            Gets the total number of items, to calculate <see cref="P:Syncfusion.Blazor.Navigations.PagerTemplateContext.TotalPages"/> count based on <see cref="P:Syncfusion.Blazor.Navigations.PagerTemplateContext.PageSize"/>.
            </summary>
            <value>
            Total number of items.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PagerTemplateContext.TotalPages">
            <summary>
            Gets the total number of pages calculated using <see cref="P:Syncfusion.Blazor.Navigations.PagerTemplateContext.TotalItemsCount"/> and <see cref="P:Syncfusion.Blazor.Navigations.PagerTemplateContext.PageSize"/>.
            </summary>
            <value>
            Total number of pages.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.PagerItemClickEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.SfPager.ItemClick"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PagerItemClickEventArgs.CurrentPage">
            <summary>
            Gets the page number of the current page displayed on the Pager.
            </summary>
            <value>
            The page number of the current page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PagerItemClickEventArgs.PreviousPage">
            <summary>
            Gets the page number of the previous page displayed on the pager.
            </summary>
            <value>
            The page number of the previous page.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.PageChangingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageChanging"/> event.
            </summary>
            <remarks>
            You can cancel the page changing action by setting a property in the event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether to cancel the page changing action of the pager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageChangingEventArgs.CurrentPage">
            <summary>
            Gets the page number of the current page displayed on the Pager.
            </summary>
            <value>
            The page number of the current page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageChangingEventArgs.PreviousPage">
            <summary>
            Gets the page number of the previous page displayed on the pager.
            </summary>
            <value>
            The page number of the previous page.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.PageChangedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageChanged"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageChangedEventArgs.CurrentPage">
            <summary>
            Gets the page number of the current page displayed on the Pager.
            </summary>
            <value>
            The page number of the current page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageChangedEventArgs.PreviousPage">
            <summary>
            Gets the page number of the previous page displayed on the pager.
            </summary>
            <value>
            The page number of the previous page.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.PageSizeChangedArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSizeChanged"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageSizeChangedArgs.CurrentPageSize">
            <summary>
            Gets or sets the number of items displaying on the single page of the pager.
            </summary>
            <value>
            The number of items shown on a single page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageSizeChangedArgs.TotalPages">
            <summary>
            Gets the total number of pages calculated using <see cref="P:Syncfusion.Blazor.Navigations.SfPager.TotalItemsCount"/> and <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSize"/>.
            </summary>
            <value>
            Total number of pages.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageSizeChangedArgs.CurrentPage">
            <summary>
            Gets the page number of the current page displayed on the pager.
            </summary>
            <value>
            The page number of the current page.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.PageSizeChangingArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSizeChanging"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageSizeChangingArgs.Cancel">
            <summary>
            Cancels the current action and prevents it from getting the current page size changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageSizeChangingArgs.PreviousPageSize">
            <summary>
            Gets the number of items rendered on a page previously.
            </summary>
            <value>
            Current <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSize"/> which is the number of items shown on a single page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageSizeChangingArgs.SelectedPageSize">
            <summary>
            Gets the currently selected value from the Pager dropdown, which no of items going to render on a page.
            </summary>
            <value>
            The new <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSize"/> which is the number of items shown on a single page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PageSizeChangingArgs.TotalPages">
            <summary>
            Gets the count of the total number of pages available in the Pager.
            </summary>
            <value>
            Total number of pages.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfPager">
            <summary>
            Methods partial class
            </summary>    
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.UpdateProperty(System.String,System.Object,System.Object)">
            <summary>
            Processing the property value changes and invoking the events for two-way bindings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Sets parameters supplied by the component's parent in the render tree.
            </summary>
            <param name="parameters..">The component parameters..</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.ID">
            <summary>
            Gets or sets the ID of the Pager component.
            </summary>
            <value>
            Property which maps the given value to the Pager ID.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.ChildContent">
            <summary>
            Defines the child content which is given inside the pager component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.CurrentPage">
            <summary>
            Gets or sets the current page number of the Pager.
            </summary>
            <value>
            The entered page number is shown when the Pager is rendered, by default the value is 1.
            </value>
            <remarks>
            If the given current page number is greater than the total number of pages present in the pager, then by default the first page will be the current page.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.NumericItemPrefix">
            <summary>
            Gets or sets the text to append as a prefix with numeric values in the Pager.
            </summary>
            <value>
            A prefix for numeric item. The default value is <c>string.Empty</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.ShowPagerMessage">
            <summary>
            Gets or sets whether to enable or disable the Pager message, displayed on the right side of the Pager icons.
            </summary>
            <value>
            <b>true</b> If `ShowPagerMessage` is set to true, the pager information such as the current page, total pages, and total records count is displayed.
            </value>
            <remarks>
            By default the ShowPagerMessage is set to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.EnablePersistence">
            <summary>
            Gets or sets whether to enable the persistence in the Pager, It will allow access to store the current state of the Pager.
            </summary>
            <value>
            <b>true</b> If `EnablePersistence` is set to true, It will store the pager state such as current page, page size, current focus, and pager dropdown in the 
            window.localStorage when the component is disposed.
            </value>
            <remarks>
            By default the EnablePersistence is set to false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.NumericItemsCount">
            <summary>
            Gets or sets a value that indicates the number of page numeric buttons shown on the pager user interface.
            </summary>
            <value>
            The number of page numeric buttons shown on the pager UI.
            </value>
            <remarks>
            If <code>NumericItemsCount</code> is 5 and the total number of pages is <c>20</c>, 
            then the pager will display numeric buttons for pages 1 to 5. 
            Users can navigate beyond this range using the next page and end-page buttons. 
            Also, if the given numeric items count is greater than the total number of pages, 
            then all the pages are shown in the Pager component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.PageSize">
            <summary>
            Gets or sets the number of items shown on a single page.
            </summary>
            <value>
            The number of items shown on a single page, by default the value is 12. 
            </value>
            <remarks>
            When the given page size is greater than the total items present in the Pager, then all the items are dispalyed in the current page.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.PageSizes">
            <summary>
            Gets or sets the list of items in the Pager dropdown. 
            Update what number of items can be rendered on a page by changing the dropdown value.
            </summary>
            <value>
             The list of items to be shown in the Pager dropdown, by default the value is set to null.
            </value>
            <remarks>
            When one of the given page sizes is greater than the total items present in the Pager, when the particular dropdown is chosen all the items are dispalyed in the current page.
            </remarks>
            <example>
            <code><![CDATA[
            <SfPager PageSizes=@pagesizes PageSize=10 TotalItemsCount=100 >
            </SfPager>
            @code{
               public List<int> pagesizes = new List<int> { 5, 10, 12, 20 };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.ShowAllInPageSizes">
            <summary>
            Gets or sets whether to add a All as one of the option in the Pager dropdown list.
            Total items can be rendered while changing the Pager dropdown value as All.
            </summary>
            <value>
            <b>true</b> If `ShowAllInPageSizes` is set to true, then added All value as one of the option in <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSizes"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSizes"/> should be updated with list items for this property, otherwise it's not needed. The default value is false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.Template">
             <summary>
             Gets or sets the template to customize the pager UI with customized elements instead of the default UI.
             </summary>
             <value>
             The template content.
             </value>
             <remarks>
             Use the template’s context parameter to access a <see cref="T:Syncfusion.Blazor.Navigations.PagerTemplateContext"/> and its fields.
             </remarks>
             <example>
             <code>
             <![CDATA[
             <SfPager @ref = "Page" TotalItemsCount="100" PageSize="10">
            <Template>
             @{
                 var pagerContext = (context as PagerTemplateContext);
                 <span>
                     Page<SfNumericTextBox TValue="int" Value=@pagerContext.CurrentPage Width="40px" ShowSpinButton="false">
                         <NumericTextBoxEvents TValue = "int" ValueChange="PageValueHandler"></NumericTextBoxEvents>
                     </SfNumericTextBox> of<b> @pagerContext.TotalPages</b> pages.
                 </span>
             }
             </Template>
             </SfPager>
             @code {
             SfPager Page;
             private async Task PageValueHandler(ChangeEventArgs<int> args)
             {
                  await Page.GoToPageAsync(args.Value);
             }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.TotalItemsCount">
            <summary>
            Gets or sets the total number of items, to calculate <see cref="P:Syncfusion.Blazor.Navigations.SfPager.TotalPages"/> count based on <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSize"/>.
            </summary>
            <value>
            The number of total items present in the pager component to calculate <see cref="P:Syncfusion.Blazor.Navigations.SfPager.TotalPages"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.CssClass">
            <summary>
            Gets or sets the CSS class name, that can be appended with the root element of the Pager. One or more custom CSS classes can be added to the Pager.
            </summary>
            <value>
            Property in which the CSS classes are added. The default value is an empty string.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.ItemClick">
            <summary>
            An event that is raised when the numeric item is clicked.
            </summary>
            <remarks>
            This event handler receives a <see cref="!:Syncfusion.Blazor.Navigationgs.Pager.PagerItemClickEventArgs"/> object which provides the details of new page navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfPager ItemClick="HandletemClick" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>
            </SfPager>
            @code{
               public void HandletemClick(PagerItemClickEventArgs args)
               {
                  // Enter the code here
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.PageChanging">
            <summary>
            An event that is raised when navigating to a new page.
            </summary>
            <remarks>
            This event handler receives a <see cref="!:Syncfusion.Blazor.Navigationgs.Pager.PageChangingEventArgs"/> object which provides the details of new page navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfPager PageSize=5 PageChanging="HandlePageChanging" NumericItemsCount=4 TotalItemsCount=100>
            </SfPager>
            @code{
               public void HandlePageChanging(PageChangingEventArgs args)
               {
                  // Enter the code here 
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.PageChanged">
            <summary>
            An event that is raised when navigated to a new page.
            </summary>
            <remarks>
            This event handler receives a <see cref="!:Syncfusion.Blazor.Navigationgs.Pager.PageChangedEventArgs"/> object which provides the details of navigated page.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfPager PageSize=5 PageChanged="HandlePageChanged" NumericItemsCount=4 TotalItemsCount=100>
            </SfPager>
            @code{
               public void HandlePageChanged(PageChangedEventArgs args)
               {
                  // Enter the code here  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.Created">
            <summary>
            An event that is raised when Pager component is created.
            </summary>
            <example>
            <code>
            <![CDATA[
            <SfPager PageSize=5 Created="HandlePagerCreated" TotalItemsCount=100>
            </SfPager>
            @code{
               public void HandlePagerCreated()
               {
                // Enter the code here...
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.PageSizeChanged">
            <summary>
            An event that is raised, While dynamically change the pager size by using pager dropdown.
            </summary>
            <remarks>
            This event handler receives a <see cref="!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangedArgs"/> object which provides the details of updated pagesize.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfPager PageSize=5 PageSizes=@pagesizes PageSizeChanged="HandlePageSizeChanged" TotalItemsCount=100>
            </SfPager>
            @code{
               public List<int> pagesizes = new List<int> { 5, 10, 12, 20 }; 
               public void HandlePageSizeChanged(PageSizeChangedArgs args)
               {
                // Enter the code here...
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfPager.PageSizeChanging">
            <summary>
            An event that is raised, when dynamically changing the page size using the page sizes dropdown.
            </summary>
            <remarks>
            This event handler receives a <see cref="!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangingArgs"/> object which provides the details of current pagesize.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfPager PageSize=5 PageSizes=@pagesizes PageSizeChanging="HandlePageSizeChanging" TotalItemsCount=100 >
            </SfPager>
            @code{
               public List<int> pagesizes = new List<int> { 5, 10, 12, 20 };    
               public void HandlePageSizeChanging(PageSizeChangingArgs args)
               {
                // Enter the code here...    
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.GoToPageAsync(System.Int32)">
            <summary>
            Navigates to the given page number in the Pager, it can also fetch the given page by traversing between the next and previous pagers if present in the Pager component.
            </summary>
            <param name="pageNo">Enter the page number to be shown in the Pager. </param>
            <remarks>
            When the given page number is greater than the total pages, then no actions will be performed in the Pager.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button @onclick="HandleButtonClick">GoToPage</button>
            <SfPager @ref="Pager" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>
             ........
            </SfPager>
            @code{
               SfPager Pager;
               private async Task HandleButtonClick()
               {
                 await Pager.GoToPageAsync(10); // pass the page number here.    
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.GoToLastPageAsync">
            <summary>
            Navigates to the last page in the Pager by traversing the next pagers, if present in the Pager component.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            If the current selected page is the last page of the Pager, then no actions will be performed in the Pager component.
            </remarks>
            <example>
            <code><![CDATA[
            <button @onclick="HandleButtonClick">GoToLastPage</button>
            <SfPager @ref="Pager" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>
             ........
            </SfPager>
            @code{
               SfPager Pager;
               private async Task HandleButtonClick()
               {
                 await Pager.GoToLastPageAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.GoToFirstPageAsync">
            <summary>
            Navigates to the first page in the Pager, by traversing the previous pagers if present in the Pager component.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            If the current selected page is the first page of the Pager, then no actions will be performed in the Pager component.
            </remarks>
            <example>
            <code><![CDATA[
            <button @onclick="HandleButtonClick">GoToFirstPage</button>
            <SfPager @ref="Pager" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>
             ........
            </SfPager>
            @code{
               SfPager Pager;
               private async Task HandleButtonClick()
               {
                 await Pager.GoToFirstPageAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.GoToNextPageAsync">
            <summary>
            Navigate to the next page in the Pager. Consider the currently selected page is the last numeric item of the Pager, then it's loaded the next set of numeric items if it exists.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            If the currently selected page is the last page of the Pager and if the next page icon and the last page icon is disabled, then no actions will be performed.
            </remarks>
            <example>
            <code><![CDATA[
            <button @onclick="HandleButtonClick">GoToNextPage</button>
            <SfPager @ref="Pager" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>
             ........
            </SfPager>
            @code{
               SfPager Pager;
               private async Task HandleButtonClick()
               {
                 await Pager.GoToNextPageAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.GoToPreviousPageAsync">
            <summary>
            Navigate to the previous page in the Pager. Consider the currently selected page is the first numeric item of the Pager, then it's loaded the previous set of numeric items if it exists.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            If the currently selected page is the first page of the Pager and if the previous icon and the previous page icon is disabled, then no actions will be performed.
            </remarks>
            <example>
            <code><![CDATA[
            <button @onclick="HandleButtonClick">GoToPreviousPage</button>
            <SfPager @ref="Pager" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>
             ........
            </SfPager>
            @code{
               SfPager Pager;
               private async Task HandleButtonClick()
               {
                 await Pager.GoToPreviousPageAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.UpdatePageSizeAsync(System.Int32)">
            <summary>
            Used to update the page size of the Pager to change the number of items that can be rendered on a Page.
            </summary>
            <param name="pageSize">The number of items to be shown on a page. </param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            By changing the page size, the Pager component dynamically updates the total number of pages, numeric item count, next, and previous pagers count according to the given page size and updates the UI.
            </remarks>
            <example>
            <code><![CDATA[
            <button @onclick="HandleButtonClick">UpdatePageSize</button>
            <SfPager @ref="Pager" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>
             ........
            </SfPager>
            @code{
               SfPager Pager;
               private async Task HandleButtonClick()
               {
                 await Pager.UpdatePageSizeAsync(10); // pass the page size here.    
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.UpdateNumericItemsCountAsync(System.Int32)">
            <summary>
            Used to update the number of numeric elements shown in the Pager component, and the next pager icon is used to get the next set of entered numeric pages count, likewise the previous pager icon is used to traverse backward between the pages.
            </summary>
            <param name="numericItemCount">The given number of numeric elements are shown in the Pager. </param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            If the given numeric item count is greater than the total pages present in the Pager, then all the numeric items are shown in the Pager component.
            </remarks>
            <example>
            <code><![CDATA[
            <button @onclick="HandleButtonClick">UpdateNumericItemsCount</button>
            <SfPager @ref="Pager" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>
             ........
            </SfPager>
            @code{
               SfPager Pager;
               private async Task HandleButtonClick()
               {
                 await Pager.UpdateNumericItemsCountAsync(6); // pass the numeric items count here.    
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfPager.RefreshAsync">
            <summary>
             Applies all the property changes and re-renders the component again.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code><![CDATA[
            <button @onclick="HandleButtonClick">Refresh</button>
            <SfPager @ref="Pager" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>
             ........
            </SfPager>
            @code{
               SfPager Pager;
               private async Task HandleButtonClick()
               {
                 await Pager.UpdatePageSizeAsync(10);
                 await Pager.RefreshAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SidebarPosition">
            <summary>
            Specifies the Sidebar positions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarPosition.Left">
            <summary>
            Specifies the position of the Left Sidebar corresponding to the main content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarPosition.Right">
            <summary>
            Specifies the position of the Right Sidebar corresponding to the main content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SidebarType">
            <summary>
            Specifies the Sidebar types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Slide">
            <summary>
            The sidebar translates the x and y positions of the main content area based on the sidebar width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Over">
            <summary>
            The sidebar floats over the main content area.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Push">
            <summary>
            The sidebar pushes the main content area to appear side-by-side, and shrinks the main content within the screen width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Auto">
            <summary>
            Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.EventArgs">
            <summary>
            Interface for open and close events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Cancel">
            <summary>
            Determines whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Element">
            <summary>
            Returns the element reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Name">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.IsInteracted">
            <summary>
            Defines the boolean that returns true when the Sidebar is closed by user interaction, otherwise returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Top">
            <summary>
            Specifies the clientY position of the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Left">
            <summary>
            Specifies the clientX position of the target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ChangeEventArgs">
            <summary>
            Defines the event arguments for the change event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ChangeEventArgs.Element">
            <summary>
            Returns the element reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ChangeEventArgs.Name">
            <summary>
            Returns event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ChangeEventArgs.IsInteracted">
            <summary>
            Defines the boolean that returns true when the Sidebar is closed by user interaction, otherwise returns false.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.PersistenceValues">
            <summary>
            Interface for persistence values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PersistenceValues.IsOpen">
            <summary>
            Gets or sets the Sidebar component is open or close.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfSidebar">
            <summary>
            The SfSidebar component is an expandable and collapsible component that typically acts as a side container to place primary or secondary content alongside the main content.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SerializeModel">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.UpdateAttributes">
            <summay>
            Updates attributes added for the Sidebar component.
            </summay>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SetDock">
            <summary>
              Updates the dock styles and classes for the sidebar element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.TriggerChange(System.Boolean,Syncfusion.Blazor.Navigations.ChangeEventArgs)">
            <summary>
            Triggers change event.
            </summary>
            <exclude/>
            <param name="visible">visibles.</param>
            <param name="argsvalue">argsvalue.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.TriggerShow(Syncfusion.Blazor.Navigations.EventArgs)">
            <summary>
             Invoke show method from client.
            </summary>
            <exclude/>
            <param name="args">args.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.TriggerHide(Syncfusion.Blazor.Navigations.EventArgs)">
            <summary>
             Invoke hide method from client.
             </summary>
            <exclude/>
            <param name="args">args.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.GetProperties">
            <summary>
             Method to Get Properties.
            </summary>
            <returns>properties.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Changed">
            <summary>
            Triggers when the state(expand/collapse) of the component is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.OnClose">
            <summary>
            Triggers when the component is ready to close.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Destroyed">
            <summary>
            Triggers when the component gets destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.OnOpen">
            <summary>
            Triggers when the component is ready to open.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>="Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ID">
            <summary>
            Sets id attribute for the sidebar element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ChildContent">
            <summary>
            Specifies the child content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Animate">
            <summary>
            Enable or disable the animation transitions on expanding or collapsing the Sidebar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.CloseOnDocumentClick">
            <summary>
            Specifies whether the Sidebar needs to be closed or not when the document area is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.DockSize">
            <summary>
            Specifies the size of the Sidebar in dock state. Dock size can be set in pixel values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnableDock">
            <summary>
            Specifies the docking state of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnableGestures">
            <summary>
            Enables the expand or collapse while swiping in the touch devices.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnablePersistence">
            <summary>
            Enable or disable the persisting component's state between page reloads. If enabled, isOpen state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnableRtl">
            <summary>
            Enable or disable rendering Sidebar in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.IsOpen">
            <summary>
            Gets or sets the Sidebar component is open or close.
            When the Sidebar type is set to `Auto`,
            the component will be expanded in the desktop and collapsed in the mobile mode regardless of the isOpen property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.IsOpenChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.MediaQuery">
            <summary>
            Specifies the media query string for resolution, when opens the Sidebar.
            Example: assigning media query value to '(min-width: 600px)' will open the sidebar component only when the provided resolution is met else the sidebar will be in closed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Position">
            <summary>
            Specifies the position of the Sidebar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ShowBackdrop">
            <summary>
            Specifies whether to apply overlay options to the main content or not when the Sidebar is in an open state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Target">
            <summary>
            Allows to place the sidebar inside the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Type">
            <summary>
            Specifies the expanding types of the Sidebar.
            `Over` - The sidebar floats over the main content area.
            `Push` - The sidebar pushes the main content area to appear side-by-side and shrinks the main content within the screen width.
            `Slide` - The sidebar translates the x and y positions of the main content area based on the sidebar width.
            The main content area will not be adjusted within the screen width.
             `Auto` - Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Width">
            <summary>
            Specifies the width of the Sidebar. By default, the width of the Sidebar sets based on the size of its content.
            Width can also be set in pixel values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ZIndex">
            <summary>
            Specifies the z-index of the Sidebar. It is applicable only when sidebar act as the overlay type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.HtmlAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.Hide">
            <summary>
            Hide the Sidebar component, if it is in an open state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SidebarHide">
            <summary>
            Hide the Sidebar component, if it is in an open state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.Show">
            <summary>
            Shows the Sidebar component, if it is in closed state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SidebarShow">
            <summary>
            Shows the Sidebar component, if it is in closed state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.Toggle">
            <summary>
            Shows or hides the Sidebar based on the current state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AddEventArgs">
            <summary>
            A class that holds options to control the adding or added item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AddEventArgs.AddedItems">
            <summary>
            Defines the added Tab item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AddEventArgs.Cancel">
            <summary>
            Specifies a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AddEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.RemoveEventArgs">
            <summary>
            A class that holds options to control the removing and removed item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.RemoveEventArgs.Cancel">
            <summary>
            Specifies a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.RemoveEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.RemoveEventArgs.RemovedIndex">
            <summary>
            Returns the removed Tab item index.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DragEventArgs">
            <summary>
            A class that holds options to control the dragged item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Cancel">
            <summary>
            Specify a value whether to prevent the drag action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Index">
            <summary>
            Returns the index of Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.DraggedItem">
            <summary>
            Returns the index of dragged Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.DroppedItem">
            <summary>
            Returns the index of dropped Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Left">
            <summary>
            Return the Client X value of target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Top">
            <summary>
            Return the Client Y value of target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SelectEventArgs">
            <summary>
            A class that holds options to control the selected item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.Cancel">
            <summary>
            Specify a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.IsSwiped">
            <summary>
            Returns a value whether content selection is done through swiping or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.IsInteracted">
            <summary>
            Determines whether the event is triggered via user interaction or programmatic way.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.PreviousIndex">
            <summary>
            Returns the index of previous Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.SelectedIndex">
            <summary>
            Returns the index of selected Tab item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SelectingEventArgs">
            <summary>
            A class that holds options to control the selecting item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.Cancel">
            <summary>
            Specifies a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.IsSwiped">
            <summary>
            Returns a value whether the content selection is done through swiping or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.IsInteracted">
            <summary>
            Determines whether the event is triggered via user interaction or programmatic way.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.PreviousIndex">
            <summary>
            Returns the index of the previous Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.SelectedIndex">
            <summary>
            Returns the index of the selected Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.SelectingIndex">
            <summary>
            Returns the index of the selecting Tab item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.HeaderModel">
            <summary>
            A class to define the properties of a tab header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.HeaderModel.IconCss">
            <summary>
            Specifies the icon class that is used to render an icon in the Tab header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.HeaderModel.IconPosition">
            <summary>
            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.
            The possible values are:
            - left: Places the icon to the `left` of the item.
            - top: Places the icon on the `top` of the item.
            - right: Places the icon to the `right` end of the item.
            - bottom: Places the icon at the `bottom` of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.HeaderModel.Text">
            <summary>
            Specifies the display text of the Tab header.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabItemModel">
            <summary>
            A class to define the properties of a tab Item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Content">
            <summary>
            Specifies the content of Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.CssClass">
            <summary>
            Sets the CSS classes to the Tab item to customize its styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Disabled">
            <summary>
            Specifies a value that indicates whether the control is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Header">
            <summary>
            The object used for configuring the Tab item header properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.HeaderTemplate">
            <summary>
            Specifies the header content of the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Visible">
            <summary>
            Specifies a value that indicates whether the tab is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.ID">
            <summary>
            Gets or Sets the unique ID of the Tab item
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.TabIndex">
            <summary> 
            Gets or sets the tab order of the Tab items. When positive values assigned, it allows to switch focus to the next/previous taps items with Tab/ShiftTab keys.
            </summary> 
            <value> 
            Tab index of taps item. The default value is `-1`. 
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfTab">
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.PreventRender(System.Boolean)">
            <summary>
            Prevents the Tab render. This method will internally sets value to be returned from ShouldRender method.
            </summary>
            <param name="preventRender">Default value is true. Toggles the ShouldRender method value.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ID">
            <summary>
            Sets ID attribute for the tab element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ChildContent">
            <summary>
            Child Content for Tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Animation">
            <summary>
            Specifies the animation settings of the Tabs component. The animation effect can be applied to activate the tab with duration and delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.CssClass">
            <summary>
            Sets the CSS classes to the root element of the Tabs that helps to customize the component styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            If enabled, the tab’s selected item will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.AllowDragAndDrop">
            <summary>
            Indicates whether the Tab allows drag and drop over tab items. Tab item has been reordered based on the dropped item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.DragArea">
            <summary>
            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted
            for the draggable element movement. By default, the draggable element movement occurs with Tabitems.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left (RTL) direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.HeaderPlacement">
            <summary>
            Specifies the orientation of the Tab header.
            The possible values are:
            - Top: Places the Tab header on the top.
            - Bottom: Places the Tab header at the bottom.
            - Left: Places the Tab header at the left.
            - Right: Places the Tab header at the right.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Height">
            <summary>
            Specifies the height of the Tabs component. By default, Tab height is set based on the height of its parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Items">
            <summary>
            A list of items that are used to configure the Tabs component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.LoadOn">
            <summary>
            Specifies the modes for the Tab content.
            The possible modes are:
            `Dynamic` Load the Tab content dynamically, which is rendering its content when switching its header.
            `Init` Loads all the tab contents on initial loading.
            `Demand` Loads the Tab content when required but keeps the content once it is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.OverflowMode">
            <summary>
            Specifies the display mode which will be applied when the Tabs exceeds the viewing area.
            The possible modes are:
            - Scrollable: All the elements will be displayed in a single line with horizontal scrolling enabled.
            - Popup: Tab container will hold the items that can be placed within the available space and the rest of the items will be moved to the popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ScrollStep">
            <summary>
            Specifies the scrolling distance that applies when scrolling in Tab and enabled Scrollable mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.SelectedItem">
            <summary>
            Specifies the index for activating the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.SelectedItemChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ShowCloseButton">
            <summary>
            Specifies a value that indicates whether to show the close button in the Tab header or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ReorderActiveTab">
            <summary>
            Gets or sets whether to re-order tab items to show active tab item in the header area or popup when OverflowMode is Popup.
            </summary>
            <value>
            true, if active tab item should be visible in header area instead of pop-up; otherwise, false. The default value is true.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Navigations.SfTab.ReorderActiveTab"/> Property is only applicable when OverflowMode is popup.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Width">
            <summary>
            Specifies the width of the Tabs component. By default, Tab width sets based on the width of its parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the tab element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.AddTab(System.Collections.Generic.List{Syncfusion.Blazor.Navigations.TabItem},System.Int32)">
            <summary>
            Adds new items to the Tab that accepts a list of Tab items.
            </summary>
            <param name="items">A list of items that are added to the Tab.</param>
            <param name="index">Specifies an index value that determines where the items to be added.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.RemoveTab(System.Int32)">
            <summary>
            Removes a particular Tab based on index from the Tabs.
            </summary>
            <param name="index">Index of tab item that is going to be removed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.EnableTab(System.Int32,System.Boolean)">
            <summary>
            Enables or disables a particular tab item. On passing the value as `false`, the tab will be disabled.
            </summary>
            <param name="index">Index value of target Tab item.</param>
            <param name="isEnable">Specify a Boolean value that determines whether the command should be enabled or disabled. By default, isEnable has true.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.EnableTabAsync(System.Int32,System.Boolean)">
            <summary>
            Enables or disables a particular tab item. On passing the value as `false`, the tab will be disabled.
            </summary>
            <param name="index">Index value of target Tab item.</param>
            <param name="isEnable">Specify a Boolean value that determines whether the command should be enabled or disabled. By default, isEnable has true.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.HideTab(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides a particular Tab based on the specified index.
            </summary>
            <param name="index">Index value of target item.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (false) or show (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.HideTabAsync(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides a particular Tab based on the specified index.
            </summary>
            <param name="index">Index value of target item.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (false) or show (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Select(System.Int32)">
            <summary>
            Select (activate) a particular tab based on the specified index.
            </summary>
            <param name="index">Index is used for selecting an item from the Tab.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.SelectAsync(System.Int32)">
            <summary>
            Select (activate) a particular tab based on the specified index.
            </summary>
            <param name="index">Index is used for selecting an item from the Tab.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Disable(System.Boolean)">
            <summary>
            Specifies the value to disable or enable the Tabs component. When set to `true`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Tab will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.DisableAsync(System.Boolean)">
            <summary>
            Specifies the value to disable or enable the Tabs component. When set to `true`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Tab will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.GetTabItem(System.Int32)">
            <summary>
            Return a tab item element based on the specified index.
            </summary>
            <param name="index">Index is used for accessing tab header item element from the Tab.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.GetTabContent(System.Int32)">
            <summary>
            Returns the tab content element based on the specified index.
            </summary>
            <param name="index">Index is used for accessing tab content element from the Tab.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Refresh">
            <summary>
            Refresh the entire tabs component.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.RefreshAsync">
            <summary>
            Refresh the entire tabs component.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.GetTabItemByIndex(System.Int32)">
            <summary>
            Retrieves a tab item based on the specified index. 
            </summary>
            <param name="index">Index is used for accessing tab item from the Tab</param> - Index -> index
            <returns>Returns the tab item</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.GetTabItemById(System.String)">
            <summary> 
            Retrieves a tab item based on the specified id. 
            </summary> 
            <param name="id"> id is used for accessing tab item from the Tab </param> 
            <returns>Returns the tab item</returns> 
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.CreatedEvent">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnDragStart(System.Int32)">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Dragged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.SelectingEvent(Syncfusion.Blazor.Navigations.SelectingEventArgs,System.Nullable{System.Int32})">
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabAnimationNext">
            <summary>
            Specifies the animation to appear when moving to the next Tab content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationNext.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationNext.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationNext.Effect">
            <summary>
            Specifies the animation effect for displaying the next Tab content.
            Default animation is given as SlideRightIn for next tab animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationNext.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationNext.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationNext.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabAnimationPrevious">
            <summary>
            Specifies the animation to appear when moving to the previous Tab content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Duration">
            <summary>
            Specifies the time duration to transform the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Effect">
            <summary>
            Specifies the animation effect for displaying the previous Tab content.
            Default animation is given as SlideLeftIn for previous tab animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationPrevious.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationPrevious.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabAnimationSettings">
            <summary>
            A class used for configuring the Tab animation properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent">
            <summary>
            Child Content for the Tab Animation Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationSettings.Next">
            <summary>
            Specifies the animation to appear when moving to the next Tab content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationSettings.Previous">
            <summary>
            Specifies the animation to appear when moving to the previous Tab content.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationSettings.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.HeaderPosition">
            <summary>
            Options to set the orientation of Tab header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Top">
            <summary>
            Places the Tab header on the top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Bottom">
            <summary>
            Places the Tab header at the bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Left">
            <summary>
            Places the Tab header on the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Right">
            <summary>
            Places the Tab header on the right.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ContentLoad">
            <summary>
            Specifies the options of Tab content display mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ContentLoad.Dynamic">
            <summary>
            The content of the selected tab alone will be loaded and available in DOM and it will be replaced with the corresponding content if you select the tab dynamically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ContentLoad.Init">
            <summary>
            The content of all the tabs are rendered on the initial load and maintained in the DOM.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ContentLoad.Demand">
            <summary>
            The content of the selected tab alone is loaded initially. The content of the tabs which were loaded once will be maintained in the DOM.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabEvents">
            <summary>
            Configure event handlers to handle the events with the Tabs component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Added">
            <summary>
            The event triggers after adding the item to the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Adding">
            <summary>
            The event triggers before adding the tab item to the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Created">
            <summary>
            The event triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Destroyed">
            <summary>
            The event triggers when the component gets destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Removed">
            <summary>
            The event triggers after removing the item from the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Removing">
            <summary>
            The event triggers before removing the item from the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Selected">
            <summary>
            The event triggers after the tab item gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Selecting">
            <summary>
            The event triggers before the tab item gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.OnDragStart">
            <summary>
            The event triggers when the Tab item drag starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Dragged">
            <summary>
            The event triggers after the tab item gets dropped.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabHeader">
            <summary>
            A class used for configuring the Tab header properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabHeader.IconCss">
            <summary>
            Specifies the icon class that is used to render an icon in the Tab header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabHeader.IconPosition">
            <summary>
            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.
            The possible values are:
            - left: Places the icon to the `left` of the item.
            - top: Places the icon on the `top` of the item.
            - right: Places the icon to the `right` end of the item.
            - bottom: Places the icon at the `bottom` of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabHeader.Text">
            <summary>
            Specifies the display text of the Tab header.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabHeader.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabHeader.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabHeader.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabItem">
            <summary>
            An item object that is used to configure the Tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.ChildContent">
            <summary>
            Child Content for the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.ContentTemplate">
            <summary>
            Specifies the content template of the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Content">
            <summary>
            Specifies the content of Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.TabIndex">
            <summary> 
            Gets or sets the tab order of the Tab items. When positive values assigned, it allows to switch focus to the next/previous tabs items with Tab/ShiftTab keys.
            </summary> 
            <value> 
            Tab index of tabs item. The default value is `-1`. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.CssClass">
            <summary>
            Sets the CSS classes to the Tab item to customize its styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Disabled">
            <summary>
            Specifies a value that indicates whether the control is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Header">
            <summary>
            The object used for configuring the Tab item header properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate">
            <summary>
            Specifies the header content of the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Visible">
            <summary>
            Specifies a value that indicates whether the tab is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.ID">
            <summary>
            Gets or Sets the unique ID of the Tab item
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItem.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItem.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabItems">
            <summary>
            A list of items that are used to configure the Tabs component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItems.ChildContent">
            <summary>
            Child Content for the Tab items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItems.Items">
            <summary>
            A list of items that are used to configure the tab item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItems.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ClickEventArgs">
            <summary>
            Provides information about the clicked item in toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.Cancel">
            <summary>
            Gets or sets whether the item click action should be canceled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.Item">
            <summary>
            Gets the clicked <see cref="T:Syncfusion.Blazor.Navigations.ItemModel"/> of toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.Name">
            <summary>
            Gets name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.OriginalEvent">
            <summary>
            Gets the mouse event informations.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ItemModel">
            <summary>
            Provides information about the toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Click">
            <summary>
            Event triggers when `click` the toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Align">
            <summary>
            Gets or sets the location for aligning toolbar items on the toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.CssClass">
            <summary>
            Gets or sets the classes for toolbar item to customize the toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Disabled">
            <summary>
            Gets or sets whether the toolbar item is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to the toolbar item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Id">
            <summary>
            Gets or sets the unique ID for toolbar button or input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Overflow">
            <summary>
            Gets or sets a value that indicates whether to display the toolbar item on toolbar or not, when the content is too large to fit available space.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.PrefixIcon">
            <summary>
            Gets or sets the classes to display an icon for toolbar button item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.ShowAlwaysInPopup">
            <summary>
            Gets or sets the toolbar items whether to display always in popup or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.ShowTextOn">
            <summary>
            Gets or sets a value that indicates whether to display the button text on toolbar or popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.SuffixIcon">
            <summary>
            Gets or sets the classes to display an icon for toolbar button item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.TabIndex">
            <summary> 
            Gets or sets the tab order of the Toolbar items. When positive values assigned, it allows to switch focus to the next/previous toolbar items with Tab/ShiftTab keys.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Template">
            <summary>
            Gets or sets the HTML element content for the toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Text">
            <summary>
            Gets or sets the text content for toolbar button item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.TooltipText">
            <summary>
            Gets or sets the tooltip text content to be displayed on hovering the toolbar button item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Type">
            <summary>
            Gets or sets a value that indicates the type of toolbar item to be rendered in toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Visible">
            <summary>
            Gets or sets whether the toolbar item is hidden or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Width">
            <summary> 
            Gets or sets the width of the toolbar button item in pixels/number/percentage. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfToolbar">
            <summary>
            The Toolbar control contains a list of toolbar items that are aligned horizontally.
            </summary>
            <remarks>
            Toolbar items can be populated by specifying <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItem"/> within <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItems"/> tag directive.
            </remarks>
            <example>
            In the below code example, a basic toolbar component initialized with <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItems"/> tag directive.
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Type="ItemType.Button" Text="Cut" PrefixIcon="e-icons e-cut"></ToolbarItem>
                    <ToolbarItem Type="ItemType.Button" Text="Copy" PrefixIcon="e-icons e-copy"></ToolbarItem>
                    <ToolbarItem Type="ItemType.Button" Text="Paste" PrefixIcon="e-icons e-paste"></ToolbarItem>
                    <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                    <ToolbarItem Type="ItemType.Input">
                        <Template>
                            <input @bind="inputValue" type="text" />
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            @code {
                private string inputValue { get; set; }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.ID">
            <summary>
            Gets or sets the unique Id value for toolbar component.
            </summary>
            <value>
            If we set the id, then the id value set for toolbar element. The default value is `null`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.ChildContent">
            <summary>
            Gets or sets the child content of toolbar component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.AllowKeyboard">
            <summary> 
            Gets or sets whether the allow keyboard interaction in toolbar. 
            </summary> 
            <value>
            false, the keyboard interaction in toolbar, The default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.CssClass">
            <summary>
            Gets or sets the custom classes to customize the toolbar component.  
            </summary>
            <value>
            If we set the css class, then the custom class is applied for toolbar element. The default value is `null`. 
            </value> 
            <example>
            <code><![CDATA[ 
            <SfToolbar CssClass="custom-toolbar"></SfToolbar> 
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.EnableCollision">
            <summary>
            Gets or sets whether enable or disable popup collision to display the popup based on viewport window. 
            </summary>
            <value>
            false, the popup collision is disabled. The default value is `true`. 
            </value>
            <remarks>
            This property is applicable only when <see cref="F:Syncfusion.Blazor.Navigations.OverflowMode.Popup"/> or <see cref="F:Syncfusion.Blazor.Navigations.OverflowMode.Extended"/> is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.EnableRtl">
            <summary>
            Gets or sets whether the right to left direction is enabled for toolbar component.
            </summary>
            <value> 
            true, the right to left direction is enabled for toolbar component. The default value is `false`. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.Height">
            <summary> 
            Gets or sets the height of the toolbar element in pixels/number/percentage. 
            </summary> 
            <value> 
            If we set the height value, then the toolbar will render based on specified height otherwise the default height value `auto` is set.  
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfToolbar Height="500px"></SfToolbar> 
            ]]></code> 
            </example> 
            <remarks>
            If we set number values, then it is considered as pixels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.Items">
            <summary>
            Gets or sets the list of toolbar items that will be populated using the <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItems"/> tag directive. 
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItems"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.OverflowMode">
            <summary>
            Gets or sets a value that indicates how to display toolbar items when the toolbar content exceeds the viewing area.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.OverflowMode"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.OverflowMode.Scrollable"/>
            </value>
            <remarks>
            If the <c>OverflowMode</c> is <c>Scrollable</c>, all the elements are displayed in a single line with enabled horizontal scrolling.
            If the <c>OverflowMode</c> is <c>Popup</c>, prioritized elements are displayed on the toolbar and the rest of elements are moved to the popup.
            If the popup content overflows the height of the page, the rest of the elements will be hidden.
            If the <c>OverflowMode</c> is <c>MultiRow</c>, overflow toolbar items are displayed as in-line of toolbar.
            If the <c>OverflowMode</c> is <c>Extended</c>, hides the overflow items in next row. The extended content were shown when click on the expand icon.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.ScrollStep">
            <summary>
            Gets or sets the scrolling distance of toolbar scroller.
            </summary>
            <value> 
            When the left/right navigation icon is clicked, then the toolbar scrolled based on the specified value otherwise the default value `0` is set.
            </value>
            <example>
            <code><![CDATA[
            <SfToolbar ScrollStep="50"></SfToolbar> 
            ]]></code>
            </example>
            <remarks>
            This property is applicable only when <see cref="F:Syncfusion.Blazor.Navigations.OverflowMode.Scrollable"/> is set.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.Width">
            <summary> 
            Gets or sets the width of the toolbar element in pixels/number/percentage. 
            </summary> 
            <value> 
            If we set the width value, then the toolbar will render based on specified width otherwise the default width value `auto` is set.  
            </value> 
            <example>
            <code><![CDATA[ 
            <SfToolbar Width="500px"></SfToolbar> 
            ]]></code> 
            </example> 
            <remarks>
            If we set number values, then it is considered as pixels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.HtmlAttributes">
            <summary> 
            Gets or sets a collection of additional attributes that will applied to the toolbar element. 
            </summary> 
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            </remarks> 
            <value> 
            It allows the toolbar component to render non-declared attributes. The default value is `null`. 
            </value>
            <example> 
            <code><![CDATA[ 
            <SfToolbar title="Search toolbar"></SfToolbar> 
            ]]></code> 
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.AddItems(System.Collections.Generic.List{Syncfusion.Blazor.Navigations.ToolbarItem},System.Int32)">
            <summary>
            Adds new items to the Toolbar that accepts an list of Toolbar items.
            </summary>
            <param name="items">A list of items to be added to the Toolbar.</param>
            <param name="index">Number value that determines where the command is to be added.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RemoveItems(System.Int32)">
            <summary>
            Removes the items from the Toolbar at the specified index.
            </summary>
            <param name="index">Index of item which is to be removed from the Toolbar.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.EnableItems(System.Collections.Generic.List{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Enables or disables the specified Toolbar item.
            </summary>
            <param name="items">A list of toolbar item index to be enabled or disabled.</param>
            <param name="isEnable">Boolean value that determines whether the command should be enabled or disabled. By default, `isEnable` is set to true.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.HideItem(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides the Toolbar item that is in the specified index.
            </summary>
            <param name="index">Index value of target item to be hidden or shown.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (true) or show (false). By default, isHide is false.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.HideItemAsync(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides the Toolbar item that is in the specified index.
            </summary>
            <param name="index">Index value of target item to be hidden or shown.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (true) or show (false). By default, isHide is false.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.Disable(System.Boolean)">
            <summary>
            Specifies the value to disable/enable the Toolbar component.
            When set to `True`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.DisableAsync(System.Boolean)">
            <summary>
            Specifies the value to disable/enable the Toolbar component.
            When set to `True`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RefreshOverflow">
            <summary>
            Refresh the whole Toolbar component without re-rendering.
            - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
            - It will refresh the Toolbar component after loading items dynamically.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RefreshOverflowAsync">
            <summary>
            Refresh the whole Toolbar component without re-rendering.
            - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
            - It will refresh the Toolbar component after loading items dynamically.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.Refresh">
            <summary>
            Applies all the pending property changes and render the component again.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RefreshAsync">
            <summary>
            Applies all the pending property changes and render the component again.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.TriggerClickEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Nullable{System.Int32},Syncfusion.Blazor.Navigations.ItemModel)">
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.OverflowMode">
            <summary>
            Specifies the options of Toolbar display mode. Display option is considered when Toolbar content exceeds the available space.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.Scrollable">
            <summary>
             Scrollable - All the elements are displayed in a single line with horizontal scrolling enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.Popup">
            <summary>
             Popup - Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.MultiRow">
            <summary>
             MultiRow - Displays the overflow toolbar items as an in-line of a toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.Extended">
            <summary>
             Extended - Hide the overflowing toolbar items in the next row. Show the overflowing toolbar items when you click the expand icons. If the popup content overflows the height of the page, the rest of the elements will be hidden.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DisplayMode">
            <summary>
            Specifies the options of where the text will be displayed in popup mode of the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.DisplayMode.Both">
            <summary>
             Both - Text will be displayed on popup and Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.DisplayMode.Overflow">
            <summary>
             Overflow - Text will be displayed only when content overflows to popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.DisplayMode.Toolbar">
            <summary>
             Toolbar - Text will be displayed on Toolbar only.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ItemAlign">
            <summary>
            Specifies the options for aligning the Toolbar items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemAlign.Left">
            <summary>
             Left - To align commands to the left side of the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemAlign.Center">
            <summary>
             Center - To align commands at the center of the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemAlign.Right">
            <summary>
             Right - To align commands to the right side of the Toolbar.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ItemType">
            <summary>
            Specifies the options for supporting element types of Toolbar command.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemType.Button">
            <summary>
             Button - Creates the Button control with its given properties like text, prefixIcon, etc.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemType.Separator">
            <summary>
             Separator - Adds a horizontal line that separates the Toolbar commands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemType.Input">
            <summary>
             Input - Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList, AutoComplete, etc.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.OverflowOption">
            <summary>
            Specifies the options of the Toolbar item display area when the Toolbar content overflows to available space.Applicable to `Popup` mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowOption.None">
            <summary>
             None - No priority for display, and as per normal order moves to popup when content exceeds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowOption.Show">
            <summary>
             Show - Always shows the item as the primary priority on the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowOption.Hide">
            <summary>
             Hide - Always shows the item as the secondary priority on the popup.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ToolbarItem">
            <summary>
            A class that represents toolbar component item of <see cref="T:Syncfusion.Blazor.Navigations.SfToolbar"/> component.
            </summary>
            <remarks>
            You can render icon only, text only, icon and text toolbar item by specifying value to corresponding property.
            </remarks>
            <example>
            In the below code example, a basic toolbar item has been added using <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItem"/> tag directive.
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Text="Cut" PrefixIcon="e-icons e-cut"></ToolbarItem>
                    <ToolbarItem Text="Copy" PrefixIcon="e-icons e-copy"></ToolbarItem>
                    <ToolbarItem Text="Paste" PrefixIcon="e-icons e-paste"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent">
            <summary>
            Gets or sets the child content for the toolbar item.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.OnClick">
            <summary>
            Event triggers when click the toolbar item.
            </summary>
            <remarks>
            You can get the clicked toolbar item details.
            </remarks>
            <example>
            In the below code example, the clicked toolbar item text can be obtained from the <c>OnClick</c> event.
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Text="Cut" TooltipText="Cut" OnClick="ItemClick"></ToolbarItem>
                    <ToolbarItem Text="Copy" TooltipText="Copy"></ToolbarItem>
                    <ToolbarItem Text="Paste" TooltipText="Paste"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            @code {
                public void ItemClick(ClickEventArgs args)
                    string clickedText = args.Item.Text;
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Align">
            <summary>
            Gets or sets the location for aligning toolbar items on the toolbar.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.ItemAlign"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.ItemAlign.Left"/>
            </value>
            <remarks>
            If the <c>ItemAlign</c> is <c>Left</c>, the toolbar item aligned from left side of toolbar.
            If the <c>ItemAlign</c> is <c>Center</c>, the toolbar item aligned from center of toolbar.
            If the <c>ItemAlign</c> is <c>Right</c>, the toolbar item aligned from right side of toolbar.
            Each item will be aligned according to the <c>Align</c> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.CssClass">
            <summary>
            Gets or sets the classes for toolbar item to customize the toolbar item.
            </summary>
            <value> 
            If we set the css class, then the custom class is applied for toolbar item. The default value is <c>string.Empty</c>. 
            </value>
            <example> 
            <code><![CDATA[ 
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Text="Cut" CssClass="item1"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Disabled">
            <summary>
            Gets or sets whether the toolbar item is disabled or not.
            </summary>
            <value>
            <c>true</c>, to disable the toolbar item. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to the toolbar item element.
            </summary>
            <value> 
            It allows the toolbar item to render non-declared attributes. The default value is `null`. 
            </value>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            </remarks>
            <example>
            In the below code example, title attribute were added for toolbar item.
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Text="Cut" id="item1"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Id">
            <summary>
            Gets or sets the unique ID for toolbar button or input element.
            </summary>
            <value>
            Accepts a string value. The default value is <c>String.Empty</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Overflow">
            <summary>
            Gets or sets a value that indicates whether to display the toolbar item on toolbar or not, when the content is too large to fit available space.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.OverflowOption"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.OverflowOption.None"/>
            </value>
            <remarks>
            If the <c>OverflowOption</c> is <c>Show</c>, always shows the toolbar item as the primary priority on the Toolbar.
            If the <c>OverflowOption</c> is <c>Hide</c>, always shows the toolbar item as the secondary priority on the popup.
            If the <c>OverflowOption</c> is <c>None</c>, no priority were set for toolbar item, as per normal order moves to popup when content exceeds.
            This property is applicable only when <see cref="T:Syncfusion.Blazor.Navigations.OverflowMode"/> is <c>Popup</c> of <c>Extended</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.PrefixIcon">
            <summary>
            Gets or sets the classes to display an icon for toolbar button item.
            </summary>
            <value>
            Accepts a string value. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            The icon will be positioned before the text content if <see cref="P:Syncfusion.Blazor.Navigations.ToolbarItem.Text"/> is available, otherwise the icon alone will be rendered.
            </remarks>
            <example>
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Text="Cut" PrefixIcon="e-icons e-cut"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.ShowAlwaysInPopup">
            <summary>
            Gets or sets the toolbar items whether to display always in popup or not.
            </summary>
            <value>
            <c>true</c>, to render the toolbar item in popup. The default value is <c>false</c>.
            </value>
            <remarks>
            It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.
            This property is applicable only when <see cref="T:Syncfusion.Blazor.Navigations.OverflowMode"/> is <c>Popup</c> of <c>Extended</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.TabIndex">
            <summary> 
            Gets or sets the tab order of the Toolbar items. When positive values assigned, it allows to switch focus to the next/previous toolbar items with Tab/ShiftTab keys.
            </summary> 
            <value> 
            Tab index of toolbar item. The default value is `-1`. 
            </value> 
            <remarks>
            By default, user can able to switch between items only via arrow keys.
            If the value is set to 0 for all tool bar items, then tab switches based on element order.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.ShowTextOn">
            <summary>
            Gets or sets a value that indicates whether to display the button text on toolbar or popup.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.DisplayMode"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.DisplayMode.Both"/>
            </value>
            <remarks>
            If the <c>DisplayMode</c> is <c>Toolbar</c>, text will be displayed on Toolbar only.
            If the <c>DisplayMode</c> is <c>Overflow</c>, text will be displayed only when content overflows to popup.
            If the <c>DisplayMode</c> is <c>Both</c>, text will be displayed on both popup and Toolbar.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.SuffixIcon">
            <summary>
            Gets or sets the classes to display an icon for toolbar button item.
            </summary>
            <value>
            Accepts a string value. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            The icon will be positioned after the text content if <see cref="P:Syncfusion.Blazor.Navigations.ToolbarItem.Text"/> is available, otherwise the icon alone will be rendered.
            </remarks>
            <example>
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Text="Cut" SuffixIcon="e-icons e-cut"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Template">
            <summary>
            Gets or sets the HTML element content for the toolbar item.
            </summary>
            <value>
            The value used to build the content.
            </value>
            <example>
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem>
                        <Template>
                            <input type='checkbox' title="Accept" checked/>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Text">
            <summary>
            Gets or sets the text content for toolbar button item.
            </summary>
            <value>
            Accepts a string value. The default value is <c>String.Empty</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Text="Cut"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.TooltipText">
            <summary>
            Gets or sets the tooltip text content to be displayed on hovering the toolbar button item.
            </summary>
            <value>
            Accepts a string value. The default value is <c>String.Empty</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Text="Cut" TooltipText="Cut"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Type">
            <summary>
            Gets or sets a value that indicates the type of toolbar item to be rendered in toolbar.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Navigations.ItemType"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Navigations.ItemType.Button"/>
            </value>
            <remarks>
            If the <c>ItemType</c> is <c>Button</c>, creates the Button control with its given properties like text, prefixIcon, etc.
            If the <c>ItemType</c> is <c>Separator</c>, adds a horizontal line that separates the toolbar item.
            If the <c>ItemType</c> is <c>Input</c>, creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList, AutoComplete, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Visible">
            <summary>
            Gets or sets whether the toolbar item is hidden or not.
            </summary>
            <value>
            <c>false</c>, to hide the toolbar item. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Width">
            <summary> 
            Gets or sets the width of the toolbar button item in pixels/number/percentage. 
            </summary> 
            <value> 
            If we set the width value, then the toolbar button item will render based on specified width otherwise the default width value <c>auto</c> is set.  
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItem.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItem.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ToolbarItems">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItem"/>.
            </summary>
            <remarks>
            To generate dynamic <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItem"/> based on collection, use <c>@foreach</c> within <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItems"/> tag directive.
            </remarks>
            <example>
            In the below code example, a basic toolbar has been rendered using <see cref="T:Syncfusion.Blazor.Navigations.ToolbarItems"/> tag directive.
            <code><![CDATA[
            <SfToolbar>
                <ToolbarItems>
                    <ToolbarItem Text="Cut"></ToolbarItem>
                    <ToolbarItem Text="Copy"></ToolbarItem>
                    <ToolbarItem Text="Paste"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent">
            <summary>
            Gets or sets the child content for the toolbar items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItems.Items">
            <summary>
            Gets or sets the list of toolbar items used to configure toolbar commands.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItems.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandAction">
            <summary>
            Defines the expand type of the TreeView node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandAction.DoubleClick">
            <summary>
            Specifies the action on 'DoubleClick' the node expands or collapses. The expand/collapse operation happens when you double-click the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandAction.Click">
            <summary>
            Specifies the action on 'Click' the node expands or collapses. The expand/collapse operation happens when you single-click the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandAction.None">
            <summary>
            The expand/collapse operation will not happen when you single-click or double-click the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SortOrder">
            <summary>
            Defines the sorting order type for TreeView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SortOrder.None">
            <summary>
            Specifies the nodes are not sorted.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SortOrder.Ascending">
            <summary>
            Specifies the nodes are sorted in the 'Ascending' order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SortOrder.Descending">
            <summary>
            Specifies the nodes are sorted in the 'Descending' order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeEffect">
            <summary>
            TreeView animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.SlideDown">
            <summary>
            Specifies 'SlideDown' type of animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.None">
            <summary>
            Specifies animation type 'None'.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.ZoomIn">
            <summary>
            Specifies 'ZoomIn' type of animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.FadeIn">
            <summary>
            Specifies 'FadeIn' type of animation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.DataSourceChanged"/> event callback.
            </summary>
            <typeparam name="T">Specifies the TValue of TreeView events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs`1.Name">
            <summary>
            Gets or sets the 'DataSourceChanged' Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DataBoundEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.DataBound"/> event callback.
            </summary>
            <typeparam name="T">Specifies the TValue of TreeView events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataBoundEventArgs`1.Name">
            <summary>
            Gets or sets the 'DataBound' Event name . 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DragAndDropEventArgs">
            <summary>
            Provides information about the drag and drop events callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Cancel">
            <summary>
            Gets or sets whether the drag and drop action should be cancelled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DraggedNodeData">
            <summary>
            Gets or sets the currently dragged node as array of JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropIndex">
            <summary>
            Gets or sets the dragged/dropped element's target index position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropIndicator">
            <summary>
            Gets or sets the cloned element's drop status icon while dragging.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropLevel">
            <summary>
            Gets or sets the dragged/dropped element's target level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DroppedNodeData">
            <summary>
            Gets or sets the dropped node as array of JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Event">
            <summary>
            Gets the actual drag/drop event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.PreventTargetExpand">
            <summary>
            Gets or sets the boolean value for preventing auto-expanding of parent node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Name">
            <summary>
            Gets or sets the actual drag/drop Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Left">
            <summary>
            Gets the Client X value of target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Top">
            <summary>
            Gets the Client Y value of target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeRender"/> event callback.
            </summary>
            <typeparam name="T">Specifies the TValue of TreeView events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.Node">
            <summary>
            Gets or sets the current rendering node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.NodeData">
            <summary>
            Gets or sets the current rendering node as JSON object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.Text">
            <summary>
            Gets or sets the current rendering node text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.Name">
            <summary>
            Gets or sets the 'NodeRender' Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.FailureEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnActionFailure"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.FailureEventArgs.Error">
            <summary>
            Gets the error information.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeCheckEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeChecked"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Action">
            <summary>
            Gets or sets the name of action like check or un-check.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Cancel">
            <summary>
            Gets or sets whether the check/un-check action should be cancelled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.NodeData">
            <summary>
            Gets or sets the currently checked node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Name">
            <summary>
            Gets or sets the 'Node check/uncheck' Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeClickEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeClicked"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Event">
            <summary>
            Gets the actual event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.NodeData">
            <summary>
            Gets or sets the current clicked TreeView node data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Name">
            <summary>
            Gets or sets the 'Node click' Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Left">
            <summary>
            Gets the Client X value of target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Top">
            <summary>
            Gets the Client Y value of target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeData">
            <summary>
            Specifies class that holds the node details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Expanded">
            <summary>
            Gets or sets the mapping field for expand state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.HasChildren">
            <summary>
             Gets the hasChildren value to check whether a node has child nodes or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Id">
            <summary>
            Gets or sets the ID field mapped in the dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.IsChecked">
            <summary>
            Gets or sets the checked state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.ParentID">
            <summary>
            Gets or sets the parent ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Selected">
            <summary>
            Gets or sets the selected state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Text">
            <summary>
            Gets or sets the text displayed as TreeView node's text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeEditEventArgs">
            <summary>
            Provides information about the node edit events callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.Cancel">
            <summary>
            Gets or sets whether the edit action should be cancelled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.InnerHtml">
            <summary>
            Gets or sets the inner HTML of TreeView node while editing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.NewText">
            <summary>
            Gets or sets the new text of current TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.NodeData">
            <summary>
            Gets or sets the current node details as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.OldText">
            <summary>
            Gets the old text of current TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.Name">
            <summary>
            Gets or sets the 'Node Edit' Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeExpandEventArgs">
            <summary>
            Provides information about the node expand events callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Cancel">
            <summary>
            Gets or sets whether the expand action should be cancelled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Event">
            <summary>
            Gets the event argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.NodeData">
            <summary>
            Gets or sets the expanded/collapsed node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Name">
            <summary>
            Gets or sets the Node expand Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnKeyPress"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Cancel">
            <summary>
            Gets or sets whether the key press action should be cancelled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Event">
            <summary>
            Gets the actual event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.NodeData">
            <summary>
            Gets or sets the current active node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Name">
            <summary>
            Gets or sets the 'NodeKeyPress' Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Action">
            <summary>
            Gets or sets the Key Action of Event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Key">
            <summary>
            Gets the Key value of Event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeSelectEventArgs">
            <summary>
            Provides information about the node selection event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Action">
            <summary>
            Gets or sets the name of action like select or un-select.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Cancel">
            <summary>
            Gets or sets whether the node selection should be cancelled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.NodeData">
            <summary>
            Gets or sets the currently selected node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Name">
            <summary>
            Gets or sets the Node selection Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ActionEventArgs">
            <summary>
            Specified the class that denotes the creation and destroy action of TreeView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ActionEventArgs.Name">
            <summary>
            Gets or sets the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreePersistenceValues">
            <summary>
            class for persistence values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreePersistenceValues.SelectedNodes">
            <summary>
            Gets or sets the SelectedNodes of the TreeView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreePersistenceValues.CheckedNodes">
            <summary>
            Gets or sets the CheckedNodes of the TreeViewcomponent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreePersistenceValues.ExpandedNodes">
            <summary>
            Gets or sets the ExpandedNodes of the TreeViewcomponent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfTreeView`1">
            <summary>
            The TreeView component is used to represent hierarchical data in a tree like structure with editing, drag and drop, checkboxes, expand and collapse, and more.
            </summary>
            <typeparam name="TValue">"TValue parameter".</typeparam>
            <summary>
            Specifies the TreeView component.
            </summary>
            <summary>
            The TreeView component is used to represent hierarchical data in a tree like structure with editing, drag and drop, checkboxes, expand and collapse, and more.
            </summary>
            <summary>
            The TreeView component is used to represent hierarchical data in a tree like structure with editing, drag and drop, checkboxes, expand and collapse, and more.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetPropertyChanges">
            <summary>
            Specifies the particular property is changes or not.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DropNodeAsSibling(Syncfusion.Blazor.Navigations.Internal.DropTreeArgs)">
            <summary>
            Drop Node as Sibling for TreeView component.
            </summary>
            <returns>"Task".</returns>
            <param name="args">"Specifies the DropTree argument".</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DropNodeAsChild(Syncfusion.Blazor.Navigations.Internal.DropTreeArgs)">
            <summary>
            Drop Node as Sibling for TreeView component.
            </summary>
            <param name="args">"Specifies the DropTree argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerDragStartEvent(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Drag Start Event for TreeView component.
            </summary>
            <param name="args">"Node Drag Start argument".</param>
            <param name="left">"Dragged Node position".</param>
            <param name="top">"Dragged Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeDraggingEvent(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Dragging Event for TreeView component.
            </summary>
            <param name="args">"Node Drag Start argument".</param>
            <param name="left">"Dragging Node position".</param>
            <param name="top">"Dragging Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerDragStopEvent(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Drag Stop Event for TreeView component.
            </summary>
            <param name="args">"Node Drop Start argument".</param>
            <param name="left">"Drag stop Node position".</param>
            <param name="top">"Drag stop Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeDropped(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Drag Stop Event for TreeView component.
            </summary>
            <param name="args">"Dropped argument".</param>
            <param name="left">"Dropped stop Node position".</param>
            <param name="top">"Dropped stop Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateExpandedNode(System.String[])">
            <summary>
            Trigger Node Drag Stop Event for TreeView component.
            </summary>
            <param name="parentNodes">"Parent node".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeSelectingEvent(Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs)">
            <summary>
            Trigger Node Selecting Event for TreeView component.
            </summary>
            <param name="selectEventArgs">"Select event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeEditingEvent(Syncfusion.Blazor.Navigations.NodeEditEventArgs)">
            <summary>
            Trigger Node Editing Event for TreeView component.
            </summary>
            <param name="args">"Node Edit event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CreatedEvent">
            <summary>
            Trigger TreeView created event.
            </summary>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeExpandingEvent(Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs)">
            <summary>
            Trigger Node Expanding Event for TreeView component.
            </summary>
            <param name="arguments">"Expand event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeCheckingEvent(Syncfusion.Blazor.Navigations.NodeCheckEventArgs)">
            <summary>
            Trigger Node Checking Event for TreeView component.
            </summary>
            <param name="args">"NodeCheck event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeClickingEvent(Syncfusion.Blazor.Navigations.ClickEventArgs,System.String,System.Double,System.Double)">
            <summary>
            Trigger Node Click Event for TreeView component.
            </summary>
            <param name="eventArgs">"NodeClick event argument".</param>
            <param name="id">"Clicked node id".</param>
            <param name="left">"Clicked node Left position".</param>
            <param name="top">"Clicked node Top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeExpandedEvent(Syncfusion.Blazor.Navigations.NodeExpandEventArgs)">
            <summary>
            Trigger Node Expanded Event for TreeView component.
            </summary>
            <param name="args">"Node Expanded event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateData(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Update the latest data source values to TreeView component (Drag and drop).
            </summary>
            <param name="dataSource">"Specifies the datasource".</param>
            <param name="isUpdateChecked">"Specifies the checked is true or not".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.NodeCollapsingEventCallback(Syncfusion.Blazor.Navigations.NodeExpandEventArgs,System.Boolean)">
            <summary>
            Triggers the NodeCollapsing Eventcallback
            </summary>
            <param name="args">"NodeCollapsing event argument".</param>
            <param name="fromClickHandler">"Indicates whether the event is from click handler"</param>
            <returns>"Task"</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeCollapsingEvent(Syncfusion.Blazor.Navigations.NodeExpandEventArgs)">
            <summary>
            Collapse Action for TreeView.
            </summary>
            <param name="args">"NodeCollapsing event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerKeyboardEvent(Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs,System.String,System.String,System.String)">
            <summary>
            Collapsed Action for TreeView.
            </summary>
            <param name="args">"Key press event argument".</param>
            <param name="id">"Specifies the Id".</param>
            <param name="keyAction">"Specifies the key action".</param>
            <param name="keyValue">"Specifies the Key value".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeCollapsedEvent(Syncfusion.Blazor.Navigations.NodeExpandEventArgs)">
            <summary>
            Collapsed Action for TreeView.
            </summary>
            <param name="args">"NodeCollapsed event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values to TreeView component instance.
            </summary>
            <param name="key">"Specifies the key field".</param>
            <param name="details">"Specifies the details field".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">"First render parameter".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ChildContent">
            <exclude/>
            <summary>
            Gets or sets the content to display within a TreeView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowDragAndDrop">
            <summary>
            Gets or sets whether the TreeView allows drag and drop of nodes to reordering the nodes. 
            </summary>
            <value> 
            <c>true</c>, if drag and drop operation is allowed; otherwise 'false'. The default value is <c>false</c>. 
            </value> 
            <remarks>
            In desktop device, drag and drop a node using mouse down on the node and drag it to the target node
            and drop the node by releasing the mouse.
            In touch device, drag and drop nodes using touch start, touch move and and touch end events.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowEditing">
            <summary>
            Gets or sets whether allow to edit a node's text by pressing F2 key or double-click on a TreeView node. 
            </summary>
            <value> 
            <c>true</c>, if editing is allowed; otherwise 'false'. The default value is <c>false</c>. 
            </value> 
            <remarks>
            When `AllowEditing` property is set to true, the TreeView allows to edit a node
            by double clicking on the node or by navigating to the node and pressing F2 key. 
            When the property is set to false, the TreeView allows to read the node'text only. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowMultiSelection">
            <summary>
            Gets or sets a value that indicates whether to enable or disable multi-selection of nodes. 
            </summary>
            <value> 
            <c>true</c>, if multiple nodes can be selected. The default value is <c>false</c>. 
            </value> 
            <remarks>
            To select multiple nodes, select the nodes by holding down the CTRL key and clicking on the nodes.
            To select consecutive nodes, select initial node and hold down the SHIFT key and click on the final node .
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowTextWrap">
            <summary>
            Gets or sets a value that indicates whether to wrap the node's text in the TreeView. 
            </summary>
            <value> 
            <c>true</c>, if node's text can be wrapped around a node. The default value is <c>false</c>. 
            </value> 
            <remarks>
            When the `AllowTextWrap` property is set to true, the TreeView node's text wrap to the next line
            when its text content exceeds the width of the TreeView node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.Animation">
            <summary>
            Specifies the type of animation applied on expanding and collapsing the nodes along with duration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AutoCheck">
            <summary>
            Gets or sets whether allow to update a parent checkbox state based on child's checked state.
            </summary>
            <value> 
            'false' if the parent and child node relation is not required. The default value is <c>true</c>. 
            </value> 
            <remarks>
            This property works when <see cref="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ShowCheckBox"/> is set to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckedNodes">
             <summary>
             Gets or sets the ID of checked nodes in the TreeView component.
             </summary>
             <value> 
             Pass the node's ID as string array collection.
             </value> 
             <remarks> 
             Supports two-way binding. This property returns the checked nodes ID in the TreeView component.
             </remarks> 
             <example> 
             A TreeView with checked nodes.
             <code><![CDATA[ 
             <SfTreeView TValue="MusicAlbum" ShowCheckBox="true" @bind-CheckedNodes="@CheckedNodes">
             <TreeViewFieldsSettings TValue="MusicAlbum" Id="Id" DataSource="@Albums" Text="Name" ParentID="ParentId" HasChildren="HasChild" Expanded="Expanded" IsChecked="IsChecked"></TreeViewFieldsSettings>
            </SfTreeView>
             
               @code{
                public class MusicAlbum
                {
                    public int Id { get; set; }
                    public int? ParentId { get; set; }
                    public string Name { get; set; }
                    public bool Expanded { get; set; }
                    public bool? IsChecked { get; set; }
                    public bool HasChild { get; set; }
                }
                SfTreeView<MusicAlbum> tree;
                string[] CheckedNodes = new string[] { "16","18" };
                List<MusicAlbum> Albums = new List<MusicAlbum>();
               protected override void OnInitialized()
               {
                    base.OnInitialized();
                    Albums.Add(new MusicAlbum
                 {
                   Id = 14,
                    HasChild = true,
                    Name = "MP3 Albums",
                    Expanded = true
                });
                 Albums.Add(new MusicAlbum
                {
                    Id = 15,
                    ParentId = 14,
                    Name = "Rock"
                });
                 Albums.Add(new MusicAlbum
                {
                     Id = 16,
                     Name = "Gospel",
                     ParentId = 14,
                 });
                Albums.Add(new MusicAlbum
                {
                     Id = 17,
                     ParentId = 14,
                     Name = "Latin Music"
                });
                Albums.Add(new MusicAlbum
                {
                    Id = 18,
                    ParentId = 14,
                    Name = "Jazz"
                 });
                }
             } 
            ]]></code>         
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckedNodesChanged">
            <summary>
            Gets or sets an event callback that is raised when the checked nodes changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.CssClass">
             <summary> 
             Gets or sets one or more CSS classes to customize the appearance of TreeView. 
             </summary> 
             <value> 
             Accepts a CSS class string separated by space to customize the appearance of TreeView. The default value is <c>String.Empty</c>. 
             </value> 
             <remarks> 
             Setting styles through CssClass will be reflected in the corresponding TreeView. 
             </remarks>
             <example> 
             A TreeView with custom class attribute.
             <code><![CDATA[ 
             <SfTreeView TValue="MusicAlbum" CssClass="e-custom e-tree">
             <TreeViewFieldsSettings TValue="MusicAlbum" Id="Id" DataSource="@Albums" Text="Name" ParentID="ParentId" HasChildren="HasChild" Expanded="Expanded" IsChecked="IsChecked"></TreeViewFieldsSettings>
            </SfTreeView>
             
               @code{
                public class MusicAlbum
                {
                    public int Id { get; set; }
                    public int? ParentId { get; set; }
                    public string Name { get; set; }
                    public bool Expanded { get; set; }
                    public bool? IsChecked { get; set; }
                    public bool HasChild { get; set; }
                }
                SfTreeView<MusicAlbum> tree;
                List<MusicAlbum> Albums = new List<MusicAlbum>();
               protected override void OnInitialized()
               {
                    base.OnInitialized();
                    Albums.Add(new MusicAlbum
                 {
                   Id = 14,
                    HasChild = true,
                    Name = "MP3 Albums",
                    Expanded = true
                });
                 Albums.Add(new MusicAlbum
                {
                    Id = 15,
                    ParentId = 14,
                    Name = "Rock"
                });
                 Albums.Add(new MusicAlbum
                {
                     Id = 16,
                     Name = "Gospel",
                     ParentId = 14,
                 });
                Albums.Add(new MusicAlbum
                {
                     Id = 17,
                     ParentId = 14,
                     Name = "Latin Music"
                });
                Albums.Add(new MusicAlbum
                {
                    Id = 18,
                    ParentId = 14,
                    Name = "Jazz"
                 });
                }
               }
                <style>
                .e-custom .e-tree {
                  padding: 10px 0;
                  font-weight: 800;
                }
                .custom.e-treeview .e-fullrow {
                  height: 200px;
                }
                </ style >
            ]]></code>         
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.Disabled">
            <summary>
            Gets or sets a value that indicates whether to enable or disable the TreeView component.
            </summary>
            <value> 
            <c>true</c>, if the TreeView component is disabled. The default value is <c>false</c>. 
            </value> 
            <remarks> 
            When set to true, the user interaction with the TreeView will be prevented. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.DropArea">
             <summary>
             Gets or sets the target in which the draggable element can be moved and dropped.
             </summary>
             <remarks> 
             By default, the draggable element movement occurs in the page.
             </remarks> 
             <example> 
             A TreeView with drop area target attribute.
             <code><![CDATA[ 
             <div class="treeParent">
                 <SfTreeView TValue="MusicAlbum" DropArea=".treeParent">
                     <TreeViewFieldsSettings TValue="MusicAlbum" Id="Id" DataSource="@Albums" Text="Name" ParentID="ParentId" HasChildren="HasChild" Expanded="Expanded" IsChecked="IsChecked"></TreeViewFieldsSettings>
                 </SfTreeView>
             <div>
               @code{
                public class MusicAlbum
                {
                    public int Id { get; set; }
                    public int? ParentId { get; set; }
                    public string Name { get; set; }
                    public bool Expanded { get; set; }
                    public bool? IsChecked { get; set; }
                    public bool HasChild { get; set; }
                }
                SfTreeView<MusicAlbum> tree;
                List<MusicAlbum> Albums = new List<MusicAlbum>();
               protected override void OnInitialized()
               {
                    base.OnInitialized();
                    Albums.Add(new MusicAlbum
                 {
                   Id = 14,
                    HasChild = true,
                    Name = "MP3 Albums",
                    Expanded = true
                });
                 Albums.Add(new MusicAlbum
                {
                    Id = 15,
                    ParentId = 14,
                    Name = "Rock"
                });
                 Albums.Add(new MusicAlbum
                {
                     Id = 16,
                     Name = "Gospel",
                     ParentId = 14,
                 });
                Albums.Add(new MusicAlbum
                {
                     Id = 17,
                     ParentId = 14,
                     Name = "Latin Music"
                });
                Albums.Add(new MusicAlbum
                {
                    Id = 18,
                    ParentId = 14,
                    Name = "Jazz"
                 });
                }
               }
                <style>
                .treeParent {
                  height: 200px;
                  width: 200px;
                 }   
                </ style > 
            ]]></code>         
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableHtmlSanitizer">
            <summary>
            Gets or sets whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads.
            </summary>
            <value>
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.
            </value>
            <remarks>
            The following component's property will be stored in browser local storage to persist component's state when page reloads.
            1. `SelectedNodes` - Represents the nodes that are selected in the TreeView component.
            2. `checkedNodes`  - Represents the nodes that are checked in the TreeView component.
            3. `expandedNodes` - Represents the nodes that are expanded in the TreeView component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableRtl">
            <summary>
            Gets or sets whether the right to left direction is enabled for TreeView component.
            </summary>
            <value>
            <c>true</c>, if the right to left direction is enabled for TreeView component. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandOn">
             <summary>
              Gets or sets the value that indicates the action on which the node expands or collapses.
             </summary> 
             <value>
             The default value is <c>DblClick</c>.
             </value>
             <remarks>
              The available actions:
              `Click` - The expand/collapse operation happens when you single-click on the node in desktop.
              `DblClick` - The expand/collapse operation happens when you double-click on the node in desktop.
              `None` - The expand/collapse operation will not happen.
              In mobile devices, the node expand/collapse action happens on single tap.
             </remarks>
             <example> 
             A TreeView with ExpandOn attribute. 
             Here ExpandOn attribute is set to single click.
             <code><![CDATA[ 
             <SfTreeView TValue="MusicAlbum" ExpandOn="ExpandAction.Click">
                <TreeViewFieldsSettings TValue="MusicAlbum" Id="Id" DataSource="@Albums" Text="Name" ParentID="ParentId" HasChildren="HasChild" Expanded="Expanded" IsChecked="IsChecked"></TreeViewFieldsSettings>
             </SfTreeView>
               @code{
                public class MusicAlbum
                {
                    public int Id { get; set; }
                    public int? ParentId { get; set; }
                    public string Name { get; set; }
                    public bool Expanded { get; set; }
                    public bool? IsChecked { get; set; }
                    public bool HasChild { get; set; }
                }
                SfTreeView<MusicAlbum> tree;
                List<MusicAlbum> Albums = new List<MusicAlbum>();
               protected override void OnInitialized()
               {
                    base.OnInitialized();
                    Albums.Add(new MusicAlbum
                 {
                   Id = 14,
                    HasChild = true,
                    Name = "MP3 Albums",
                    Expanded = true
                });
                 Albums.Add(new MusicAlbum
                {
                    Id = 15,
                    ParentId = 14,
                    Name = "Rock"
                });
                 Albums.Add(new MusicAlbum
                {
                     Id = 16,
                     Name = "Gospel",
                     ParentId = 14,
                 });
                Albums.Add(new MusicAlbum
                {
                     Id = 17,
                     ParentId = 14,
                     Name = "Latin Music"
                });
                Albums.Add(new MusicAlbum
                {
                    Id = 18,
                    ParentId = 14,
                    Name = "Jazz"
                 });
                }
              } 
            ]]></code>         
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandedNodes">
             <summary>
             Gets or sets the ID of expanded nodes in the TreeView component.
             </summary>
             <value> 
             Pass the node's ID as string array collection.
             </value> 
             <remarks> 
             Supports two-way binding. This property returns the expanded nodes ID in the TreeView component.
             </remarks> 
             <example> 
             A TreeView with expanded nodes.
             <code><![CDATA[ 
             <SfTreeView TValue="MusicAlbum" ShowCheckBox="true" @bind-ExpandedNodes="@ExpandedNodes">
             <TreeViewFieldsSettings TValue="MusicAlbum" Id="Id" DataSource="@Albums" Text="Name" ParentID="ParentId" HasChildren="HasChild" Expanded="Expanded" IsChecked="IsChecked"></TreeViewFieldsSettings>
            </SfTreeView>
             
               @code{
                public class MusicAlbum
                {
                    public int Id { get; set; }
                    public int? ParentId { get; set; }
                    public string Name { get; set; }
                    public bool Expanded { get; set; }
                    public bool? IsChecked { get; set; }
                    public bool HasChild { get; set; }
                }
                SfTreeView<MusicAlbum> tree;
                string[] ExpandedNodes = new string[] { "16","18" };
                List<MusicAlbum> Albums = new List<MusicAlbum>();
               protected override void OnInitialized()
               {
                    base.OnInitialized();
                    Albums.Add(new MusicAlbum
                 {
                   Id = 14,
                    HasChild = true,
                    Name = "MP3 Albums"
                });
                 Albums.Add(new MusicAlbum
                {
                    Id = 15,
                    ParentId = 14,
                    Name = "Rock"
                });
                 Albums.Add(new MusicAlbum
                {
                     Id = 16,
                     Name = "Gospel",
                     ParentId = 14,
                 });
                Albums.Add(new MusicAlbum
                {
                     Id = 17,
                     ParentId = 14,
                     Name = "Latin Music"
                });
                Albums.Add(new MusicAlbum
                {
                    Id = 18,
                    ParentId = 14,
                    Name = "Jazz"
                 });
                }
             } 
            ]]></code>         
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandedNodesChanged">
            <summary>
            Gets or sets an event callback that is raised when the expanded nodes changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.Fields">
            <summary>
            Gets or sets the data source and mapping fields to render TreeView nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.FullRowNavigable">
            <summary>
            Gets or sets the value that indicates whether the entire TreeView node will be navigate-able instead of text element.
            </summary>
            <value>
            'true' to make the entire TreeView node navigate-able; Otherwise 'false'. The default value is <c>false</c>.
            </value>
            <remarks>
            When this property is set to true, the navigation occurs when clicked on any part of the TreeView node. 
            Otherwise the navigation occurs while clicking on the TreeView node's text only.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.FullRowSelect">
            <summary>
            Gets or sets the value that indicates whether the entire row of the TreeView node gets selected by clicking a node.
            </summary>
            <value>
            'true' to select the entire node; otherwise,node's text section only selected. The default value is <c>true</c>.
            </value>
            <remarks>
            The entire tree node can be selectable if the property is set to true. Otherwise, the node's text section can be selected while select a node.
            </remarks>     
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.LoadOnDemand">
            <summary>
            Gets or sets a value that indicates whether child nodes will be rendered while expand and collapse of parent node instead of loading all the tree nodes initially.
            </summary>
            <value>
            'true' to load the child nodes dynamically on expand a parent node; Otherwise,'false'. The default value is <c>true</c>.
            </value>
            <remarks>
            By default, the load on demand (Lazy load) is set to true. So, all the child nodes are rendered dynamically while expanding a parent node. By disabling this property, all the child nodes are rendered on initial loading itself.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.SelectedNodes">
             <summary>
             Gets or sets the ID of selected nodes in the TreeView component.
             </summary>
             <value> 
             Pass the node's ID as string array collection.
             </value> 
             <remarks> 
             Supports two-way binding. This property returns the selected nodes ID in the TreeView component.
             </remarks> 
             <example> 
             A TreeView with expanded nodes.
             <code><![CDATA[ 
             <SfTreeView TValue="MusicAlbum" @bind-SelectedNodes="@SelectedNodes">
             <TreeViewFieldsSettings TValue="MusicAlbum" Id="Id" DataSource="@Albums" Text="Name" ParentID="ParentId" HasChildren="HasChild" Expanded="Expanded" IsChecked="IsChecked"></TreeViewFieldsSettings>
            </SfTreeView>
             
               @code{
                public class MusicAlbum
                {
                    public int Id { get; set; }
                    public int? ParentId { get; set; }
                    public string Name { get; set; }
                    public bool Expanded { get; set; }
                    public bool? IsChecked { get; set; }
                    public bool HasChild { get; set; }
                }
                SfTreeView<MusicAlbum> tree;
                string[] SelectedNodes = new string[] { "16","18" };
                List<MusicAlbum> Albums = new List<MusicAlbum>();
               protected override void OnInitialized()
               {
                    base.OnInitialized();
                    Albums.Add(new MusicAlbum
                 {
                   Id = 14,
                    HasChild = true,
                    Name = "MP3 Albums"
                });
                 Albums.Add(new MusicAlbum
                {
                    Id = 15,
                    ParentId = 14,
                    Name = "Rock"
                });
                 Albums.Add(new MusicAlbum
                {
                     Id = 16,
                     Name = "Gospel",
                     ParentId = 14,
                 });
                Albums.Add(new MusicAlbum
                {
                     Id = 17,
                     ParentId = 14,
                     Name = "Latin Music"
                });
                Albums.Add(new MusicAlbum
                {
                    Id = 18,
                    ParentId = 14,
                    Name = "Jazz"
                 });
                }
             } 
            ]]></code>         
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.SelectedNodesChanged">
            <summary>
            Gets or sets an event callback that is raised when the selected nodes changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ShowCheckBox">
            <summary>
            Gets or sets a value that indicates whether show checkboxes in each node of the TreeView.
            The checkbox displays next to the expand/collapse icon of the node.
            </summary>
            <value>
            'true' to show checkboxes on each tree view nodes; otherwise, 'false'. The default value is <c>false</c>.
            </value>
            <remarks>
            The property used to show or hide the checkboxes in tree node. The checkbox has tri-state behavior such as checked, unchecked, and indeterminate.
            The check/uncheck action can be performed either through checkbox click or pressing space key.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.SortOrder">
            <summary>
            Gets or sets a value that indicates whether the nodes are sorted in the ascending or descending order.
            </summary>
            <remarks>
            The available types of sort order are,
             `None` - The nodes are not sorted.
             `Ascending` - The nodes are sorted in the ascending order.
             `Descending` - The nodes are sorted in the descending order.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.HtmlAttributes">
            <summary>
            Gets or sets the HtmlAttributes for TreeView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.TreeViewTemplate">
            <summary>
            Gets or sets the custom item template of TreeView Node item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ID">
            <summary>
            Sets id attribute for the TreeView element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateAnimationProperties(Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings)">
            <summary>
            Specifies the Animation properties.
            </summary>
            <param name="animationSettings">"Specifies the animation settings".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.AddNodes(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Adds the collection of TreeView nodes based on target and index position. If the target node is not specified,
            then the nodes are added as children of the given parentID or in the root level of TreeView.
            </summary>
            <param name="nodes">A list of nodes to be added to the TreeView.</param>
            <param name="target">Specifies the target to which the nodes are added as children of the given parentID or in the root level of TreeView.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.BeginEdit(System.String)">
            <summary>
            Instead of clicking on the TreeView node for editing, we can enable it by using
            `BeginEdit` property. On passing the node ID or element through this property, the edit textBox
            will be created for the particular node thus allowing us to edit it.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.BeginEditAsync(System.String)">
            <summary>
            Editing can also be enabled by using the `BeginEditAsync` property, instead
            of clicking on the TreeView node. On passing the node ID or element through this property, the edit textbox
            will be created for the particular node thus allowing us to edit it.
            </summary>
            <param name="node">Specifies ID of TreeView node to be edited.</param>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckAll(System.String[])">
            <summary>
            Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes
            as argument to this method.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckAllAsync(System.String[])">
            <summary>
            Checks all the unchecked nodes. Specific nodes can also be checked by passing an array of unchecked nodes
            as argument to this method.
            </summary>
            <param name="nodesId">"Specifies the NodeId to be checked".</param>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ClearState">
            <summary>
            This method clears the Expanded, Selected and Checked interaction states in the TreeView. This method is useful when changing the data source dynamically.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ClearStateAsync">
            <summary>
            This method clears the Expanded, Selected and Checked interaction states in the TreeView. This method is useful when changing the data source dynamically.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CollapseAll(System.String[])">
            <summary>
            Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.
            </summary>
            <param name="nodesId">"Specifes the NodeID".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CollapseAllAsync(System.String[])">
            <summary>
            Collapses all the expanded TreeView nodes. Specific nodes can be collapsed by passing an array of nodes as argument to this method.
            </summary>
            <param name="nodesId">"Specifes the NodeID to be collapsed".</param>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DisableNodes(System.String[])">
            <summary>
            Disables the collection of nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DisableNodesAsync(System.String[])">
            <summary>
            Disables the collection of nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID to be disabled.</param>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableNodes(System.String[])">
            <summary>
            Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableNodesAsync(System.String[])">
            <summary>
            Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID to be enabled.</param>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnsureVisible(System.String)">
            <summary>
            Ensures visibility of the TreeView node by using node ID or node element.
            When many TreeView nodes are present and we need to find a particular node, `EnsureVisible` property
            helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnsureVisibleAsync(System.String)">
            <summary>
            Ensures visibility of the TreeView node by using the node ID or node element.
            When many TreeView nodes are present and a particular node has to be found, `EnsureVisible` property
            brings the node to visibility by expanding the TreeView and scrolling to the specific node.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandAll(System.String[])">
            <summary>
            Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandAllAsync(System.String[])">
            <summary>
            Expands all the collapsed TreeView nodes. Specific nodes can be expanded by passing the array of collapsed nodes.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetAllCheckedNodes">
            <summary>
            Gets all the checked nodes including child, whether it is loaded or not.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetDisabledNodes">
            <summary>
            Gets all the disabled nodes including child, whether it is loaded or not.
            </summary>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetDisabledNodesAsync">
            <summary>
            Gets all the disabled nodes including child, whether it is loaded or not.
            </summary>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetNode(System.String)">
            <summary>
            Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Return TreeData".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetTreeData(System.String)">
            <summary>
             Gets the updated data source of TreeView after performing some operation like drag and drop, node editing,
            node selecting/unselecting, node expanding/collapsing, node checking/unchecking, adding and removing node.
             When the ID of TreeView node is passed as arguments for this method then it will return the updated data source
            of the corresponding node otherwise it will return the entire updated data source of TreeView.
             The updated data source also contains the custom attributes if specified in data source.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Return TreeData".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.RemoveNodes(System.String[])">
            <summary>
            Removes the collection of TreeView nodes by passing the array of node details as argument to this method.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UncheckAll(System.String[])">
            <summary>
            Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes
            as argument to this method.
            </summary>
            <returns>"Task".</returns>
            <param name="nodesId">"Specifies the Id of the node".</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UncheckAllAsync(System.String[])">
            <summary>
            Unchecks all the checked nodes. Specific nodes can also be unchecked by passing array of checked nodes
            as argument to this method.
            </summary>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
            <param name="nodesId">"Specifies the Id of the node to be unchecked".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateNode(System.String,System.String)">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="newText">Specifies the new text of TreeView node.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.Refresh">
            <summary>
            Applies all the pending property changes and render the component again.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.RefreshNode(System.String,System.Collections.Generic.List{`0})">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="newData">Specifies the new Data of TreeView node.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.RefreshNodeAsync(System.String,System.Collections.Generic.List{`0})">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="target">Specifies the ID of TreeView node to be refreshed.</param>
            <param name="newData">Specifies the new Data of TreeView node.</param>
            <returns>A System.Threading.Tasks.Task that represents any asynchronus action</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetRootElement">
            <summary>
            Returns the route element reference of the component.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.MoveNodes(System.String[],System.String,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="sourceNodes">Specifies the array of TreeView nodes ID.</param>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="index">Specifies the index to place the moved nodes in the target element.</param>
            <param name="preventTargetExpand">If set to true, the target parent node will be prevented from auto expanding.</param>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse">
            <summary>
            Specifies the animation to appear while collapsing the TreeView item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse.Dispose(System.Boolean)">
            <summary>
            Dispose the Expand animation value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewAnimationExpand">
            <summary>
            Specifies the animation to appear while expanding the TreeView item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationExpand.OnInitializedAsync">
            <summary>
             Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationExpand.Dispose(System.Boolean)">
            <summary>
            Dispose the Expand animation value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewEvents`1">
            <summary>
            The TreeView allows us to control the component by using events.
            </summary>
            <typeparam name="TValue">"Tvalue paramter".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnActionFailure">
            <summary>
            Gets or sets an event callback that is raised while any TreeView action failed to fetch the desired results.
            </summary>
            <remarks>
            You can capture this failure and throw error message for users in required cases.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.Created">
            <summary>
            Gets or sets an event callback that is raised when the TreeView component is created successfully.
            </summary>
            <remarks>
            You can perform required actions during this component creation.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.DataBound">
            <summary>
            Gets or sets an event callback that is raised when data source is populated in the TreeView.
            </summary>
            <remarks>
            The data can be modified or updated at this time when the component is updated with data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.DataSourceChanged">
            <summary>
            Gets or sets an event callback that is raised when data source is changed in the TreeView. The data source will be changed after performing some operation like
            drag and drop, node editing, adding and removing node.
            </summary>
            <remarks>
            The data source change can be detected and the updated data can be fetched or stored in required cases.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.Destroyed">
            <summary>
            Gets or sets an event callback that is raised when the TreeView control is destroyed successfully.
            </summary>
            <remarks>
             Required actions can be performed once the component is destroyed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeRender">
            <summary>
            Gets or sets an event callback that is raised before the TreeView node is appended to the TreeView element.
            </summary>
            <remarks>
             A specific node can be customized at the time of rendering using this event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnKeyPress">
            <summary>
            Gets or sets an event callback that is raised when key press is successful. 
            </summary>
            <remarks>
             Helps to customize the operations at key press.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeChecked">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node is checked/unchecked successfully.
            </summary>
            <remarks>
             The details of checked/unchecked node can be fetched and required actions can be performed using this event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeChecking">
            <summary>
            Gets or sets an event callback that is raised before the TreeView node is to be checked/unchecked.
            </summary>
            <remarks>
            Check/uncheck action can be prevented for specific nodes in required cases.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeClicked">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node is clicked successfully.
            </summary>
            <remarks>
            Required actions can be performed on node click using this event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeCollapsed">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node collapses successfully.
            </summary>
            <remarks>
            Helps to identify that a node is collapsed and the collapsed node details can be fetched in this event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeCollapsing">
            <summary>
            Gets or sets an event callback that is raised before the TreeView node collapses.
            </summary>
            <remarks>
            Collapse action can be prevented for specific nodes in required cases.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeDragStart">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node drag (move) starts.
            </summary>
            <remarks>
            Helps to identify the dragged node details.Dragging can be prevented for specific node in required cases.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeDragStop">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node dragging (move) stops.
            </summary>
            <remarks>
            Helps to identify the node drag stop action.Dropped target can be fetched and used to perform required actions.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeDragged">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node is dragged.
            </summary>
            <remarks>
            Helps to identify the node drag action.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeDropped">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node is dropped on target element successfully.
            </summary>
            <remarks>
            Helps to identify the node drop action and the dropped index/target can be fetched to perform required actions.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeEdited">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node is renamed successfully.
            </summary>
            <remarks>
            Helps to identify that the node is edited successfully and the new edited text can be obtained here.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeEditing">
            <summary>
            Gets or sets an event callback that is raised before the TreeView node is renamed.
            </summary>
            <remarks>
            Node editing can be prevented for specific nodes using this event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeExpanded">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node expands successfully.
            </summary>
            <remarks>
            Helps to identify that a node is expanded and the expanded node details can be fetched using this event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeExpanding">
            <summary>
            Gets or sets an event callback that is raised before the TreeView node is to be expanded.
            </summary>
            <remarks>
            Expand action can be prevented for specific nodes in required cases using this event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeSelected">
            <summary>
            Gets or sets an event callback that is raised when the TreeView node is selected/unselected successfully.
            </summary>
            <remarks>
            Selected node details can be obtained here and updated to required places using this event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeSelecting">
            <summary>
            Gets or sets an event callback that is raised before the TreeView node is selected/unselected.
            </summary>
            <remarks>
            A specific node selection can be prevented using this event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewFieldChild`1">
            <summary>
             A class used for configuring the TreeView child element fields properties.
            </summary>
            <typeparam name="TValue">"Specifies the Tvalue paramater".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewFieldChild`1.ChildContent">
            <summary>
            Specifies the Treeview child content.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewFieldChild`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1">
            <summary>
             A class used for configuring the TreeView fields setting properties.
            </summary>
            <typeparam name="TValue">"Specifies the TValue parameter".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.ChildContent">
            <summary>
            Specifies the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.DataSourceChanged">
            <summary>
            Invokes when data source changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings">
            <summary>
            A class used for configuring the TreeView animation properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent">
            <exclude/>
            <summary>
            Child Content for the Treeview Animation Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.Collapse">
            <summary>
            Specifies the animation to appear when collapsing the TreeView item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.Expand">
            <summary>
            Specifies the animation to appear when expanding the TreeView item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewTemplates`1">
            <summary>
            The TreeView component allows you to customize the look of TreeView nodes using Templates.
            </summary>
            <typeparam name="TValue">"Specifies the Tvalue".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewTemplates`1.NodeTemplate">
            <summary>
            Specifies the NodeTemplate.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewTemplates`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarEvents.Clicked">
            <summary>
            The event will be fired on clicking the Toolbar elements.
            </summary>
            <remarks>
            You can get the clicked toolbar element details.
            </remarks>
            <example>
            In the below code example, the clicked toolbar element text can be obtained from the <c>Clicked</c> event.
            <code><![CDATA[
            <SfToolbar>
                <ToolbarEvents Clicked="ToolbarClicked"></ToolbarEvents>
                <ToolbarItems>
                    <ToolbarItem Text="Cut" TooltipText="Cut"></ToolbarItem>
                    <ToolbarItem Text="Copy" TooltipText="Copy"></ToolbarItem>
                    <ToolbarItem Text="Paste" TooltipText="Paste"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            @code {
                public void ToolbarClicked(ClickEventArgs args)
                    string clickedText = args.Item.Text;
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarEvents.Created">
            <summary>
            The event will be fired when the control is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarEvents.Destroyed">
            <summary>
            The event will be fired when the control gets destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
    </members>
</doc>
