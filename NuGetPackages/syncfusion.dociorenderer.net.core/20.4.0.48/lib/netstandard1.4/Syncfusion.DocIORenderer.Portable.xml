<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.DocIORenderer.Portable</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.DocIORenderer.DocIORenderer" -->
        <member name="F:Syncfusion.DocIORenderer.DocIORenderer.m_settings">
            <summary>
            converter settings to the document
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORenderer.m_flag">
            <summary>
            The m_flag
            </summary>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORenderer.PageSettings">
            <summary>
            Gets the page settings.
            </summary>
            <value>The page settings.</value>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORenderer.Settings">
            <summary>
            Gets or sets <see cref="!:Syncfusion.DocIORenderer.DocToPDFConverterSettings"/> instance that represents the converter settings which need to be considered while performing Word to PDF conversion.
            </summary>
            <example>
            This example converts the specified Word Document in to PDF Document with converter settings.
            <code lang="C#">
            	//Creates a new Word document
            	WordDocument wordDocument = new WordDocument();
            	//Add a section into the word document
            	IWSection section = wordDocument.AddSection();
            	//Add a paragraph into the section
            	IWParagraph paragraph = section.AddParagraph();
            	//Add a text into the paragraph
            	paragraph.AppendText("First Chapter1");
            	//Apply style for the text
            	paragraph.ApplyStyle(BuiltinStyle.Heading1);
            	paragraph.AppendText("First Chapter2");
            	paragraph.ApplyStyle(BuiltinStyle.Heading2);
            	paragraph.AppendText("First Chapter3");
            	paragraph.ApplyStyle(BuiltinStyle.Heading3);
            	//Instantiation of DocIORenderer for Word to PDF conversion  
            	DocIORenderer render = new DocIORenderer();  
            	//Sets ExportBookmarks for preserving Word document headings as PDF bookmarks
            	render.Settings.ExportBookmarks = Syncfusion.DocIO.ExportBookmarkType.Headings; 
            	//Converts Word document into PDF document  
            	PdfDocument pdfDocument = render.ConvertToPDF(wordDocument);
            	//Saves the PDF file  
            	MemoryStream outputStream = new MemoryStream();  
            	pdfDocument.Save(outputStream);  
            	//Releases all resources used by the object.  
            	render.Dispose();  
            	//Closes the instance of document objects  
            	pdfDocument.Close();  
            	wordDocument.Close();                                                                                   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORenderer.IsCanceled">
            <summary>
            Gets a value indicating whether this conversion has been canceled.
            </summary>
            <value>
            <c>true</c> if this conversion is canceled; otherwise, <c>false</c>.
            </value>        
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORenderer.IsTrial">
            <summary>
            Gets or sets a value indicating whether the PDF document was generated using web service.
            </summary>
            <value>
            <c>true</c> if the PDF document was generated using web service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:DocToPDFConverter"/> class.
            </summary>
            <remarks>This constructor is supported on Windows Forms, WPF, ASP.NET and ASP.NET MVC platforms only. </remarks>
             <example>
            This example converts the specified Word Document in to PDF Document.
            <code lang="C#">
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument("Template.docx", FormatType.Docx);
                //Instantiation of DocToPDFConverter for Word to PDF conversion
                DocToPDFConverter converter = new DocToPDFConverter();
                //Converts Word document into PDF document
                PdfDocument pdfDocument = converter.ConvertToPDF(wordDocument);
               //Saves the PDF file
                pdfDocument.Save("WordtoPDF.pdf");
                //Releases all resources used by the object.
                converter.Dispose();
                //Closes the instance of document objects
                pdfDocument.Close(true);
                wordDocument.Close();
            </code>
            <code lang="VB">
                'Loads an existing Word document
                Dim wordDocument As New WordDocument("Template.docx", FormatType.Docx)
                'Instantiation of DocToPDFConverter for Word to PDF conversion
                Dim converter As New DocToPDFConverter()
               'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = converter.ConvertToPDF(wordDocument)
               'Saves the PDF file
                pdfDocument.Save("WordtoPDF.pdf");
                'Releases all resources used by the object.
                converter.Dispose();
                'Closes the instance of document objects
                pdfDocument.Close(true);
                wordDocument.Close();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.Close">
            <summary>
            Release the resources occupied by this <see cref="!:DocToPDFConverter"/> instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.DocIORenderer.DocIORenderer.Dispose" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.DocIORenderer.DocIORenderer.ConvertToPDF(Syncfusion.DocIO.DLS.WordDocument)" -->
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.UpdateTrackChangesBalloonsCount(Syncfusion.DocIO.DLS.Rendering.DocumentLayouter)">
            <summary>
            Check and set balloon count for track changes.
            </summary>
            <param name="layouter"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.DocIORenderer.DocIORenderer.ConvertToPDF(System.IO.Stream)" -->
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.CreateDocument">
            <summary>
            Creates the PDF document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.AddSection(Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Adds the section.
            </summary>
            <param name="pageSetup">The page setup.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.InitPagesSettings(Syncfusion.DocIO.DLS.Rendering.DocumentLayouter)">
            <summary>
            Sets the pages settings.
            </summary>
            <param name="layouter">The layouter.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.AddDocumentProperties(Syncfusion.DocIO.DLS.BuiltinDocumentProperties)">
            <summary>
            Adds the document properties.
            </summary>
            <param name="docProperties">The doc properties.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.AddHyperLinks(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Syncfusion.Drawing.RectangleF}})">
            <summary>
            Adds the hyper links.
            </summary>
            <param name="hyperlinks">The hyperlinks.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.AddBookmarks(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Syncfusion.DocIO.DLS.Rendering.DocumentLayouter.BookmarkHyperlink}})">
            <summary>
            Converts the TOC into Bookmark.
            </summary>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.HasParentNode(System.Int32@,System.Int32[],System.Int32)">
            <summary>
            Getting Parent Node for the levels of the Bookmarks
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.DrawDirectWordToPDF(Syncfusion.DocIO.DLS.Rendering.DocumentLayouter)">
            <summary>
            Draw To PDF
            </summary>
            <param name="layouter">The DocumentLayouter</param>
            <returns>PdfDocument</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.ShowWarnings">
            <summary>
            Shows the warnings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.DocIORenderer.CreateWarningElmentNames">
            <summary>
            Create warning element names into the list
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.DocIORenderer.Extensions">
            <summary>
            Implemented alternative method to perform autofit for table
            </summary>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.AutoFit(Syncfusion.DocIO.DLS.WTable,Syncfusion.DocIO.DLS.AutoFitType)">
            <summary>
            Resizes the table based on the specified <see cref="T:Syncfusion.DocIO.DLS.AutoFitType"/>.
            </summary>
            <param name="autoFitType">The <see cref="T:Syncfusion.DocIO.DLS.AutoFitType"/> member that specifies the type of auto fit layout of table.</param>
            <remarks>DocIO can resize the table based on the content of the table cells or the width of the document window. 
            You can also use this method to turn off AutoFit so that the table size is fixed, regardless of cell contents or window width.
            Setting the AutoFit behavior to FitToContent or FitToWindow sets the <see cref="P:Syncfusion.DocIO.DLS.RowFormat.IsAutoResized"/> property to True if it's currently False. 
            Likewise, setting the AutoFit behavior to FixedColumnWidth sets the <see cref="P:Syncfusion.DocIO.DLS.RowFormat.IsAutoResized"/> property to False if it's currently True.</remarks>
            <example>The following example illustrates how to append html text to the paragraph.
            <code language = "C#">
            //Loads the template document
            WordDocument document = new WordDocument("Sample.docx");
            //Accesses the instance of the first section in the Word document 
            WSection section = document.Sections[0];
            //Accesses the instance of the first table in the section 
            WTable table = section.Tables[0] as WTable;
            //Auto fits the table with respect to window.
            table.AutoFit(AutoFitType.FitToWindow);
            //Saves and closes the document instance
            document.Save("TableAutoFit.docx");
            document.Close();
            </code>
            <code language = "VB">
            Private Sub SurroundingSub()
            Dim document As WordDocument = New WordDocument("Sample.docx")
            Dim section As WSection = document.Sections(0)
            Dim table As WTable = TryCast(section.Tables(0), WTable)
            table.AutoFit(AutoFitType.FitToWindow)
            document.Save("TableAutoFit.docx")
            document.Close()
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateTableOfContents(Syncfusion.DocIO.DLS.WordDocument)">
            <summary>
            Update Table of contents in the document.
            </summary>
            <remarks>
            <para>Updating TOC makes use of our Word to PDF layouting engine which may lead to the updation of incorrect page number due to its limitations. Also use of WOrd to PDF layout engine may lead to take some considerable amount of performance to update the page numbers.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update a TOC in an existing word document.</para>
            <code lang="C#">
              //Open an input word template
              WordDocument document = new WordDocument(@"Template.docx");
              //Update the table of contents.
              document.UpdateTableOfContents();
              //Save and close the Word document instance.
              document.Save("Sample.docx", FormatType.Docx);
              document.Close();
            </code>
            <code lang="VB">
              'Open an input word template
              Dim document As New WordDocument("Template.docx")
              'Update the table of contents.
              document.UpdateTableOfContents()
              'Save and close the Word document instance.
              document.Save("Sample.docx", FormatType.Docx)
              document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateWordCount(Syncfusion.DocIO.DLS.WordDocument,System.Boolean)">
            <summary>
            Updates Paragraphs count, Word count and Character count. Updates page count if performLayout set to true using Word to PDF layout engine.
            </summary> 
            <param name="performLayout">Set to <b>true</b> to update the page count of the document using Word to PDF layout engine; otherwise, <b>false</b>.</param>
            <example>
            <para>The following code example demonstrates how to update Page count, Paragraphs count, Word count and Character count in the document.</para>
            <code lang="C#">
                //Open an input word template from stream through constructor of `WordDocument` class
                FileStream inputStream = new FileStream(@"Template.docx", FileMode.Open, FileAccess.Read);
                WordDocument document = new WordDocument(inputStream, FormatType.Automatic);
                //Update the Page count, Paragraphs count, Word count and Character count in the document
                document.UpdateWordCount(true);
                FileStream outputStream = new FileStream(@"Sample.docx", FileMode.Create);
                //Save and close the Word document instance.
                document.Save(outputStream, FormatType.Docx);
                document.Close();
            </code>
            <code lang="VB">
                'Open an input word template
                Dim inputStream As FileStream = New FileStream("Template.docx", FileMode.Open, FileAccess.Read)
                Dim document As WordDocument = New WordDocument(inputStream, FormatType.Automatic)
                'Update the Page count, Paragraphs count, Word count and Character count in the document.
                document.UpdateWordCount(True)
                Dim outputStream As FileStream = New FileStream("Sample.docx", FileMode.Create)
                'Save and close the Word document instance.
                document.Save(outputStream, FormatType.Docx)
                document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateDocumentFields(Syncfusion.DocIO.DLS.WordDocument,System.Boolean)">
            <summary>
            Updates fields present in the Word document.
            </summary>
            <param name="performLayout">Set to <b>true</b> to update the Page, NumPage and PageRef fields in the Word document using Word to PDF layouting engine; otherwise, <b>false</b>.</param>
            <remarks>
            <para>Updating of NUMPAGES field and Cross Reference field with Page number and Paragraph number options are not supported in Silverlight, WinRT, Universal and Windows Phone platforms.</para>
            <para>Currently group shapes, drawing canvas, and table auto resizing are not supported in Word to PDF lay outing, and this may lead to update incorrect page number and total number of pages.</para>
            <para>While updating NUMPAGES field and Cross Reference field with Page number and Paragraph number options uses makes use of our Word to PDF layouting engine which may lead to take some considerable amount of performance to update the above mentioned fields.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update the fields present in Word document.</para>
            <code lang="C#">
              //Load an existing Word document into DocIO instance 
              WordDocument document = new WordDocument("Input.docx", FormatType.Docx);
              //Updates the fields present in a document.
              document.UpdateDocumentFields(true);
              document.Save("Result.docx", FormatType.Docx);
              document.Close();
            </code>
            <code lang="VB">
              'Load an existing Word document into DocIO instance 
              Dim document As New WordDocument("Input.docx", FormatType.Docx)
              'Updates the fields present in a document.
              document.UpdateDocumentFields(True)
              document.Save("Result.docx", FormatType.Docx)
              document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.SaveAsImage(Syncfusion.DocIO.DLS.WChart)">
            <summary>
            Save the chart as image.
            </summary>
            <returns> An <see cref="T:System.IO.Stream"/> that represent specified chart as image.</returns>
            <example>
            <code lang="CS">
            //Open the file as Stream.
            using (FileStream docStream = new FileStream("Template.docx", FileMode.Open))
            {
                 //Load file stream into Word document.
                 using (WordDocument wordDocument = new WordDocument(docStream, Syncfusion.DocIO.FormatType.Automatic))
                 {
                     //Get the first paragraph from the section. 
                     WParagraph paragraph = wordDocument.LastSection.Paragraphs[0];
                     //Get the chart element from the paragraph.
                     WChart chart = paragraph.ChildEntities[0] as WChart;
                     //Create an instance of DocIORenderer.
                     using (DocIORenderer renderer = new DocIORenderer())
                     {
                        //Convert chart to an image.
                        using (Stream stream = chart.SaveAsImage())
                        {
                            //Create the output image file stream. 
                            using (FileStream fileStreamOutput = File.Create("ChartToImage.jpeg"))
                            {
                                //Copies the converted image stream into created output stream.
                                stream.CopyTo(fileStreamOutput);
                            }
                        }
                     }
                 }
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.AutoFit(Syncfusion.DocIO.DLS.IWTable,Syncfusion.DocIO.DLS.AutoFitType)">
            <summary>
            Resizes the table based on the specified <see cref="T:Syncfusion.DocIO.DLS.AutoFitType"/>.
            </summary>
            <param name="autoFitType">The <see cref="T:Syncfusion.DocIO.DLS.AutoFitType"/> member that specifies the type of auto fit layout of table.</param>
            <remarks>DocIO can resize the table based on the content of the table cells or the width of the document window. 
            You can also use this method to turn off AutoFit so that the table size is fixed, regardless of cell contents or window width.
            Setting the AutoFit behavior to FitToContent or FitToWindow sets the <see cref="P:Syncfusion.DocIO.DLS.RowFormat.IsAutoResized"/> property to True if it's currently False. 
            Likewise, setting the AutoFit behavior to FixedColumnWidth sets the <see cref="P:Syncfusion.DocIO.DLS.RowFormat.IsAutoResized"/> property to False if it's currently True.</remarks>
            <example>The following example illustrates how to append html text to the paragraph.
            <code language = "C#">
            //Loads the template document
            WordDocument document = new WordDocument("Sample.docx");
            //Accesses the instance of the first section in the Word document 
            WSection section = document.Sections[0];
            //Accesses the instance of the first table in the section 
            IWTable table = section.Tables[0];
            //Auto fits the table with respect to window.
            table.AutoFit(AutoFitType.FitToWindow);
            //Saves and closes the document instance
            document.Save("TableAutoFit.docx");
            document.Close();
            </code>
            <code language = "VB">
            Private Sub SurroundingSub()
            Dim document As WordDocument = New WordDocument("Sample.docx")
            Dim section As WSection = document.Sections(0)
            Dim table As IWTable = section.Tables(0)
            table.AutoFit(AutoFitType.FitToWindow)
            document.Save("TableAutoFit.docx")
            document.Close()
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateTableOfContents(Syncfusion.DocIO.DLS.IWordDocument)">
            <summary>
            Update Table of contents in the document.
            </summary>
            <remarks>
            <para>Updating TOC makes use of our Word to PDF layouting engine which may lead to the updation of incorrect page number due to its limitations. Also use of WOrd to PDF layout engine may lead to take some considerable amount of performance to update the page numbers.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update a TOC in an existing word document.</para>
            <code lang="C#">
              //Open an input word template
              IWordDocument document = new WordDocument(@"Template.docx");
              //Update the table of contents.
              document.UpdateTableOfContents();
              //Save and close the Word document instance.
              document.Save("Sample.docx", FormatType.Docx);
              document.Close();
            </code>
            <code lang="VB">
              'Open an input word template
              Dim document As IWordDocument = New WordDocument("Template.docx")
              'Update the table of contents.
              document.UpdateTableOfContents()
              'Save and close the Word document instance.
              document.Save("Sample.docx", FormatType.Docx)
              document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateWordCount(Syncfusion.DocIO.DLS.IWordDocument,System.Boolean)">
            <summary>
            Updates Paragraphs count, Word count and Character count. Updates page count if performLayout set to true using Word to PDF layout engine.
            </summary> 
            <param name="performLayout">Set to <b>true</b> to update the page count of the document using Word to PDF layout engine; otherwise, <b>false</b>.</param>
            <example>
            <para>The following code example demonstrates how to update Page count, Paragraphs count, Word count and Character count in the document.</para>
            <code lang="C#">
                //Open an input word template from stream through constructor of `WordDocument` class
                FileStream inputStream = new FileStream(@"Template.docx", FileMode.Open, FileAccess.Read);
                IWordDocument document = new WordDocument(inputStream, FormatType.Automatic);
                //Update the Page count, Paragraphs count, Word count and Character count in the document
                document.UpdateWordCount(true);
                FileStream outputStream = new FileStream(@"Sample.docx", FileMode.Create);
                //Save and close the Word document instance.
                document.Save(outputStream, FormatType.Docx);
                document.Close();
            </code>
            <code lang="VB">
                'Open an input word template
                Dim inputStream As FileStream = New FileStream("Template.docx", FileMode.Open, FileAccess.Read)
                Dim document As IWordDocument = New WordDocument(inputStream, FormatType.Automatic)
                'Update the Page count, Paragraphs count, Word count and Character count in the document.
                document.UpdateWordCount(True)
                Dim outputStream As FileStream = New FileStream("Sample.docx", FileMode.Create)
                'Save and close the Word document instance.
                document.Save(outputStream, FormatType.Docx)
                document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Extensions.UpdateDocumentFields(Syncfusion.DocIO.DLS.IWordDocument,System.Boolean)">
            <summary>
            Updates fields present in the document.
            </summary>
            <param name="performLayout">Set to <b>true</b> to update the Page, NumPage and PageRef fields in the Word document using Word to PDF layouting engine; otherwise, <b>false</b>.</param> 
            <remarks>
            <para>Updating of NUMPAGES field and Cross Reference field with Page number and Paragraph number options are not supported in Silverlight, WinRT, Universal and Windows Phone platforms.</para>
            <para>Currently group shapes, drawing canvas, and table auto resizing are not supported in Word to PDF lay outing, and this may lead to update incorrect page number and total number of pages.</para>
            <para>While updating NUMPAGES field and Cross Reference field with Page number and Paragraph number options uses makes use of our Word to PDF layouting engine which may lead to take some considerable amount of performance to update the above mentioned fields.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update the fields present in Word document.</para>
            <code lang="C#">
              //Load an existing Word document into DocIO instance 
              IWordDocument document = new WordDocument("Input.docx", FormatType.Docx);
              //Updates the fields present in a document.
              document.UpdateDocumentFields(true);
              document.Save("Result.docx", FormatType.Docx);
              document.Close();
            </code>
            <code lang="VB">
              'Load an existing Word document into DocIO instance 
              Dim document As IWordDocument = New WordDocument("Input.docx", FormatType.Docx)
              'Updates the fields present in a document.
              document.UpdateDocumentFields(True)
              document.Save("Result.docx", FormatType.Docx)
              document.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.CreateFont(System.IO.Stream,System.String,System.Single,Syncfusion.Drawing.FontStyle)">
            <summary>
            We are using this method to add the stream to the FontExtension typeFaceCache
            </summary>
            <param name="stream"></param>
            <param name="fontName"></param>
            <param name="fontSize"></param>
            <param name="fontStyle"></param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetFontFamily(System.String,System.Single)">
            <summary>
            Gets a new FontFamily object with specified name and font size.
            </summary>
            <param name="name">Represent a name of FontFamily.</param>
            <param name="fontSize">Represent a font size of FontFamily.</param>
            <returns>Returns a newly created FontFamily object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetBitmap">
            <summary>
            Gets a new Bitmap object.
            </summary>
            <returns>Returns a new Bitmap object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetBitmap(System.Int32,System.Int32)">
            <summary>
            Gets a new Bitmap object with specified width and height.
            </summary>
            <param name="width">Represents a width of Bitmap.</param>
            <param name="height">Represents a height of Bitmap.</param>
            <returns>Returns a new Bitmap object with specified width and height.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetGraphics(Syncfusion.Drawing.DocIOHelper.IImage)">
            <summary>
            Gets a Graphics of with specified image.
            </summary>
            <param name="image">Represents a image that we need to gets a graphics.</param>
            <returns>Returns a Graphics of with specified image.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetSolidBrush(Syncfusion.Drawing.Color)">
            <summary>
            Gets a new SolidBrush object with specified color.
            </summary>
            <param name="color">Represents a color of SolidBrush.</param>
            <returns>Returns a new SolidBrush object with specified color.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetTextureBrush(Syncfusion.Drawing.DocIOHelper.IImage,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.DocIOHelper.IImageAttributes)">
            <summary>
            Gets a new TextureBrush obejact with specified image.
            </summary>
            <param name="image">Represents an image which specified in TextureBrush</param>
            <param name="bounds">Represents rectangle bounds</param>
            <param name="imageAttributes">Represents image attributes</param>
            <returns>Returs a new TextureBrush object with specified Image</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetHatchBrush(Syncfusion.Drawing.HatchStyle,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color)">
            <summary>
            Gets a new HatchBrush object with specified HatchStyle and color.
            </summary>
            <param name="hatchstyle">Represents a HatchStyle of HatchBrush.</param>
            <param name="foreColor">Represents a fore color of HatchBrush.</param>
            <param name="backColor">Represents a back color of HatchBrush.</param>
            <returns>Returns a new HatchBrush object with specified HatchStyle and color.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetGraphicsPath">
            <summary>
            Gets a new GraphicsPath object.
            </summary>
            <returns>Returns a new GraphicsPath object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetPen(Syncfusion.Drawing.Color)">
            <summary>
            Gets a new Pen object with specified color.
            </summary>
            <param name="color">Represents a color of Pen.</param>
            <returns>Returns a new Pen object with specified color.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetPen(Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Gets a new Pen object with specified color and width.
            </summary>
            <param name="color">Represents a color of Pen.</param>
            <param name="width">Represents a width of Pen.</param>
            <returns>Returns a new Pen object with specified color and width.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.ApplyScale(Syncfusion.Drawing.Matrix,System.Single,System.Single)">
            <summary>
            Applies the specified scale vector to provided Matrix by prepending the scale vector.
            </summary>
            <param name="matrix">Represents a Matrix that we need to scale.</param>
            <param name="x">The value by which to scale this Matrix in the x-axis direction.</param>
            <param name="y">The value by which to scale this Matrix in the y-axis direction.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.MultiplyMatrix(Syncfusion.Drawing.Matrix,Syncfusion.Drawing.Matrix,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Multiplies this Matrix by the specified Matrix by prepending the specified Matrix.
            </summary>
            <param name="srcMatrix">Represents a Matrix to apply.</param>
            <param name="matrix">The Matrix by which this Matrix is to be multiplied.</param>
            <param name="order">The MatrixOrder that represents the order of the multiplication.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.TranslateMatrix(Syncfusion.Drawing.Matrix,System.Single,System.Single,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Applies the specified translation vector to this Matrix by prepending the translation vector.
            </summary>
            <param name="matrix">Represents a Matrix to apply.</param>
            <param name="offsetX">The x value by which to translate this Matrix.</param>
            <param name="offsetY">The y value by which to translate this Matrix.</param>
            <param name="order">A MatrixOrder that specifies the order (append or prepend) in which the translation is applied to this Matrix.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.RotateMatrix(Syncfusion.Drawing.Matrix,System.Single,Syncfusion.Drawing.PointF,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Applies a clockwise rotation about the specified point to this Matrix by prepending the rotation.
            </summary>
            <param name="matrix">Represents a Matrix to apply.</param>
            <param name="angle">The angle of the rotation, in degrees.</param>
            <param name="point">A PointF that represents the center of the rotation.</param>
            <param name="order">A MatrixOrder that specifies the order (append or prepend) in which the rotation is applied.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetImageAttributes">
            <summary>
            Gets a new ImageAttributes object.
            </summary>
            <returns>Returns a new ImageAttributes object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetColorMatrix(System.Single[][])">
            <summary>
            Gets a new ColorMatrix object with specified color matrix.
            </summary>
            <param name="newColorMatrix">Represents a color of matrix.</param>
            <returns>Returns new ColorMatrix object with specified color matrix.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetColorMatrix">
            <summary>
            Gets a new ColorMatrix object.
            </summary>
            <returns>Returns new ColorMatrix object.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.CreateImageFromStream(System.IO.MemoryStream)">
            <summary>
            Create a Image from specified image stream.
            </summary>
            <param name="stream">Represent a image stream.</param>
            <returns>Returns a Image from specified image stream.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.HasBitmap(Syncfusion.Drawing.DocIOHelper.IImage)">
            <summary>
            Check whether specified image has Bitmap or not.
            </summary>
            <param name="image">Represents a image to check.</param>
            <returns>Returns true, if it has a Bitmap; Otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.RenderHelper.GetFontExtension(System.String,System.Single,Syncfusion.Drawing.FontStyle,Syncfusion.Drawing.GraphicsUnit,Syncfusion.Office.FontScriptType)">
            <summary>
            Create a FontExtension object with specified font name, size and style.
            </summary>
            <param name="fontName">Represent a font name.</param>
            <param name="fontSize">Represent a font size.</param>
            <param name="fontStyle">Represent a font style.</param>
            <param name="graphicsUnit">Represent a graphics unit.</param>
            <returns>Returns a FontExtension object with specified font name, size and style.</returns>
        </member>
        <member name="T:Syncfusion.DocIORenderer.DocIORendererSettings">
            <summary>
            Represent class with setting of Word to PDF conversion.
            </summary>
            <seealso cref="T:Syncfusion.DocIO.DLS.WordDocument"/>
            <seealso cref="T:Syncfusion.Pdf.PdfDocument"/>
            <example>
            This example converts the specified Word Document in to PDF Document with converter settings.
            <code lang="C#">
            	//Creates a new Word document
            	WordDocument wordDocument = new WordDocument();
            	//Add a section into the word document
            	IWSection section = wordDocument.AddSection();
            	//Add a paragraph into the section
            	IWParagraph paragraph = section.AddParagraph();
            	//Add a text into the paragraph
            	paragraph.AppendText("First Chapter1");
            	//Apply style for the text
            	paragraph.ApplyStyle(BuiltinStyle.Heading1);
            	paragraph.AppendText("First Chapter2");
            	paragraph.ApplyStyle(BuiltinStyle.Heading2);
            	paragraph.AppendText("First Chapter3");
            	paragraph.ApplyStyle(BuiltinStyle.Heading3);
            	//Instantiation of DocIORenderer for Word to PDF conversion  
            	DocIORenderer render = new DocIORenderer();  
            	//Sets ExportBookmarks for preserving Word document headings as PDF bookmarks
            	render.Settings.ExportBookmarks = Syncfusion.DocIO.ExportBookmarkType.Headings; 
            	//Converts Word document into PDF document  
            	PdfDocument pdfDocument = render.ConvertToPDF(wordDocument);
            	//Saves the PDF file  
            	MemoryStream outputStream = new MemoryStream();  
            	pdfDocument.Save(outputStream);  
            	//Releases all resources used by the object.  
            	render.Dispose();  
            	//Closes the instance of document objects  
            	pdfDocument.Close();  
            	wordDocument.Close();                                                                                   
            </code>   
            </example>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_autoDetectComplexScript">
            <summary>
            Need to enable to preserve complex scripts.
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_enableAlternateChunks">
            <summary>
            Need to enable the Alternate chunks element
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_updateDocumentFields">
            <summary>
            Need to update the fields present in the document.
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_imageQuality">
            <summary>
            Indicates the quality of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_imageResolution">
            <summary>
            Indicates the Image resolution
            </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_preserveFormFields">
             <summary>
            Indicates whether to preserve the Word document form fields as PDF document form fields
             </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.DocIORendererSettings.m_warning">
            <summary>
            The m_warning
            </summary>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.AutoDetectComplexScript">
            <summary>
            Gets or sets a value indicates to automatically detect the complex script text present in the Word document during PDF conversion. Default value is <b>false</b>.
            </summary>
            <value><b>True</b>if it is necessary to automatically detect the complex script text present in the Word document during PDF conversion; otherwise, <b>false</b>.</value>
            <remarks>Set this property to true, only if you have complex script text that is not marked as complex script type (CharacterFormat.ComplexScript is false) in the Word document.
            You can mark a text as complex script by enabling the WTextRange.CharacterFormat.ComplexScript property.
            Since automatic detection of complex script text involves validation of all the text in the document and may impact proportionally in Word to PDF conversion performance.</remarks>
            <example>This example illustrates AutoDetectComplexScript property of DocIORenderer settings.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets AutoDetectComplexScript property as true, to detect the complex scripts automatically.
                renderer.Settings.AutoDetectComplexScript = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets AutoDetectComplexScript property as true, to detect the complex scripts automatically.
                renderer.Settings.AutoDetectComplexScript = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.EnableAlternateChunks">
             <summary>
             Gets or sets a value indicates to enable the Alternate chunks present in the Word document . Default value is <b>True</b>.
             </summary>
             <value><b>True</b> if need to enable the Alternate chunks; otherwise, <b>false</b>.</value>         
             <example>This example illustrates EnableAlternateChunks property of DocIORenderer settings.  
             <code lang = "C#">
                 FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                 //Loads an existing Word document
                 WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                 //Instantiates DocIORenderer instance for Word to PDF conversion
                 DocIORenderer renderer = new DocIORenderer();
                 //Sets EnableAlternateChunks property as true, to enable the Alternate chunks in the document
                 renderer.Settings.EnableAlternateChunks = true;
                 //Converts Word document into PDF document
                 PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                 //Closes the instance of Word document object
                 wordDocument.Close();
                 //Releases the resources occupied by DocIORenderer instance
                 renderer.Dispose();
                 //Saves the PDF file  
                 MemoryStream outputStream = new MemoryStream();
                 pdfDocument.Save(outputStream);
                 //Closes the instance of PDF document object
                 pdfDocument.Close();
             </code>
             <code lang = "VB">
                 Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                 'Loads an existing Word document
                 Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                 'Instantiates DocIORenderer instance for Word to PDF conversion
                 Dim renderer As DocIORenderer = New DocIORenderer
                 'Sets EnableAlternateChunks property as true, to enable the Alternate chunks in the document
                 renderer.Settings.EnableAlternateChunks = True
                 'Converts Word document into PDF document
                 Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                 'Closes the instance of Word document object
                 wordDocument.Close()
                 'Releases the resources occupied by DocIORenderer instance
                 renderer.Dispose()
                 'Saves the PDF file  
                 Dim outputStream As MemoryStream = New MemoryStream
                 pdfDocument.Save(outputStream)
                 'Closes the instance of PDF document object
                 pdfDocument.Close()
             </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.ImageQuality">
            <summary>
            Gets or sets the quality. The value indicates in percentage, max value represents best quality and min value represents best compression.
            </summary>
            <remarks>
            The value indicates in percentage, max value represents best quality and min value represents best compression        
            </remarks>       
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.DocIORenderer.DocIORendererSettings.PreserveFormFields" -->
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.ImageResolution">
            <summary>
            Sets the image resolution to the image, which are Embedded
            in the Word document
            </summary>      
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.DocIORenderer.DocIORendererSettings.Warning" -->
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.OptimizeIdenticalImages">
            <summary>
            Gets or Sets a value indicating whether to optimize the memory usage for the identical (duplicate) images in Word to PDF conversion.
            </summary>      
            <value>
            <b>True:</b> if need to optimize the identical (duplicate) images in Word to PDF conversion; otherwise, <b>False</b>.
            </value>
            <remarks> This property is supported to optimize the memory usage for the identical (duplicate) images only.</remarks>      
            <example>This example illustrates OptimizeIdenticalImages property of DocIORenderer settings.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets true to optimize the memory usage for identical images
                renderer.Settings.OptimizeIdenticalImages = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets true to optimize the memory usage for identical images
                renderer.Settings.OptimizeIdenticalImages = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.DocIORenderer.DocIORendererSettings.PdfConformanceLevel" -->
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.EmbedFonts">
            <summary>
            Gets or sets a value indicating whether to embed fonts in the converted PDF document. Default value is <b>false</b>
            </summary>
            <value>
            <b>True:</b> if need to embed fonts in the converted PDF document; otherwise, <b>False</b>.
            </value>
            <remarks> This property is supported to embed TrueType fonts only.</remarks>      
            <example>This example illustrates EmbedFonts property of DocIORenderer settings.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets EmbedFonts property as true, to embed fonts in resultant PDF
                renderer.Settings.EmbedFonts = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets EmbedFonts property as true, to embed fonts in resultant PDF
                renderer.Settings.EmbedFonts = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.EmbedCompleteFonts">
            <summary>
            Gets or sets a value indicating whether to embed the complete font information in the converted PDF document. Default value is <b>false</b>
            </summary>
            <value>
            <b>True:</b> if need to embed the complete font information in the converted PDF document; otherwise, <b>False</b>.
            </value>
            <remarks>        
            <list type="bullet">
            <item>This property is used to indicate whether the complete font information of 
            the characters in the resultant PDF document to embedded or not.</item>
            <item>This property is supported to embed TrueType fonts only.</item>        
            </list>
            </remarks> 
            <example>This example illustrates EmbedCompleteFonts property of DocIORenderer settings.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets the embed complete font information in converted PDF
                renderer.Settings.EmbedCompleteFonts = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets the embed complete font information in converted PDF
                renderer.Settings.EmbedCompleteFonts = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.AutoTag">
            <summary>
             Gets or sets a value indicates whether the converted PDF document is tagged or not.  Default value is <b>false</b>
            </summary>
            <value>
             <b>True:</b> if need to preserve the accessible structure tags from Word document to the converted PDF; otherwise, <b>False</b>.
            </value>
            <remarks>        
            <list type="bullet">
            <remarks> Set this property as true, to preserve the accessible structure tags from Word document to the converted PDF. Using this property Word documents can be converted to PDF with 508 compliance.
            </remarks>.
            <item>This property will set the title and description for images, diagrams and other objects in the generated PDF document. This information is useful for people with vision or cognitive impairments who may not able to see or understand the object </item>        
            <item>This property is only applicable while converting the Word document as PDF document.</item>
            </list>
            </remarks> 
            <example>This example illustrates how to convert an Word document to PDF with AutoTag property.        
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets the accessible structure tags in converted PDF
                renderer.Settings.AutoTag = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>     
            <code lang="VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets the accessible structure tags in converted PDF
                renderer.Settings.AutoTag = True
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.ExportBookmarks">
            <summary>
             Gets or sets a value indicates whether to export Word document headings or bookmarks as PDF bookmarks while performing Word to PDF conversion. Default value is <b>ExportBookmarkType.Bookmarks<see cref="F:Syncfusion.DocIO.ExportBookmarkType.Bookmarks"/></b>
            </summary>
            <value>
            The <see cref="T:Syncfusion.DocIO.ExportBookmarkType"/> member specifies whether Word headings or bookmarks need to be considered in Word to PDF conversion.
            </value>
            <remarks>
            <list>
            <item>The <see cref="F:Syncfusion.DocIO.ExportBookmarkType.Headings"/> will consider only headings within the main document and text boxes not within headers, footers, endnotes, footnotes, or comments.</item>
            <item>This property is only applicable while converting the Word document as PDF document.</item>
            </list>
            </remarks> 
            <example>This example illustrates how to convert an Word document headings to PDF Bookmarks with the help of ExportBookmark property.        
            <code lang = "C#">	
                //Creates a new Word document
                WordDocument wordDocument = new WordDocument();
                //Adds a section into the word document
                IWSection section = wordDocument.AddSection();
                //Adds a paragraph into the section
                IWParagraph paragraph = section.AddParagraph();
                //Adds a text into the paragraph
                paragraph.AppendText("First Chapter1");
                //Applies style for the text
                paragraph.ApplyStyle(BuiltinStyle.Heading1);
                paragraph.AppendText("First Chapter2");
                paragraph.ApplyStyle(BuiltinStyle.Heading2);
                paragraph.AppendText("First Chapter3");
                paragraph.ApplyStyle(BuiltinStyle.Heading3);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Sets ExportBookmarks for preserving Word document headings as PDF bookmarks
                renderer.Settings.ExportBookmarks = Syncfusion.DocIO.ExportBookmarkType.Headings;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();  
            </code>
            <code lang="VB">
                'Creates a new Word document
                Dim wordDocument As WordDocument = New WordDocument
                'Adds a section into the word document
                Dim section As IWSection = wordDocument.AddSection
                'Adds a paragraph into the section
                Dim paragraph As IWParagraph = section.AddParagraph
                'Adds a text into the paragraph
                paragraph.AppendText("First Chapter1")
                'Applies style for the text
                paragraph.ApplyStyle(BuiltinStyle.Heading1)
                paragraph.AppendText("First Chapter2")
                paragraph.ApplyStyle(BuiltinStyle.Heading2)
                paragraph.AppendText("First Chapter3")
                paragraph.ApplyStyle(BuiltinStyle.Heading3)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Sets ExportBookmarks for preserving Word document headings as PDF bookmarks
                renderer.Settings.ExportBookmarks = Syncfusion.DocIO.ExportBookmarkType.Headings
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.DocIORenderer.DocIORendererSettings.UpdateDocumentFields">
            <summary>
            Gets or sets a value that indicates whether to update fields present in the Word document while converting a Word document to PDF.Default value is <b>false</b>.
            </summary>
            <value><b>True</b> If true, updates the fields present in the Word document during Word to PDF conversion. otherwise, <b>false</b>.</value>
            <remarks>
            <para> This API is alternative for UpdateDocumentFields() <see cref="M:Syncfusion.DocIO.DLS.WordDocument.UpdateDocumentFields"/> to improve performance, if your requirement is to update the fields and convert the Word document to PDF.</para>
            <para>You can remove UpdateDocumentFields() method and enable UpdateDocumentFields <see cref="P:Syncfusion.DocIORenderer.DocIORendererSettings.UpdateDocumentFields"/> property to update the Word document fields and convert the Word document to PDF in optimized way.</para>
            </remarks>
            <example>
            <para>The following code example demonstrates how to update the fields present while performing Word to PDF conversion.</para>
            <code lang = "C#">
                FileStream fileStream = new FileStream("Template.docx", FileMode.Open);
                //Loads an existing Word document
                WordDocument wordDocument = new WordDocument(fileStream, FormatType.Docx);
                //Instantiates DocIORenderer instance for Word to PDF conversion
                DocIORenderer renderer = new DocIORenderer();
                //Updates the fields present in Word document
                renderer.Settings.UpdateDocumentFields = true;
                //Converts Word document into PDF document
                PdfDocument pdfDocument = renderer.ConvertToPDF(wordDocument);
                //Closes the instance of Word document object
                wordDocument.Close();
                //Releases the resources occupied by DocIORenderer instance
                renderer.Dispose();
                //Saves the PDF file  
                MemoryStream outputStream = new MemoryStream();
                pdfDocument.Save(outputStream);
                //Closes the instance of PDF document object
                pdfDocument.Close();
            </code>
            <code lang = "VB">
                Dim fileStream As FileStream = New FileStream("Template.docx", FileMode.Open)
                'Loads an existing Word document
                Dim wordDocument As WordDocument = New WordDocument(fileStream, FormatType.Docx)
                'Instantiates DocIORenderer instance for Word to PDF conversion
                Dim renderer As DocIORenderer = New DocIORenderer
                'Updates the fields present in Word document
                renderer.Settings.UpdateDocumentFields = true
                'Converts Word document into PDF document
                Dim pdfDocument As PdfDocument = renderer.ConvertToPDF(wordDocument)
                'Closes the instance of Word document object
                wordDocument.Close()
                'Releases the resources occupied by DocIORenderer instance
                renderer.Dispose()
                'Saves the PDF file  
                Dim outputStream As MemoryStream = New MemoryStream
                pdfDocument.Save(outputStream)
                'Closes the instance of PDF document object
                pdfDocument.Close()
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.DocIORenderer.Rendering.ShapePath._rectBounds">
             <summary>
            
             </summary>
        </member>
        <member name="F:Syncfusion.DocIORenderer.Rendering.ShapePath._shapeGuide">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.#ctor(Syncfusion.Drawing.RectangleF,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
            
             </summary>
             <param name="bounds"></param>
             <param name="shapeGuide"></param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedConnectorPath">
            <summary>
            Get Curved Connector path
            </summary>
            <formula>
            formulaColl.Add("x2","*/ w adj1 100000");
            formulaColl.Add("x1","+/ l x2 2");
            formulaColl.Add("x3","+/ r x2 2");
            formulaColl.Add("y3","*/ h 3 4");
            </formula>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedConnector2Path">
            <summary>
            This method is used to get the Curved connector 2 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedConnector4Path">
            <summary>
            This method is used to call the Get Curved Connector 4 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedConnector5Path">
            <summary>
            This method is used to get the curved connector5 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentConnectorPath">
            <summary>
            Get Bent Connector path
            </summary>
            <formula>
            formulaColl.Add("x1","*/ w adj1 100000");
            </formula>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBendConnector2Path">
            <summary>
            This method is used to get the bend connector 2 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentConnector4Path">
            <summary>
            This method is used to get the bend connector 4 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentConnector5Path">
            <summary>
            This method is used to get the bend connector 5 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundedRectanglePath">
             <summary>
            Gets Rounded Rectangle Path
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSnipSingleCornerRectanglePath">
            <summary>
            Gets Snip Single Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSnipSameSideCornerRectanglePath">
            <summary>
            Gets Snip Same Side Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSnipDiagonalCornerRectanglePath">
            <summary>
            Gets Snip Diagonal Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSnipAndRoundSingleCornerRectanglePath">
            <summary>
            Gets Snip And Round Single Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundSingleCornerRectanglePath">
            <summary>
            Gets Round Single Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundSameSideCornerRectanglePath">
            <summary>
            Gets Round Same Side Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundDiagonalCornerRectanglePath">
            <summary>
            Gets Round Diagonal Corner Rectangle Path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetTrianglePath">
            <summary>
            Get Triangle path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetParallelogramPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetTrapezoidPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRegularPentagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetHexagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetHeptagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetOctagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDodecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPiePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetChordPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetTearDropPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetHalfFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetL_ShapePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDiagonalStripePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCrossPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPlaquePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCanPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCubePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBevelPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDonutPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetNoSymbolPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBlockArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFoldedCornerPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSmileyFacePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetHeartPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLightningBoltPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetSunPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMoonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCloudPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDoubleBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDoubleBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRightBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRightBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRightArrowPath">
            <summary>
            Gets the right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftArrowPath">
            <summary>
            Gets the left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDownArrowPath">
            <summary>
            Gets down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftRightArrowPath">
            <summary>
            Gets the left right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedRightArrowPath">
            <summary>
            Gets the curved right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedLeftArrowPath">
            <summary>
            Gets the curved left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedUpArrowPath">
            <summary>
            Gets the curved up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCurvedDownArrowPath">
            <summary>
            Gets the curved down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetUpDownArrowPath">
            <summary>
            Gets up down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetQuadArrowPath">
            <summary>
            Gets the quad arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftRightUpArrowPath">
            <summary>
            Gets the left right up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentArrowPath">
            <summary>
            Gets the bent arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetUTrunArrowPath">
            <summary>
            Gets the U trun arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftUpArrowPath">
            <summary>
            Gets the left up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetBentUpArrowPath">
            <summary>
            Gets the bent up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetStripedRightArrowPath">
            <summary>
            Gets the striped right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetNotchedRightArrowPath">
            <summary>
            Gets the notched right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPentagonPath">
            <summary>
            Gets the pentagon path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetChevronPath">
            <summary>
            Gets the chevron path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRightArrowCalloutPath">
            <summary>
            Gets the right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDownArrowCalloutPath">
            <summary>
            Gets down arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftArrowCalloutPath">
            <summary>
            Gets the left arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetUpArrowCalloutPath">
            <summary>
            Gets up arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLeftRightArrowCalloutPath">
            <summary>
            Gets the left right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetQuadArrowCalloutPath">
            <summary>
            Gets the quad arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCircularArrowPath">
            <summary>
            Gets the circular arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathPlusPath">
            <summary>
            Gets the math plus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathMinusPath">
            <summary>
            Gets the math minus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathMultiplyPath">
            <summary>
            Gets the math multiply path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathDivisionPath">
            <summary>
            Gets the math division path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathEqualPath">
            <summary>
            Gets the math equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetMathNotEqualPath">
            <summary>
            Gets the math not equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartAlternateProcessPath">
            <summary>
            Gets the flow chart alternate process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartPredefinedProcessPath">
            <summary>
            Gets the flow chart predefined process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartInternalStoragePath">
            <summary>
            Gets the flow chart internal storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartDocumentPath">
            <summary>
            Gets the flow chart document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartMultiDocumentPath">
            <summary>
            Gets the flow chart multi document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartTerminatorPath">
            <summary>
            Gets the flow chart terminator path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartPreparationPath">
            <summary>
            Gets the flow chart preparation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartManualInputPath">
            <summary>
            Gets the flow chart manual input path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartManualOperationPath">
            <summary>
            Gets the flow chart manual operation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartConnectorPath">
            <summary>
            Gets the flow chart connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartOffPageConnectorPath">
            <summary>
            Gets the flow chart off page connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartCardPath">
            <summary>
            Gets the flow chart card path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartPunchedTapePath">
            <summary>
            Gets the flow chart punched tape path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartSummingJunctionPath">
            <summary>
            Gets the flow chart summing junction path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartOrPath">
            <summary>
            Gets the flow chart or path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartCollatePath">
            <summary>
            Gets the flow chart collate path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartSortPath">
            <summary>
            Gets the flow chart sort path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartExtractPath">
            <summary>
            Gets the flow chart extract path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartMergePath">
            <summary>
            Gets the flow chart merge path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartOnlineStoragePath">
            <summary>
            Gets the flow chart online storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartDelayPath">
            <summary>
            Gets the flow chart delay path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartSequentialAccessStoragePath">
            <summary>
            Gets the flow chart sequential access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartMagneticDiskPath">
            <summary>
            Gets the flow chart magnetic disk path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartDirectAccessStoragePath">
            <summary>
            Gets the flow chart direct access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFlowChartDisplayPath">
            <summary>
            Gets the flow chart display path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRectangularCalloutPath">
            <summary>
            Gets the rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetRoundedRectangularCalloutPath">
            <summary>
            Gets the rounded rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetOvalCalloutPath">
            <summary>
            Gets the oval callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCloudCalloutPath">
            <summary>
            Gets the cloud callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout1Path">
            <summary>
            Gets the line callout1 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout2Path">
            <summary>
            Gets the line callout2 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout3Path">
            <summary>
            Gets the line callout3 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout1AccentBarPath">
            <summary>
            Gets the line callout1 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout2AccentBarPath">
            <summary>
            Gets the line callout2 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout3AccentBarPath">
            <summary>
            Gets the line callout3 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout1NoBorderPath">
            <summary>
            Gets the line callout1 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout2NoBorderPath">
            <summary>
            Gets the line callout2 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout3NoBorderPath">
            <summary>
            Gets the line callout3 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout1BorderAndAccentBarPath">
            <summary>
            Gets the line callout1 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout2BorderAndAccentBarPath">
            <summary>
            Gets the line callout2 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetLineCallout3BorderAndAccentBarPath">
            <summary>
            Gets the line callout3 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetVMLCustomShapePath(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Path2D})">
            <summary>
            Gets the VML custom shape path path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetCustomGeomentryPath(Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.DocIO.DLS.Shape)">
            <summary>
            Gets a custom shape (DrawingML) GraphicPath.
            </summary>
            <param name="bounds">Represent a bounds of custom shape.</param>
            <param name="path">Represent a GraphicPath/PdfPath object.</param>
            <param name="shape">Represent a custom shape object.</param>
            <returns>Returns a GraphicPath/PdfPath with custom shape drawing points.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetGeomentryPath(Syncfusion.Pdf.Graphics.PdfPath,System.Collections.Generic.List{System.Double},System.Double,System.Double,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets a geometry path of Path2D.
            </summary>
            <param name="path">Represent a GraphicPath.</param>
            <param name="pathElements">Represent a input path elements.</param>
            <param name="pathWidth">Represent a width of Path.</param>
            <param name="pathHeight">Represent a height of Path.</param>
            <param name="bounds">Represent a bounds of Path.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetGeomentryPathXValue(System.Double,System.Double,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets a X value of Path.
            </summary>
            <param name="pathWidth">Represent a width of Path.</param>
            <param name="x">Represent a X value.</param>
            <param name="bounds">Represent a bounds of Path.</param>
            <returns>Returns a X value.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetGeomentryPathYValue(System.Double,System.Double,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets a Y value of Path.
            </summary>
            <param name="pathHeight">Represent a height of Path.</param>
            <param name="y">Represent a Y value.</param>
            <param name="bounds">Represent a bounds of Path.</param>
            <returns>Returns a Y value.</returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.ConvertPathElement(System.String,System.Collections.Generic.List{System.Double},System.Collections.Generic.Dictionary{System.String,System.String},Syncfusion.DocIO.DLS.Path2D,System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            Convert the path element of custom shape
            </summary>
            <param name="pathElement">Represent a path element to convert.</param>
            <param name="pathElements">Represent a converted path elements.</param>
            <param name="combinedValues">Represent a formula collection.</param>
            <param name="path">Represent a path object.</param>
            <param name="calculatedValues">Represent formula with its values.</param>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDegreeValue(System.Single)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetXYPosition(System.Single,System.Single,System.Single)">
             <summary>
            
             </summary>
             <param name="xDifference"></param>
             <param name="yDifference"></param>
             <param name="positionRatio"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPathAdjustValue(Syncfusion.DocIO.DLS.AutoShapeType)">
            <summary>
            Get Path adjust value
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.ParseShapeFormula(Syncfusion.DocIO.DLS.AutoShapeType)">
            <summary>
            Parse Shape Formula
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetFormulaValues(Syncfusion.DocIO.DLS.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Gets Formula Values
            </summary>
            <param name="shapeType"></param>
            <param name="formulaColl"></param>
            <param name="isAdjValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetOperandValues(Syncfusion.DocIO.DLS.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.Single}@,System.String[],System.Boolean)">
            <summary>
            Gets Operand Values
            </summary>
            <param name="shapeType"></param>
            <param name="formulaValues"></param>
            <param name="splitFormula"></param>
            <param name="isAdjValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetPresetOperandValue(System.String)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetResultValue(System.String,System.Single[])">
             <summary>
            
             </summary>
             <param name="formula"></param>
             <param name="operandValues"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetShapeFormula(Syncfusion.DocIO.DLS.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.DocIORenderer.Rendering.ShapePath.GetDefaultPathAdjValues(Syncfusion.DocIO.DLS.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="T:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext">
            <summary>
            Represents the class which acts as an drawing context.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_SCRIPT_FACTOR">
            <summary>
            The default script factor for sub/super script.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_DINOFFC_TEXT_FACTOR">
            <summary>
            The default factor values to fit the DinOffc font text into the corresponding font grid.
            /// </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_FONT_SIZE">
            <summary>
            The default font size.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_PICBULLET_MIN_FONT_SIZE">
            <summary>
            The default minimum font size for picture bullet.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DEF_PICBULLET_SCALE_FACTOR">
            <summary>
            The default scale factor for picture bullet.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.headerImageCollection">
            <summary>
            This collection contains the Header images.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_pdfgraphics">
            <summary>
            Drawing Graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_imageQuality">
            <summary>
            Image Quality.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_preserveFormFields">
            <summary>
            PreserveFormFields.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.pdfFontCollection">
            <summary>
            PdfFont collection
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_substitutedFonts">
            <summary>
            This collection contains the Pdf fonts which are created by SubstitutedFont event streams.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_graphics">
            <summary>
            Drawing Graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_hyperLinks">
            <summary>
            Holds the list of hyperlinks and its corrsponding bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.m_commentId">
            <summary>
            Used to skip a text highlighter between the comment ranges.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.autoTagCount">
            <summary>
            Auto tag index
             </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.currParagraphIndex">
             <summary>
            Skips the bookmark add for all the textrange of paragraph.
             </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.underLineValues">
            <summary>
            We have hold the underline style properties and bounds to draw a line.
            using this dictionary, we have draw the line after the text drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.strikeThroughValues">
            <summary>
            We have hold the Strike-Through properties and bounds to draw a line.
            using this dictionary, we have draw the line after the text drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsListCharacter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.RecreateNestedMetafile">
            <summary>
            Gets or sets a value that indicates whether to regenerate the nested EMF images present in the Word document during PDF conversion. Default value is<b>false</b>.
            </summary>
            <value><b>True</b> if it is necessary to regenerate the nested EMF images present in the Word document during PDF conversion; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ClearFontCache">
            <summary>
            Clear the font cache.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PdfDocument">
            <summary>
            Gets or sets the PdfDocument.
            </summary>
            <value>The PdfDocument.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CurrentBookmarkName">
            <summary>
            Get the Current Bookmark name
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ExportBookmarks">
            <summary>
            Gets or sets the value indicates whether to export Word document heading as PDF bookmarks.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.EnableComplexScript">
            <summary>
            Decides whether, we should enable PdfMetafile.ComplexScript property for current page.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PDFGraphics">
            <summary>
            Gets or sets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ImageQuality">
            <summary>
            Gets or sets the ImageQuality.
            </summary>
            <value>image quality</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PreserveFormFields">
            <summary>
            Gets or sets the PreserveFormFields.
            </summary>
            <value>PreserveFormFields</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FontStreams">
            <summary>
            Gets or set the embedded fonts.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Graphics">
            <summary>
            Gets or sets the graphics.
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GraphicsBmp">
            <summary>
            Gets the bitmap graphics.
            </summary>
            <value> The graphics.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Hyperlinks">
            <summary>
            Gets the hyperlinks.
            </summary>
            <value>The hyperlinks.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.BookmarkHyperlinksList">
            <summary>
            Gets the bookmark hyperlinks list.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Bookmarks">
            <summary>
            Gets the bookmarks.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.OverLappedShapeWidgets">
            <summary>
            Gets the overlapping shape widgets.
            </summary>
            <value>The overlapping shape widgets.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FontMetric">
            <summary>
            Gets the font metric.
            </summary>
            <value>
            The font metric.
            </value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.StringFormt">
            <summary>
            Gets the string formt.
            </summary>
            <value>
            The string formt.
            </value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.EmbedFonts">
            <summary>
            Gets or sets a value indicating whether to embed fonts to converted PDF in Word to PDF conversion.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.EmbedCompleteFonts">
            <summary>
            Gets or sets a value indicating whether to embed the complete font information in the resultant PDF document.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AutoTag">
             <summary>
            Gets or sets a value indicates whether the converted PDF document is tagged or not.
             </summary>
             Remarks: Set this property as true, to preserve the accessible structure tags from Word document to the converted PDF. Using this property Word documents can be converted to PDF with 508 compliance.
             Setting this property as true will automatically enable <see cref="!:Syncfusion.DocToPDFConverter.DocToPDFConverterSettings.EnableFastRendering"/> property.
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.#ctor(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.GraphicsUnit,Syncfusion.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext"/> class.
            </summary>
            <param name="pdfgraphics">The graphics.</param>
            <param name="graphics">The page unit.</param>
            <param name="pageUnit">The page unit.</param>
            <param name="pdfDocument">The page unit.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawOverLappedShapeWidgets(System.Boolean)">
            <summary>
            Draws the Overlapping shape widgets.
            Currently handled only for Docx format documents
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsColorMismatched(Syncfusion.DocIO.DLS.IEntity,Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Paragraph has a color which is mismatched from the next sibling paragraph color 
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateAutoTag(Syncfusion.Pdf.PdfTagType,System.String,System.String,System.Boolean)">
            <summary>
            Create Auto tag.
            </summary>
            <param name="tagType"></param>
            <param name="alternateText"></param>
            <param name="title"></param>
            <param name="isOverlapedShape"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfStructureElement(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Creates Pdf structure element for headings and paragraph.
            </summary>
            <param name="paragraph">The paragraph.</param>
            <param name="layoutedWidget">The layouted widge.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetHeadingLevelPdfTagType(System.Int32)">
            <summary>
            Gets the Pdf tag type enum value for heading style.
            </summary>
            <param name="outlineLevel">The outline level of the heading style.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfStructureElement(Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.Entity,Syncfusion.DocIO.DLS.WTableCell)">
            <summary>
            Creates Pdf structure element for table, table row and table data.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="ownerWidget">The owner widget.</param>
            <param name="cellWidget">The cell widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawParagraph(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the paragraph.
            </summary>
            <param name="paragraph">The paragraph.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTextBox(Syncfusion.DocIO.DLS.WTextBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the text box.
            </summary>
            <param name="textBox">The text box.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateClipBounds(Syncfusion.Drawing.RectangleF)">
            <summary>
            We have handle for rotated childshapes.
            </summary>
            <param name="clipBounds">clipbounds value</param>
            <returns>return the clipbounds value</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBarTabStop(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw Bar Tab Stop of the paragraph
            </summary>
            <param name="paragraph"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBoundsToDrawParagraphBackGroundColor(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Get bounds to draw a paragraph back ground color and texture styles
            </summary>
            <param name="paragraph"></param>
            <param name="ltWidget"></param>
            <param name="isParagraphMarkIsHidden"></param>
            <param name="isLineDrawing"></param>
            <param name="resetTransform"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsParagraphContainingListHasBreak(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Check whether Paragraph Containing list has break.
            </summary>
            <param name="ltWidget">ltWidget</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBaseEntity(Syncfusion.DocIO.DLS.Entity)">
            <summary>
            Get the base entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateTabPosition(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF)">
            <summary>
            Updates the tab position.
            </summary>
            <param name="widget">The widget.</param>
            <param name="clientArea">The client area.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateDecimalTabPosition(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF)">
            <summary>
            Updates the decimal tab position.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="clientArea">The client area.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateDecimalTabPositionInCell(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF)">
            <summary>
            Updates the decimal tab position in cell.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="clientArea">The client area.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsDecimalTabStart(Syncfusion.Layouting.LayoutedWidget,System.Int32,System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            Determine whether is Decimal Tab Start
            </summary>
            <param name="ltWidget"></param>
            <param name="decimalTabStart"></param>
            <param name="isDecimalTab"></param>
            <param name="i"></param>
            <param name="widthToShift"></param>
            <param name="isInCell"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetWidthToShift(Syncfusion.Layouting.LayoutedWidget,System.Int32,System.Boolean,Syncfusion.Drawing.RectangleF)">
            <summary>
            Get Width To Shift the xposition of childwidget
            </summary>
            <param name="ltWidget"></param>
            <param name="decimalTabStart"></param>
            <param name="isInCell"></param>
            <param name="clientArea"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCurrentTabFormat(Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Get the paragraph format for current tab
            </summary>
            <param name="paragraph">The Paragraph</param>
            <returns>Paragrph format</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetColumnWidth(Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Get Column Width
            </summary>
            <param name="paragraph">The Paragraph</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLeftWidth(Syncfusion.DocIO.DLS.WParagraph,System.Int32,System.Int32)">
            <summary>
            Get Left width of the Decimal seperator
            </summary>
            <param name="paragraph"></param>
            <param name="decimalTabStart"></param>
            <param name="decimalTabEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLeftWidth(Syncfusion.Layouting.LayoutedWidget,System.Int32,System.Int32)">
            <summary>
            Get Left width of the Decimal seperator
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="decimalTabStart">The decimal tab start.</param>
            <param name="decimalTabEnd">The decimal tab end.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetIndexOfDecimalseparator(Syncfusion.DocIO.DLS.WParagraph,System.Int32,System.Int32,System.Single@,System.Int32@,System.Boolean@)">
            <summary>
            Get Index of Decimal Separator
            Index denotes the TextRange which have a decimal separator
            </summary>
            <param name="paragraph"></param>
            <param name="decimalTabStart"></param>
            <param name="decimalTabEnd"></param>
            <param name="leftWidth"></param>
            <param name="decimalSeparator"></param>
            <param name="isSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetIndexOfDecimalseparator(Syncfusion.Layouting.LayoutedWidget,System.Int32,System.Int32,System.Single@,System.Int32@,System.Boolean@)">
            <summary>
            Get Index of Decimal Separator
            Index denotes the TextRange which have a decimal separator
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="decimalTabStart">The decimal tab start.</param>
            <param name="decimalTabEnd">The decimal tab end.</param>
            <param name="leftWidth">Width of the left.</param>
            <param name="decimalSeparator">The decimal separator.</param>
            <param name="isSeparator">if set to <c>true</c> [is separator].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsDecimalSeparator(System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Determine whether is Decimal Separator
            </summary>
            <param name="ch"></param>
            <param name="decimalSeparator"></param>
            <param name="isPrevTextHasNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOwnerParagraph(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get Owner paragraph of the LayoutedWidget
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTabEndIndex(Syncfusion.Layouting.LayoutedWidget,System.Int32)">
            <summary>
            Gets the tab end index.
            Index denotes the item, previous of next subsequent tab.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetListValue(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.ParagraphLayoutInfo,Syncfusion.DocIO.DLS.WListFormat)">
            <summary>
            Get the current list size.
            </summary>
            <param name="paragraph"></param>
            <param name="paragraphInfo"></param>
            <param name="listFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawList(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WListFormat)">
            <summary>
            Draws the list.
            </summary>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted Widget</param>
            <param name="listFormat">List Format</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawListTabLeader(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.ParagraphLayoutInfo,System.Single,System.Single,System.Single)">
            <summary> 
            Draws the list tab leader.
            </summary>
            <param name="paragraph">The paragraph.</param>
            <param name="paragraphInfo">The paragraph info.</param>
            <param name="listWidth">Width of the list.</param>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTabLeader(Syncfusion.Layouting.ParagraphLayoutInfo)">
            <summary>
            Gets the tab leader.
            </summary>
            <param name="paragraphInfo">The paragraph info.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetAscentValueForEQField(Syncfusion.DocIO.DLS.WField)">
            <summary>
            Gets the ascet value for Equation field.
            </summary>
            <param name="field">Equation field</param>       
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsLineContainsEQfield(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Check whether the current lines contains the equation field and it
            contains the height of the corresponding line.
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>                      
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsEmptyParagraph(Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Determines whether the paragraph is empty
            </summary>
            <param name="para">paragraph</param>
            <returns> returns true if paragraph is empty </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddCommentMark(Syncfusion.DocIO.DLS.WCommentMark,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Calculate a line points for the WCommentMark.
            </summary>
            <param name="commentMark"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCommentMarks(Syncfusion.DocIO.DLS.RevisionOptions)">
            <summary>
            Draw the WCommentMark.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawAbsoluteTab(Syncfusion.DocIO.DLS.WAbsoluteTab,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw AbsoluteTab
            </summary>
            <param name="absoluteTab"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateAbsoluteTabLeader(Syncfusion.DocIO.DLS.WAbsoluteTab,Syncfusion.Layouting.LayoutedWidget,System.String@)">
            <summary>
            Update AbsoluteTab leader
            </summary>
            <param name="absoluteTab"></param>
            <param name="ltWidget"></param>
            <param name="text"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawSeparator(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Footnote separator
            </summary>
            <param name="txtRange">The TXT range.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEditableTextRange(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Editable text range.
            </summary>
            <param name="txtRange">The TXT range.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.InverseCharacter(System.Char)">
            <summary>
            Inverse the specified character with suitable bidi character
            </summary>
            <param name="ch">Specify the input character</param>
            <returns>Return the inversed character</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTextRange(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget,System.String)">
            <summary>
            Draws the text range.
            </summary>
            <param name="txtRange">The TXT range.</param>
            <param name="ltWidget">The lt widget.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsValidFieldResult(Syncfusion.DocIO.DLS.WField,Syncfusion.Layouting.IWidget)">
            <summary>
            Check whether the widget is in field result or not.
            </summary>
            <param name="hyperLinkField">Hyper link field</param>
            <param name="widget">Widget.</param>
            <returns>If the widget is in field result, return True;else false.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateBookmarkTargetPosition(Syncfusion.DocIO.DLS.Entity,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Update Target position to the bookmark hyperlink
            </summary>
            <param name="ent"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateBookmarkRerefeceLink(Syncfusion.DocIO.DLS.Entity,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Create Bookmark reference link
            </summary>
            <param name="ent"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTextRangeFollowWithTab(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Determine whether the tab stop is preserved after the text range in the current line
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateTabLeader(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget,System.String@)">
            <summary>
            Update Tab Width.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillDots(Syncfusion.Drawing.Font,Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.StringFormat,System.String@)">
            <summary>
            Fill with dots for tab leader
            </summary>
            <param name="font">Font</param>
            <param name="ltWidget">Current layouted widget</param>
            <param name="charFormat">Character format of layouted widget</param>
            <param name="format">String format</param>
            <param name="text">text</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillSingle(Syncfusion.Drawing.Font,Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.StringFormat,System.String@)">
            <summary>
            Fill with sigle for tab leader
            </summary>
            <param name="font">Font</param>
            <param name="ltWidget">Current layouted widget</param>
            <param name="charFormat">Character format of layouted widget</param>
            <param name="format">String format</param>
            <param name="text">text</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillHyphens(Syncfusion.Drawing.Font,Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.StringFormat,System.String@)">
            <summary>
            Fill with hyphens for tab leader
            </summary>
            <param name="font">Font</param>
            <param name="ltWidget">Current layouted widget</param>
            <param name="charFormat">Character format of layouted widget</param>
            <param name="format">String format</param>
            <param name="text">text</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillSpace(Syncfusion.Drawing.Font,Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.StringFormat,System.String@)">
            <summary>
            Fills with space
            </summary>
            <param name="font"></param>
            <param name="ltWidget"></param>
            <param name="format"></param>
            <param name="text"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawSymbol(Syncfusion.DocIO.DLS.WSymbol,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Symbol
            </summary>
            <param name="symbol"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawPicture(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the image.
            </summary>
            <param name="picture">The image.</param>
            <param name="ltwidget">The bounds.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTableInTextBoxOrShape(Syncfusion.DocIO.DLS.Entity,System.Boolean)">
            <summary>
            Decides whether table is preserved inside text box or not.
            </summary>
            <param name="entity">Table cell</param>
            <param name="checkTextBoxOnly">Indicates whether to check textbox only.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBoundingBoxCoordinates(Syncfusion.Drawing.RectangleF,System.Single)">
            <summary>
            Gets the bounding box of the rectangular bounds after rotation.
            </summary>
            <param name="bounds">Bounds</param>
            <param name="angle">Degree of rotation</param>
            <returns>Bounding box of the rectangular bounds</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CalculateBoundingBox(Syncfusion.Drawing.PointF[])">
            <summary>
            Calculates the minX, minY, maxX and maxY of the rotated bounds.
            </summary>
            <param name="imageCoordinates"></param>
            <returns>Bounding box of a rectangular bounds</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTransformMatrix(Syncfusion.Drawing.RectangleF,System.Single)">
            <summary>
            Gets the rotation transformation matrix
            </summary>
            <param name="bounds">Bounds of the picture</param>
            <param name="angle">Rotation angle</param>
            <returns>Transformation matrix</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetMatrixValuesFromSkia(Syncfusion.Drawing.Matrix)">
            <summary>
            Get matrix values of skia's matrix.
            </summary>
            <param name="matrix">SKia's matrix to get values from.</param>
            <returns>Image matrix.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPdfImage(System.IO.MemoryStream)">
            <summary>
            Gets the PdfImage with image quality from stream
            </summary>
            <param name="stream">Memory stream</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPdfImage(Syncfusion.Drawing.SkiaSharpHelper.Bitmap)">
            <summary>
            Gets the PdfImage with image quality from stream
            </summary>
            <param name="stream">Memory stream</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawInlinePictureShape(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SkiaSharpHelper.Image)">
            <summary>
            Draw the InlineShapePicture
            </summary>
            <param name="picture"></param>
            <param name="bounds"></param>
            <param name="size"></param>
            <param name="image"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePen(Syncfusion.DocIO.DLS.InlineShapeObject)">
            <summary>
            Create the Pen to draw the picture border
            </summary>
            <param name="inlineShapeObject"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetColorBorder(Syncfusion.DocIO.DLS.InlineShapeObject)">
            <summary>
            Get the color for the picture border
            </summary>
            <param name="inlineShapeObject"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLineCap(Syncfusion.Pdf.Graphics.PdfLineCap)">
            <summary>
            Get the line cap for picture border
            </summary>
            <param name="lineCap"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLineJoin(Syncfusion.Pdf.Graphics.PdfLineJoin)">
            <summary>
            Get LineJoin for picture border
            </summary>
            <param name="lineJoin"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPictureBorderPen(Syncfusion.DocIO.DLS.InlineShapeObject,Syncfusion.DocIO.ReaderWriter.Biff_Records.BorderCode,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Get the Dash and line style for the picture shape
            </summary>
            <param name="inlineShape"></param>
            <param name="borderCode"></param>
            <param name="pen"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetDashAndLineStyle(Syncfusion.DocIO.DLS.InlineShapeObject,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Get the dash and line style for picture border
            </summary>
            <param name="inlineShape"></param>
            <param name="pen"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetDashStyle(Syncfusion.DocIO.LineDashing,Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Get the Dash style for the border
            </summary>
            <param name="lineDashing"></param>
            <param name="pen"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CropImageBounds(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Drawing.RectangleF@,Syncfusion.Drawing.SizeF@)">
            <summary>
            Set the CropImageBounds if the image offset is negative
            </summary>
            <param name="picture"></param>
            <param name="bounds"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CropPosition(Syncfusion.DocIO.DLS.WPicture)">
            <summary>
            Gets the position to crop the image
            </summary>
            <param name="picture"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEquationField(Syncfusion.Office.FontScriptType,Syncfusion.Layouting.LayoutedEQFields,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Draws the equation field swtiches. 
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawArraySwitch(Syncfusion.Office.FontScriptType,Syncfusion.Layouting.LayoutedEQFields,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.StringAlignment)">
            <summary>
            Draws an Array EQ switch using their properties.
            </summary>
            <param name="scriptType">Represents a script type</param>
            <param name="ltEQField">A layouted array EQ switch.</param>
            <param name="charFormat">Represents a charFormat for array switch.</param>
            <param name="arraySwitchAlignment">Represents a <see cref="T:Syncfusion.Drawing.StringAlignment"/> for array EQ switch.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawRadicalSwitch(Syncfusion.Office.FontScriptType,Syncfusion.Layouting.LayoutedEQFields,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Draws a radical switch and the radical symbol as a graphic path.
            </summary>
            <param name="scriptType">Represents a script type.</param>
            <param name="ltEQField">A layouted radical EQ switch.</param>
            <param name="charFormat">Represents a charFormat for radical switch elements.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEditableDropDown(Syncfusion.DocIO.DLS.WDropDownFormField,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Editable DrawDropDownFormField.
            </summary>
            <param name="dropDownFormField">dropDownFormField</param>
            <param name="ltWidget">The ltWidget.</param>  
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AlignEqFieldSwitches(Syncfusion.Layouting.LayoutedEQFields,System.Single,System.Single)">
            <summary>
            Align the layouted equation field switch based on the current y position.
            </summary>
            <param name="ltEQField">Layouted EQ field switches</param>
            <param name="xPosition">x position of layouted equation field switch</param>
            <param name="yPosition">Y position of layouted equation field switch</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ShiftEqFieldXYPosition(Syncfusion.Layouting.LayoutedEQFields,System.Single,System.Single)">
            <summary>
            Shift the eqaution field's x, y position based on the given x,y value.
            </summary>
            <param name="ltEQField">Layouted EQ field switches</param>
            <param name="xPosition">x position of layouted equation field switch</param>
            <param name="yPosition">Y position of layouted equation field switch</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GenerateErrorFieldCode(Syncfusion.Layouting.LayoutedEQFields,System.Single,System.Single,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Generates the error text for the equation field.
            </summary>
            <param name="ltEQFiled">Represents a equation field to generate.</param>
            <param name="charFormat">Represents a <see cref="T:Syncfusion.DocIO.DLS.WCharacterFormat"/> which set for equation field.</param>
            <param name="xPosition">Represents a X position of equation field.</param>
            <param name="yPosition">Represents a Y position of equation field.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ShiftEqFieldYPosition(Syncfusion.Layouting.LayoutedEQFields,System.Single)">
            <summary>
             Shift the equation field's y position based on the given y value.
            </summary>
            <param name="LayoutedEQFields">Layouted EQ field switches</param>
            <param name="yPosition">Y position of layouted equation field switch</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTopMostY(Syncfusion.Layouting.LayoutedEQFields,System.Single)">
            <summary>
            Gets the top most Y position of layouted EQ fields.
            </summary>
            <param name="ltEQField">Layouted EQ field</param>
            <param name="minY">Minimum value of y position</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawString(Syncfusion.Office.FontScriptType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.DocIO.DLS.WParagraphFormat,Syncfusion.Drawing.RectangleF,System.Single,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the string.
            </summary>
            <param name="scriptType">Represents a script type.</param>
            <param name="text">The text.</param>
            <param name="charFormat">The char format.</param>
            <param name="paraFormat">The para format.</param>
            <param name="bounds">The bounds.</param>
            <param name="clipWidth">The clipwidth.</param>
            <param name="ltWidget">The layouted widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CheckPreOrNextSiblingIsTab(Syncfusion.DocIO.DLS.WCharacterFormat@,Syncfusion.Drawing.RectangleF@,Syncfusion.Layouting.LayoutedWidget,System.Boolean@)">
            <summary>
            Check that previous or next sibling is tab in that line paragraph
            </summary>
            <param name="charFormat">CharacterFormat</param>
            <param name="textBounds">textBounds</param>
            <param name="ltWidget">LayoutedWidget</param>
            <param name="isSameLine">isSameLine</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CalculateTextBounds(System.String,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Calculate the Text Bounds
            </summary>
            <param name="text"></param>
            <param name="textBounds"></param>
            <param name="font"></param>
            <param name="format"></param>
            <param name="charFormat"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddLineToCollection(System.String,System.Boolean,Syncfusion.Drawing.Font,Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean,Syncfusion.Drawing.RectangleF,System.Boolean,Syncfusion.Office.FontScriptType)">
            <summary>
            Add the line to the Dictionary collection
            </summary>
            <param name="text"></param>
            <param name="isSubSuperScriptNone"></param>
            <param name="font"></param>
            <param name="charFormat"></param>
            <param name="drawLines"></param>
            <param name="textBounds"></param>
            <param name="isSameLine"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsSameLine(System.Single,System.Single,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean)">
            <summary>
            Check that can we extend the previous Underline to the next text. 
            </summary>
            <param name="boundsRight">Previous boundsRight</param>
            <param name="boundsX">Current boundsX</param>
            <param name="charFormat">Current CharacterFormat</param>
            <param name="preCharFormat">Previous CharacterFormat</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsSame(System.Single,System.Single,System.Int32)">
            <summary>
            Compare the two float values.
            </summary>
            <param name="value1">Value 1</param>
            <param name="value2">value 2</param>
            <param name="digit">Round off value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.HasUnderlineOrStricthrough(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Check that text having underline or strike through.
            </summary>
            <param name="txtRange">TextRange</param>
            <param name="charFormat">Charformat</param>
            <param name="scriptType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsContentControlHavingTextRange(Syncfusion.DocIO.DLS.InlineContentControl)">
            <summary>
            Check that the Inline content control having the text range.
            </summary>
            <param name="inlineContentControl"></param>
            <returns>Return true, if the InlineContentControl have text range; Else false.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTabWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Checks whether the current widget is tab
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTextBoxWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get the text box widget of current widget.
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ReverseString(System.String@)">
            <summary>
            Reverse the string
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawSmallCapString(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.Drawing.SkiaSharpHelper.Brush,System.Boolean)">
            <summary>
            Draws the small cap string.
            </summary>
            <param name="scriptType">scriptType</param>
            <param name="characterRangeType">characterRangeType.</param>
            <param name="text">The text.</param>
            <param name="charFormat">The character format.</param>
            <param name="bounds">The bounds.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <param name="textBrush">The text brush.</param>
            <param name="isCharacterSpacing">if set to <c>true</c> [is character spacing].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTextNeedToClip(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Determine whether the text is need to clip when the text range y position is greater than the owner row bottom position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWidgetNeedToClipBasedOnXPosition(Syncfusion.Layouting.LayoutedWidget,System.Single@,Syncfusion.Drawing.RectangleF)">
            <summary>
            Determine whether the text is need to clip when the text range x position is beyond the cell bounds or crossing the cell bounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetColumnIndex(Syncfusion.DocIO.DLS.WSection,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="section">The section.</param>
            <param name="sectionBounds">The section bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetClipTopPosition(Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Get Y position to clip paragraph items
            </summary>
            <param name="bounds"></param>
            <param name="isInlinePicture"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetDefaultFont(Syncfusion.Office.FontScriptType,Syncfusion.Drawing.Font,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Get Default font to render non east characters
            </summary>
            <param name="scriptType"></param>
            <param name="font"></param>
            <param name="charFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStringBasedOnCharSpacing(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,System.String,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Draw String based on CharacterSpacing
            </summary>
            <param name="scriptType">Script Type</param>
            <param name="characterRangeType">Character Range Type</param>
            <param name="font">Font style of current Layouted widget</param>
            <param name="textBrush">Text brush</param>
            <param name="bounds">Layouted widget bounds</param>
            <param name="text">Text</param>
            <param name="format">string format</param>
            <param name="charFormat">character Format</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.TransformGraphicsPosition(Syncfusion.Layouting.LayoutedWidget,System.Boolean,Syncfusion.Drawing.PointF@,System.Single@,Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Transform the graphics rendering positions based on rotation angle
            </summary>
            <param name="ltWidget">Current ltWidget</param>
            <param name="isNeedToScale">set to <c>true</c> when the widget need to scale</param>
            <param name="translatePoints">Translation points </param>
            <param name="rotationAngle">Rotation angle</param>
            <param name="ownerParagraph">OwnerParagraph</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateXYPosition(System.Single@,System.Single@,Syncfusion.DocIO.DLS.Entity,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Update the X and Y position
            </summary>
            <param name="xPosition">X posiiton</param>
            <param name="yPosition">Y position</param>
            <param name="entity">Owner entity</param>
            <param name="ltWidget">Layouted Widget</param>
            <remarks>Update the X and Y position when document has different page setup.</remarks>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLayoutedTextBoxContentHeight(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Gets the height of the layouted text box content.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetWidthToShiftVerticalText(Syncfusion.DocIO.DLS.VerticalAlignment,System.Single,System.Single)">
            <summary>
            Get Width to shift vertical text
            </summary>
            <param name="verticalAlignment"></param>
            <param name="cellLayoutedHeight"></param>
            <param name="cellHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetClipBounds(Syncfusion.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Get Bounds to clip the text
            </summary>
            <param name="bounds"></param>
            <param name="clipWidth"></param>
            <param name="clipTop"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateClipBounds(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Update clip bounds based on vertical cell 
            </summary>
            <param name="clipBounds"></param>
            <param name="ownerClipBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateClipBoundsBasedOnOwner(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Update clipping bounds based on owner clipping
            </summary>
            <param name="clipBounds"></param>
            <param name="ownerClipBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCellHeightForVerticalText(Syncfusion.DocIO.DLS.Entity)">
            <summary>
            Get Height of the cell with text direction as vertical
            </summary>
            <param name="ent"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawChineseText(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draw Chinese Text
            </summary>
            <param name="scriptType"></param>
            <param name="characterRangeType"></param>
            <param name="text"></param>
            <param name="charFormat"></param>
            <param name="font"></param>
            <param name="textBrush"></param>
            <param name="bounds"></param>
            <param name="format"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PDFDrawString(System.String,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfStringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Draw String method for Drawing the string without its width and height
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="stringFormat"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsInvalidCharacter(System.String)">
            <summary>
            Checks whether the text is valid. (applicable for Arial text)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawUnicodeText(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draw Unicode Text
            </summary>
            <param name="scriptType"></param>
            <param name="characterRangeType"></param>
            <param name="text"></param>
            <param name="charFormat"></param>
            <param name="font"></param>
            <param name="textBrush"></param>
            <param name="bounds"></param>
            <param name="format"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawUnicodeString(Syncfusion.Office.FontScriptType,Syncfusion.Office.CharacterRangeType,System.String,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draw unicode string
            </summary>
            <param name="scriptType"></param>
            <param name="characterRangeType"></param>
            <param name="text"></param>
            <param name="charFormat"></param>
            <param name="font"></param>
            <param name="textBrush"></param>
            <param name="bounds"></param>
            <param name="format"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsOwnerParagraphEmpty(System.String)">
            <summary>
            Determines whether the owner paragraph is empty
            </summary>
            <param name="text">text</param>
            <returns>
                <c>true</c> if owner paragraph is empty, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.RotateAndScaleTransform(Syncfusion.Drawing.RectangleF@,Syncfusion.Drawing.RectangleF@,System.Single,Syncfusion.Drawing.PointF,System.Single,System.Boolean)">
            <summary>
            Rotate and scale the graphics transform matrix
            </summary>
            <param name="bounds">Layoted widget bounds</param>
            <param name="clipBounds">Clip bounds</param>
            <param name="scaleFactor">Scaling factor value</param>
            <param name="translatePoints">Translation points</param>
            <param name="rotationAngle">Rotation angle</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ScaleTransformMatrix(System.Single,Syncfusion.Drawing.PointF,System.Single)">
            <summary>
            Scale the graphics transform matrix.
            </summary>
            <param name="scaleFactor">Scaling factor value</param>
            <param name="translatePoints">Translation points</param>
            <param name="rotationAngle">Rotation angle</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfFont(System.IO.Stream,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Creates PDF True type font.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfFont(System.String,System.IO.Stream,System.Single,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Creates PDF True type font.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfFont(System.String,System.IO.Stream,System.Single,System.String)">
            <summary>
            Creates PDF True type font.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePdfFont(System.String,System.IO.Stream,System.Single,System.String,Syncfusion.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Create Pdf True type font based on text.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.PrepareMatrix(Syncfusion.Drawing.Matrix,System.Single)">
            <summary>
            Prepares a matrix to PDF.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="pageScale">The page scale value.</param>
            <returns>
            A properly prepared PdfTransformationMatrix class instance.
            </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawParagraphBorders(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.DocIO.DLS.WParagraphFormat,Syncfusion.Layouting.LayoutedWidget,System.Boolean)">
            <summary>
            Draws the paragraph borders.
            </summary>
            <param name="paragraph">the paragraph</param>
            <param name="paraFormat">The paragraph format.</param>
            <param name="ltWidget">The lt widget.</param>
            <param name="isParagraphMarkIsHidden">isParagraphMarkIsHidden</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawParagraphBorders(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the paragraph borders
            </summary>
            <param name="borderRenderingOrder">Collection of borders, contains the each border rendering order</param>
            <param name="bounds">Border bounds</param>
            <param name="borders">Current paragraph borders</param>
            <param name="previousBorder">Previous paragraph borders</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawHorizontalBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the horizontal border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="isMultiLineLeftBorder">if set to <c>true</c> [is multi line left border].</param>
            <param name="isMultiLineRightBorder">if set to <c>true</c> [is multi line right border].</param>
            <param name="isMultiLineHorizontalBorder">if set to <c>true</c> [is multi line horizontal border].</param>
            <param name="betweenBorderLineWidth">Width of the between border line.</param>
            <param name="leftBorderLineWidth">Width of the left border line.</param>
            <param name="rightBorderLineWidth">Width of the right border line.</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawLeftBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Borders,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the left border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="previousBorder">The previous border.</param>
            <param name="isMultiLineTopBorder">if set to <c>true</c> [is multi line top border].</param>
            <param name="isMultiLineBottomBorder">if set to <c>true</c> [is multi line bottom border].</param>
            <param name="isMultiLineLeftBorder">if set to <c>true</c> [is multi line left border].</param>
            <param name="isMultiLineHorizontalBorder">if set to <c>true</c> [is multi line horizontal border].</param>
            <param name="leftBorderLineWidth">Width of the left border line.</param>
            <param name="topBorderLineWidth">Width of the top border line.</param>
            <param name="betweenBorderLineWidth">Width of the between border line.</param>
            <param name="bottomBorderLineWidth">Width of the bottom border line.</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawRightBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Borders,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the right border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="previousBorder">The previous border.</param>
            <param name="isMultiLineTopBorder">if set to <c>true</c> [is multi line top border].</param>
            <param name="isMultiLineHorizontalBorder">if set to <c>true</c> [is multi line horizontal border].</param>
            <param name="isMultiLineRightBorder">if set to <c>true</c> [is multi line right border].</param>
            <param name="isMultiLineBottomBorder">if set to <c>true</c> [is multi line bottom border].</param>
            <param name="rightBorderLineWidth">Width of the right border line.</param>
            <param name="topBorderLineWidth">Width of the top border line.</param>
            <param name="betweenBorderLineWidth">Width of the between border line.</param>
            <param name="bottomBorderLineWidth">Width of the bottom border line.</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTopBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Draws the top border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="isMultiLineTopBorder">if set to <c>true</c> [is multi line top border].</param>
            <param name="topBorderLineWidth">Width of the top border line.</param>
            <param name="leftBorderLineWidth">Width of the left border line.</param>
            <param name="rightBorderLineWidth">Width of the right border line.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBottomBorder(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.Borders,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Single,System.Single,System.Single,Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the bottom border.
            </summary>
            <param name="borderRenderingOrder">The border rendering order.</param>
            <param name="bounds">The bounds.</param>
            <param name="borders">The borders.</param>
            <param name="border">The border.</param>
            <param name="isMultiLineBottomBorder">if set to <c>true</c> [is multi line bottom border].</param>
            <param name="leftBorderLineWidth">Width of the left border line.</param>
            <param name="bottomBorderLineWidth">Width of the bottom border line.</param>
            <param name="rightBorderLineWidth">Width of the right border line.</param>
            <param name="paragraph">Paragraph</param>
            <param name="ltWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetSpaceForBottomBorder(Syncfusion.DocIO.DLS.Entity)">
            <summary>
            If paragraph inside Text box or shape have bottom border and that paragraph is the last element of textbox means 
            Microsoft word will preserve the bottom border at the top of the bottom margin of text box or shape by subtracting the internal bottom margin spacing and the text box or shape line width.
            </summary>
            <param name="entity"></param>
            <returns>The spacing between the paragraph bottom border and textbox's or shape's bottom border</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.SortTwoBorders(System.Collections.Generic.List{Syncfusion.DocIO.DLS.Border},Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Borders,System.Boolean)">
            <summary>
            Sort the borders based on brightness
            </summary>
            <param name="renderingOrderList">Border rendering order list</param>
            <param name="firstBorder">Horizontal border</param>
            <param name="secondBorder">Either left border/right border</param>
            <param name="borders">Current paragraph borders</param>
            <param name="isLeftBorder">To ensure wether we need to remove left or right border</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddNextParagraphBounds(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF@)">
            <summary>
            Adds the next paragraph bounds.
            </summary>
            <param name="layoutedWidget">The layouted widget.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawRevisionMark(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Draw the revision bars in the specified color and width
            </summary>
            <param name="start">Start point of the revision bar</param>
            <param name="end">End point of the revision bar</param>
            <param name="lineColor">Color of the revision bar</param>
            <param name="lineWidth">Width of the revision bar</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the border.
            </summary>
            <param name="border">The border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawParagraphBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the border.
            </summary>
            <param name="border">The border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBorder(Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draws the border.
            </summary>
            <param name="border">The border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTable(Syncfusion.DocIO.DLS.WTable,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the table.
            </summary>
            <param name="table">The table.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTableRow(Syncfusion.DocIO.DLS.WTableRow,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the table row.
            </summary>
            <param name="row">The row.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTableCell(Syncfusion.DocIO.DLS.WTableCell,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the table cell.
            </summary>
            <param name="cell">The cell.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillCellColor(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Fill the Cell Color
            </summary>
            <param name="ltWidget">The Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTexBoxHaveBackgroundPicture(Syncfusion.DocIO.DLS.WTextBox)">
            <summary>
            Checks the TextBox for Background picture.
            </summary>
            <param name="textbox"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTextureStyle(Syncfusion.DocIO.TextureStyle,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the texture style.
            </summary>
            <param name="textureStyle"></param>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetForeColor(Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Gets the fore color.
            </summary>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetColorValue(System.Int32,System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Gets the color value.
            </summary>
            <param name="foreColorValue">The fore color value.</param>
            <param name="backColorValue">The back color value.</param>
            <param name="percent">The percent.</param>
            <param name="isForeColorEmpty">isForeColorEmpty</param>
            <param name="isBackColorEmpty">isBackColorEmpty</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillTexture(Syncfusion.DocIO.TextureStyle,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.RectangleF)">
            <summary>
            Fill Texture within the bounds
            </summary>
            <param name="textureStyle">Texture Style</param>
            <param name="foreColor">Fore Color</param>
            <param name="backColor">Back Color</param>
            <param name="bounds">Bounds</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCellBorders(Syncfusion.DocIO.DLS.WTableCell,Syncfusion.Layouting.LayoutedWidget,System.Single)">
            <summary>
            Draws the cell borders.
            </summary>
            <param name="cell">The cell.</param>
            <param name="ltWidget">The lt widget.</param>
            <param name="previousCellsTopBorderWidth">The previous cells top border width</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineLeftBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line left border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isFirstRow">if set to <c>true</c> [is first row].</param>
            <param name="isLastRow">if set to <c>true</c> [is last row].</param>
            <param name="isFirstCell">if set to <c>true</c> [is first cell].</param>
            <param name="isLastCell">if set to <c>true</c> [is last cell].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineLeftBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line left border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isFirstRow">if set to <c>true</c> [is first row].</param>
            <param name="isLastRow">if set to <c>true</c> [is last row].</param>
            <param name="isFirstCell">if set to <c>true</c> [is first cell].</param>
            <param name="isLastCell">if set to <c>true</c> [is last cell].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineRightBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line right border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isFirstRow">if set to <c>true</c> [is first row].</param>
            <param name="isLastRow">if set to <c>true</c> [is last row].</param>
            <param name="isFirstCell">if set to <c>true</c> [is first cell].</param>
            <param name="isLastCell">if set to <c>true</c> [is last cell].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineRightBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the right double line border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isFirstRow">if set to <c>true</c> [is first row].</param>
            <param name="isLastRow">if set to <c>true</c> [is last row].</param>
            <param name="isFirstCell">if set to <c>true</c> [is first cell].</param>
            <param name="isLastCell">if set to <c>true</c> [is last cell].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineBottomBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the multi line bottom border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isBiDiTable">isBiDiTable</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineBottomBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the double line bottom border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isBiDiTable">isBiDiTable</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineTopBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line top border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isStart">if set to <c>true</c> [is start].</param>
            <param name="isEnd">if set to <c>true</c> [is end].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineTopBorder(Syncfusion.Layouting.CellLayoutInfo,Syncfusion.Layouting.CellLayoutInfo.CellBorder,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the top double line border.
            </summary>
            <param name="cellLayoutInfo">The cell layout information.</param>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isStart">if set to <c>true</c> [is start].</param>
            <param name="isEnd">if set to <c>true</c> [is end].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsMultiLineBorder(Syncfusion.DocIO.DLS.BorderStyle)">
            <summary>
            Determines whether the specified border is multiline border
            </summary>
            <param name="borderType">Type of the border.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsMultiLineParagraphBorder(Syncfusion.DocIO.DLS.BorderStyle)">
            <summary>
            Determines whether [is multi line paragraph border] [the specified border type].
            </summary>
            <param name="borderType">Type of the border.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBorderLineWidthArray(Syncfusion.DocIO.DLS.BorderStyle,System.Single)">
            <summary>
            Gets the border line array.
            </summary>
            <param name="borderType">Type of the border.</param>
            <param name="lineWidth">Width of the line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsDoubleBorder(Syncfusion.DocIO.DLS.Border)">
            <summary>
            To identify whether current border is double line border or triple line border
            </summary>
            <param name="border">Current border which is need to be check</param>
            <returns><c>True</c>id the current border type is double border</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineLeftBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line left border.
            </summary>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineLeftBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line left border.
            </summary>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineLeftBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line left border.
            </summary>
            <param name="leftBorder">The left border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineRightBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line right border.
            </summary>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineRightBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line right border.
            </summary>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineRightBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line right border.
            </summary>
            <param name="rightBorder">The right border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isTopBorderSame">if set to <c>true</c> [is top border same].</param>
            <param name="isBetweenBorderSame">if set to <c>true</c> [is between border same].</param>
            <param name="isBottomBorderSame">if set to <c>true</c> [is bottom border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineTopBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line top border.
            </summary>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineTopBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line top border.
            </summary>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineTopBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line top border.
            </summary>
            <param name="topBorder">The top border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineBottomBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line bottom border.
            </summary>
            <param name="bottomBorder">The bottom border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineBottomBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line bottom border.
            </summary>
            <param name="bottomBorder">The bottom border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLine(Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.DocIO.DLS.BorderStyle,System.Single,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF)">
            <summary>
            Draw the double line for the text.
            </summary>
            <param name="charFormat">charFormat</param>
            <param name="borderType">borderType</param>
            <param name="lineWidth">lineWidth</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineBottomBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line bottom border.
            </summary>
            <param name="bottomBorder">The bottom border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMultiLineBetweenBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Boolean)">
            <summary>
            Draws the multi line between border.
            </summary>
            <param name="betweenBorder">The between border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
            <param name="leftBorder">The left border.</param>
            <param name="rightBorder">The right border.</param>
            <param name="isOverlapLeft">if set to <c>true</c> [is overlap left].</param>
            <param name="isOverlapRight">if set to <c>true</c> [is overlap right].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawDoubleLineBetweenBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Boolean)">
            <summary>
            Draws the double line between border.
            </summary>
            <param name="betweenBorder">The between border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
            <param name="leftBorder">The left border.</param>
            <param name="rightBorder">The right border.</param>
            <param name="isOverlapLeft">if set to <c>true</c> [is overlap left].</param>
            <param name="isOverlapRight">if set to <c>true</c> [is overlap right].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTripleLineBetweenBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean,System.Boolean,Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border,System.Boolean,System.Boolean)">
            <summary>
            Draws the triple line between border.
            </summary>
            <param name="betweenBorder">The between border.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isLeftBorderSame">if set to <c>true</c> [is left border same].</param>
            <param name="isRightBorderSame">if set to <c>true</c> [is right border same].</param>
            <param name="leftBorder">The left border.</param>
            <param name="rightBorder">The right border.</param>
            <param name="isOverlapLeft">if set to <c>true</c> [is overlap left].</param>
            <param name="isOverlapRight">if set to <c>true</c> [is overlap right].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLeftRightLineWidht(System.Single[],System.Boolean)">
            <summary>
            Gets the adjacent border line width
            </summary>
            <param name="lineArray">Left or right border line array</param>
            <param name="isLeft"><c>true</c> if we passing left border line array; otherwise false</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBackgroundColor(Syncfusion.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draws the color of the background.
            </summary>
            <param name="bgColor">Color of the bg.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBackgroundImage(Syncfusion.Drawing.SkiaSharpHelper.Image,Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Draws the back ground image.
            </summary>
            <param name="image">The image.</param>
            <param name="pageSetup">The page setup.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawWatermark(Syncfusion.DocIO.DLS.Watermark,Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draws the Watermark
            </summary>
            <param name="watermark">Watermark</param>
            <param name="pageSetup">Page setup</param>
            <param name="bounds">Bounds</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.Rendering.Page,System.Int32@)">
            <summary>
            Imlementation of Draw method of page. 
            </summary>
            <param name="page">Currentl drawing page</param>
            <param name="autoTagsCount">autoTagsCount</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawMarkupTriangles(Syncfusion.Drawing.PointF,Syncfusion.Drawing.Color)">
            <summary>
            Draws Markup triangles.
            </summary>
            <param name="position">Position to draw the triangle.</param>
            <param name="revisionColor">Revision Color</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsEmptyWaterMark(Syncfusion.DocIO.DLS.Watermark)">
            <summary>
            Checks the current watermark is empty watermark or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWaterMarkNeedToBeDraw(Syncfusion.DocIO.DLS.Rendering.Page)">
            <summary>
            Checks the HeaderFooter Paragraph and Table Weather WaterMark has to draw first
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWaterMarkInParagraph(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.DocIO.DLS.Rendering.Page)">
            <summary>
            Checks the paragraph weather watermark in Paragraph
            </summary>
            <param name="paragraph"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWaterMarkInTable(Syncfusion.DocIO.DLS.WTable,Syncfusion.DocIO.DLS.Rendering.Page)">
            <summary>
            Checks the paragraph weather watermark in Table
            </summary>
            <param name="table"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsWaterMarkOrderHasChanged(System.Int32,System.Boolean,Syncfusion.DocIO.DLS.Rendering.Page)">
            <summary>
            Checks which One has to draw first watermark or picture,shape,textbox
            </summary>
            <param name="OrderIndex"></param>
            <param name="IsBelowText"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.SplitWidgetContainer,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the splitWidgetContainer to PDF document or Image.
            </summary>
            <param name="widget">Currentl split widget container</param>
            <param name="layoutedWidget">Layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AlignChildWidgets(Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Align the child widgets.
            </summary>
            <param name="LastLine">The layouted widget.</param>
            <param name="paragraph">The paragraph.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.IWidgetContainer,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Imlementation of Draw method of IWidget interface .
            </summary>
            <param name="widget"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawImpl(Syncfusion.Layouting.IWidgetContainer,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw widget to graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.IWidget,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the specified dc.
            </summary>
            <param name="widget"></param>
            <param name="layoutedWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsNeedToSkip(Syncfusion.Layouting.IWidget)">
            <summary>
            Check whether the widget is need to drwa or not
            </summary>
            <param name="widget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawPageBorder(System.Int32,Syncfusion.DocIO.DLS.Rendering.PageCollection)">
            <summary>
            Draw the page border
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageCollection"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.BookmarkStart,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Imlementation of Draw method of BookMark interface .
            </summary>
            <param name="bookmarkStart"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsNeedToClip(Syncfusion.Drawing.RectangleF)">
            <summary>
            Decides whether Clipping is necessary or not.
            </summary>
            <param name="itemBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetHightLightColor(Syncfusion.Drawing.Color)">
            <summary>
            Get text highlight color
            </summary>
            <param name="itemBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTextRange(Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Check whether the paragrah contains Text range
            </summary>
            <param name="paragraph"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEmptyString(Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WParagraph)">
            <summary>
            Draw the Empty string with white space to preserve Tags.
            </summary>
            <param name="layoutedWidget"></param>
            <param name="paragraph"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.LayoutedWidget,System.Boolean)">
            <summary>
            Imlementation of Draw method of LayoutedWidget interface .
            </summary>
            <param name="layoutedWidget">The Layouted widget.</param>
            <param name="isHaveToInitLayoutInfo">Is need to initialize layout info</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetSpaceWidthAtEndFromText(Syncfusion.DocIO.DLS.WTextRange,System.String)">
            <summary>
            Get space width at end of the line widget.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsRTLParaLine(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Checks whether the paragraph line is RTL.
            </summary>
            <param name="m_currChildLW"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.HasTextRangeBidi(Syncfusion.Layouting.LayoutedWidgetList)">
            <summary>
            Checks whether the paragraph line has text bidi.
            </summary>
            <param name="layoutedWidgets"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsLineItemDrawn(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Check that Line item are drawn.
            </summary>
            <param name="ltWidget">LayoutedWidget</param>
            <returns>Return true, if line items are drawn.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawLine(System.Collections.Generic.Dictionary{Syncfusion.DocIO.DLS.WCharacterFormat,System.Collections.Generic.List{Syncfusion.Drawing.RectangleF}},System.Collections.Generic.Dictionary{Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF})">
            <summary>
            Draw the Line Based in the collection.
            </summary>
            <param name="underLineValues">Contains the underline values</param>
            <param name="strikeThroughValues">Contains the strike through values</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ScaleTransform(Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean@)">
            <summary>
            Scale the graphics transform matrix.
            </summary>
            <param name="characterFormat">The character format.</param>
            <param name="isNeedToScale">Indicates whether the line need to scale or not.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsNeedToChangeUnderLineWidth(System.String)">
            <summary>
            Checks whether the underline width is need to change or not.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawUnderLine(Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draw the underline style.
            </summary>
            <param name="characterFormat"></param>
            <param name="textBounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCompoundLine(System.Single[],Syncfusion.Drawing.PointF[],Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draw double underline style using compoundArray property
            </summary>
            <param name="compoundArray"></param>
            <param name="points"></param>
            <param name="pen"></param>
            <param name="PDFGraphics"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateWavyPath(Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.Font)">
            <summary>
            Draw a wavy line using Bezier points
            </summary>
            <param name="characterFormat">represents the character properties of the text</param>
            <param name="bounds">represents the bounds of the text</param>
             <param name="font">represents the font of the text</param>
            <returns>Returns the Object of PDFGraphics to draw the wavy line</returns>
            <Remarks>To-Do:- PdfPath.AddCurve() method is not supported in PDF library. So, only here we are using PdfPath.AddBezier() method to draw the wavy line</Remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStrikeThrough(Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.RectangleF)" -->
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePen(Syncfusion.DocIO.DLS.WCharacterFormat,System.Single)">
            <summary>
            Create the Pen to draw the Line for Underline and Strike through.
            </summary>
            <param name="charFormat">charFormat</param>
            <param name="lineWidth">lineWidth</param>
            <returns>Return the Pen to draw the line.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsNeedToRemoveClipBounds(Syncfusion.Layouting.IWidget)">
            <summary>
            Checks whether clip bounds need to remove from container.
            </summary>
            <param name="widget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.TextboxClipBounds(Syncfusion.DocIO.DLS.WTable,Syncfusion.Drawing.RectangleF)">
            <summary>
            Increase the bounds with the table paddings.
            </summary>
            <param name="table"></param>
            <param name="clipBounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateClipBounds(Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Updates the clip bounds based on its owner clip bounds.
            </summary>
            <param name="clipBounds"></param>
            <param name="reverseClipping"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.SetClip(Syncfusion.Drawing.RectangleF)">
            <summary>
            Sets clipping for the particular region.
            </summary>
            <param name="clippingBounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ResetTransform">
            <summary>
            Resets Graphics Transform positions.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.SetScaleTransform(System.Single,System.Single)">
            <summary>
            Scale the graphics with input X and Y scaling values.
            </summary>
            <param name="sx">Specify the scaling factor of X.</param>
            <param name="sy">Specify the scaling factor of Y.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetClippingBounds(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get the bounds based on the frame content.
            </summary>
            <param name="cellltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the paragraph
            </summary>
            <param name="paragraph"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCommentHighlighter(Syncfusion.Layouting.LayoutedWidget,Syncfusion.DocIO.DLS.WordDocument)">
            <summary>
            Draw a Comment highlighter for the line.
            </summary>
            <param name="ltWidget">Represents a layouted widget of line.</param>
            <param name="document">Represents a WordDocument.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetKeyValuePair(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Boolean}})">
            <summary>
            Gets a KeyValuePair for the specified key from specified collection.
            </summary>
            <param name="inputKey">Represents a input key to find.</param>
            <param name="keyValuePairCollection">Represents a KVP colection.</param>
            <returns>Returns a KeyValuePair for the specified key from specified collection.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ContainsKey(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Boolean}})">
            <summary>
            Check whether a KeyValuePair is available in specified collection for the specified key.
            </summary>
            <param name="inputKey">Represents a input key to find.</param>
            <param name="keyValuePairCollection">Represents a KVP colection.</param>
            <returns>Returns a true, if KeyValuePair available in specified collection; Otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCommentHighlighter(Syncfusion.DocIO.DLS.RevisionOptions,Syncfusion.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draw a comment highlighter.
            </summary>
            <param name="hightLightColor"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetMaximumHeightWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Gets maximum height widget of line.
            </summary>
            <param name="ltWidget">Represent a layouted widget of line.</param>
            <returns>Returns a LayoutedWidget, which has maximum height in line.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsLinesInteresectWithFloatingItems(Syncfusion.Layouting.LayoutedWidget,System.Boolean)">
            <summary>
            Check whether any of line for current paragraph intersect with floating items.
            </summary>
            <param name="ltWidget">Current widget</param>
            <param name="isLineContainer">Whether this is line or line container</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawLineBackGroundColors(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the back ground colour for current line.
            </summary>
            <param name="paragraph">Current paragraph</param>
            <param name="ltWidget">Current line widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBackGroundColorRenderingBounds(Syncfusion.Layouting.LayoutedWidget,Syncfusion.Drawing.RectangleF)">
            <summary>
            Find the Back ground color rendering bounds.
            </summary>
            <param name="ltWidget"></param>
            <param name="remaingingBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindFillColorBounds(System.Boolean@,Syncfusion.Drawing.RectangleF,System.Collections.Generic.List{Syncfusion.Drawing.RectangleF},Syncfusion.Drawing.RectangleF)">
            <summary>
            Check whether line preserved left or right or between floating items.
            </summary>
            <param name="isNeedToFindFillColorRenderingBounds"></param>
            <param name="childItemBounds"></param>
            <param name="intersectingBoundsCollection"></param>
            <param name="remaingingBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetInnerItemsRenderingBounds(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get the current child widget total bounds.
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.SplitTableWidget,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the split table widget
            </summary>
            <param name="splitTableWidget"></param>
            <param name="layoutedWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.BlockContentControl,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw method for BlockContentControl
            </summary>
            <param name="SDT"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.InlineContentControl,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw method for InlineContentControl
            </summary>
            <param name="SDT"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WCommentMark,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw WCommentMark
            </summary>
            <param name="absoluteTab"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WAbsoluteTab,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw AbsoluteTab
            </summary>
            <param name="absoluteTab"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WChart,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw chart as image
            </summary>
            <param name="chart"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawChart(Syncfusion.DocIO.DLS.WChart,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws chart
            </summary>
            <param name="chart"></param>
            <param name="widget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WCheckBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the Check box.
            </summary>
            <param name="checkBox"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WDropDownFormField,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the Drop Down Form Field.
            </summary>
            <param name="dropDownFormField"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WField,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the Fields.
            </summary>
            <param name="field"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WOleObject,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw Ole Object.
            </summary>
            <param name="oleObject"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the Picture.
            </summary>
            <param name="picture"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WSymbol,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the symbol.
            </summary>
            <param name="symbol"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTable,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the table.
            </summary>
            <param name="table"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFirstItemInFrame(Syncfusion.Layouting.LayoutedWidgetList,System.Int32,Syncfusion.DocIO.DLS.WParagraphFormat)">
            <summary>
            Gets the frames first item.
            </summary>
            <param name="layoutedWidgets"></param>
            <param name="index"></param>
            <param name="originalFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTableCell,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the table cell.
            </summary>
            <param name="cell"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTableRow,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the table row.
            </summary>
            <param name="row"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTextBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the textbox.
            </summary>
            <param name="textBox"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTextFormField,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the text form field.
            </summary>
            <param name="textFormField"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.LeafEmtyWidget,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Imlementation of Draw method of LayoutedWidget interface 
            </summary>
            <param name="leafEmtyWidget"></param>
            <param name="layoutedWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.Shape,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the shape to PDF document or Image.
            </summary>
            <param name="shape">Current shape entity</param>
            <param name="ltWidget">Current shale layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the shape to PDF document or Image.
            </summary>
            <param name="shape">Current shape entity</param>
            <param name="ltWidget">Current shale layouted widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.SplitStringWidget,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the splitStringWidget
            </summary>
            <param name="splitStringWidget">SplitStringWidget</param>
            <param name="layoutedWidget">Layouted split string widget</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.DocIO.DLS.WTextRange,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the text ranges.
            </summary>
            <param name="textRange"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Draw(Syncfusion.Layouting.IStringWidget,Syncfusion.Layouting.LayoutedWidget,System.String)">
            <summary>
            Draw widget to graphics.   
            </summary>
            <param name="stringWidget"></param>
            <param name="ltWidget"></param>
            <param name="text"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawImpl(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw widget to graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOwnerLayoutedWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get Cell Widget
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetParagraphWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Gets the owner widget of the paragraph
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCellWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Get owner widget of the cell
            </summary>
            <param name="ltWidget"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsOverLappedShapeWidget(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Determines whether the layouted widget is Overlapping Widget
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <returns>
            	<c>true</c> if the layouted widget is Overlapping shape widget; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateWaterMarkPosition(Syncfusion.DocIO.DLS.ParagraphItem,Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF)">
            <summary>
            Update the positions of text watermark.
            </summary>
            <param name="pItem">TextWatermark</param>
            <param name="pageSetup"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawTextWatermark(Syncfusion.DocIO.DLS.TextWatermark,Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Draw the text watermark.
            </summary>
            <param name="textWatermark"></param>
            <param name="bounds"></param>
            <param name="pageSetup"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ConvertAsImage(Syncfusion.DocIO.DLS.TextWatermark,Syncfusion.Drawing.Font)">
            <summary>
            Convert the Watermark text as Bitmap Image.
            </summary>
            <param name="textWatermark"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ChangeColorBrightness(Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Change the given color brightness
            </summary>
            <param name="color"></param>
            <param name="correctionFactor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawPageBorder(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draw border for the page
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLeftBorderPoints(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the bounds to draw left border
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRightBorderPoints(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the bounds to draw right border
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBottomBorderPoints(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the bounds to draw bottom border
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTopBorderPoints(Syncfusion.DocIO.DLS.WPageSetup,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the bounds to draw top border
            </summary>
            <param name="pageSetup">Page setup object</param>
            <param name="headerBounds">Header bounds</param>
            <param name="footerBounds">Footer bounds</param>
            <param name="pageBounds">Page bounds</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFontSize(Syncfusion.DocIO.DLS.TextWatermark)">
            <summary>
            Gets the font size for Text Watermark
            </summary>
            <param name="textWatermark">Text Watermark</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawImageWatermark(Syncfusion.DocIO.DLS.PictureWatermark,Syncfusion.Drawing.RectangleF,Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Draws the Picture Watermark
            </summary>
            <param name="pictureWatermark">Picture Watermark</param>
            <param name="bounds">Bounds</param>
            <param name="pageSetup">Page Setup</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawEditableCheckbox(Syncfusion.DocIO.DLS.WCheckBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the Editable check box.
            </summary>
            <param name="checkbox">The checkbox.</param>
            <param name="ltWidget">The ltWidget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCheckBox(Syncfusion.DocIO.DLS.WCheckBox,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draws the check box.
            </summary>
            <param name="checkbox">The checkbox.</param>
            <param name="ltWidget">The lt widget.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawPictureFill(System.Byte[],Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.Drawing.RectangleF,System.Single)">
            <summary>
            Draw picture fill 
            </summary>
            <param name="imageBytes">Imagebytes</param>
            <param name="path">Shapes path</param>
            <param name="bounds">Layouted widget bounds</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ApplyImageTransparency(Syncfusion.Drawing.SkiaSharpHelper.ImageAttributes,System.Single)">
            <summary>
            Apply transparency for image
            </summary>
            <param name="imageAttributes">Represents image Attributes</param>
            <param name="transparency">Represents image transparency</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPdfLineJoin(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin)">
            <summary>
            Convert the LineJoin as PdfLineJoin
            </summary>
            <param name="lineJoin"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawChildShape(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw child shape
            </summary>
            <param name="childShape"></param>
            <param name="ltWidget"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsShapeNeedToBeFill(Syncfusion.DocIO.DLS.AutoShapeType)">
            <summary>
            
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTransformMatrix(Syncfusion.Drawing.RectangleF,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Rotate the shape based on Flip positions
            </summary>
            <param name="bounds"></param>
            <param name="ang"></param>
            <param name="flipH"></param>
            <param name="flipV"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetGraphicsPath(Syncfusion.DocIO.DLS.Shape,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPen@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetGraphicsPath(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPen@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureImage(Syncfusion.DocIO.DLS.WPicture)">
            <summary>
            Measures the image.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasurePictureBulletSize(Syncfusion.DocIO.DLS.WPicture,Syncfusion.Drawing.Font)">
            <summary>
            Measures the picture bullet size
            </summary>
            <param name="picture">Picture</param>
            <param name="font">Font</param>
            <returns>The size of picture bullet</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <param name="charFormat">The character format.</param>
            <param name="isMeasureFromTabList">isMeasureFromTabList</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetExactStringBounds(System.String,Syncfusion.Drawing.Font)">
            <summary>
            Gets the exact bounds of a string without an line spacing and top/bottom spacing values of font.
            </summary>
            <param name="text">Specify the input string.</param>
            <param name="font">Specify the font to measure.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,System.Boolean,System.Boolean,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <param name="charFormat">The character format.</param>
            <param name="isMeasureFromTabList">if set to <c>true</c> [is measure from tab list].</param>
            <param name="isMeasureFromSmallCapString">if set to <c>true</c> [is measure from small cap string].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetSubSuperScriptFontSize(Syncfusion.Drawing.Font)">
            <summary>
            Calculates the font size for subscript and superscript font.
            </summary>
            <param name="font">Represets a normal font to change as subscript and superscript size.</param>
            <returns>Returns font size of subscript and superscript for corresponding inputed font.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetExceededLineHeightForArialUnicodeMSFont(Syncfusion.Drawing.Font,System.Boolean,Syncfusion.Office.FontScriptType)">
            <summary>
            Get the Exceeded line height of the Arial unicode MS font.
            </summary>
            <param name="font">The font.</param>
            <param name="isAscent">isAscent.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="defaultFont">The default font</param>
            <param name="format">The format.</param>
            <param name="charFormat">The Character format</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureSmallCapString(System.String,Syncfusion.Drawing.SizeF@,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Measures the small cap string.
            </summary>
            <param name="text">The text.</param>
            <param name="size">The size.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
            <param name="charFormat">The character format.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureUnicodeString(System.String,Syncfusion.Drawing.Font,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Office.FontScriptType)">
            <summary>
            Draw Unicode Text
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="defaultFont"></param>
            <param name="format"></param>
            <param name="charFormat"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MeasureTextRange(Syncfusion.DocIO.DLS.WTextRange,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="txtRange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetAscent(Syncfusion.Drawing.Font,Syncfusion.Office.FontScriptType)">
            <summary>
            Gets the ascent
            </summary>
            <param name="font">The Font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetDescent(Syncfusion.Drawing.Font,Syncfusion.Office.FontScriptType)">
            <summary>
            Gets the descent
            </summary>
            <param name="font">The Font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IntializeGraphics(Syncfusion.DocIO.DLS.WPageSetup)">
            <summary>
            Intialize the Graphics with specified WPageSetup.
            </summary>
            <param name="pageSetup">Represents a PageSetup.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DisposeGraphics">
            <summary>
            Dispose a instance of Graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FillRectangle(Syncfusion.Drawing.Color,Syncfusion.Drawing.Rectangle)">
            <summary>
            Fill a rectangle with specified color.
            </summary>
            <param name="color">Represents a color to be fill.</param>
            <param name="rectangle">Represents a bounds of Rectangle.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MatrixTranslate(Syncfusion.Drawing.Matrix,System.Single,System.Single,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Translate the specified matrix with offsetX and offsetY
            </summary>
            <param name="matrix">Represent the matrix to translate</param>
            <param name="x">Represent the offsetX</param>
            <param name="y">Represent the offsetY</param>
            <param name="matrixOrder">Represent the MatrixOrder to traslate</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MatrixMultiply(Syncfusion.Drawing.Matrix,Syncfusion.Drawing.Matrix,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Multiply the specified matrix with target matrix
            </summary>
            <param name="matrix">Represent the matrix to translate</param>
            <param name="target">Represent the target matrix</param>
            <param name="matrixOrder">Represent the MatrixOrder to traslate</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.MatrixRotate(Syncfusion.Drawing.Matrix,System.Single,Syncfusion.Drawing.PointF,Syncfusion.Drawing.MatrixOrder)">
            <summary>
            Rotate the specified matrix with specified angle.
            </summary>
            <param name="matrix"></param>
            <param name="angle">Represent the angle to rotate the matrix</param>
            <param name="point">Represent the center point to rotate a matrix</param>
            <param name="matrixOrder">Represent the MatrixOrder to traslate</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateGraphicsPath">
            <summary>
            Gets a new GraphicsPath object.
            </summary>
            <returns>Returns a new GraphicsPath object.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateBitmap(System.Int32,System.Int32)">
            <summary>
            Gets a new Bitmap object with specified width and height.
            </summary>
            <param name="width">Represents a width of Bitmap.</param>
            <param name="height">Represents a height of Bitmap.</param>
            <returns>Returns a new Bitmap object with specified width and height.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetGraphicsFromImage(Syncfusion.Drawing.SkiaSharpHelper.Bitmap)">
            <summary>
            Gets a Graphics of with specified image.
            </summary>
            <param name="bmp">Represents a image that we need to gets a graphics.</param>
            <returns>Returns a Graphics of with specified image.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateBitmap">
            <summary>
            Gets a new Bitmap object.
            </summary>
            <returns>Returns a new Bitmap object.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateBrush(Syncfusion.Drawing.Color)">
            <summary>
            Gets a new SolidBrush object with specified color.
            </summary>
            <param name="color">Represents a color of SolidBrush.</param>
            <returns>Returns a new SolidBrush object with specified color.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreatePen(Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Gets a new Pen object with specified color and width.
            </summary>
            <param name="color">Represents a color of Pen.</param>
            <param name="width">Represents a width of Pen.</param>
            <returns>Returns a new Pen object with specified color and width.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@,Syncfusion.Drawing.PointF[])">
            <summary>
            Draws the arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
            <param name="linePoints">The line points1.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@,Syncfusion.Drawing.PointF[])">
            <summary>
            Draws the arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
            <param name="linePoints">The line points1.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawOpenEndArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the open end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCloseEndArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the close end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStealthEndArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the stealth end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCloseEndArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the close end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStealthEndArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the stealth end arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawOpenBeginArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the open begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawOpenBeginArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the open begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCloseBeginArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the close begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawCloseBeginArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the close begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStealthBeginArrowHead(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the stealth begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawStealthBeginArrowHead(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,System.Boolean@,Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Draws the stealth begin arrow head.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="endPoint">The end point.</param>
            <param name="isArrowHeadExist">if set to <c>true</c> [is arrow head exist].</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddCloseArrowHeadPoints(Syncfusion.Drawing.PointF[],Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Adds the close arrow head points.
            </summary>
            <param name="points">The points.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddStealthArrowHeadPoints(Syncfusion.Drawing.PointF[],Syncfusion.Pdf.Graphics.PdfPen)">
            <summary>
            Adds the stealth arrow head points.
            </summary>
            <param name="points">The points.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddOpenArrowHeadPoints(Syncfusion.Drawing.PointF[],Syncfusion.Pdf.Graphics.PdfPath@)">
            <summary>
            Adds the open arrow head points.
            </summary>
            <param name="points">The points.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOpenArrowDefaultValues(Syncfusion.DocIO.DLS.LineFormat,System.Single,System.Single@,System.Single@,System.Single@,System.Boolean)">
            <summary>
            Gets the open arrow default values.
            </summary>
            <param name="lineFormat">The lineFormat.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCloseArrowDefaultValues(Syncfusion.DocIO.DLS.LineFormat,System.Single,System.Single@,System.Single@,System.Single@,System.Boolean)">
            <summary>
            Gets the close arrow default values.
            </summary>
            <param name="lineFormat">The shape lineFormat.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetArrowHeadLength(Syncfusion.DocIO.DLS.LineFormat,System.Boolean)">
            <summary>
            Gets the length of the arrow head.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCloseNarrowArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the close narrow arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCloseMediumArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the close medium arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCloseWideArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the close wide arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOpenNarrowArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the open narrow arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOpenMediumArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the open medium arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOpenWideArrowDefaultValues(Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the open wide arrow default values.
            </summary>
            <param name="arrowHeadLength">Length of the arrow head.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindAngleToLeftAndRightHeadPoint(System.Boolean,System.Boolean,System.Single,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Finds the angle to left and right head point.
            </summary>
            <param name="isFlipHorizontal"></param>
            <param name="isFlipVertical"></param>
            <param name="width"></param>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindAngleToLeftAndRightHeadPoint(Syncfusion.DocIO.DLS.Shape,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Finds the angle to left and right head point.
            </summary>
            <param name="shape">The shape.</param>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindArrowHeadAngleRadians(Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF,System.Boolean)">
            <summary>
            Finds the arrow head angle radians.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="isFromSeparateOrientation">if set to <c>true</c> [is from separate orientation].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindBaseLineEndPoint(System.Boolean,System.Boolean,System.Single,System.Single,Syncfusion.Drawing.PointF[],System.Single,System.Boolean)">
            <summary>
            Finds the base line end point.
            </summary>
            <param name="isFlipHorizontal"></param>
            <param name="isFlipVertical"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="linePoints">The line points.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetEndPointForBaseLine(System.Boolean,System.Double,System.Double,System.Single,Syncfusion.Drawing.PointF[],System.Single@,System.Single@)">
            <summary>
            Gets the end point.
            </summary>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
            <param name="degree">The degree.</param>
            <param name="length">The length.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="linePoints">The line points.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindAngleRadians(Syncfusion.Drawing.PointF[],System.Boolean)">
            <summary>
            Finds the angle radians.
            </summary>
            <param name="linePoints">The line points.</param>
            <param name="isFromBottomToTop">if set to <c>true</c> [is from bottom to top].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindArrowHeadPoints(Syncfusion.DocIO.DLS.Shape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],System.Boolean,System.Boolean)">
            <summary>
            Finds the end cap arrow head points.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="isFromOpenArrow">if set to <c>true</c> [is from open arrow].</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindArrowHeadPoints(Syncfusion.DocIO.DLS.ChildShape,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.PointF[],System.Boolean,System.Boolean)">
            <summary>
            Finds the end cap arrow head points.
            </summary>
            <param name="shape">The shape.</param>
            <param name="pen">The pen.</param>
            <param name="bounds">The bounds.</param>
            <param name="linePoints">The line points.</param>
            <param name="isFromOpenArrow">if set to <c>true</c> [is from open arrow].</param>
            <param name="isFromBeginArrow"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.FindLeftRightHeadPoints(System.Boolean,System.Boolean,System.Single,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF[]@,System.Single,System.Single,System.Boolean)">
            <summary>
            Finds the left right head points.
            </summary>
            <param name="isFlipHorizontal"></param>
            <param name="isFlipVertical"></param>
            <param name="width"></param>
            <param name="linePoints">The line points.</param>
            <param name="points">The points.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ConstrucBasetLine(System.Boolean,Syncfusion.Drawing.PointF,Syncfusion.Drawing.PointF[],Syncfusion.Drawing.PointF@,Syncfusion.Drawing.PointF@)">
            <summary>
            Construcs the baset line.
            </summary>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
            <param name="points">The points.</param>
            <param name="linePoints">The line points.</param>
            <param name="point1"></param>
            <param name="point2"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetArrowDefaultValues(Syncfusion.DocIO.DLS.LineFormat,Syncfusion.Pdf.Graphics.PdfPen,System.Single@,System.Single@,System.Single@,System.Boolean,System.Boolean)">
            <summary>
            Gets the arrow default values.
            </summary>
            <param name="lineFormat">The line Format.</param>
            <param name="pen">The pen.</param>
            <param name="arrowLength">Length of the arrow.</param>
            <param name="arrowAngle">The arrow angle.</param>
            <param name="adjustValue">The adjust value.</param>
            <param name="isFromOpenArrow"></param>
            <param name="isFromBeginArrow">if set to <c>true</c> [is from begin arrow].</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.RadianToDegree(System.Double)">
            <summary>
            Radians to degree.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Degree2Radian(System.Double)">
            <summary>
            Degree2s the radian.
            </summary>
            <param name="a">A.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetEndPoint(System.Double,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Gets the end point.
            </summary>
            <param name="angle">The angle.</param>
            <param name="len">The length.</param>
            <param name="start_x">The start_x.</param>
            <param name="start_y">The start_y.</param>
            <param name="end_x">The end_x.</param>
            <param name="end_y">The end_y.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLinePointsBasedOnFlip(System.Boolean,System.Boolean,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the line points based on flip.
            </summary>
            <param name="isFlipHorizontal"></param>
            <param name="isFlipVertical"></param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsSoftHyphen(Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Determines whether the text range is soft hyphen and that need to be drawn.
            </summary>
            <param name="ltWidget">The lt widget.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetStringFormat(Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Gets the string format.
            </summary>
            <param name="charFormat">The char format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetBrush(Syncfusion.Drawing.Color)">
            <summary>
            Gets the brush.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPDFBrush(Syncfusion.Drawing.Color)">
            <summary>
            Gets the pdf brush.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetTextColor(Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Gets the color of the text.
            </summary>
            <param name="charFormat">The char format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRevisionColor(Syncfusion.DocIO.DLS.RevisionColor)">
            <summary>
            Get the RevisionColor
            </summary>
            <param name="revisionColor">Revision color</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRevisionColor(Syncfusion.DocIO.DLS.RevisionColor,System.Boolean)">
            <summary>
            Get the RevisionColor
            </summary>
            <param name="revisionColor">Revision color</param>
            <param name="isInsertText">Is revision type insert type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRevisionColor(Syncfusion.DocIO.DLS.RevisionColor,System.Boolean,System.Boolean)">
            <summary>
            Get the RevisionColor
            </summary>
            <param name="revisionColor">Revision color</param>
            <param name="isInsertText">Is revision type insert type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetRevisionFillColor(Syncfusion.DocIO.DLS.RevisionColor,System.Boolean)">
            <summary>
            Get the RevisionColor to fill a comment balloon.
            </summary>
            <param name="revisionColor">Revision color</param>
            <param name="isInsertText">Is revision type insert type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateAlternateFont(Syncfusion.DocIO.DLS.WCharacterFormat,System.String,Syncfusion.Drawing.Font@)">
            <summary>
            Updates the alternate font for the font not installed in the system.
            </summary>
            <param name="charFormat">The char format.</param>
            <param name="fontName">Name of the font.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTOC(Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            Checks the owner paragraph of the textrange is a TOC
            </summary>
            <param name="txtRange">Text Range</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ParagraphContainsTOC(Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            Determins whether the paragraph is TOC.
            </summary>
            <param name="txtRange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ParagraphContainsHyperlink(Syncfusion.DocIO.DLS.Entity)">
            <summary>
            Determines the the paragraph contians hyperlink field.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.isTOCParagraphInHyperLink(Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            To check the current text range is present inside the HyperLink.
            </summary>
            <param name="txtRange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsTextRangeFound(Syncfusion.DocIO.DLS.WField,Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            Check whether current text range is present inside the hyperlink field.
            </summary>
            <param name="hyperLinkField"></param>
            <param name="textRange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetFont(Syncfusion.Office.FontScriptType,Syncfusion.DocIO.DLS.WCharacterFormat,System.String)">
            <summary>
            Gets the font.
            </summary>
            <param name="scriptType"></param>
            <param name="charFormat">The char format.</param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateBidiFont(Syncfusion.Office.FontScriptType,Syncfusion.DocIO.DLS.WCharacterFormat,Syncfusion.Drawing.Font,System.Single,Syncfusion.Drawing.FontStyle)">
            <summary>
            Updates the font name and size based on the Bidi property.
            </summary>
            <param name="scriptType"></param>
            <param name="charFormat">Character format of the current text range.</param>
            <param name="font">Font applied to the current text.</param>
            <param name="fontSize">Font size applied to the current text.</param>
            <param name="fontStyle">Font style applied to the current text.</param>
            <returns>Returns current text range Bidi font.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetStringAlignment(Syncfusion.DocIO.DLS.WParagraphFormat)">
            <summary>
            Gets the string alignment.
            </summary>
            <param name="paraFormat">The para format.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPen(Syncfusion.DocIO.DLS.Border,System.Boolean)">
            <summary>
            Gets the pen.
            </summary>
            <param name="border">The border.</param>
            <param name="isParagraphBorder"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPen(Syncfusion.DocIO.DLS.BorderStyle,System.Single,Syncfusion.Drawing.Color)">
            <summary>
            Gets the pen.
            </summary>
            <param name="borderType">Type of the border.</param>
            <param name="borderLineWidth">Width of the border line.</param>
            <param name="borderColor">Color of the border.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPen(Syncfusion.Drawing.UnderlineStyle,System.Single,Syncfusion.Drawing.Color)">
            <summary>
            Gets the pen.
            </summary>
            <param name="underlineStyle">Type of the underline.</param>
            <param name="lineWidth">Width of the underline.</param>
            <param name="lineColor">Color of the underline.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.ScaleImage(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Single,System.Single)">
            <summary>
            Scales the image.
            </summary>
            <param name="srcImage">The image.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddLinkToBookmark(Syncfusion.Drawing.RectangleF,System.String,System.Boolean)">
            <summary>
            Adds link to the bookmark.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="bookmarkName">The bookmark name.</param>
            <param name="isTargetNull">The target is nothing.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.CreateAndAddLinkToBookmark(Syncfusion.Drawing.RectangleF,System.String,System.Boolean)">
            <summary>
            Creates bookmark hyperlink and add into list.
            </summary>
            <param name="bounds"></param>
            <param name="bookmarkName"></param>
            <param name="isTargetNull"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.AddHyperLink(Syncfusion.DocIO.DLS.Hyperlink,Syncfusion.Drawing.RectangleF)">
            <summary>
            Adds the hyper link to collection.
            </summary>
            <param name="hyperlink">The hyperlink.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateBookmarkTargetBoundsAndPageNumber(Syncfusion.DocIO.DLS.Rendering.DocumentLayouter.BookmarkHyperlink,System.String)">
            <summary>
            Updates the target bounds and page number for current bookmark.
            </summary>
            <param name="bmhyperlink">Bookmark hyperlink.</param>
            <param name="bmHyperlinkValue">Bookmark hyperlink value.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateTOCLevel(Syncfusion.DocIO.DLS.WParagraph,Syncfusion.DocIO.DLS.Rendering.DocumentLayouter.BookmarkHyperlink)">
            <summary>
            Updates the TOC level.
            </summary>
            <param name="paragraph">The paragraph.</param>
            <param name="bookmark">The bookmark.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.UpdateResIndex(System.String,Syncfusion.Layouting.ITextMeasurable,System.Int32,System.Boolean,System.Boolean,System.Double,System.Single,System.Single,System.Boolean)">
            <summary>
            Updates Result index
            </summary>
            <param name="text">text</param>
            <param name="measurer">the measurer</param>
            <param name="resIndex">res index</param>
            <param name="bSplitByChar">bSplitByChar</param>
            <param name="bIsInCell">bIsInCell</param>
            <param name="offset">offset</param>
            <param name="clientWidth">Client Width</param>
            <param name="clientActiveAreaWidth"></param>
            <param name="isSplitByCharacter"></param>
            <returns>res Index</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsLeadingCharacter(System.Char)">
            <summary>
            Determine whether the character is CJK leading character
            A line of text cannot end with any leading characters, which are listed below
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsBeginCharacter(System.Char)">
            <summary>
            Determine whether the character is Begin CJK character
            A line of text cannot begin with any following characters
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsOverFlowCharacter(System.Char)">
            <summary>
            Determine whether the character is CJK overflow character
            Overflow characters are allowed to render in the same line when it doesn't have required client width to fit the character
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsUnicodeText(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPreviousSibling(Syncfusion.DocIO.DLS.WTextRange)">
            <summary>
            Get previous text range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetCellWidth(Syncfusion.DocIO.DLS.ParagraphItem)">
            <summary>
            Get cell Width
            </summary>
            <param name="paraItem">The paragraph item</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetPdfFontCollectionKey(Syncfusion.Drawing.Font,System.Boolean)">
            <summary>
            Concatenates the font name, style, font size and Unicode text and returns the key for PDFFontCollection.
            </summary>
            <param name="font">Font object to extract font name, font size and font style from.</param>
            <param name="isUnicode">check whether it's unicode or not.</param>
            <returns>Key for the PdfFontCollection dictionary to store and retreive the created PdfFont.</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.IsUnicode(System.String)">
            <summary>
            Determines whether the text is unicode
            </summary>
            <param name="text">text</param>
            <returns>
            	<c>true</c> if text is unicode, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetWordLength(System.String,System.Int32)">
            <summary>
            Gets length of WORD.
            NOTE:
            - WORD: text run that finished by last space letter 
              (sample: "text  " or "  "; wrong sample: " text" or "text  text" )
            EXCLUSION:
            - If text working part have zero symbols return (-1)
            - If text working part don't consist SPACE letters return legth of 
              text working part
            </summary>
            <param name="text"></param>
            <param name="startIndex">Index of word first letter</param>
            <returns>Length of found word</returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DefaultBorders.Vertical">
            <summary>
            Gets the vertical border
            </summary>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DefaultBorders.Horizontal">
            <summary>
            Gets / sets the horizontal border
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DefaultBorders.#ctor(Syncfusion.DocIO.DLS.RowFormat)">
            <summary>
            
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DefaultBorders.InitBorder(Syncfusion.DocIO.DLS.Border,Syncfusion.DocIO.DLS.Border)">
            <summary>
            
            </summary>
            <param name="destination"></param>
            <param name="sourse"></param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.DrawBehindWidgets(Syncfusion.Layouting.LayoutedWidgetList,Syncfusion.Layouting.IWidget,System.Int32,System.Boolean)">
            <summary>
            Draws the behind shape widgets.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetOrderIndex(Syncfusion.Layouting.IWidget)">
            <summary>
            Get Order index of the floating item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLineWidth(Syncfusion.DocIO.ReaderWriter.Biff_Records.BorderCode)">
            <summary>
            Get the line width of the picture border for Inline picture shape
            </summary>
            <param name="border"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext.GetLineWidth(Syncfusion.DocIO.DLS.WPicture)">
            <summary>
            Get the line width of the picture border
            </summary>
            <param name="picture"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.BookmarkStyle">
            <summary>
            Gets or sets the bookmarkStyle.
            </summary>
            <value>The bookmarkStyle.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.PageNumber">
            <summary>
            Gets or sets the page number.
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.BookmarkName">
            <summary>
            Gets or sets the name of the bookmark.
            </summary>
            <value>The name of the bookmark.</value>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition.#ctor(System.String,System.Int32,Syncfusion.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DocToPdfConverter.Rendering.BookmarkPosition"/> class.
            </summary>
            <param name="bookmarkName">Name of the bookmark.</param>
            <param name="pageNumber">The page number.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Syncfusion.DocToPdfConverter.Rendering.SortByColorBrightness">
            <summary>
            Sort the border rendering order based on its color brightness order
            </summary>
        </member>
        <member name="T:Syncfusion.DocToPdfConverter.Rendering.MathRenderer">
            <summary>
            Represents the class which drawing a Math Equations.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.#ctor(Syncfusion.DocToPdfConverter.Rendering.PDFDrawingContext)">
            <summary>
            Creates a <see cref="T:Syncfusion.DocToPdfConverter.Rendering.MathRenderer"/> class instance to render the WMath entity.
            </summary>
            <param name="drawingContext">Represent the <see cref="T:Syncfusion.DocIO.Rendering.DrawingContext"/></param>
        </member>
        <member name="P:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.DrawingContext">
            <summary>
            Gets a <see cref="T:Syncfusion.DocIO.Rendering.DrawingContext"/> class object for drawing.
            </summary>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Draw(Syncfusion.DocIO.DLS.WMath,Syncfusion.Layouting.LayoutedWidget)">
            <summary>
            Draw the WMath instance.
            </summary>
            <param name="math">Represent the WMath instance to draw</param>
            <param name="ltWidget">Represent the layouted widget of WMath instance</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Draw(Syncfusion.Layouting.LayoutedOMathWidget)">
            <summary>
            Draw the IOfficeMath instance.
            </summary>
            <param name="layoutedOMathWidget">Represent the layouted widget of OfficeMath instance</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.DrawDelimiterCharacter(Syncfusion.Layouting.LayoutedStringWidget,System.Single,Syncfusion.DocIO.DLS.WCharacterFormat)">
            <summary>
            Draw the delimiter character with required stretching.
            </summary>
            <param name="delimiterCharacterWidget">Specify the delimiter widget.</param>
            <param name="stretchableHeight">Specify the required height to stretch.</param>
            <param name="format">Specify the character format.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Draw(Syncfusion.Layouting.LayoutedLineWidget)">
            <summary>
            Draw the Line used in MathML.
            </summary>
            <param name="lineWidget">Represent the layouted widget of a line.</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Draw(Syncfusion.Layouting.LayoutedStringWidget,Syncfusion.DocIO.DLS.WCharacterFormat,System.Single)">
            <summary>
            Draw the layouted string widget.
            </summary>
            <param name="stringWidget">Represent the string widget</param>
            <param name="characterFormat">Represent the characterFormat</param>
            <param name="scalingFactor">Represent the scalingFactor</param>
        </member>
        <member name="M:Syncfusion.DocToPdfConverter.Rendering.MathRenderer.Dispose">
            <summary>
            Dispose a MathRenderer object.
            </summary>
        </member>
    </members>
</doc>
