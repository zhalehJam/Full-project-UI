<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.XlsIORenderer.Portable</name>
    </assembly>
    <members>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIRenderer.CheckUnicode(System.String)">
            <summary>
                Checks the unicode.
            </summary>
            <param name="unicodeText">The unicode text.</param>
            <returns>
                True if the text is an unicode else false will returned.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIRenderer.FindAscent(System.String,Syncfusion.Drawing.Font)">
            <summary>
                Gets the ascent value from the system font.
            </summary>
            <param name="font">System font.</param>
            <returns>returns the ascent value of the system font.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIRenderer.DrawTextTemplate(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.LineInfoImpl},System.Single)">
            <summary>
                Draw the text template.
            </summary>
            <param name="bounds">The cell bounds.</param>
            <param name="graphics">Pdf graphics.</param>
            <param name="lineInfoCollection">The lineinfo collection.</param>
            <param name="y">shift y.</param>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.LineInfoImpl._textInfoCollection">
            <summary>
                Represents the TextInfo collection.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.LineInfoImpl.m_height">
            <summary>
            Represent the maximum height of the line.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.LineInfoImpl.#ctor">
            <summary>
                Initialize the new instace for LineInfo class.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.LineInfoImpl.TextInfoCollection">
            <summary>
                Represents the TextInfo collection.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.LineInfoImpl.Text">
            <summary>
                Line Text.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.LineInfoImpl.Width">
            <summary>
                Text width.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.LineInfoImpl.Height">
            <summary>
                Returns the Max Height of the Line.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.LineInfoImpl.Dispose">
            <summary>
                Dispose the objects.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.TextInfoImpl._text">
            <summary>
                The text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.TextInfoImpl._ascent">
            <summary>
                Text ascent.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.TextInfoImpl._bounds">
            <summary>
                Text bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.TextInfoImpl._font">
            <summary>
                XlsIO font.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.TextInfoImpl._unicodeFont">
            <summary>
                Unicode font.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.TextInfoImpl._length">
            <summary>
                Text length.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.TextInfoImpl._position">
            <summary>
                Text start index.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.TextInfoImpl.#ctor(System.String)">
            <summary>
                Initialize the new instance for TextInfo class.
            </summary>
            <param name="text">Original text.</param>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.Text">
            <summary>
                The text.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.Font">
            <summary>
                XlsIO font.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.UnicodeFont">
            <summary>
                Unicode font.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.Bounds">
            <summary>
                Text bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.Ascent">
            <summary>
                Text ascent.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.Position">
            <summary>
                Text start index.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.Length">
            <summary>
                Text length.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.X">
            <summary>
                X position.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.Y">
            <summary>
                Y position.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.Width">
            <summary>
                Text Width.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.TextInfoImpl.Height">
            <summary>
                Text height.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.TextInfoImpl.GetOriginalText">
            <summary>
                Reperesents the original text.
            </summary>
            <returns>returns original text.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.TextInfoImpl.CopyTo(Syncfusion.XlsIO.Implementation.TextInfoImpl)">
            <summary>
                Copy the XlsIO font, Pdf font, Pdf brush and Text ascent to the destination object.
            </summary>
            <param name="destination">The destination object.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.TextInfoImpl.Dispose">
            <summary>
                Dispose the object.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIO.Implementation.WorksheetImageConverter">
            <summary>
            This class is used to convert worksheet into image.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.m_cfApplier">
            <summary>
            Object that helps to get formatting of the cells with conditional formats.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.m_sortedListCF">
            <summary>
            Indicates the sortedList for conditional formatting
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.result">
            <summary>
            Represents the final resultant image.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.rightWidth">
            <summary>
            Represents width after the current column for drawing aligned text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.leftWidth">
            <summary>
            Represents width before the current column for drawing aligned text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.EnableRTL">
            <summary>
            Represents the RightToLeft Worksheet.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.WorksheetImageConverter._numberFormatChar">
            <summary>
            Use this NumberFormatChar to check the Unicodes.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.m_imageOptions">
            <summary>
            Represents the type of image format used for encoding the image.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.StringFormt">
            <summary>
            String Format
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.LeftWidth">
            <summary>
            Represents left width.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.RightWidth">
            <summary>
            Represents right width.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.ConvertToImage(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Converts worksheet into image.
            </summary>
            <param name="sheet">Worksheet to convert.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="imageType">Type of the image to create.</param>
            <param name="outputStream">Output stream, if null it is ignored.</param>
            <returns>Image containing worksheet data.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.ConvertToImage(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.ExportImageOptions,System.IO.Stream)">
            <summary>
            Converts worksheet to image
            </summary>
            <param name="sheet">Worksheet to be converted</param>
            <param name="firstRow">one-based index of the first row to convert</param>
            <param name="firstColumn">one-based index of the first column to convert</param>
            <param name="lastRow">one-based index of the last row to convert</param>
            <param name="lastColumn">one-based index of the last column to convert</param>
            <param name="imageOptions">Image options to apply when converting to image</param>
            <param name="outputStream">Output stream to save the created image.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.ConvertToImage(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts worksheet into image.
            </summary>
            <param name="sheet">Worksheet to convert.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <returns>Image containing worksheet data.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.ConvertToImage(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.EmfType,System.IO.Stream)">
            <summary>
            Converts worksheet into image.
            </summary>
            <param name="sheet">Worksheet to convert.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="emfType">Metafile EmfType.</param>
            <param name="outputStream">Output stream, if null it is ignored.</param>
            <returns>Image containing worksheet data.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.ConvertToImage(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.ImageType,System.IO.Stream)">
            <summary>
            Converts worksheet into image.
            </summary>
            <param name="sheet">Worksheet to convert.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="imageType">Type of the image to create.</param>
            <param name="outputStream">Output stream, if null it is ignored.</param>
            <returns>Image containing worksheet data.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.ConvertToImage(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.ImageType,System.IO.Stream,Syncfusion.Drawing.SkiaSharpHelper.EmfType)">
            <summary>
            Converts worksheet into image.
            </summary>
            <param name="sheet">Worksheet to convert.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="imageType">Type of the image to create.</param>
            <param name="outputStream">Output stream, if null it is ignored.</param>
            <param name="emfType">Metafile EmfType.</param>
            <returns>Image containing worksheet data.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.ConvertToImage(Syncfusion.Drawing.SkiaSharpHelper.Image,Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper,System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Converts worksheet into image.
            </summary>
            <param name="image">Worksheet image.</param>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
            <param name="width">Total image width.</param>
            <param name="height">Total image height.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetImageFormat(Syncfusion.XlsIO.ExportImageFormat)">
            <summary>
            Gets the equivalent SKEncodedImageFormat for the input ExportImageFormat.
            </summary>
            <param name="imageFormat">Image format used for encoding image.</param>
            <returns>Equivalent SKEncodedImageFormat for the input ExportImageFormat.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawShapes(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
            Draws the shapes.
            </summary>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="graphics">Graphics to draw cells at.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawChart(Syncfusion.XlsIO.Implementation.Shapes.ChartShapeImpl,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
            Draw the chart.
            </summary>
            <param name="chart">Chart that is being converted into image.</param>
            <param name="graphics">Graphics to draw cells at.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawTextBox(Syncfusion.XlsIO.Implementation.Shapes.TextBoxShapeImpl,Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
            Draw the text box.
            </summary>
            <param name="shape">TextBox that is being converted into image.</param>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="graphics">Graphics to draw cells at.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CreatePen(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
              Creates the pen.
            </summary>
            <param name="lineFormat">The format of the line.</param>
            <returns>The Pen object.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetDashStyle(Syncfusion.XlsIO.IShapeLineFormat)">
            <summary>
                Gets the dash style.
            </summary>
            <param name="lineFormat">Theformat of the line.</param>
            <returns>The PdfDashStyle value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawBackgroundImage(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
            Draws the background image
            </summary>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="graphics">Graphics to draw cells at.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetBackgroundWidthCoordinates(System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.Dictionary{Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF})">
            <summary>
            Gets the background image width coordinates.
            </summary>
            <param name="startX">The start X.</param>
            <param name="startY">The start Y.</param>
            <param name="imageWidth">Width of the image.</param>
            <param name="imageHeight">Height of the image.</param>
            <param name="imageCoordinates">The image coordinates.</param>
            <param name="pdfPage">The PDF page.</param>
            <returns>
            The collection coordinates and the sizes of Background image width.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetBackgroundHeightCoordinates(System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.Dictionary{Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF})">
            <summary>
            Gets the background height coordinates.
            </summary>
            <param name="startX">The start X.</param>
            <param name="startY">The start Y.</param>
            <param name="imageWidth">Width of the image.</param>
            <param name="imageHeight">Height of the image.</param>
            <param name="imageCoordinates">The image coordinates.</param>
            <param name="pdfPage">The PDF page.</param>
            <returns>
            The collection coordinates and the sizes of Background height.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.IterateMerges(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.WorksheetImageConverter.MergeMethod)">
            <summary>
            Draws all required merged regions.
            </summary>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="firstRow">One-based index of the first row to export.</param>
            <param name="firstColumn">One-based index of the first column to export.</param>
            <param name="lastRow">One-based index of the last row to export.</param>
            <param name="lastColumn">One-based index of the last column to export.</param>
            <param name="graphics">Graphics object to draw at.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
            <param name="method">Method to call for each found merge.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawMerge(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.Parser.Biff_Records.MergeCellsRecord.MergedRegion,System.Int32,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
            Draws merged region.
            </summary>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="mergedRegion">Merged region to draw.</param>
            <param name="firstRow">One-based index of the first row of the drawn range that contains part or whole merged range.</param>
            <param name="firstColumn">One-based index of the first column of the drawn range that contains part or whole merged range.</param>
            <param name="graphics">Graphics to draw at.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetMergeRectangle(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.Parser.Biff_Records.MergeCellsRecord.MergedRegion,System.Int32,System.Int32,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
            Gets coordinates of the merge.
            </summary>
            <param name="sheet">Worksheet containing merge region.</param>
            <param name="mergedRegion">Merge region to get rectangle for.</param>
            <param name="firstRow">One-based index of the first row of the drawn range that contains part or whole merged range.</param>
            <param name="firstColumn">One-based index of the first column of the drawn range that contains part or whole merged range.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawMergeBackground(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.Parser.Biff_Records.MergeCellsRecord.MergedRegion,System.Int32,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
            Draws merged region background.
            </summary>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="mergedRegion">Merged region to draw.</param>
            <param name="firstRow">One-based index of the first row of the drawn range that contains part or whole merged range.</param>
            <param name="firstColumn">One-based index of the first column of the drawn range that contains part or whole merged range.</param>
            <param name="graphics">Graphics to draw at.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.IterateCells(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CellMethod)">
            <summary>
            Iterates through all cells and calls specified method for each.
            </summary>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="graphics">Graphics to draw cells at.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
            <param name="method">Method to call for each cell.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawCells(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
            Draws separate cell value.
            </summary>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="graphics">Graphics to draw cells at.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetAdjecentCells(Syncfusion.XlsIO.IRange,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.ItemSizeHelper,System.Int32,Syncfusion.XlsIO.Implementation.MigrantRangeImpl)">
            <summary>
            Adds adjacent cells to the cell's range if necessary.
            </summary>
            <param name="cell">Cell to try to add to.</param>
            <param name="rect">Original rectangle.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
            <param name="firstColumn">Represents first column.</param>
            <param name="cell2">Represents second cell.</param>
            <returns>Updated rectangle.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetUpdatedPosition(Syncfusion.XlsIO.IRange,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.ItemSizeHelper,System.Int32,Syncfusion.XlsIO.Implementation.MigrantRangeImpl,System.Int32,Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Single,System.Int32,System.Single@)">
            <summary>
            Gets updated X position to draw the aligned text.
            </summary>
            <param name="cell">Specifies the current cell.</param>
            <param name="rect">Specifies the bounds for current cell.</param>
            <param name="columnWidthGetter">Specified the helper to get column width.</param>
            <param name="firstColumn">Specified the first column for the text.</param>
            <param name="cell2">Specifies the adjacent cell of teh current cell.</param>
            <param name="iDelta">Specifies whether to consider previous or next column.</param>
            <param name="sheet">Specifies the worksheet.</param>
            <param name="iCurrentWidth">Specifies the column width of current cell.</param>
            <param name="iRequiredWidth">Specified the width required to draw current cell text.</param>
            <param name="newWidth">Specifies the updated width to draw the text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawGridlines(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper,System.Int32,System.Int32)">
            <summary>
            Draws worksheet gridlines.
            </summary>
            <param name="sheet">Worksheet that is being converted into image.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="graphics">Graphics to draw cells at.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
            <param name="width">Total image width.</param>
            <param name="height">Total image height.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawImage(Syncfusion.XlsIO.IShape,Syncfusion.Drawing.SkiaSharpHelper.Image,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.Implementation.ItemSizeHelper,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
            Draw the image.
            </summary>
            <param name="shape">The shape.</param>
            <param name="image">Image that is being converted into image.</param>
            <param name="graphics">Graphics to draw cells at.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="rowHeightGetter">Helper object to get row height faster.</param>
            <param name="columnWidthGetter">Helper object to get column width faster.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawCell(Syncfusion.XlsIO.Implementation.MigrantRangeImpl,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws specified cell object.
            </summary>
            <param name="cell">Cell to draw.</param>
            <param name="rect">Rectangle to draw cell inside (borders).</param>
            <param name="rect2">Bounding rectangle for cell value.</param>
            <param name="graphics">Graphics to draw at.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawCell(Syncfusion.XlsIO.Implementation.ExtendedFormatImpl,Syncfusion.XlsIO.IRange,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws specified cell object.
            </summary>
            <param name="xf">Extended format to use for cell drawing.</param>
            <param name="cell">Cell to draw.</param>
            <param name="rect">Rectangle to draw cell inside (borders).</param>
            <param name="rect2">Bounding rectangle for cell value.</param>
            <param name="graphics">Graphics to draw at.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckUnicode(System.String)">
            <summary>
                Checks the unicode.
            </summary>
            <param name="unicodeText">The unicode text.</param>
            <returns>
                True if the text is an unicode else false will returned.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.IsSymbol(System.String)">
            <summary>
            Get the text have symbols
            </summary>
            <param name="testString">The given text</param>
            <returns>If text have symbols return true</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForGeneralPunctuationSegeoUI(System.String)">
            <summary>
            Checks for Segoe UI symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForExtendedPlan(System.String)">
            <summary>
            Checks for Segoe UI Emoji symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI Emoji Symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForDingbats(System.String)">
            <summary>
            Checks for Segoe UI Emoji symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI Emoji symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForGeneralPunctuation(System.String)">
            <summary>
            Checks for Segoe UI Emoji symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI Emoji symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.SwitchFonts(System.String,System.Byte,System.String)">
            <summary>
                Modifies font name so as to render Unicode characters.
            </summary>
            <param name="testString">The sting in test for Unicode characters.</param>
            <param name="charSet">The Charset of the font.</param>
            <param name="fontName">The name of the font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForUnicodeSymbols(System.String)">
            <summary>
            Check unicode symbols for unicode string.
            </summary>
            <param name="unicodeText">string</param>
            <returns>True, if string value as unicode symbol, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForAmharic(System.String)">
            <summary>
                Checks for amharic characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Amharic characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForKhmer(System.String)">
            <summary>
                Checks for khmer characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Khmer characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForThai(System.String)">
            <summary>
                Checks for thai characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Thai characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForSinhala(System.String)">
            <summary>
                Checks for sinhala characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Sinhala characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForMyanmar(System.String)">
            <summary>
                Checks for myanmar characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Myanmar characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForTamil(System.String)">
            <summary>
                Checks for tamil characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Tamil characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForTelugu(System.String)">
            <summary>
                Checks for telugu characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Telugu characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForPunjabi(System.String)">
            <summary>
                Checks for punjabi characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Punjabi characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForMalayalam(System.String)">
            <summary>
                Checks for malayalam characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Malayalam characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForKannada(System.String)">
            <summary>
                Checks for kannada characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Kannada characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForGujarati(System.String)">
            <summary>
                Checks for gujarati characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Gujarati characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForMarathi(System.String)">
            <summary>
                Checks for marathi characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Marathi characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForBengali(System.String)">
            <summary>
                Checks for bengali characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Bengali characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForOdia(System.String)">
            <summary>
                Checks for odia characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Odia characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForLatin(System.String)">
            <summary>
                Checks for Latin characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string does not contain Latin characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForCJK(System.String)">
            <summary>
                Checks for CJK characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contains CJK characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckForArabicOrHebrew(System.String)">
            <summary>
                Checks for Hebrew or Arabic characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contains Arabic or Hebrew characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CheckforKorean(System.String)">
            <summary>
                Checks for Korean characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contains Korean characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetFontStyle(Syncfusion.XlsIO.IFont)">
            <summary>
                Gets the font style.
            </summary>
            <param name="font">XlsIO font.</param>
            <returns>return font style.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawIconSet(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.ExtendedFormatImpl,Syncfusion.Drawing.RectangleF@,Syncfusion.Drawing.Font,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draws IconSet image.
            </summary>
            <param name="graphics">Represents the graphics object.</param>
            <param name="extendedFormatImpl">The extended format of the cell.</param>
            <param name="adjacentRect">The adjacent cell rect.</param>
            <param name="font">The Pdf font in the cell.</param>
            <param name="format">The string format of the cell value.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawRtfText(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.IRange,System.String,Syncfusion.Drawing.StringFormat,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws the RTF string (Rich Text Format string)
            </summary>    
            <param name="rect2">Bounding rectangle for cell value.</param>
            <param name="cell">Cell to draw.</param>
            <param name="value">Cell string value</param>
            <param name="graphics">Graphics to draw at.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawRotatedText(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.ExtendedFormatImpl,Syncfusion.XlsIO.IRange,System.String,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.Font,Syncfusion.Drawing.SkiaSharpHelper.Brush,Syncfusion.Drawing.StringFormat)">
            <summary>
            Draws rotated text.
            </summary>
            <param name="rect2">Rectangle used for cell drawing.</param>
            <param name="xf">Cell's format.</param>
            <param name="cell">Cell to draw.</param>
            <param name="value"></param>
            <param name="graphics">Graphics object to draw at.</param>
            <param name="nativeFont">Represents native font.</param>
            <param name="brush">Represents brush to fill the interior.</param>
            <param name="format">Represents string format.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.UpdateAlignment(Syncfusion.Drawing.StringFormat,System.Int32)">
            <summary>
            Aligns the rotated text based on string format.
            </summary>
            <param name="format">string format.</param>
            <param name="rotationAngle">Rotation angle.</param>
            <returns>returns string format.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.RotateRectangle(Syncfusion.Drawing.SizeF,System.Int32)">
            <summary>
            Rotates rectangle at coordinates (0,0) and specified size at specified angle.
            </summary>
            <param name="size">Size of the rectangle to rotate.</param>
            <param name="angleDegrees">Angle to rotate at.</param>
            <returns>Rectangle points after rotation.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.AlignRectangle(Syncfusion.Drawing.PointF[],Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.StringAlignment,Syncfusion.Drawing.StringAlignment)">
            <summary>
            Aligns rectangle specified by points inside another rectangle.
            </summary>
            <param name="arrPoints">Points to align.</param>
            <param name="rect2">Rectangle to align in.</param>
            <param name="horizontal">Horizontal alignment.</param>
            <param name="vertical">Vertical alignment.</param>
            <returns>Required offset to get correct point for string drawing.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetCounterClockwiseRotation(System.Int32)">
            <summary>
            Converts rotation angle into counter-clockwise value.
            </summary>
            <param name="rotationAngle">Angle to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.UpdateToToBottomText(System.String,System.Int32)">
            <summary>
            Updates string for top to bottom text drawing if necessary.
            </summary>
            <param name="value">Value to update.</param>
            <param name="rotationAngle">Rotation angle.</param>
            <returns>Updated value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawBackground(Syncfusion.XlsIO.IRange,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws cell background.
            </summary>
            <param name="cell">Cell to draw background for.</param>
            <param name="rect">Cell's rectangle.</param>
            <param name="graphics">Graphics to draw at.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawBackground(Syncfusion.XlsIO.Interfaces.IInternalExtendedFormat,Syncfusion.Drawing.Rectangle,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.IRange)">
            <summary>
            Draws background at the specified position.
            </summary>
            <param name="xf">Object containing background settings.</param>
            <param name="rect">Rectangle specifying coordinates of the drawn background.</param>
            <param name="graphics">Graphics to draw at.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetBrush(Syncfusion.XlsIO.Interfaces.IInternalExtendedFormat)">
            <summary>
            Creates brush object based on specified extended format.
            </summary>
            <param name="xf">Extended format to get brush for.</param>
            <returns>Created brush object.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.NormalizeColor(Syncfusion.Drawing.Color)">
            <summary>
            Normalizes color - makes it non-transparent.
            </summary>
            <param name="color">Color to normalize.</param>
            <returns>Non-transparent color (Alpha = 255) based on specified color.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetVerticalAlignment(Syncfusion.XlsIO.IExtendedFormat)">
            <summary>
            Gets vertical string alignment based on the cell style.
            </summary>
            <param name="style">Style to get data from.</param>
            <returns>String alignment.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetHorizontalAlignment(Syncfusion.XlsIO.IExtendedFormat,Syncfusion.XlsIO.IRange)">
            <summary>
            Gets horizontal string alignment based on the cell style.
            </summary>
            <param name="style">Style to get data from.</param>
            <param name="cell">Cell to get alignment for.</param>
            <returns>String alignment.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawBorders(Syncfusion.XlsIO.IBorders,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.IRange)">
            <summary>
            Draws cell borders (including gridlines if necessary).
            </summary>
            <param name="borders">Border collection.</param>
            <param name="rect">Cell's rectangle.</param>
            <param name="graphics">Graphics to draw at.</param>
            <param name="cell">Represents cell Range to draw border.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawBorder(Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.IBorder,System.Single,System.Single,System.Single,System.Single,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.IRange)">
            <summary>
            Draws specified border.
            </summary>
            <param name="borders"></param>
            <param name="border"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="graphics"></param>
            <param name="cell"></param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawDoubleBorder(Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.IBorder,System.Single,System.Single,System.Single,System.Single,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.IRange)">
            <summary>
            Draws doubled border.
            </summary>
            <param name="borders"></param>
            <param name="border"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="graphics"></param>
            <param name="cell"></param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawOuterLine(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.ExcelBordersIndex,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,Syncfusion.XlsIO.IRange)">
            <summary>
            Draws outer line of the double border.
            </summary>
            <param name="graphics">Graphics to draw at.</param>
            <param name="pen">Pen to draw with.</param>
            <param name="borders">Borders collection containing border that is being drawn.</param>
            <param name="borderIndex">Border that is being drawn.</param>
            <param name="x1">X coordinate of the starting point for ordinary border.</param>
            <param name="y1">Y coordinate of the starting point for ordinary border.</param>
            <param name="x2">X coordinate of the finishing point for ordinary border.</param>
            <param name="y2">Y coordinate of the finishing point for ordinary border.</param>
            <param name="xDelta"></param>
            <param name="yDelta"></param>
            <param name="cell"></param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawInnerLine(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.ExcelBordersIndex,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,Syncfusion.XlsIO.IRange)">
            <summary>
            Draws inner line of the double border.
            </summary>
            <param name="graphics">Graphics to draw at.</param>
            <param name="pen">Pen to draw with.</param>
            <param name="borders">Borders collection containing border that is being drawn.</param>
            <param name="borderIndex">Border that is being drawn.</param>
            <param name="x1">X coordinate of the starting point for ordinary border.</param>
            <param name="y1">Y coordinate of the starting point for ordinary border.</param>
            <param name="x2">X coordinate of the finishing point for ordinary border.</param>
            <param name="y2">Y coordinate of the finishing point for ordinary border.</param>
            <param name="xDelta"></param>
            <param name="yDelta"></param>
            <param name="cell"></param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.UpdateBorderDelta(Syncfusion.XlsIO.IWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean,Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.ExcelBordersIndex,Syncfusion.XlsIO.ExcelBordersIndex,System.Boolean)">
            <summary>
            Updates delta coordinates for double border drawing, if necessary.
            </summary>
            <param name="sheet"></param>
            <param name="row"></param>
            <param name="column"></param>
            <param name="xDelta"></param>
            <param name="yDelta"></param>
            <param name="xDelta1"></param>
            <param name="yDelta1"></param>
            <param name="isInvertCondition"></param>
            <param name="borders"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="isLineStart"></param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetStartEndBorderIndex(Syncfusion.XlsIO.ExcelBordersIndex,Syncfusion.XlsIO.ExcelBordersIndex@,Syncfusion.XlsIO.ExcelBordersIndex@)">
            <summary>
            
            </summary>
            <param name="borderIndex"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.DrawOrdinaryBorder(Syncfusion.XlsIO.IBorder,System.Single,System.Single,System.Single,System.Single,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draws single border at specified position.
            </summary>
            <param name="border">Border to draw.</param>
            <param name="x1">X coordinate of the first point.</param>
            <param name="y1">Y coordinate of the first point.</param>
            <param name="x2">X coordinate of the second point.</param>
            <param name="y2">Y coordinate of the second point.</param>
            <param name="graphics">Graphics to draw at.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CreatePen(Syncfusion.XlsIO.IBorder)">
            <summary>
            Creates pen for the specified border.
            </summary>
            <param name="border">Border to create pen for.</param>
            <returns>Created pen.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetDashStyle(Syncfusion.XlsIO.IBorder)">
            <summary>
            Gets DashStyle for the pen based on the border settings.
            </summary>
            <param name="border">Border to get DashStyle for.</param>
            <returns>DashStyle closest to the border line settings.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.GetBorderWidth(Syncfusion.XlsIO.IBorder)">
            <summary>
            Evaluates line width based on border settings.
            </summary>
            <param name="border">Border to get data from.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.WorksheetImageConverter.CreateImage(System.Int32,System.Int32,Syncfusion.XlsIO.ImageType,System.IO.Stream,Syncfusion.Drawing.SkiaSharpHelper.EmfType)">
            <summary>
            Creates image of the specified size and type.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="imageType">Type of the image to create.</param>
            <param name="outputStream">Stream to save into.</param>
            <param name="emfType">Metafile EmfType.</param>
            <returns>Created image.</returns>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.ConvertChartShapes._stringFormat">
            <summary>
            Represent the GDI graphics string format.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.ConvertChartShapes.m_graphics">
            <summary>
            Represent the GDI graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.ConvertChartShapes._currentCellRect">
            <summary>
            Represent the text rectangle inside shape.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.ConvertChartShapes.m_workbook">
            <summary>
            Represent the workbookImpl.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.ConvertChartShapes.m_chartImpl">
            <summary>
            Represent the ChartImpl.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.ConvertChartShapes.m_imageOptions">
            <summary>
            Represents the type of image format used for encoding the image.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIO.Implementation.ConvertChartShapes.StringFormt">
            <summary>
            String Format
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.#ctor(Syncfusion.XlsIO.Implementation.WorkbookImpl,Syncfusion.XlsIO.Implementation.Charts.ChartImpl)">
            <summary>
            Create a covertChartShapes object.
            </summary>
            <param name="workbook">WorkbookImpl</param>
            <param name="chartImpl">ChartImpl</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.DrawChartShapes(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Draw the shapes and picutre inside the chart. 
            </summary>
            <param name="imageAsStream">Chart stream</param>
            <param name="width">chart width</param>
            <param name="height">chart height</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetImageFormat(Syncfusion.XlsIO.ExportImageFormat)">
            <summary>
            Gets the equivalent SKEncodedImageFormat for the input ExportImageFormat.
            </summary>
            <param name="imageFormat">Image format used for encoding image.</param>
            <returns>Equivalent SKEncodedImageFormat for the input ExportImageFormat.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.DrawShapesCollection(Syncfusion.XlsIO.IShape[],Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Double,System.Double)">
            <summary>
            Draw the shapes. 
            </summary>
            <param name="shapes">Shapes collection inside chart</param>
            <param name="graphics">Graphics</param>
            <param name="scaleWidth">Scale width</param>
            <param name="scaleHeight">Scale height</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.DrawGroupShape(Syncfusion.XlsIO.IGroupShape,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Double,System.Double)">
            <summary>
            Draw groupShape inside the chart. 
            </summary>
            <param name="groupShape">GroupShapeImpl</param>
            <param name="graphics">Graphics</param>
            <param name="scaledWidth">ScaleWidth</param>
            <param name="scaledHeight">Scaleheight</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.DrawImage(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.SkiaSharpHelper.Image,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Double,System.Double)">
            <summary>
            Draw Image inside the chart. 
            </summary>
            <param name="shape">ShapeImpl</param>
            <param name="image">Image inside chart</param>
            <param name="graphics">Graphics</param>
            <param name="scaleWidth">ScaleWidth</param>
            <param name="scaleHeight">ScaleHeight</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.CropHFImage(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
                Crops the image with the specified offset.
            </summary>
            <param name="cropableImage">Source image to crop.</param>
            <param name="leftOffset">Left offset to crop from.</param>
            <param name="topOffset">Top offset to crop from.</param>
            <param name="rightOffset">Right offset to crop.</param>
            <param name="bottomOffset">Bottom offset to crop.</param>
            <param name="isTransparent">Indicates whether the destination image is transparent.</param>
            <returns>Returns the cropped image for the offsets specified.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.ColorChange(Syncfusion.XlsIO.Implementation.Shapes.BitmapShapeImpl,Syncfusion.Drawing.SkiaSharpHelper.ImageAttributes)">
            <summary>
            Apply duotone to the give image.
            </summary>
            <param name="pictureImpl">Picture shape.</param>
            <param name="imageAttributes">ImageAttributes need to be applied.</param>
            <returns>Color changed ImageAttributes.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.ApplyDuoTone(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.ColorObject})">
            <summary>
            Apply duotone to the give image.
            </summary>
            <param name="image">In where the duotone need to apply. </param>
            <param name="duotone">duotone color informations.</param>
            <returns>Duotone applied image.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.ExecuteLinearInterpolation(Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Executes Linear interpolation for Duotone.
            </summary>
            <param name="firstColor">In where the factor is applied.</param>
            <param name="secondColor">In where the factor is applied.</param>
            <param name="factor">Factor value.</param>
            <returns>Final factorized color.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.CreateNonIndexedImage(Syncfusion.Drawing.SkiaSharpHelper.Image)">
            <summary>
            Create Non-Index image from source image.
            </summary>
            <param name="sourceImage">Source Image.</param>
            <returns>Created Non-Indexed image.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.ApplyImageTransparency(Syncfusion.Drawing.SkiaSharpHelper.ImageAttributes,System.Single)">
            <summary>
            Apply Image transparency.
            </summary>
            <param name="imgAttribute">In where the transparency need to apply. </param>
            <param name="transparency">Transparency to apply.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.ApplyRecolor(Syncfusion.XlsIO.Implementation.Shapes.BitmapShapeImpl,Syncfusion.Drawing.SkiaSharpHelper.Image)">
            <summary>
            Apply recolor to the give image.
            </summary>
            <param name="image">In where the recolor need to apply. </param>
            <param name="picture">Picture shape.</param>
            <returns> Recolored image.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.DrawShape(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Double,System.Double)">
            <summary>
            Draw the shapes inside the chart. 
            </summary>
            <param name="shape">ShapeImpl</param>
            <param name="graphics">GDI graphics</param>
            <param name="scaleWidth">Scale width</param>
            <param name="scaleHeight">Scale height</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.RotateText(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.TextDirection,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Draw the RotateText.
            </summary>
            <param name="bounds">Text rectangle area</param>
            <param name="textDirectionType">Text direction type</param>
            <param name="graphics">GDI graphics</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.ApplyRotation(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.RectangleF,System.Single,Syncfusion.Drawing.SkiaSharpHelper.Graphics)">
            <summary>
            Applies rotation for the AutoShape/Textbox.
            </summary>
            <param name="shape">Shape for which rotation should be applied.</param>
            <param name="bounds">Rectangle bound values of the Shape.</param>
            <param name="rotationAngle">Rotation angle to apply the rotation.</param>
            <param name="graphics">PdfGraphics to render the Shape.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.UpdateShapeBoundsToLayoutTextBody(Syncfusion.Drawing.RectangleF@,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,System.Double,System.Double)">
            <summary>
            Updates the bound's of the text inside the AutoShape.
            </summary>
            <param name="layoutRect">Rectangle bounds of the text inside the AutoShape.</param>
            <param name="shapeBounds">Rectangle bounds of the AutoShape.</param>
            <param name="shape">AutoShape for which text bounds should be updated.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetVerticalAlignmentFromShape(Syncfusion.XlsIO.IShape)">
            <summary>
                Gets the vertical alignment from shape.
            </summary>
            <param name="shape">The text box shape.</param>
            <returns>The pdfVerticalAlignment value</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetRotationAngle(Syncfusion.XlsIO.TextDirection)">
            <summary>
            Get rotation angle.
            </summary>
            <param name="textDirection"> Text direction in inside shape</param>
            <returns>Rotation angle</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetTextAlignmentFromShape(Syncfusion.XlsIO.IShape)">
            <summary>
                Gets the text alignment from shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns>The PdfTextAlignment value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.DrawShapeRTFText(Syncfusion.XlsIO.IRichTextString,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Double,System.Double)">
            <summary>
            Draw Rich text inside the AutoShape.
            </summary>
            <param name="richText">RichText object that holds the formatted text.</param>
            <param name="shape">AutoShape for which text should be rendered.</param>
            <param name="rect">Rectangle bounds of the text to be rendered..</param>
            <param name="graphics">PdfGraphics object to render the RichText.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.UpdateAlignment(Syncfusion.Drawing.StringFormat,System.Int32,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
            Aligns the rotated text based on  string format.
            </summary>
            <param name="format">string format.</param>
            <param name="rotationAngle">Rotation angle.</param>
            <param name="shape">Shape object</param>
            <returns>returns string format.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.DrawRTFText(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Graphics,System.Collections.Generic.List{Syncfusion.XlsIO.IFont},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Draw the RTf text.
            </summary>
            <param name="cellRect">The cell rectangle.</param>
            <param name="adjacentRect">The cell adjacent rectangle.</param>
            <param name="graphics">The pdf graphics.</param>
            <param name="richTextFont">Font collection.</param>
            <param name="drawString">DrawString collection.</param>
            <param name="isShape">Indicating wheather shape or not.</param>
            <param name="isWrapText">Indicating wheather is wrapText or not</param>
            <param name="isHorizontalTextOverflow">Indicating wheather shape Horizontal Text is overflow or not</param>
            <param name="isVerticalTextOverflow">Indicating wheather shape vertical Text is overflow or not.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetFont(Syncfusion.XlsIO.IFont,System.String,System.Int32)">
            <summary>
                Gets the font.
            </summary>
            <param name="font">The font object of the cell.</param>
            <param name="fontName">Name of the font.</param>
            <param name="size">The size of the font.</param>
            <returns>Font object</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetBoundsToLayoutShapeTextBody(Syncfusion.XlsIO.Implementation.Shapes.AutoShapeImpl,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the text layout's bounds for the AutoShape.
            </summary>
            <param name="shapeImpl">AutoShape for which the text bounds should be obtained.</param>
            <param name="bounds">Bound value of the shape from which text bounds to be calculated.</param>
            <returns>Rectangle bound values for the text inside the AutoShape.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.DrawShapeFillAndLine(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.SkiaSharpHelper.Pen,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.Drawing.RectangleF)">
            <summary>
            Draw the shape and applied the fill color.
            </summary>
            <param name="graphicsPath">GDI graphics path</param>
            <param name="shape">ShapeImpl</param>
            <param name="pdfPen"></param>
            <param name="graphics">GDI grphics</param>
            <param name="bounds">Shape rectangle area</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.FillBackground(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.XlsIO.IFill)">
            <summary>
            Fills the shape background.
            </summary>
            <param name="pdfGraphics">pdfGraphics to apply fill to.</param>
            <param name="shape">Shape for which fill should be applied.</param>
            <param name="path">Path of the shape on the PdfGraphics.</param>
            <param name="format">Fill format of the shape.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.CreateImage(Syncfusion.Drawing.RectangleF,System.IO.MemoryStream)">
            <summary>
            Creates image in the meta format.
            </summary>
            <param name="bounds">Boundary values of the image.</param>
            <param name="stream">Memorystream to save the image to.</param>
            <returns>Newly created image stream.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.IsLine(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
            Check whether the AutoShape type is line.
            </summary>
            <param name="shape">AutoShape to be checked.</param>
            <returns>Returns true if the AutoShape is a type of line else returns false.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.IsShapeNeedToBeFill(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
            Check whether shape can be set fill or not.
            </summary>
            <param name="shape">Shape to check.</param>
            <returns>Returns true if fill can be applied to shape else returns false.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.Rotate(Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.RectangleF)">
            <summary>
            Applied the shape rotation.
            </summary>
            <param name="graphics">GDI graphics</param>
            <param name="shapeImpl">ShapeImpl</param>
            <param name="rectangleF">shape rectangle area</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetLatFromScene3D(Syncfusion.XlsIO.Implementation.Shapes.AutoShapeImpl,System.Boolean@)">
            <summary>
            Gets the lattitude value of the shape from Scene 3D.
            </summary>
            <param name="shapeImpl">AutoShape for which the lattitude value should be obtained.</param>
            <param name="flip">Boolean value indicates whether AutoShape is flipped horizontally.</param>
            <returns>Rotation angle of the AutoShape.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.IsGroupFlipV(Syncfusion.XlsIO.Implementation.Shapes.GroupShapeImpl)">
            <summary>
            Checked whether the group shape contains Vertical flip.
            </summary>
            <param name="group">Group Shape.</param>
            <returns>True if the group shape contains flip..</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.IsGroupFlipH(Syncfusion.XlsIO.Implementation.Shapes.GroupShapeImpl)">
            <summary>
            Checked whether the group shape contains Horizontal flip.
            </summary>
            <param name="group">Group Shape.</param>
            <returns>True if the group shape contains flip..</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetFlipHCount(Syncfusion.XlsIO.Implementation.Shapes.GroupShapeImpl,System.Int32)">
            <summary>
            Get Horizontal flip count.
            </summary>
            <param name="group">Group Shape.</param>
            <param name="count">Flip count.</param>
            <returns>Flip count.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetFlipVCount(Syncfusion.XlsIO.Implementation.Shapes.GroupShapeImpl,System.Int32)">
            <summary>
            Get Vertical flip count.
            </summary>
            <param name="group">Group Shape.</param>
            <param name="count">Flip count.</param>
            <returns>Flip count.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetGraphicsPath(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Pen@,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.Shapes.AutoShapeImpl)">
            <summary>
            Gets the graphics path for autoshapes.
            </summary>
            <param name="bounds">Bounds to indicate the size of the autoshape.</param>
            <param name="pen">PdfPen to draw outlines of the autoshapes.</param>
            <param name="gr">pdfGraphics object in which autoshapes has to be drawn.</param>
            <param name="shapeImpl">Autoshape for which path should be obtained.</param>
            <returns>Newly created pdfPath for the autoshape.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetCustomGeomentryPath(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
            Get custom geomentryPath. 
            </summary>
            <param name="bounds">Shape rectangle area</param>
            <param name="path">GDI graphich path</param>
            <param name="shapeImpl">ShapeImpl</param>
            <returns>GDI grphics path</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetGeomentryPath(Syncfusion.Drawing.SkiaSharpHelper.GraphicsPath,System.Collections.Generic.List{System.Double},System.Double,System.Double,Syncfusion.Drawing.RectangleF)">
            <summary>
            Get geomentry path. 
            </summary>
            <param name="path">GDI grphics path</param>
            <param name="pathElements">Path element collection</param>
            <param name="pathWidth">path width</param>
            <param name="pathHeight">path height</param>
            <param name="bounds">shape rectangle area</param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.EmuToPoint(System.Int32)">
            <summary>
                Convert EMU to Point.
            </summary>
            <param name="emu">EMU value.</param>
            <returns>Point value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetGeomentryPathYValue(System.Double,System.Double,Syncfusion.Drawing.RectangleF)">
            <summary>
            Get geomentry path y value. 
            </summary>
            <param name="pathHeight">Path height</param>
            <param name="y">Update y value</param>
            <param name="bounds">shape rectangle area</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetTransformMatrix(Syncfusion.Drawing.RectangleF,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Get transform matrix.
            </summary>
            <param name="bounds">Shape rectangle area</param>
            <param name="ang">Rotation angle</param>
            <param name="flipV">flipV</param>
            <param name="flipH">FlipH</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetDarkerColor(Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Get drark color.
            </summary>
            <param name="color">Fill color</param>
            <param name="correctionfactory">Increase or decrease the color vlaue based on given value.</param>
            <returns>Fill color</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.CreatePen(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,System.Double)">
            <summary>
              Creates the pen.
            </summary>
            <param name="lineFormat">The format of the line.</param>
            <returns>The Pen object.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.NormalizeColor(Syncfusion.Drawing.Color)">
            <summary>
                Normalizes the color.
            </summary>
            <param name="color">The color.</param>
            <returns>The Normailzed Color</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.CreatePen(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.XlsIO.IShapeLineFormat,System.Double)">
            <summary>
            Create graphics pen.
            </summary>
            <param name="shape">ShapeImpl</param>
            <param name="lineFormat">Shape lineFormat</param>
            <param name="scaledWidth">scaled width</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.ConvertChartShapes.GetDashStyle(Syncfusion.XlsIO.IShapeLineFormat)">
            <summary>
                Gets the dash style.
            </summary>
            <param name="lineFormat">Theformat of the line.</param>
            <returns>The PdfDashStyle value.</returns>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.GDIShapePath._rectBounds">
             <summary>
            
             </summary>
        </member>
        <member name="F:Syncfusion.XlsIO.Implementation.GDIShapePath._shapeGuide">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.#ctor(Syncfusion.Drawing.RectangleF,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCurvedConnectorPath">
            <summary>
            Get Curved Connector path
            </summary>
            <formula>
            formulaColl.Add("x2","*/ w adj1 100000");
            formulaColl.Add("x1","+/ l x2 2");
            formulaColl.Add("x3","+/ r x2 2");
            formulaColl.Add("y3","*/ h 3 4");
            </formula>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetGDICurvedConnectorPath">
            <summary>
            Get Curved Connector path
            </summary>
            <formula>
            formulaColl.Add("x2","*/ w adj1 100000");
            formulaColl.Add("x1","+/ l x2 2");
            formulaColl.Add("x3","+/ r x2 2");
            formulaColl.Add("y3","*/ h 3 4");
            </formula>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetBentConnectorPath">
            <summary>
            Get Bent Connector path
            </summary>
            <formula>
            formulaColl.Add("x1","*/ w adj1 100000");
            </formula>>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetGDIBentConnectorPath">
            <summary>
            Get Bent Connector path
            </summary>
            <formula>
            formulaColl.Add("x1","*/ w adj1 100000");
            </formula>>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetBentConnector2Path">
            <summary>
            Get bend connector 2 path.
            </summary>
            <returns>bend connector2 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetGDIBentConnector2Path">
            <summary>
            Get bend connector 2 path.
            </summary>
            <returns> Graphics path for bend connector2 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetBentConnector4Path">
            <summary>
            Get bend connector4 path.
            </summary>
            <returns>Pdf path for bentconnector4 points </returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetBentConnector5Path">
             <summary>
            Get bent connector5 path. 
             </summary>
             <returns>Pdf path for bent connector5 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetGDIBentConnector4Path">
             <summary>
            Get bent connector4 path. 
             </summary>
             <returns>Graphics path for bent connector4 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetGDIBentConnector5Path">
            <summary>
            Get bent connector 5 path.
            </summary>
            <returns>Graphics path for bent connector5 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetGDICurvedConnector2Path">
            <summary>
            Get curved connector 2 path
            </summary>
            <returns>Grpahics path for curved connector 2 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetGDICurvedConnector4Path">
            <summary>
            Get curved connector 4 path.
            </summary>
            <returns>Graphics path for curved connector4 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetGDICurvedConnector5Path">
            <summary>
            Get curved connector5 path.
            </summary>
            <returns>Graphics path for curved connector5 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCurvedConnector2Path">
            <summary>
            Get curved connector2 path.
            </summary>
            <returns>Pdf path for curved connector2 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCurvedConnector4Path">
            <summary>
            Get curved connector 4 path.
            </summary>
            <returns>Pdf path for curved connector4 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCurvedConnector5Path">
            <summary>
            Get curved connector 5 path.
            </summary>
            <returns>GraphicsPath for curved connector 5 path</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRoundedRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetSnipSingleCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetSnipSameSideCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetSnipDiagonalCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetSnipAndRoundSingleCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRoundSingleCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRoundSameSideCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRoundDiagonalCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetTrianglePath">
            <summary>
            Get Triangle path
            </summary>
            <param name="shapeType"></param>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetParallelogramPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetTrapezoidPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRegularPentagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetHexagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetHeptagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetOctagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDodecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetPiePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetChordPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetTearDropPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetHalfFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetL_ShapePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDiagonalStripePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCrossPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetPlaquePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCanPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCubePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetBevelPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDonutPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetNoSymbolPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetBlockArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFoldedCornerPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetSmileyFacePath(System.Boolean)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetHeartPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLightningBoltPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetSunPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetMoonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCloudPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDoubleBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDoubleBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLeftBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRightBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLeftBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRightBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRightArrowPath">
            <summary>
            Gets the right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLeftArrowPath">
            <summary>
            Gets the left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDownArrowPath">
            <summary>
            Gets down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLeftRightArrowPath">
            <summary>
            Gets the left right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCurvedRightArrowPath">
            <summary>
            Gets the curved right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCurvedLeftArrowPath">
            <summary>
            Gets the curved left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCurvedUpArrowPath">
            <summary>
            Gets the curved up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCurvedDownArrowPath">
            <summary>
            Gets the curved down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetUpDownArrowPath">
            <summary>
            Gets up down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetQuadArrowPath">
            <summary>
            Gets the quad arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLeftRightUpArrowPath">
            <summary>
            Gets the left right up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetBentArrowPath">
            <summary>
            Gets the bent arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetUTrunArrowPath">
            <summary>
            Gets the U trun arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLeftUpArrowPath">
            <summary>
            Gets the left up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetBentUpArrowPath">
            <summary>
            Gets the bent up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetStripedRightArrowPath">
            <summary>
            Gets the striped right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetNotchedRightArrowPath">
            <summary>
            Gets the notched right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetPentagonPath">
            <summary>
            Gets the pentagon path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetChevronPath">
            <summary>
            Gets the chevron path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRightArrowCalloutPath">
            <summary>
            Gets the right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDownArrowCalloutPath">
            <summary>
            Gets down arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLeftArrowCalloutPath">
            <summary>
            Gets the left arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetUpArrowCalloutPath">
            <summary>
            Gets up arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLeftRightArrowCalloutPath">
            <summary>
            Gets the left right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetQuadArrowCalloutPath">
            <summary>
            Gets the quad arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCircularArrowPath">
            <summary>
            Gets the circular arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetMathPlusPath">
            <summary>
            Gets the math plus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetMathMinusPath">
            <summary>
            Gets the math minus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetMathMultiplyPath">
            <summary>
            Gets the math multiply path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetMathDivisionPath">
            <summary>
            Gets the math division path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetMathEqualPath">
            <summary>
            Gets the math equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetMathNotEqualPath">
            <summary>
            Gets the math not equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartAlternateProcessPath">
            <summary>
            Gets the flow chart alternate process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartPredefinedProcessPath">
            <summary>
            Gets the flow chart predefined process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartInternalStoragePath">
            <summary>
            Gets the flow chart internal storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartDocumentPath">
            <summary>
            Gets the flow chart document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartMultiDocumentPath">
            <summary>
            Gets the flow chart multi document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartTerminatorPath">
            <summary>
            Gets the flow chart terminator path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartPreparationPath">
            <summary>
            Gets the flow chart preparation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartManualInputPath">
            <summary>
            Gets the flow chart manual input path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartManualOperationPath">
            <summary>
            Gets the flow chart manual operation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartConnectorPath">
            <summary>
            Gets the flow chart connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartOffPageConnectorPath">
            <summary>
            Gets the flow chart off page connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartCardPath">
            <summary>
            Gets the flow chart card path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartPunchedTapePath">
            <summary>
            Gets the flow chart punched tape path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartSummingJunctionPath">
            <summary>
            Gets the flow chart summing junction path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartOrPath">
            <summary>
            Gets the flow chart or path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartCollatePath">
            <summary>
            Gets the flow chart collate path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartSortPath">
            <summary>
            Gets the flow chart sort path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartExtractPath">
            <summary>
            Gets the flow chart extract path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartMergePath">
            <summary>
            Gets the flow chart merge path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartOnlineStoragePath">
            <summary>
            Gets the flow chart online storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartDelayPath">
            <summary>
            Gets the flow chart delay path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartSequentialAccessStoragePath">
            <summary>
            Gets the flow chart sequential access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartMagneticDiskPath">
            <summary>
            Gets the flow chart magnetic disk path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartDirectAccessStoragePath">
            <summary>
            Gets the flow chart direct access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFlowChartDisplayPath">
            <summary>
            Gets the flow chart display path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRectangularCalloutPath">
            <summary>
            Gets the rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetRoundedRectangularCalloutPath">
            <summary>
            Gets the rounded rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetOvalCalloutPath">
            <summary>
            Gets the oval callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetCloudCalloutPath">
            <summary>
            Gets the cloud callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout1Path">
            <summary>
            Gets the line callout1 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout2Path">
            <summary>
            Gets the line callout2 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout3Path">
            <summary>
            Gets the line callout3 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout1AccentBarPath">
            <summary>
            Gets the line callout1 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout2AccentBarPath">
            <summary>
            Gets the line callout2 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout3AccentBarPath">
            <summary>
            Gets the line callout3 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout1NoBorderPath">
            <summary>
            Gets the line callout1 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout2NoBorderPath">
            <summary>
            Gets the line callout2 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout3NoBorderPath">
            <summary>
            Gets the line callout3 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout1BorderAndAccentBarPath">
            <summary>
            Gets the line callout1 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout2BorderAndAccentBarPath">
            <summary>
            Gets the line callout2 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetLineCallout3BorderAndAccentBarPath">
            <summary>
            Gets the line callout3 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDegreeValue(System.Single)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetXYPosition(System.Single,System.Single,System.Single)">
             <summary>
            
             </summary>
             <param name="xDifference"></param>
             <param name="yDifference"></param>
             <param name="positionRatio"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetPathAdjustValue(Syncfusion.XlsIO.AutoShapeType)">
            <summary>
            Get Path adjust value
            </summary>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.ParseShapeFormula(Syncfusion.XlsIO.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="adjValue"></param>
             <param name="formulaColl"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetFormulaValues(Syncfusion.XlsIO.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
             <summary>
            
             </summary>
             <param name="formulaColl"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetOperandValues(Syncfusion.XlsIO.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.Single}@,System.String[],System.Boolean)">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="adjValues"></param>
             <param name="formulaValues"></param>
             <param name="splitFormula"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetPresetOperandValue(System.String)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetResultValue(System.String,System.Single[])">
             <summary>
            
             </summary>
             <param name="formula"></param>
             <param name="operandValues"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetShapeFormula(Syncfusion.XlsIO.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.Implementation.GDIShapePath.GetDefaultPathAdjValues(Syncfusion.XlsIO.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.DrawRTFText(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Draw the RTf text.
            </summary>
            <param name="cellRect">The cell rectangle.</param>
            <param name="adjacentRect">The cell adjacent rectangle.</param>
            <param name="graphics">The pdf graphics.</param>
            <param name="_richTextFont">Font collection.</param>
            <param name="_drawString">_drawString collection.</param>
            <param name="isShape">Indicating wheater shape or not</param>
            <param name="isWrapText">Indicating wheather is wrapText or not</param>
            <param name="isHorizontalTextOverflow">Indicating wheather shape Horizontal Text is overflow or not</param>
            <param name="isVerticalTextOverflow">Indicating wheather shape vertical Text is overflow or not.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.UpdateTextHeight(System.Single,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.LineInfoImpl},System.Boolean)">
            <summary>
            Update the text height.
            </summary>
            <param name="adjacentRect">The cell adjacent rectangle</param>
            <param name="lineInfoCollection">Text line collection</param>
            <param name="isAutoShape">Indicating the this shape autospace or not</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.FindAscent(System.String,Syncfusion.Drawing.Font)">
            <summary>
                Gets the ascent value from the system font.
            </summary>
            <param name="font">System font.</param>
            <returns>returns the ascent value of the system font.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.LayoutNewLine(Syncfusion.Drawing.RectangleF,System.Single@,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.LineInfoImpl},System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.TextInfoImpl}@,System.Single@,System.Single@,System.Single@,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
                Layout the new line.
            </summary>
            <param name="shapeBounds">The cell rectangle.</param>
            <param name="usedHeight">Used height.</param>
            <param name="lineInfoCollection">The lineinfo collection.</param>
            <param name="textInfoCollection">The textinfo collection.</param>
            <param name="usedWidth">Used width.</param>
            <param name="maxAscent">Maximun ascent.</param>
            <param name="maxHeight">Maximum height.</param>
            <param name="isLastLine">Last line.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.LayoutXYPosition(System.Single,System.Single,System.Single,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.TextInfoImpl},System.Boolean,System.Single@,System.Single@,System.Boolean,System.Boolean)">
            <summary>
                Layout the XY position.
            </summary>
            <param name="usedWidth">Used width.</param>
            <param name="maxAscent">Maximum ascent.</param>
            <param name="shapeWidth">The cell width.</param>
            <param name="textInfoCollection">The textinfo collection.</param>
            <param name="isLastLine">Last line.</param>
            <param name="maxHeight">Maximum height.</param>
            <param name="usedHeight">Used height.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.CheckPreviousElement(System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.LineInfoImpl},System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.TextInfoImpl}@,System.String,System.Single@,System.Single,Syncfusion.Drawing.RectangleF,System.Boolean,System.Boolean)">
            <summary>
                Check the previous element.
            </summary>
            <param name="lineInfoCollection">The lineinfo collection.</param>
            <param name="currTextInfoCollection">The textinfo collection.</param>
            <param name="text">The text.</param>
            <param name="usedWidth">Used width.</param>
            <param name="usedHeight">Used height.</param>
            <param name="shapeBounds">The cell bounds.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.DrawTextTemplate(Syncfusion.Drawing.RectangleF,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.LineInfoImpl},System.Single)">
            <summary>
                Draw the text template.
            </summary>
            <param name="bounds">The cell bounds.</param>
            <param name="graphics">Pdf graphics.</param>
            <param name="lineInfoCollection">The lineinfo collection.</param>
            <param name="y">shift y.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.AlignSuperOrSubScript(System.String,Syncfusion.XlsIO.IFont,System.Boolean,System.Boolean)">
            <summary>
                Gets the shift value for superscript and subscript.
            </summary>
            <param name="font">XlsIO font.</param>
            <returns>returns ShiftY value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.NormalizeColor(Syncfusion.Drawing.Color)">
            <summary>
                Normalizes the color.
            </summary>
            <param name="color">The color.</param>
            <returns>The Normailzed Color</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.LayoutText(Syncfusion.Drawing.RectangleF,System.Single@,System.Single,Syncfusion.XlsIO.IFont,Syncfusion.Drawing.SizeF,System.Single,System.Single@,System.Single@,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Layout the text.
            </summary>
            <param name="adjacentRect">The cell rectangle.</param>
            <param name="usedWidth">Used width.</param>
            <param name="usedHeight">Used height.</param>
            <param name="font">The font.</param>
            <param name="pdfFont">Pdf font.</param>
            <param name="pdfBrush">Pdf brush.</param>
            <param name="size">The text size.</param>
            <param name="ascent">The text ascent.</param>
            <param name="maxHeight">Maximum height.</param>
            <param name="maxAscent">Maximum ascent.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.GetSpaceIndexBeforeText(System.String,System.Int32)">
            <summary>
                Gets the space index before the space.
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">Start index.</param>
            <returns>returns the index before the space.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.LayoutSplittedText(Syncfusion.Drawing.RectangleF,System.Single,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.TextInfoImpl},System.Single@,System.Single@,System.Single@,Syncfusion.XlsIO.IFont,System.String,Syncfusion.Drawing.SizeF@,System.Single,System.Int32@,System.Int32,System.String)">
            <summary>
                Layout the splitted text.
            </summary>
            <param name="shapeBounds">The cell bounds.</param>
            <param name="usedHeight">Used height.</param>
            <param name="textInfoCollection">The textinfo collection.</param>
            <param name="usedWidth">Used width.</param>
            <param name="maxAscent">Maximum ascent.</param>
            <param name="maxHeight">Maximum height.</param>
            <param name="font">The font.</param>
            <param name="pdfFont">Pdf font.</param>
            <param name="pdfBrush">Pdf brush.</param>
            <param name="text">The text.</param>
            <param name="size">The text size.</param>
            <param name="ascent">The text ascent.</param>
            <param name="currPosition">Text current index.</param>
            <param name="index">Text previous index.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.SplitByCharacter(Syncfusion.Drawing.RectangleF,System.Single@,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.LineInfoImpl},System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.TextInfoImpl}@,System.Single@,System.Single@,System.Single@,System.String,Syncfusion.XlsIO.IFont,Syncfusion.Drawing.SizeF@,System.Single,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Split the text by character.
            </summary>
            <param name="shapeBounds">The cell bounds.</param>
            <param name="usedHeight">Used height.</param>
            <param name="lineInfoCollection">The lineinfo collection.</param>
            <param name="textInfoCollection">The textinfo collection.</param>
            <param name="usedWidth">Used width.</param>
            <param name="maxAscent">Maximun ascent.</param>
            <param name="maxHeight">Maximum height.</param>
            <param name="text">The text.</param>
            <param name="pdfFont">Pdf font.</param>
            <param name="pdfBrush">Pdf brush.</param>
            <param name="font">The font.</param>
            <param name="size">The text size.</param>
            <param name="ascent">The text ascent.</param>
            <param name="currPosition">Text current index.</param>
            <param name="originalText">the original text.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.GetTextIndexAfterSpace(System.String,System.Int32)">
            <summary>
                Gets the text index after the space.
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">Start index.</param>
            <returns>returns the index after the space.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.UpdateXYPosition(System.Single,System.Collections.Generic.IEnumerable{Syncfusion.XlsIO.Implementation.TextInfoImpl},System.Single,System.Single,System.Boolean,System.Boolean,System.Single@)">
            <summary>
                Update the XY position.
            </summary>
            <param name="maxAscent">Maximum ascent.</param>
            <param name="textInfoCollection">The textinfo collection.</param>
            <param name="x">Shift X.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.LineJustify(System.Single@,System.Single,System.Single,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.TextInfoImpl})">
            <summary>
                Justify the line.
            </summary>
            <param name="usedWidth">Used width.</param>
            <param name="maxAscent">Maximum ascent.</param>
            <param name="shapeWidth">The cell width.</param>
            <param name="textInfoCollection">The textinfo collection.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.RemoveWhiteSpaces(System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.TextInfoImpl})">
            <summary>
                Remove the white spaces.
            </summary>
            <param name="textInfoCollection">The textinfo collection.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.UpdateLineJustifyPosition(System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.TextInfoImpl},System.Single,System.Int32)">
            <summary>
                Update the line position.
            </summary>
            <param name="textInfoCollection">The textinfo collection.</param>
            <param name="x">Shift X.</param>
            <param name="index">TextInfo index.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.UpdateXPosition(System.Collections.Generic.IEnumerable{Syncfusion.XlsIO.Implementation.TextInfoImpl},System.Single)">
            <summary>
                Update the X position.
            </summary>
            <param name="textInfoCollection">The textinfo collection.</param>
            <param name="x">Shift X.</param>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.GetSystemFont(Syncfusion.XlsIO.Implementation.TextInfoImpl)">
            <summary>
            Gets system font.
            </summary>
            <param name="textInfo"></param>
            <returns>Returns System Font.</returns>
        </member>
        <member name="M:Syncfusion.XlsIO.RendererBase.GetSystemFont(Syncfusion.XlsIO.IFont,System.String)">
            <summary>
            Gets system font.
            </summary>
            <param name="textInfo"></param>
            <returns>Returns System Font.</returns>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.NamespaceDoc">
            <summary>
                The Syncfusion.ExcelToPdfConverter namespace contains classes for converting Excel documents into PDF.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.HeaderFooterImpl">
            <summary>
            Represent for maintain the header and footer details
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._pdfSection">
            <summary>
            Represent the PDF section.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._headerFooterCollection">
            <summary>
            Represent header and footer collection.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._pageSetup">
            <summary>
            Represent page setup of worksheet. 
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._topMargin">
            <summary>
            Represent top margin of PDF page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._bottomMargin">
            <summary>
            Represent bottom margin of PDF page. 
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._layoutOptions">
             <summary>
            Represent layout option of worksheet
             </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._isHeader">
            <summary>
            True, if header is shown, false otherwise.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._isFooter">
            <summary>
            True, if footer is shown, false otherise.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._PdfPageTemplateCollection">
            <summary>
            Represent the PDF page template collection.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._footerMargin">
            <summary>
            Represent footer margin or PDF page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterImpl._headerMargin">
            <summary>
            Represent header margin or PDF page.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.PdfPageTemplateCollection">
             <summary>
            Gets or sets PDF page template collection.
             </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.IsHeader">
            <summary>
            Gets or sets to show header in PDF page.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.IsFooter">
            <summary>
            Gets or sets to show footer in PDF page.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.LayoutOptions">
            <summary>
             Gets or sets layout option of PDF page.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.PdfSection">
            <summary>
            Gets or sets PDF section.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.HeaderFooterCollection">
            <summary>
            Gets or sets header and footer collection.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.PageSetup">
             <summary>
            Gets or sets page setup in PDF. 
             </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.TopMargin">
            <summary>
            Gets or sets top margin of PDF page.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.BottomMargin">
             <summary>
            Gets or sets bottom margin of PDF page.
             </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.FooterMargin">
            <summary>
            Gets or sets footer margin of PDF page.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterImpl.HeaderMargin">
            <summary>
            Gets or sets header margin of PDF page.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.ExcelToPdfConverter">
            <summary>
                Represents the conversion of Excel document to a PDF document.
            </summary>
            <remarks>
                Excel To Pdf Conversion is not supported in WinRT, Windows Phone, Universal, Portable and Silverlight platforms.
            </remarks>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ScriptFactor">
            <summary>
                Defines a default script factor.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter.NumberFormat">
            <summary>
                Defines a default number format.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter.TextNumberFormat">
            <summary>
                Defines a text number format.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ColumnBitsInCellIndex">
            <summary>
                Number of bits in cell index that holds column value.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._isHeaderPageCount">
            <summary>
            Indicates whether header has page count or not.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._isFooterPageCount">
            <summary>
            Indicates whether footer has page count or not.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._headerFooterImplCollection">
            <summary>
            Represent HeaderFooterImpl class collection.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._sectionCount">
            <summary>
             Indicates the number of sections in PDF.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._isCancelled">
            <summary>
            Indicates whether the Excel to PDF process cancelled.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._coordinates2007">
            <summary>
                Defines a default coordinates for TextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._conditionalFormatApplier">
            <summary>
                Represents the object of Excel sheet conditional formatting .
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._pdfDocument">
            <summary>
                Indicates the object of the pdf document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._currentPage">
            <summary>
                Indicates the current rendering pdf page in the document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._workBook">
            <summary>
                Indicates the active workbook of the input document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._workSheet">
            <summary>
                Indicates the active worksheet of the workbook.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._chartImpl">
            <summary>
                Indicates the chart object.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._workBookImpl">
            <summary>
                Indicates the object of the workbook Implementation class.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._pdfUnitConverter">
            <summary>
                This object is used for the conversion between the units.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._excelToPdfSettings">
            <summary>
                Indicates the object of the Excel to pdf converter settings object.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._pdfPageTemplate">
            <summary>
                Indicates the object of the pdf template in which the document is drawn first.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._pdfGraphics">
            <summary>
                Indicates the object of the pdf graphics of the current pdf page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._excelEngine">
            <summary>
                Indicates the object of the excel engine.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._pdfSection">
            <summary>
                Indicates the object of the current Pdf section.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._pdfTemplateCollection">
            <summary>
                Represents the collection of Pdf templates.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._predefinedHeaderFooter">
            <summary>
                Represents the collection of Header and Footer representations and their respecive values.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._tableBorderColorList">
            <summary>
                Represents the collection of table style border color list.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._tableBorderList">
            <summary>
            Reprents the collection of table style borders.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._fontTableColors">
            <summary>
                Represents the collection of the table style font list.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._extBorders">
            <summary>
                Represents the collection of bordrs and its XF index.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._headerFooter">
            <summary>
                Represents the collection of the header and footer objects.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._borderWidth">
            <summary>
                Indicates the Excelborder index width.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._pageCount">
            <summary>
                Indicates the no of page counts in the Pdf/
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._bookmark">
            <summary>
                Indicates the Bookmark for the Pdf page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._scaledPageWidth">
            <summary>
                Indicates the scaled page width to which the template should be drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._scaledPageHeight">
            <summary>
                Indicates the scaled page height to which the template should be drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._fontList">
            <summary>
                Indicates the list of the fonts collections to which the fonts are need to substituted.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._excludefontList">
            <summary>
                Indicates the list of the fonts to exclude in SwitchFont
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._latinfontList">
            <summary>
                Indicates the list of the fonts supported by latin font
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._tableStyle">
            <summary>
                Indicates the object of the Table style.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._cellDisplayText">
            <summary>
                Indicates the wrapped cell display text for a rotated text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._sortedListCf">
            <summary>
                Indicates the sortedList for conditional Formatting
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._alternateFontCollection">
            <summary>
            It contains the alternate PdfFont collection using alternatefontstream
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._stylewithoutBorderFill">
            <summary>
                Style collection which dont have visible fill and borders
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._pageSetupOption">
            <summary>
                It's define the Pdf Page-setup.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._excelToPdfPageLayout">
            <summary>
                It's define the page layout settings.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._columnWidthGetter">
            <summary>
                It's define the used range coloum width
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._rowHeightGetter">
            <summary>
                It's define the used range row height
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._pageSetup">
            <summary>
                It's define the current draw sheet pagesetup information's
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._sortedBorders">
            <summary>
                Represents the list of sorted border values.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._dicBorderLineStyle">
            <summary>
                Represents the list of border line styles.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._helper">
            <summary>
                Helper Methods.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._allowHeaderFooterOnce">
            <summary>
                Find Header Footer having the Rich Text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._chartImageCollection">
            <summary>
                Represents maximum font size in a row
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._mergedRegions">
            <summary>
                Merged regions.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._rightWidth">
            <summary>
            Represents Right width
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._leftWidth">
            <summary>
            Represents Left width
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._hfImageBounds">
            <summary>
            Represents Header Footer Image bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._isHfrtfProcess">
            <summary>
            Represents Header Footer RTF process.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._printTitleTemplateCollection">
            <summary>
                Represents the collection of PrintTitle Pdf templates.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._printTitleTemplate">
            <summary>
                Indicates the object of the pdf template in which the PrintTitle is drawn first.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._isFirstRowOfPage">
            <summary>
             Indicates the first row of each page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter.isFirstColumnOfPage">
            <summary>
            Indicates the first column of each page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter.isCurrentCellNotMerged">
            <summary>
             Indicates the current cell is merged.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._centerHorizontalValue">
            <summary>
            Denotes the scaled page width value when the page is centered Horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._centerVerticalValue">
            <summary>
            Denotes the scaled page height value when the page is centered Vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._loadDoc">
            <summary>
            PDF loaded document object.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._startPageIndex">
            <summary>
            Start index of print page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._endPageIndex">
            <summary>
            Last index of print page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._isConverted">
            <summary>
            Indicates whether the document is already converted.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._systemFontNameCollection">
            <summary>
            Represent system font name collection.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter.style">
            <summary>
            Represent style for the Option Button
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPdfConverter._alternativePdfFont">
            <summary>
            Represents the substitute pdf font.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SystemFontsName">
            <summary>
            Get system font name collection.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.Warning">
            <summary>
            Represents the warning detail about unsupported and substituted elements in Excel to PDF conversion.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsHFRTFProcess">
            <summary>
            Represents Header Footer RTF Process.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.LeftWidth">
            <summary>
            Represents Left width.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.RightWidth">
            <summary>
            Represents Right width.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ExcelToPdfSettings">
            <summary>
            Represents Excel to pdf converter settings.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.HfImageBounds">
            <summary>
            Represents Header Footer Image bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.AlternativePdfFont">
            <summary>
            Get or set the alternate pdf font while applying substitute font.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.TryAndSetXlsIORendererReference(Syncfusion.XlsIO.IXlsIORenderer)">
            <summary>
            Check and set when the XlsIORenderer of application is initialized
            </summary>
            <param name="xlsIORenderer">the IXlsIORenderer object to be assigned in the application</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.ExcelToPdfConverter" /> class.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.#ctor(Syncfusion.XlsIO.IWorkbook)">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.ExcelToPdfConverter" /> class with the specified workbook.
            </summary>
            <param name="workbook">The workbook.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.#ctor(Syncfusion.XlsIO.IWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.ExcelToPdfConverter" /> class with the specified worksheet.
            </summary>
            <param name="worksheet">The worksheet.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.#ctor(Syncfusion.XlsIO.IChart)">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.ExcelToPdfConverter" /> class with the specified chart.
            </summary>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.ExcelToPdfConverter" /> class with the specified stream.
            </summary>
            <param name="stream">The workbook stream.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetLayoutOptions(Syncfusion.XlsIO.Implementation.PageSetupBaseImpl)">
            <summary>
                Gets the <see cref="!:Syncfusion.ExcelToPdfConverter.LayoutOptions" /> LayoutOptions based on PageSetup.
            </summary>
            <param name="pageSetup">Current Page setup.</param>
            <returns>Returns the LayoutOptions.</returns>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.ExcelToPdfConverter.MergeMethod">
            <summary>
                Delegate for Merged cell rendering.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CellMethod">
            <summary>
                Delegate for background cell rendering.
            </summary>
        </member>
        <member name="E:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CurrentProgressChanged">
            <summary>
                Occurs when current progress changed.
            </summary>
        </member>
        <member name="E:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SheetBeforeDrawn">
            <summary>
                Occurs before the sheet is drawn.
            </summary>
        </member>
        <member name="E:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SheetAfterDrawn">
            <summary>
                Occurs after the sheet is drawn.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.RaiseWarning(System.String,Syncfusion.XlsIO.WarningType)">
            <summary>
            Raises a warning with the description and warning type.
            </summary>
            <param name="description">Warning detail</param>
            <param name="type">Type of warning</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.Convert">
             <summary>
             Converts the document.
             </summary>
             <returns>Returns the PDFDocument Object</returns>
             <example>
             The following code snippet illustrates how to convert the workbook.
             <code>
             using Syncfusion.XlsIO;
             using Syncfusion.Pdf;
             using Syncfusion.ExcelToPdfConverter;
             class Example
             {
               static void Main()
               {
                 using(ExcelEngine excelEngine = new ExcelEngine())
                 {
                   IApplication application = excelEngine.Excel;
                   IWorkbook workbook = application.Workbooks.Open("Sample.xlsx");
                   IWorksheet worksheet = workbook.Worksheets[0];
            
                   ExcelToPdfConverter converter = new ExcelToPdfConverter(workbook);
                   PdfDocument doc = converter.Convert();
                   doc.Save("Output.pdf");
                 }
               }
             }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ConvertDocument">
            <summary>
            Convert the Excel document to PDF
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawCommentsInSheetEnd">
            <summary>
            Draw worksheet comments in new Page.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateInvisibleStyleCollection">
            <summary>
                Add the styles (Index) dont have visible fill and border
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.Convert(Syncfusion.XlsIORenderer.XlsIORendererSettings)">
             <summary>
                 Converts the document with the specified converter settings.
             </summary>
             <param name="converterSettings">The converter settings.</param>
             <returns>Returns the PDFdocument object</returns>
             <example>
                 The following code snippet illustrates how to convert the workbook.
             <code>
             using Syncfusion.XlsIO;
             using Syncfusion.ExcelToPdfConverter;
             class Example
             {
               static void Main()
               {
                 using(ExcelEngine excelEngine = new ExcelEngine())
                 {
                   IApplication application = excelEngine.Excel;
                   IWorkbook workbook = application.Workbooks.Open("Sample.xlsx");
                   IWorksheet worksheet = workbook.Worksheets[0];
            
                   ExcelToPdfConverter converter = new ExcelToPdfConverter(workbook);
            
            	      ExcelToPdfConverterSettings converterSettings = new ExcelToPdfConverterSettings();
                   converterSettings.LayoutOptions = LayoutOptions.FitAllColumnsOnOnePage;
                   PdfDocument doc = converter.Convert(converterSettings);
                   doc.Save("Output.pdf");
                 }
               }
             }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.OnProgressChanged(System.Int32,System.Int32)">
            <summary>
                Called when [progress changed].
            </summary>
            <param name="noOfSheets">The no of sheets.</param>
            <param name="activeSheetIndex">Index of the active sheet.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.OnSheetBeforeDrawn(Syncfusion.XlsIORenderer.SheetBeforeDrawnEventArgs)">
            <summary>
                Raises the <see cref="E:SheetBeforeDrawn" /> event.
            </summary>
            <param name="args">
                The <see cref="!:Syncfusion.ExcelToPdfConverter.SheetBeforeDrawnEventArgs" /> instance containing the
                event data.
            </param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.OnSheetAfterDrawn(System.Int32)">
            <summary>
                Called when [sheet after drawn].
            </summary>
            <param name="activeSheetIndex">Index of the active sheet.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.RaiseSheetBeforeDrawn(System.Int32)">
            <summary>
                Raises the sheet before drawn.
            </summary>
            <param name="activeSheetIndex">Index of the active sheet.</param>
            <returns>the boolean values</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.Dispose">
            <summary>
                Releases both unmanaged and managed resources.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and optionally managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsPrintTitleRowPage">
            <summary>
                Gets a value indicating whether this instance is print title row page.
            </summary>
            <value>
                <c>true</c> if this instance is print title row page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsPrintTitleColumnPage">
            <summary>
                Gets a value indicating whether this instance is print title column page.
            </summary>
            <value>
                <c>true</c> if this instance is print title column page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.RowHeightGetter">
            <summary>
                Gets the row height getter.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ColumnWidthGetter">
            <summary>
                Gets the column width getter.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.ExcelToPdfConverter.Pdf_UnitConverter">
            <summary>
                PDF Unit Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawSheet(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange[])">
            <summary>
                Draws the sheet.
            </summary>
            <param name="wkSheet">The work sheet.</param>
            <param name="printAreas">Ranges to be Drawn</param>
            <returns>pdfdocument object</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateSheetWidthHeight(System.Int32,System.Int32)">
            <summary>
                Update the Sheet width and height.
            </summary>
            <param name="firstColumn">The first column.</param>
            <param name="firstRow">The first row.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetCenterValues(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
                Gets center width and height values according to the page templates.
            </summary>
            <param name="firstRow">First row that can be drawn in the Pdf page</param>
            <param name="firstColumn">First column that can be drawn in the Pdf page</param>
            <param name="lastRow">Last row that can be drawn in the Pdf page</param>
            <param name="lastColumn">Last column that can be drawn in Pdfpage</param>
            <param name="widthVal">List of center width values</param>
            <param name="heightVal">List of center height values</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.FindPageSettings(Syncfusion.Pdf.Graphics.PdfTemplate,Syncfusion.Pdf.PdfPage,Syncfusion.XlsIO.IWorksheet,System.Single@,System.Single@,System.Single,System.Single)">
            <summary>
                It's finding the scaled page width and height
            </summary>
            <param name="pdfTemplate"></param>
            <param name="page"></param>
            <param name="wkSheet"></param>
            <param name="startX"></param>
            <param name="headerHeight"></param>
            <param name="widthValue"></param>
            <param name="heightValue"></param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.AddHeaderFooterImpl(System.Collections.Generic.List{Syncfusion.XlsIORenderer.HeaderFooter},Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.Implementation.Charts.ChartImpl,Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
            Add HeaderFooterImpl class in header footer collection
            </summary>
            <param name="headerFooterCollection">header footer collection</param>
            <param name="worksheet"> Worksheet</param>
            <param name="chart">Chart sheetc</param>
            <param name="pdfTemplate">PDF page template</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CalculateCenterVertically(System.Single,Syncfusion.XlsIO.Implementation.PageSetupBaseImpl)">
            <summary>
            Calculates the scaled page height value when centered vertically property is set.
            </summary>
            <param name="heightValue"></param>
            <param name="pageSetup"></param>
            <returns>Returns the scaled page height value</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CalculateCenterHorizontally(System.Single,Syncfusion.XlsIO.Implementation.PageSetupBaseImpl)">
            <summary>
            Calculates the scaled page width value when centered horizontally property is set.
            </summary>
            <param name="widthValue"></param>
            <param name="pageSetup"></param>
            <returns>Returns the scaled page width value</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetMarginForCenterAlignment(System.Boolean)">
            <summary>
                Get margins for center alignment.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawSplitText(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single},System.Int32[])">
            <summary>
                Draws the split text.
            </summary>
            <param name="centerWidthValues">Center width values.</param>
            <param name="centerHeightValues">Center height values.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetPdfTrueTypeFont(Syncfusion.Drawing.Font,System.Boolean,System.IO.Stream)">
            <summary>
            Returns PDF font from system font.
            </summary>
            <param name="font">System Font.</param>
            <param name="isEmbedFont">Is font embeded.</param>
            <param name="alternateFontStream">Alternate font stream.</param>
            <returns>returns the PF font</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawSplitText(Syncfusion.XlsIORenderer.SplitText)">
            <summary>
                Draws the split text.
            </summary>
            <param name="splitText">The split text.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawPdfPageHeaderFooter(Syncfusion.Pdf.PdfSection,System.Collections.Generic.List{Syncfusion.XlsIORenderer.HeaderFooter},Syncfusion.XlsIO.Interfaces.IPageSetupBase,System.Single,System.Single,Syncfusion.Pdf.PdfPage,System.Single@,System.Single@,Syncfusion.XlsIORenderer.LayoutOptions,System.Boolean,System.Boolean,Syncfusion.Pdf.Graphics.PdfTemplate,System.Boolean,System.Single,System.Single)">
            <summary>
                Draws the Header and Footer to the PDF page .
            </summary>
            <param name="section">The Pdf section.</param>
            <param name="headerFooterCollection">The header footer collection.</param>
            <param name="pageSetupBase">The Worksheet.</param>
            <param name="page">The Pdf page.</param>
            <param name="headerHeight">Height of the header.</param>
            <param name="footerHeight">Height of the footer.</param>
            <param name="topmargin">Top Margin</param>
            <param name="bottomMargin">Bottom Margin</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHeadeFooterTemplate(Syncfusion.XlsIO.Implementation.PageSetupBaseImpl,Syncfusion.Pdf.PdfPage,System.Single,Syncfusion.XlsIORenderer.LayoutOptions,Syncfusion.Pdf.Graphics.PdfTemplate)">
            <summary>
                Returns header footer teample.
            </summary>
            <param name="pageSetupBase">The sheet page setup.</param>
            <param name="page">The pdf page.</param>
            <param name="height">Template height.</param>
            <returns>Pdf template.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawRow(Syncfusion.XlsIO.IWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Draws the row.
            </summary>
            <param name="wkSheet">The wk sheet.</param>
            <param name="startColumn">The start column.</param>
            <param name="endColumn">The end column.</param>
            <param name="startRow">The start row.</param>
            <param name="endRow">The end row.</param>
            <param name="xValue">The x value.</param>
            <param name="yValue">The y value.</param>
            <param name="originalWidth">Width of the original.</param>
            <returns>The Object of Pdf Document.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawRow(Syncfusion.XlsIO.IWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Draws the row.
            </summary>
            <param name="wkSheet">The wk sheet.</param>
            <param name="startColIndex">The start column.</param>
            <param name="endColIndex">The end column.</param>
            <param name="startRowIndex">The start row.</param>
            <param name="endRowIndex">The end row.</param>
            <param name="xValue">The x value.</param>
            <param name="yValue">The y value.</param>
            <param name="startX">The start x value.</param>
            <param name="startY">The start y value.</param>
            <param name="rangeHeight">The height of range</param>
            <param name="rangeWidth">The Width of range</param>
            <param name="originalWidth">Width of the original.</param>
            <returns>The Object of Pdf Document.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawShapes(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Draws all necessary shapes.
            </summary>
            <param name="sheet">It's represent the worksheet</param>
            <param name="startRowIndex">One-based index of the first row to convert.</param>
            <param name="startColIndex">One-based index of the first column to convert.</param>
            <param name="endRowIndex">One-based index of the last row to convert.</param>
            <param name="endColIndex">One-based index of the last column to convert.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawGroupShape(Syncfusion.XlsIO.IGroupShape,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Draws all necessary shapes.
            </summary>
            <param name="groupShape">It's represent the worksheet</param>
            <param name="startRowIndex">One-based index of the first row to convert.</param>
            <param name="startColIndex">One-based index of the first column to convert.</param>
            <param name="endRowIndex">One-based index of the last row to convert.</param>
            <param name="endColIndex">One-based index of the last column to convert.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawShapesCollection(Syncfusion.XlsIO.IShape[],System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Draws all the shape in the shape collection.
            </summary>
            <param name="shapes">It's represent the worksheet</param>
            <param name="startRowIndex">One-based index of the first row to convert.</param>
            <param name="startColIndex">One-based index of the first column to convert.</param>
            <param name="endRowIndex">One-based index of the last row to convert.</param>
            <param name="endColIndex">One-based index of the last column to convert.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBorderXandY(Syncfusion.XlsIO.IRange,System.Boolean)">
            <summary>
                Get Range Border X and Y
            </summary>
            <param name="Range">Cell</param>
            <param name="isXaxis">Identify the X or Y axis</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ApplyTransparency(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.IShape,System.Boolean)">
            <summary>
                Transparancy is applied if it is required
            </summary>
            <param name="graphics">The graphics</param>
            <param name="shape">The shape</param>
            <param name="line">Apply transparency for line</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawShape(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Draws the shape.
            </summary>
            <param name="shape">It's represent the Textbox</param>
            <param name="graphics">Pdf Graphics</param>
            <param name="firstRow">First row</param>
            <param name="firstColumn">First Column</param>
            <param name="lastRow">Last row of chart shape</param>
            <param name="lastColumn">Last column of chart shape</param>
            <param name="startX">Starting point of chartshape-X Point</param>
            <param name="startY">starting point of chartshape - Y point</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsLineShape(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
            Check whether the AutoShape type is line.
            </summary>
            <param name="shape">AutoShape to be checked.</param>
            <returns>Returns true if the AutoShape is a type of line else returns false.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetCommentPath(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.Shapes.CommentShapeImpl,Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPath@,Syncfusion.Pdf.Graphics.PdfPen@)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="comment"></param>
            <param name="pdfPath"></param>
            <param name="pdfBrush"></param>
            <param name="commentPath"></param>
            <param name="commentPen"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.Rotate(System.Single[0:,0:],System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="n"></param>
            <param name="x_pivot"></param>
            <param name="y_pivot"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetComboBoxPath(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.Shapes.ComboBoxShapeImpl,Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPen@,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Drawing.RectangleF@,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Draws the ComboBox.
            </summary>
            <param name="rect">Rectangle bounds of the combobox to be rendered</param>
            <param name="comboBox">It's represents the combobox properties</param>
            <param name="comboBoxPen">It's represents the pen to draw the combo box</param>
            <param name="pdfBrush">It's used to set the color for combobox pen</param>
            <param name="pdfPath">Represents the path for rendering the Combobox</param>
            <param name="rect1">It's represents the bounds of the Combo box filled with gray color</param>
            <param name="graphics">Pdf Graphics</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetCheckBoxPath(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.Shapes.CheckBoxShapeImpl,Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPen@,Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Draws the CheckBox.
            </summary>
            <param name="rect">Rectangle bounds of the checkbox to be rendered</param>
            <param name="checkBox">It's represents the checkbox properties</param>
            <param name="pdfPath">Represents the path for rendering the Checkbox</param>
            <param name="checkBoxPen">It's represents the pen to draw the checkbox</param>
            <param name="pdfBrush">It's used to set the color for checkbox pen</param>
            <param name="graphics">Pdf Graphics</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetOptionButtonPath(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.Shapes.OptionButtonShapeImpl,Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfPen@,Syncfusion.Pdf.Graphics.PdfPen@,Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Draws the Option Button.
            </summary>
            <param name="rect">Rectangle bounds of the optionButton to be rendered</param>
            <param name="optionButton">It's represents the optionButton properties</param>
            <param name="pdfPath">Represents the path for rendering the optionButton</param>
            <param name="OptionButtonPen">It's represents the pen to draw the optionButton</param>
            <param name="OptionButtonPen1">It's represents the pen to draw the optionButton</param>
            <param name="pdfBrush">It's used to set the color for optionButton pen</param>
            <param name="graphics">Pdf Graphics</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsLine(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
            Check whether the AutoShape type is line.
            </summary>
            <param name="shape">AutoShape to be checked.</param>
            <returns>Returns true if the AutoShape is a type of line else returns false.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawShapeRTFText(Syncfusion.XlsIO.IRichTextString,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Draw Rich text inside the AutoShape.
            </summary>
            <param name="richText">RichText object that holds the formatted text.</param>
            <param name="shape">AutoShape for which text should be rendered.</param>
            <param name="rect">Rectangle bounds of the text to be rendered..</param>
            <param name="graphics">PdfGraphics object to render the RichText.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateShapeBoundsToLayoutTextBody(Syncfusion.Drawing.RectangleF@,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
            Updates the bound's of the text inside the AutoShape.
            </summary>
            <param name="layoutRect">Rectangle bounds of the text inside the AutoShape.</param>
            <param name="shapeBounds">Rectangle bounds of the AutoShape.</param>
            <param name="shape">AutoShape for which text bounds should be updated.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBoundsToLayoutShapeTextBody(Syncfusion.XlsIO.Implementation.Shapes.AutoShapeImpl,Syncfusion.Drawing.RectangleF)">
            <summary>
            Gets the text layout's bounds for the AutoShape.
            </summary>
            <param name="shapeImpl">AutoShape for which the text bounds should be obtained.</param>
            <param name="bounds">Bound value of the shape from which text bounds to be calculated.</param>
            <returns>Rectangle bound values for the text inside the AutoShape.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsShapeNeedToBeFill(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
            Check whether shape can be set fill or not.
            </summary>
            <param name="shape">Shape to check.</param>
            <returns>Returns true if fill can be applied to shape else returns false.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawShapeFillAndLine(Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Drawing.RectangleF,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Checks and applies fill to autoshapes and textboxes.
            </summary>
            <param name="pdfPath">pdfPath of the autoshape/textbox.</param>
            <param name="shape">shape for which fill has to be applied.</param>
            <param name="pdfPen">pdfPen to draw autoshape.</param>
            <param name="graphics">pdfGraphics to draw autoshape into.</param>
            <param name="bounds">Rectangle bounds of the shape.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CreateImage(Syncfusion.Drawing.RectangleF,System.IO.MemoryStream)">
            <summary>
            Creates image in the meta format.
            </summary>
            <param name="bounds">Boundary values of the image.</param>
            <param name="stream">Memorystream to save the image to.</param>
            <returns>Newly created image stream.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.FillBackground(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Pdf.Graphics.PdfPath,Syncfusion.XlsIO.IFill,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Fills the shape background.
            </summary>
            <param name="pdfGraphics">pdfGraphics to apply fill to.</param>
            <param name="shape">Shape for which fill should be applied.</param>
            <param name="path">Path of the shape on the PdfGraphics.</param>
            <param name="format">Fill format of the shape.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetPdfHatchBrush(Syncfusion.XlsIO.IFill)">
            <summary>
            Gets the Pdf hatch brush for the given fill format.
            </summary>
            <param name="format">Format for which hatch brush should be obtained.</param>
            <returns>Newly created pdf hatch brush.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHatchStyle(Syncfusion.XlsIO.ExcelGradientPattern)">
            <summary>
            Gets the hatch style for the Pdf brush.
            </summary>
            <param name="pattern">Pattern for which the brush should be obtained.</param>
            <returns>Equivalent pdf hatch style for the pattern.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetGraphicsPath(Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfPen@,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.Implementation.Shapes.AutoShapeImpl)">
            <summary>
            Gets the graphics path for autoshapes.
            </summary>
            <param name="bounds">Bounds to indicate the size of the autoshape.</param>
            <param name="pen">PdfPen to draw outlines of the autoshapes.</param>
            <param name="gr">pdfGraphics object in which autoshapes has to be drawn.</param>
            <param name="shapeImpl">Autoshape for which path should be obtained.</param>
            <returns>Newly created pdfPath for the autoshape.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetDarkerColor(Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Get drark color.
            </summary>
            <param name="color">Fill color</param>
            <param name="correctionfactory">Increase or decrease the color vlaue based on given value.</param>
            <returns>Fill color</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetGDIGraphicsPath(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.SkiaSharpHelper.Pen@,Syncfusion.Drawing.SkiaSharpHelper.Graphics,Syncfusion.XlsIO.Implementation.Shapes.AutoShapeImpl)">
            <summary>
            Gets the graphics path for autoshapes.
            </summary>
            <param name="bounds">Bounds to indicate the size of the autoshape.</param>
            <param name="pen">PdfPen to draw outlines of the autoshapes.</param>
            <param name="gr">pdfGraphics object in which autoshapes has to be drawn.</param>
            <param name="shapeImpl">Autoshape for which path should be obtained.</param>
            <returns>Newly created pdfPath for the autoshape.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CacheMerges(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{Syncfusion.XlsIO.Parser.Biff_Records.MergeCellsRecord.MergedRegion})">
            <summary>
                Caches range's merges.
            </summary>
            <param name="firstRow">First Row.</param>
            <param name="firstColumn">First Column.</param>
            <param name="lastRow">Last Row.</param>
            <param name="lastColumn">Last Column.</param>
            <param name="mergedRegions">List to save merges in</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CreatePen(Syncfusion.XlsIO.IShapeLineFormat)">
            <summary>
                Creates the pen.
            </summary>
            <param name="lineFormat">The format of the line.</param>
            <returns>The PdfPen object.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CreatePen(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.XlsIO.IShapeLineFormat)">
            <summary>
            Creates pen with line format
            </summary>
            <param name="shape">shape which line format is to be created.</param>
            <param name="lineFormat">line format of the shape.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CreateGDIPen(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.XlsIO.IShapeLineFormat)">
            <summary>
            Creates pen with line format
            </summary>
            <param name="shape">shape which line format is to be created.</param>
            <param name="lineFormat">line format of the shape.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetDashStyle(Syncfusion.XlsIO.IShapeLineFormat)">
            <summary>
            Gets the dash style.
            </summary>
            <param name="lineFormat">The format of the line.</param>
            <returns>The PdfDashStyle value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetShapeLineWidth(Syncfusion.XlsIO.IShapeLineFormat)">
            <summary>
                Gets the width of the line
            </summary>
            <param name="lineFormat">The format of the line.</param>
            <returns>The borderWidth of the line index.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawHeadersAndFooters(Syncfusion.Pdf.PdfSection,Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.Implementation.Charts.ChartImpl)">
            <summary>
                Draws the headers and footers.
            </summary>
            <param name="pdfSection">The PDF section.</param>
            <param name="sheetImpl">The sheet impl.</param>
            <param name="chart">The chart to be drawn</param>
            <returns>The collection of the header and footer objects.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawLines(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Draws the lines.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
            <param name="lastRow">The last row.</param>
            <param name="lastColumn">The last column.</param>
            <param name="graphics">The graphics.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IterateMerges(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIORenderer.ExcelToPdfConverter.MergeMethod,System.Single,System.Single,System.Single)">
            <summary>
                Iterates the merges.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
            <param name="lastRow">The last row.</param>
            <param name="lastColumn">The last column.</param>
            <param name="graphics">The graphics.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
            <param name="method">The method.</param>
            <param name="originalWidth">Width of the i original.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawMerge(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.Parser.Biff_Records.MergeCellsRecord.MergedRegion,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single,System.Single)">
            <summary>
                Draws the merge.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="mergedRegion">The merged region.</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
            <param name="graphics">The graphics.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
            <param name="lastRow">The last row.</param>
            <param name="lastColumn">The last column.</param>
            <param name="originalWidth">Width of the i original.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetPrintText(Syncfusion.XlsIO.IRange)">
            <summary>
            Converts page setup PrintErrors option into string representation used by Excel 2007.
            </summary>
            <param name="cell">Cell to get print value.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawBackGround(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIORenderer.ExcelToPdfConverter.CellMethod,System.Single,System.Single,System.Single)">
            <summary>
                Draws the back ground.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
            <param name="lastRow">The last row.</param>
            <param name="lastColumn">The last column.</param>
            <param name="graphics">The graphics.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
            <param name="method">The method.</param>
            <param name="originalWidth">Width of the i original.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsMerged(Syncfusion.XlsIO.IRange)">
            <summary>
                Indicates whether the cell is merged or not.
            </summary>
            <param name="cell">Cell.</param>
            <returns>Returns true if the cell is merged otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawBackground(Syncfusion.XlsIO.IRange,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
                Draws the background.
            </summary>
            <param name="cell">The cell range.</param>
            <param name="rectangle">The cell rectangle.</param>
            <param name="graphics">The pdf page graphics object.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawBackground(Syncfusion.XlsIO.Interfaces.IInternalExtendedFormat,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.IRange)">
            <summary>
                Draws the background.
            </summary>
            <param name="internalExtendedFormat">The internal extended format.</param>
            <param name="rect">The cell rectangle.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="cell">The cell range.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawMergedBackground(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.Parser.Biff_Records.MergeCellsRecord.MergedRegion,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single,System.Single)">
            <summary>
                Draws the merged background.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="mergedRegion">The merged region.</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
            <param name="graphics">The graphics.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
            <param name="lastRow">The last row.</param>
            <param name="lastColumn">The last column.</param>
            <param name="originalWidth">Width of the i original.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetMergedWidth(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Gets the width of the merged cells.
            </summary>
            <param name="firstColumn">The first column.</param>
            <param name="lastColumn">The last column.</param>
            <param name="mergedFirstColumn">The merged first column.</param>
            <param name="mergedLastColumn">The merged last column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawCells(Syncfusion.XlsIO.Implementation.WorksheetImpl,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Draws the cells.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
            <param name="lastRow">The last row.</param>
            <param name="lastColumn">The last column.</param>
            <param name="graphics">The graphics.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
            <param name="originalWidth">Width of the i original.</param>
            <param name="rangeWidth">Width of the cell</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawCell(Syncfusion.XlsIO.Implementation.MigrantRangeImpl,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.Int32)">
            <summary>
                Draws the cell.
            </summary>
            <param name="cell">The migrant cell range.</param>
            <param name="cellRect">The cell rectangle.</param>
            <param name="adjacentRect">The adjacent cell rectangle.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="mergedWidth">The width of Merged Cell</param>
            <param name="lastCell">The cell is last cell of the sheet or not</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawCell(Syncfusion.XlsIO.Implementation.ExtendedFormatImpl,Syncfusion.XlsIO.IRange,Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics,System.Single,System.String,System.Boolean,System.Int32)">
            <summary>
                Draws the cell.
            </summary>
            <param name="extendedFormatImpl">The extended format impl.</param>
            <param name="cell">The cell range.</param>
            <param name="cellRect">The cell rectangle.</param>
            <param name="adjacentRect">The adjacent cell rect.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="mergedWidth">The width of Merged Cell</param>
            <param name="lastCell">The cell is last cell of the sheet or not</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetTextMargin(System.Double)">
            <summary>
            Get the text margin based on font size.
            </summary>
            <param name="fontSize">Cell text font size</param>
            <returns>Text margin based on font size.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetPdfFont(Syncfusion.Drawing.Font,System.Boolean,System.IO.Stream)">
            <summary>
            Returns PDF font from system font.
            </summary>
            <param name="nativeFont">System Font.</param>
            <param name="isEmbedFont">Is font embeded.</param>
            <param name="alternateFontStream">Alternate font stream.</param>
            <returns>returns the PF font</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawIconSet(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.Implementation.ExtendedFormatImpl,Syncfusion.Drawing.RectangleF@,Syncfusion.Pdf.Graphics.PdfFont,System.String)">
            <summary>
            Draws IconSet image.
            </summary>
            <param name="graphics">The pdf page graphics.</param>
            <param name="extendedFormatImpl">The extended format of the cell.</param>
            <param name="adjacentRect">The adjacent cell rect.</param>
            <param name="font">The Pdf font in the cell.</param>
            <param name="cellText">The display text of the cell.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetRTLAlignment(System.UInt16[])">
            <summary>
                Returns right alignment if the first character is rtl otherwise left.
            </summary>
            <param name="characterCodes">Cell text character codes.</param>
            <returns>returns PdfTextAlignment.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.FillText(Syncfusion.Drawing.RectangleF,System.String,Syncfusion.Pdf.Graphics.PdfFont)">
            <summary>
                Fill the text into the given bounds.
            </summary>
            <param name="bounds">Cell bounds</param>
            <param name="text">Cell text</param>
            <param name="pdfFont">Pdf font</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawRTFText(Syncfusion.Drawing.RectangleF,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics,System.Collections.Generic.List{Syncfusion.XlsIO.IFont},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Draw the RTf text.
            </summary>
            <param name="cellRect">The cell rectangle.</param>
            <param name="adjacentRect">The cell adjacent rectangle.</param>
            <param name="graphics">The pdf graphics.</param>
            <param name="richTextFont">Font collection.</param>
            <param name="drawString">DrawString collection.</param>
            <param name="isShape">Indicating wheather shape or not.</param>
            <param name="isWrapText">Indicating wheather is wrapText or not</param>
            <param name="isHorizontalTextOverflow">Indicating wheather shape Horizontal Text is overflow or not</param>
            <param name="isVerticalTextOverflow">Indicating wheather shape vertical Text is overflow or not.</param>
            <param name="isHeaderFooter">Indicating wheather the header footer or not</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawRotatedText(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.ExtendedFormatImpl,Syncfusion.XlsIO.IRange,System.String,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfBrush,Syncfusion.Pdf.Graphics.PdfStringFormat,Syncfusion.Drawing.SizeF,System.Single,Syncfusion.Drawing.SizeF)">
            <summary>
                Draws the rotated text.
            </summary>
            <param name="adjacentRect">The adjacent cell rect.</param>
            <param name="extendedFormatImpl">The extended format impl of the cell.</param>
            <param name="cell">The cell range.</param>
            <param name="value">The cell display text.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="nativeFont">The native font.</param>
            <param name="brush">The pdf brush.</param>
            <param name="format">The pdf string format.</param>
            <param name="firstCharWidth">First char width of the display text .</param>
            <param name="totalWidth">The total width of the display text.</param>
            <param name="lastCharSize">Last char size of the display text .</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdatePdfAlignment(Syncfusion.Pdf.Graphics.PdfStringFormat,System.Int32,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl)">
            <summary>
                Aligns the rotated text based on pdf string format.
            </summary>
            <param name="format">Pdf string format.</param>
            <param name="rotationAngle">Rotation angle.</param>
            <param name="shape">Shape object</param>
            <returns>returns Pdf string format.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawBorders(Syncfusion.XlsIO.IBorders,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.IRange)">
            <summary>
                Draws the borders.
            </summary>
            <param name="borders">The border collections of the cell.</param>
            <param name="rect">The rectangle of the cell.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="cell">The cell range.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawBordersAsMSExcel(Syncfusion.XlsIO.IBorders,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.IRange,System.Boolean,System.Int32)">
            <summary>
                Draws the borders as MS Excel.
            </summary>
            <param name="borders">The border collections of the cell.</param>
            <param name="rect">The rectangle of the cell.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="cell">The cell range.</param>
            <param name="lastCell">The cell is last cell of the sheet or not</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SortBorderLineStyle">
            <summary>
                Sort border line style.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.FillBorderLineStyle(Syncfusion.XlsIO.IBorders)">
            <summary>
                Fill border line style.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.BorderColorContrast(Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.ExcelBordersIndex)">
            <summary>
                Calculate the color contrast of the cell borders.
            </summary>
            <param name="borders">The border collections of the cell.</param>
            <param name="index">Border index.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SortDictionaryByValue">
            <summary>
                Sort the dictionary by its values.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawAllBorders(Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.IBorder,Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.IRange,Syncfusion.Drawing.Color,Syncfusion.XlsIO.ExcelBordersIndex,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,System.Boolean,Syncfusion.XlsIO.ExcelBordersIndex,System.Boolean)">
            <summary>
                Draw all border lines.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawSingleBorder(Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.IBorder,System.Single,System.Single,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.IRange,Syncfusion.Drawing.Color,Syncfusion.XlsIO.ExcelBordersIndex,System.Boolean,Syncfusion.XlsIO.ExcelBordersIndex)">
            <summary>
                Draw single border.
            </summary>
            <param name="borders">The borders collection of the cell.</param>
            <param name="border">The cell Excel border indez.</param>
            <param name="x1">The x1 point of the border line.</param>
            <param name="y1">The y1 point of the border line.</param>
            <param name="x2">The x2 point of the border line.</param>
            <param name="y2">The y2 point of the border line.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="cell">The cell range.</param>
            <param name="borderColor">Color of the cell border.</param>
            <param name="index">border index.</param>
            <param name="isFirstBorder">check is this is first border.</param>
            <param name="fillEdge">Border index to fill edge.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckCFBorder(Syncfusion.XlsIO.ExcelBordersIndex,Syncfusion.XlsIO.IRange,System.Boolean)">
            <summary>
                Checks conditional formats and updates if border is to be drawn
            </summary>
            <param name="index">Border index of the cell</param>
            <param name="cell">Current cell being manipulated</param>
            <param name="canDrawBorder">Boolean value indicating if teh specified border index can be drawn</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawBorder(Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.IBorder,System.Single,System.Single,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.IRange,Syncfusion.Drawing.Color,Syncfusion.XlsIO.ExcelBordersIndex)">
            <summary>
                Draws the border.
            </summary>
            <param name="borders">The borders collection of the cell.</param>
            <param name="border">The cell Excel border indez.</param>
            <param name="x1">The x1 point of the border line.</param>
            <param name="y1">The y1 point of the border line.</param>
            <param name="x2">The x2 point of the border line.</param>
            <param name="y2">The y2 point of the border line.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="cell">The cell range.</param>
            <param name="borderColor">Color of the cell border.</param>
            <param name="index">Border Index of the cell</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetLeftCell(Syncfusion.XlsIO.Implementation.RangeImpl)">
            <summary>
            Gets left adjecent cell.
            </summary>
            <returns>Range</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetRightCell(Syncfusion.XlsIO.Implementation.RangeImpl)">
            <summary>
            Gets rigth adjecent cell.
            </summary>
            <returns>Range</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetTopCell(Syncfusion.XlsIO.Implementation.RangeImpl)">
            <summary>
            Gets top adjecent cell.
            </summary>
            <returns>Range</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBottomCell(Syncfusion.XlsIO.Implementation.RangeImpl)">
            <summary>
            Gets bottom adjecent cell.
            </summary>
            <returns>Range</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetCell(System.Int32,System.Int32,Syncfusion.XlsIO.Implementation.RangeImpl)">
            <summary>
            Gets relative cell.
            </summary>
            <param name="rowDelta">Row</param>
            <param name="colDelta">Column</param>
            <param name="range">Range</param>
            <returns>Range</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawDoubleBorder(Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.IBorder,System.Single,System.Single,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.IRange,Syncfusion.Drawing.Color)">
            <summary>
                Draws the double border.
            </summary>
            <param name="borders">The borders collection of the cell.</param>
            <param name="border">The Excel cell border Index.</param>
            <param name="x1">The x1 point of the border line.</param>
            <param name="y1">The y1 point of the border line.</param>
            <param name="x2">The x2 point of the border line.</param>
            <param name="y2">The y2 point of the border line.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="cell">The cell range.</param>
            <param name="borderColor">Color of the cell border.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawOuterBorderLine(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.XlsIO.ExcelBordersIndex,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,Syncfusion.XlsIO.IRange)">
            <summary>
                Draws the outer line.
            </summary>
            <param name="graphics">The pdf page graphics.</param>
            <param name="pen">The pdf pen to draw the border.</param>
            <param name="borderIndex">Index of the border .</param>
            <param name="x1">The x1 point of the border line.</param>
            <param name="y1">The y1 point of the border line.</param>
            <param name="x2">The x2 point of the border line.</param>
            <param name="y2">The y2 point of the border line.</param>
            <param name="deltaX">The delta X.</param>
            <param name="deltaY">The delta Y.</param>
            <param name="cell">The cell range.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawInnerBorderLine(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Pdf.Graphics.PdfPen,Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.ExcelBordersIndex,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,Syncfusion.XlsIO.IRange)">
            <summary>
                Draws the inner line.
            </summary>
            <param name="graphics">The pdf page graphics.</param>
            <param name="pen">The pdf pen to draw the border.</param>
            <param name="borders">The borders collection of the cell.</param>
            <param name="borderIndex">Index of the border .</param>
            <param name="x1">The x1 point of the border line.</param>
            <param name="y1">The y1 point of the border line.</param>
            <param name="x2">The x2 point of the border line.</param>
            <param name="y2">The y2 point of the border line.</param>
            <param name="deltaX">The delta X.</param>
            <param name="deltaY">The delta Y.</param>
            <param name="cell">The cell range.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawOrdinaryBorder(Syncfusion.XlsIO.IBorder,System.Single,System.Single,System.Single,System.Single,Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.Drawing.Color,Syncfusion.XlsIO.ExcelBordersIndex)">
            <summary>
                Draws the ordinary border.
            </summary>
            <param name="border">The Excel border index.</param>
            <param name="x1">The x1 point of the border line.</param>
            <param name="y1">The y1 point of the border line.</param>
            <param name="x2">The x2 point of the border line.</param>
            <param name="y2">The y2 point of the border line.</param>
            <param name="graphics">The pdf page graphics.</param>
            <param name="borderColor">Color of the border.</param>
            <param name="index">Border index of the cell</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawImages(Syncfusion.XlsIO.Implementation.WorksheetImpl)">
            <summary>
                Draws the images.
            </summary>
            <param name="sheet">The sheet.</param>
            <returns>Return the Pdf document with the image.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawImage(Syncfusion.XlsIO.IShape,Syncfusion.Drawing.SkiaSharpHelper.Image,Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,Syncfusion.Pdf.Graphics.PdfPath)">
            <summary>
                Draws all necessary images.
            </summary>
            <param name="shape">Shape to draw as image.</param>
            <param name="image">Image to draw in pdf page.</param>
            <param name="graphics">PdfGraphics to draw cells at.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="startX">The x value.</param>
            <param name="startY">The y value.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ApplyImageTransparency(Syncfusion.Drawing.SkiaSharpHelper.ImageAttributes,System.Single)">
            <summary>
            Apply Image transparency.
            </summary>
            <param name="imgAttribute">In where the transparency need to apply. </param>
            <param name="transparency">Transparency to apply.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ApplyRecolor(Syncfusion.XlsIO.Implementation.Shapes.BitmapShapeImpl,Syncfusion.Drawing.SkiaSharpHelper.Image)">
            <summary>
            Apply recolor to the give image.
            </summary>
            <param name="image">In where the recolor need to apply. </param>
            <param name="picture">Picture shape.</param>
            <returns> Recolored image.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ColorChange(Syncfusion.XlsIO.Implementation.Shapes.BitmapShapeImpl,Syncfusion.Drawing.SkiaSharpHelper.ImageAttributes)">
            <summary>
            Apply duotone to the give image.
            </summary>
            <param name="pictureImpl">Picture shape.</param>
            <param name="imageAttributes">ImageAttributes need to be applied.</param>
            <returns>Color changed ImageAttributes.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ApplyDuoTone(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.ColorObject})">
            <summary>
            Apply duotone to the give image.
            </summary>
            <param name="image">In where the duotone need to apply. </param>
            <param name="duotone">duotone color informations.</param>
            <returns>Duotone applied image.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ExecuteLinearInterpolation(Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,System.Single)">
            <summary>
            Executes Linear interpolation for Duotone.
            </summary>
            <param name="firstColor">In where the factor is applied.</param>
            <param name="secondColor">In where the factor is applied.</param>
            <param name="factor">Factor value.</param>
            <returns>Final factorized color.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CreateNonIndexedImage(Syncfusion.Drawing.SkiaSharpHelper.Image)">
            <summary>
            Create Non-Index image from source image.
            </summary>
            <param name="sourceImage">Source Image.</param>
            <returns>Created Non-Indexed image.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.EmuToPoint(System.Int32)">
            <summary>
                Convert EMU to Point.
            </summary>
            <param name="emu">EMU value.</param>
            <returns>Point value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetImageWidthInPoint(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Int32)">
            <summary>
                Update the image width in points.
            </summary>
            <param name="image">The image.</param>
            <param name="imageWidth">Image width.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetImageHeightInPoint(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Int32)">
            <summary>
                Update the image height in points.
            </summary>
            <param name="image">The image.</param>
            <param name="imageHeight">Image height.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.Rotate(Syncfusion.Pdf.Graphics.PdfGraphics,Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.RectangleF)">
            <summary>
            Rotate Shape.
            </summary>
            <param name="graphics">Pdf page graphics.</param>
            <param name="shapeImpl">Shape.</param>
            <param name="rectangleF">Shape bounds.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsGroupFlipH(Syncfusion.XlsIO.Implementation.Shapes.GroupShapeImpl)">
            <summary>
            Checked whether the group shape contains Horizontal flip.
            </summary>
            <param name="group">Group Shape.</param>
            <returns>True if the group shape contains flip..</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsGroupFlipV(Syncfusion.XlsIO.Implementation.Shapes.GroupShapeImpl)">
            <summary>
            Checked whether the group shape contains Vertical flip.
            </summary>
            <param name="group">Group Shape.</param>
            <returns>True if the group shape contains flip..</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetFlipHCount(Syncfusion.XlsIO.Implementation.Shapes.GroupShapeImpl,System.Int32)">
            <summary>
            Get Horizontal flip count.
            </summary>
            <param name="group">Group Shape.</param>
            <param name="count">Flip count.</param>
            <returns>Flip count.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetFlipVCount(Syncfusion.XlsIO.Implementation.Shapes.GroupShapeImpl,System.Int32)">
            <summary>
            Get Vertical flip count.
            </summary>
            <param name="group">Group Shape.</param>
            <param name="count">Flip count.</param>
            <returns>Flip count.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetLatFromScene3D(Syncfusion.XlsIO.Implementation.Shapes.AutoShapeImpl,System.Boolean@)">
            <summary>
            Gets the lattitude value of the shape from Scene 3D.
            </summary>
            <param name="shapeImpl">AutoShape for which the lattitude value should be obtained.</param>
            <param name="flip">Boolean value indicates whether AutoShape is flipped horizontally.</param>
            <returns>Rotation angle of the AutoShape.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ApplyRotation(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.RectangleF,System.Single,Syncfusion.Pdf.Graphics.PdfGraphics)">
            <summary>
            Applies rotation for the AutoShape/Textbox.
            </summary>
            <param name="shape">Shape for which rotation should be applied.</param>
            <param name="bounds">Rectangle bound values of the Shape.</param>
            <param name="rotationAngle">Rotation angle to apply the rotation.</param>
            <param name="graphics">PdfGraphics to render the Shape.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.RotateText(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.TextDirection)">
            <summary>
            Rotates the text bounds of the Shape.
            </summary>
            <param name="bounds">Current rectangle bound.</param>
            <param name="textDirectionType">Direction of the text.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetTransformMatrix(Syncfusion.Drawing.RectangleF,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Gets the transformation matrix for the AutoShape.
            </summary>
            <param name="bounds">Rectangle bounds of the AutoShape.</param>
            <param name="ang">Rotation angle to be applied.</param>
            <param name="flipV">Horizontal flip.</param>
            <param name="flipH">Vertical flip.</param>
            <returns>Transformed matrix value in which shape will be rendered.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetTransformationMatrix(Syncfusion.Drawing.RectangleF,System.Single)">
            <summary>
                Prepares a matrix to PDF.
            </summary>
            <param name="bounds">Render bounds.</param>
            <param name="angle">Rotation Angle.</param>
            <returns>
                A properly prepared PdfTransformationMatrix class instance.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SetShapeHyperlink(Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl,Syncfusion.Drawing.RectangleF)">
            <summary>
                Set hyperlink to shape
            </summary>
            <param name="shape">The shape.</param>
            <param name="bounds">Shape bounds.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DrawChart(Syncfusion.XlsIO.Implementation.Shapes.ChartShapeImpl,Syncfusion.Pdf.Graphics.PdfGraphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                It's draw the worksheet chart's to the pdf
            </summary>
            <param name="chart">It's represent the chartshape</param>
            <param name="graphics">Pdf Graphics</param>
            <param name="firstRow">First row</param>
            <param name="firstColumn">First Column</param>
            <param name="lastRow">Last row of chart shape</param>
            <param name="lastColumn">Last column of chart shape</param>
            <param name="startX">Starting point of chartshape-X Point</param>
            <param name="startY">starting point of chartshape - Y point</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CropHFImage(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
                Crops the image with the specified offset.
            </summary>
            <param name="cropableImage">Source image to crop.</param>
            <param name="leftOffset">Left offset to crop from.</param>
            <param name="topOffset">Top offset to crop from.</param>
            <param name="rightOffset">Right offset to crop.</param>
            <param name="bottomOffset">Bottom offset to crop.</param>
            <param name="isTransparent">Indicates whether the destination image is transparent.</param>
            <returns>Returns the cropped image for the offsets specified.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHFScaledWidthHeight(System.String)">
            <summary>
                returns float array which contains preserved height and width.
            </summary>
            <param name="preservedStyles">preserved style for header and footer</param>
            <returns> height and width of header/footer image</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetValueFromStyle(System.String)">
            <summary>
                returns float value from preserved style.
            </summary>
            <param name="style">Preserved style for width and height</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHeaderFooterImages(Syncfusion.XlsIO.Interfaces.IPageSetupBase,System.Single@,System.Single@,Syncfusion.Pdf.Graphics.PdfTemplate,System.String,System.String,Syncfusion.Pdf.PdfSection)">
            <summary>
                Draws the header and footer images.
            </summary>
            <param name="pageSetupBase">The worksheet object.</param>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="pageTemplate">The pdf page template.</param>
            <param name="align">The alignment of the header and footer text.</param>
            <param name="name">The name represents the header part or footer part.</param>
            <param name="pdfSection">The PDF section.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CalculateZoomValue(Syncfusion.Pdf.PdfSection,System.Int32)">
            <summary>
            </summary>
            <param name="pdfSection"></param>
            <param name="zoomValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.InitializePdfPage">
            <summary>
                Initializes the PDF page.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IntializeHeaderFooter(Syncfusion.XlsIO.IWorksheet)">
            <summary>
                Intializes the header and footer.
            </summary>
            <param name="sheet">The sheet.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IntializeHeaderFooter(Syncfusion.XlsIO.IChart)">
            <summary>
                Initialize the default header and footer for chartsheet
            </summary>
            <param name="chart"></param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IntializeFonts">
            <summary>
                Intializes the fonts.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IntializeRemovableCharacters">
            <summary>
                Intializes the Remoable Characters
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetAdjacentCells(Syncfusion.XlsIO.IRange,Syncfusion.Drawing.RectangleF,System.Int32,Syncfusion.XlsIO.Implementation.MigrantRangeImpl,System.Single,System.Boolean@)">
            <summary>
                Gets the adjacent cell size.
            </summary>
            <param name="cell">The cell rnage.</param>
            <param name="rect">The cell rectangle.</param>
            <param name="lastColumnChanged">Denotes whether the last column is changed or not</param>
            <param name="firstColumn">The first column of the range.</param>
            <param name="cell2">The adjacent cell.</param>
            <param name="originalWidth">Width of the sheet.</param>
            <returns>The Adjacent cell RectangleF</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBackgroundHeightCoordinates(System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.Dictionary{Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF},Syncfusion.Pdf.PdfPage)">
            <summary>
                Gets the vertical coordinates of image background.
            </summary>
            <param name="startX">The X coordinate.</param>
            <param name="startY">The Y coordinate.</param>
            <param name="imageWidth">Width of the image.</param>
            <param name="imageHeight">Height of the image.</param>
            <param name="imageCoordinates">The image coordinate.</param>
            <param name="pdfPage">The PDF page.</param>
            <returns>
                returns the vertical coordinates of image background.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBackgroundWidthCoordinates(System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.Dictionary{Syncfusion.Drawing.PointF,Syncfusion.Drawing.SizeF},Syncfusion.Pdf.PdfPage)">
            <summary>
                Gets the horizontal coordinates of image background.
            </summary>
            <param name="startX">The X coordinate.</param>
            <param name="startY">The Y coordinate.</param>
            <param name="imageWidth">Width of the image.</param>
            <param name="imageHeight">Height of the image.</param>
            <param name="imageCoordinates">The image coordinate.</param>
            <param name="pdfPage">The PDF page.</param>
            <returns>
                Returns the horizontal coordinates of background image.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBorderWidth(Syncfusion.XlsIO.IBorder)">
            <summary>
                Gets the width of the border.
            </summary>
            <param name="border">The border.</param>
            <returns>The borderWidth of the Excel border Index.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBorderPriority(Syncfusion.XlsIO.ExcelLineStyle)">
            <summary>
            Get the border based on priority for using compare the two border.
            </summary>
            <param name="lineStyle">Boder lineStyle</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBrightness(Syncfusion.Drawing.Color)">
            <summary>
            Get the brightness of color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBottomText(System.String,System.Int32)">
            <summary>
                Gets the bottom text.
            </summary>
            <param name="value">The value.</param>
            <param name="rotationAngle">The rotation angle.</param>
            <returns>The text to be displayed in the rotated Text.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetBrush(Syncfusion.XlsIO.Interfaces.IInternalExtendedFormat)">
            <summary>
                Gets the brush.
            </summary>
            <param name="internalExtendedFormat">The internal extended format of the cell.</param>
            <returns>The PdfBrush object.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetCounterClockwiseRotation(System.Int32)">
            <summary>
                Gets the counter clockwise rotation.
            </summary>
            <param name="rotationAngle">The rotation angle.</param>
            <returns>The rotation angle as an MS Excel representation.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetDashStyle(Syncfusion.XlsIO.IBorder)">
            <summary>
                Gets the dash style.
            </summary>
            <param name="border">The border.</param>
            <returns>The PdfDashStyle value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckIndex(System.Int32,System.String,System.String,System.String)">
            <summary>
                Checks the index.
            </summary>
            <param name="index">The index.</param>
            <param name="text">The text.</param>
            <param name="splitValue">The split value.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetDisplayWrapTextList(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat,System.String,Syncfusion.Drawing.RectangleF)">
            <summary>
                Gets the display wrap text list.
            </summary>
            <param name="pdfFont">The PDF font.</param>
            <param name="pdfFormat">The PDF string format.</param>
            <param name="cellTextValue">The cell text value.</param>
            <param name="cellRect">The cell rectangle.</param>
            <returns>The list of wrapped text.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetDisplayWrapTextList(Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat,System.String,Syncfusion.Drawing.RectangleF,System.Collections.Generic.List{System.String})">
            <summary>
                Gets the display wrap text list.
            </summary>
            <param name="pdfFont">The PDF font.</param>
            <param name="pdfFormat">The PDF string format.</param>
            <param name="cellTextValue">The cell text value.</param>
            <param name="cellRect">The cell rectangle.</param>
            <param name="splitTextList">The split text list.</param>
            <returns>The List of wrapped text.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetFont(Syncfusion.XlsIO.IFont,System.String,System.Int32)">
            <summary>
                Gets the font.
            </summary>
            <param name="font">The font object of the cell.</param>
            <param name="fontName">Name of the font.</param>
            <param name="size">The size of the font.</param>
            <returns>Font object</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetFont(System.String,System.Int32,System.Boolean,System.Boolean,Syncfusion.Drawing.Font)">
            <summary>
                Gets the font.
            </summary>
            <param name="name">The name of the font.</param>
            <param name="size">The size of the font.</param>
            <param name="fontSettings">The settings of the font</param>
            <param name="hasUnderline">Denotes whether the font has underline or not</param>
            <returns>Font object</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetFont(System.String,System.Int32)">
            <summary>
                Gets the font.
            </summary>
            <param name="name">The name of the font.</param>
            <param name="size">The size of the font.</param>
            <returns>Font object</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHeaderFooterInformation(Syncfusion.XlsIORenderer.HeaderFooterSection,System.Collections.Generic.List{Syncfusion.XlsIORenderer.HeaderFooter},Syncfusion.Pdf.PdfSection,Syncfusion.XlsIO.Interfaces.IPageSetupBase,System.Collections.Generic.Dictionary{System.String,Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings},Syncfusion.Pdf.Graphics.PdfTemplate,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
                Gets the header footer information.
            </summary>
            <param name="headerFooterCollection">The header footer collection.</param>
            <param name="hfsection">The header footer section </param>
            <param name="pdfSection">The PDF section.</param>
            <param name="fontColorSettings">The font color settings.</param>
            <param name="pdfTemplate">The PDF template.</param>
            <param name="width">The width of the header or footer.</param>
            <param name="height">The height of the header or footer.</param>
            <param name="align">The alignment of the header and footer text.</param>
            <param name="name">The name represents either the header or footer.</param>
            <param name="pageNumber">The page number of the pdf document.</param>
            <param name="pageSetupBase">The page setup for pdf document</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateHeaderFooterText(Syncfusion.XlsIORenderer.HeaderFooterSection,System.String,Syncfusion.XlsIO.Implementation.RichTextString,Syncfusion.XlsIO.Implementation.RichTextString,System.Int32@)">
            <summary>
            Update Header and footer text.
            </summary>
            <param name="hfsection">Headerfooter section</param>
            <param name="stringContent">current string</param>
            <param name="rtfString">RichTexting</param>
            <param name="richTextHFString">Rich text collection</param>
            <param name="index">current richtext index</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHeaderInformation(Syncfusion.XlsIO.Interfaces.IPageSetupBase,System.Collections.Generic.Dictionary{System.String,Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings},System.String,System.String,System.Single@,System.Single@,System.Single)">
            <summary>
                Gets the header information.
            </summary>
            <param name="fontColorSettings">The font color settings.</param>
            <param name="align">The alignment of the header and footer Text.</param>
            <param name="name">The name represets either the header part or the footer part.</param>
            <param name="height">The height of the Header or Footer.</param>
            <param name="width">The width of the Header or Footer.</param>
            <param name="pageWidth">Width of the page.</param>
            <param name="pageSetupBase">The page setup for pdf document</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetSizePart(Syncfusion.XlsIO.Implementation.RichTextString,System.Int32,System.Int32)">
            <summary>
            Returns size of the string part.
            </summary>
            <param name="iStartPos">Start position.</param>
            <param name="iEndPos">End position.</param>
            <param name="richTextSection">Rich text string.</param>
            <returns>Size of the string part.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.MeasureString(System.String,Syncfusion.XlsIO.IFont)">
            <summary>
            Measure and return the size of the given text.
            </summary>
            <param name="text">String to measure</param>
            <param name="font">System Font.</param>
            <returns>Size of the string.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHeaderFooterOptions(System.Collections.Generic.Dictionary{System.String,System.String},Syncfusion.Pdf.PdfSection,Syncfusion.XlsIO.Interfaces.IPageSetupBase,System.Single,System.String,System.String)">
            <summary>
                Gets the header footer options.
            </summary>
            <param name="pageSetups">The dictionart collection of the header and footer page setups.</param>
            <param name="pdfSection">The PDF section.</param>
            <param name="pageSetupBase">The worksheet object.</param>
            <param name="templateWidth">Width of the template.</param>
            <param name="name">The name represents either the header part or the footer part.</param>
            <param name="sheetOrchartname">It's Represent the sheet or chart name</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.FormatHeaderFooterString(System.String)">
            <summary>
                Modifies the specified string to pass String.Format().
            </summary>
            <param name="headerFooterString">The header or footer string to be modified to escape '{' or '}'.</param>
            <returns>Modified header/footer string.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHeaderFooterValues(System.String[],System.Int32,Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings,System.Boolean)">
            <summary>
                To get the headerfooter font color settings
            </summary>
            <param name="headerFooterValues">The splitted header footer values.</param>
            <param name="count">Header footer values count.</param>
            <param name="hfFontColorSettings">The color settings for the header footer.</param>
            <param name="isControlRemoved">Specifies a boolean value indicating if ampersand (&amp;) is removed in header footer string.</param>
            <returns>The color settings loaded from header footer string.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHeaderFooterColor(System.String)">
            <summary>
                Gets the color of the header footer text color.
            </summary>
            <param name="colorValue">The color value.</param>
            <returns>The HeaderFooter Text color.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckDigit(System.String)">
            <summary>
                Checks whether the string contains the digit or not.
            </summary>
            <param name="values">string values</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckFontValues(System.String)">
            <summary>
                Checks whether the string contains the digit or not.
            </summary>
            <param name="fontValue">font value</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHorizontalAlignmentFromExtendedFormat(Syncfusion.XlsIO.IExtendedFormat,Syncfusion.XlsIO.IRange)">
            <summary>
                Gets the horizontal alignment from extended format.
            </summary>
            <param name="extendedFormatStyle">The extended format style.</param>
            <param name="cell">The cell range.</param>
            <returns>The PdfTextAlignment value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHorizontalLeft(System.Int32,System.Single,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.ExcelVAlign,Syncfusion.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
                Gets the horizontal left.
            </summary>
            <param name="rotationAngle">The rotation angle of the cell display text.</param>
            <param name="stringLength">Length of the string.</param>
            <param name="rect">The cell rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the cell text.</param>
            <param name="firstCharSize">First char size of the display text .</param>
            <param name="nativeFont">The native font of the cell text.</param>
            <param name="format">The pdf string format.</param>
            <returns>The vector for the text rotation.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHorizontalRight(System.Int32,System.Single,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.ExcelVAlign,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
                Gets the horizontal right.
            </summary>
            <param name="rotationAngle">The rotation angle of the cell display text.</param>
            <param name="stringLength">Length of the string.</param>
            <param name="rect">The cell rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the cell text.</param>
            <param name="lastCharSize">Last char size of the display text.</param>
            <param name="firstCharSize">First char size of the display text .</param>
            <param name="nativeFont">The native font of the cell text.</param>
            <param name="format">The pdf string format.</param>
            <returns>The vector for the text rotation.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetHorizontalCenter(System.Int32,System.Single,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.ExcelVAlign,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
                Gets the horizontal center.
            </summary>
            <param name="rotationAngle">The rotation angle of the cell display text.</param>
            <param name="stringLength">Length of the string.</param>
            <param name="rect">The cell rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the cell text.</param>
            <param name="lastCharSize">Last char size of the display text.</param>
            <param name="firstCharSize">First char size of the display text .</param>
            <param name="nativeFont">The native font of the cell text.</param>
            <param name="format">The pdf string format.</param>
            <returns>The vector for the text rotation.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetMaxHeight(System.Collections.Generic.List{Syncfusion.XlsIORenderer.HeaderFooterSection})">
            <summary>
                Gets the Max height of the HeaderFooterSection.
            </summary>
            <param name="sections">The sections.</param>
            <returns>The Maximum value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetMaxWidth(System.Collections.Generic.List{Syncfusion.Drawing.SizeF})">
            <summary>
                Gets the width of the max.
            </summary>
            <param name="sizes">The sizes.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetMaxValue(System.Collections.Generic.List{System.Single})">
            <summary>
                Gets the max value.
            </summary>
            <param name="maxList">The max list.</param>
            <returns>The maximum value</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetMaxValue(System.Collections.Generic.List{System.Int32})">
            <summary>
                Gets the max value.
            </summary>
            <param name="maxList">The max list.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetMergedRectangle(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.Parser.Biff_Records.MergeCellsRecord.MergedRegion,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Gets the merged rectangle.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="mergedRegion">The merged region.</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
            <param name="lastRow">The last row.</param>
            <param name="lastColumn">The last column.</param>
            <param name="startX">The start x value.</param>
            <param name="startY">The start y value.</param>
            <returns>The Merge Rectangle Coordinates.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetResizedImage(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Int32,System.Int32)">
            <summary>
                Gets the resized image.
            </summary>
            <param name="originalImage">The original image.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The resized Image.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetAdjacentRange(Syncfusion.XlsIO.IRange)">
            <summary>
                Gets the adjacent range.
            </summary>
            <param name="cell">The cell.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetScaledPage(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Gets the scaled page.
            </summary>
            <param name="originalWidth">Width of the original.</param>
            <param name="originalHeight">Height of the original.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="maxHeight">Height of the max.</param>
            <param name="fitPage">if set to <c>true</c> [fit page].</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetScaledHFPage(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Gets the scaled page.
            </summary>
            <param name="originalWidth">Width of the original.</param>
            <param name="originalHeight">Height of the original.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="maxHeight">Height of the max.</param>
            <param name="fitPage">if set to <c>true</c> [fit page].</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetScaledPicture(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Int32,System.Int32)">
            <summary>
                Gets the scaled picture.
            </summary>
            <param name="originalImage">The original image.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="maxHeight">Height of the max.</param>
            <returns>The scaled Image</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetScaledPictureWidthHeight(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Single@,System.Single@)">
            <summary>
                Gets the scaled picture width height.
            </summary>
            <param name="originalImage">The original image.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="maxHeight">Height of the max.</param>
            <returns>The scaled Image</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetSortedWidth(System.String,System.Collections.Generic.Dictionary{System.String,Syncfusion.Pdf.Graphics.PdfTemplate},System.Single)">
            <summary>
                Gets the width of the sorted.
            </summary>
            <param name="align">The align.</param>
            <param name="temps">The temps.</param>
            <param name="dividedWidth">Width of the divided.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetSplitted(System.String)">
            <summary>
                Gets the splitted header and footer text.
            </summary>
            <param name="pageSetup">The page setup.</param>
            <returns>The Array of splitted strings</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ReplaceDollar(System.String[])">
            <summary>
                Replaces ascii character in the string with Dollar ($) symbol.
            </summary>
            <param name="arr">Array of header/footer strings.</param>
            <returns>Modified array of header/footer strings.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetStartEndBorderIndex(Syncfusion.XlsIO.ExcelBordersIndex,Syncfusion.XlsIO.ExcelBordersIndex@,Syncfusion.XlsIO.ExcelBordersIndex@)">
            <summary>
                Gets the start index of the end border.
            </summary>
            <param name="borderIndex">Index of the Excel border.</param>
            <param name="start">The start Excelborder index.</param>
            <param name="end">The end Excel border index.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetTemplateHeight(Syncfusion.XlsIO.Interfaces.IPageSetupBase,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
                Gets the height of the template.
            </summary>
            <param name="pageSetup">The page setup object of the sheet.</param>
            <param name="name">The name represents either the header part or the footer part.</param>
            <param name="align">The alignent of the header and footer text.</param>
            <param name="imageHeight">Height of the image.</param>
            <param name="imageWidth">Width of the image.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetImageWidthHeightInPoint(Syncfusion.Drawing.SkiaSharpHelper.Image,System.Int32@,System.Int32@)">
            <summary>
                Update the image width and height in points.
            </summary>
            <param name="image">The image.</param>
            <param name="imageHeight">Image height.</param>
            <param name="imageWidth">Image width.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetTextAlignmentFromShape(Syncfusion.XlsIO.IShape)">
            <summary>
                Gets the text alignment from shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns>The PdfTextAlignment value.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetVector(System.Int32,System.Single,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.ExcelHAlign,Syncfusion.XlsIO.ExcelVAlign,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
                Gets the vector.
            </summary>
            <param name="rotationAngle">The rotation angle of the cell display text.</param>
            <param name="stringLength">Length of the string.</param>
            <param name="rect">The cell rectangle.</param>
            <param name="horizontalAlign">The horizontal alignment of the cell text.</param>
            <param name="verticalAlign">The vertical alignment of the cell text.</param>
            <param name="lastCharSize">Last char size of the display text.</param>
            <param name="firstCharSize">First char size of the display text .</param>
            <param name="nativeFont">The native font of the cell text.</param>
            <param name="format">The pdf string format.</param>
            <returns>The vector for the text rotation.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetVector(System.Int32,System.Single,Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.Implementation.ExtendedFormatImpl,Syncfusion.Drawing.SizeF,Syncfusion.Drawing.SizeF,Syncfusion.Pdf.Graphics.PdfFont,Syncfusion.Pdf.Graphics.PdfStringFormat)">
            <summary>
                Gets the vector.
            </summary>
            <param name="rotationAngle">The rotation angle of the text within the cell.</param>
            <param name="width">The total width of the display text.</param>
            <param name="adjacentRect">The adjacent cell rect.</param>
            <param name="extendedFormatImpl">The extended format impl of the cell.</param>
            <param name="lastCharSize">Last char size of the display text. </param>
            <param name="firstCharSize">First char size of the display text .</param>
            <param name="nativeFont">The native font of the cell.</param>
            <param name="format">The pdf string format.</param>
            <returns>The vector for the text rotation</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetVerticalAlignmentFromExtendedFormat(Syncfusion.XlsIO.IExtendedFormat)">
            <summary>
                Gets the vertical alignment from extended format.
            </summary>
            <param name="style">The style.</param>
            <returns>The PdfVerticalAlignment value</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetVerticalAlignmentFromShape(Syncfusion.XlsIO.IShape)">
            <summary>
                Gets the vertical alignment from shape.
            </summary>
            <param name="shape">The text box shape.</param>
            <returns>The pdfVerticalAlignment value</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SetDocumentProperties">
            <summary>
                Sets the document properties.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SetHyperLink(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.IRange)">
            <summary>
                Sets the hyper link.
            </summary>
            <param name="cellRect">The cell rectangle.</param>
            <param name="range">The range to which hyperlink is to be set</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SetHyperLink(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.IRange,System.String)">
            <summary>
                Sets the hyper link from formula.
            </summary>
            <param name="cellRect">The cell rectangle.</param>
            <param name="range">The range to which hyperlink is to be set</param>
            <param name="formula">Formula of the cell</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateHyperLinkFormula(System.String)">
            <summary>
            Updates the friendly name part to URI part to calculate the URI value
            </summary>
            <param name="formula"> cell hyperlink formula</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ReSize(Syncfusion.Drawing.RectangleF)">
            <summary>
                To Resize the hyperlink position for fit in the pdf page.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.GetActualUsedRange(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,System.Boolean,System.Boolean)">
            <summary>
                Gets the actual used range.
            </summary>
            <param name="sheet">The sheet.</param>
            <returns>The IRange object</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateUsedRange(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.IRange)">
            <summary>
                Updates the used Range
            </summary>
            <param name="sheetImpl">The Worksheet</param>
            <param name="actualUsedRange">Actual used range of worksheet</param>
            <returns>Returns the updated used range</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsBlank(Syncfusion.XlsIO.IRange)">
            <summary>
                Check whether the given range is empty or not.
                Exclude hidden rows and columns.
            </summary>
            <param name="range">The range.</param>
            <returns>Returns True if the range is Blank otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.AddBookMark">
            <summary>
                Adds the book mark.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckRange(Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.IRange)">
            <summary>
                Checks the range.
            </summary>
            <param name="tableRange">The table range.</param>
            <param name="sheetRange">The sheet range.</param>
            <returns>True if the sheet range is within the table range else false will be returned.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckUnicode(System.String)">
            <summary>
                Checks the unicode.
            </summary>
            <param name="unicodeText">The unicode text.</param>
            <returns>
                True if the text is an unicode else false will returned.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckUnicodeWithoutPunctuation(System.String)">
            <summary>
                Checks whether the unicode characters are only punctuations
                8208,8286 are the starting and ending utf-8 value of punctuations
            </summary>
            <param name="unicodeText"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckMergedRegion(Syncfusion.XlsIO.IRange)">
            <summary>
                Determines whether [has merged region] [the specified i range].
            </summary>
            <param name="iRange">The i range.</param>
            <returns>
                <c>true</c> if [has merged region] [the specified i range]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckIfRTL(System.UInt16[])">
            <summary>
                Checks if array of flags contains at least on RTL symbol.
            </summary>
            <param name="characterCodes">Array of flags.</param>
            <returns>True if array of flags contains at least on RTL symbol, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CreatePen(Syncfusion.XlsIO.IBorder,Syncfusion.Drawing.Color)">
            <summary>
                Creates the pen.
            </summary>
            <param name="border">The border.</param>
            <param name="borderColor">Color of the border.</param>
            <returns>The PdfPen object.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.DegreeToRadian(System.Double)">
            <summary>
                Degrees to radian.
            </summary>
            <param name="angle">The angle.</param>
            <returns>Radian value</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.NormalizeColor(Syncfusion.Drawing.Color)">
            <summary>
                Normalizes the color.
            </summary>
            <param name="color">The color.</param>
            <returns>The Normailzed Color</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.RequiredWidth(System.Single,System.Single,System.Single)">
            <summary>
                The function used to identify the required width.
            </summary>
            <param name="excelSheetWidth">Width of the excel sheet.</param>
            <param name="shHeight">Height of the sheet.</param>
            <param name="excelSheetHeight">Height of the excel sheet.</param>
            <returns>Returns the required width</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.RequiredHeight(System.Single,System.Single,System.Single)">
            <summary>
                The function used to identify the required height.
            </summary>
            <param name="excelSheetWidth">Width of the excel sheet.</param>
            <param name="shWidth">Width of the sheet.</param>
            <param name="excelSheetHeight">Height of the excel sheet.</param>
            <returns>Returns the required height</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateBorderDelta(Syncfusion.XlsIO.IWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean,Syncfusion.XlsIO.IBorders,Syncfusion.XlsIO.ExcelBordersIndex,Syncfusion.XlsIO.ExcelBordersIndex,System.Boolean)">
            <summary>
                Updates the border delta.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="row">The row of the excel sheet.</param>
            <param name="column">The column of the excel sheet.</param>
            <param name="deltaX">The delta X.</param>
            <param name="deltaY">The delta Y.</param>
            <param name="deltaX1">The delta x1.</param>
            <param name="deltaY1">The delta y1.</param>
            <param name="isInvertCondition">if set to <c>true</c> [is invert condition].</param>
            <param name="borders">The borders collection of the cell.</param>
            <param name="start">The start Excel border index.</param>
            <param name="end">The end Excel border index.</param>
            <param name="isLineStart">if set to <c>true</c> [is line start].</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateRectangleCoordinates(Syncfusion.Drawing.RectangleF,Syncfusion.XlsIO.IBorders)">
            <summary>
                Updates the rectangle coordinates.
            </summary>
            <param name="cellRect">The cell rectangle.</param>
            <param name="borders">The borders collection of the cell.</param>
            <returns>The updated Rectangle coordinates</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateShapeRange(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange)">
            <summary>
                To update the used range for the shape
            </summary>
            <param name="sheet">Represents the worksheet</param>
            <param name="originalRange">Represents the actual range</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.UpdateChartsRange(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange)">
            <summary>
                To update the used range for the chart shape
            </summary>
            <param name="sheetImpl"></param>
            <param name="originalRange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.AddPDFHeaderFooter(Syncfusion.XlsIO.Interfaces.IPageSetupBase,Syncfusion.Pdf.PdfSection,System.Boolean,System.Boolean)">
            <summary>
                Draw the Pdf HeaderFooter
            </summary>
            <param name="PageSetup">The page setup for pdf document</param>
            <param name="PdfSection">Represent the pdf Section for drawing the HeaderOrFooter</param>
            <param name="IsHeader">Used to identify the Header or Footer</param>
            <param name="isChart">Used to identify the chart</param>
            <returns>Return the pdfpagetemplete element</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.AddHeaderFooterSection(Syncfusion.Pdf.PdfPageTemplateElement,Syncfusion.XlsIORenderer.HeaderFooterSection)">
            <summary>
                Draw the Pdf Header Footer string
            </summary>
            <param name="pageTemplate">PdfPagetemplate-HeaderOrFooter</param>
            <param name="Section">HeaderOrFooter Section</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.SwitchFonts(System.String,System.Byte,System.String)">
            <summary>
                Modifies font name so as to render Unicode characters.
            </summary>
            <param name="testString">The sting in test for Unicode characters.</param>
            <param name="charSet">The Charset of the font.</param>
            <param name="fontName">The name of the font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForUnicodeSymbols(System.String)">
            <summary>
            Check unicode symbols for unicode string
            </summary>
            <param name="unicodeText">string</param>
            <returns>True, if string value as unicode symbol, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CanDrawString(System.String,System.String)">
            <summary>
            The text string is can draw current font name or not.
            </summary>
            <param name="fontName">The current font name</param>
            <param name="testString">the current cell text</param>
            <returns>Returns the current cell text font name</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.IsSymbol(System.String)">
            <summary>
            Get the text have symbols
            </summary>
            <param name="testString">The given text</param>
            <returns>If text have symbols return true</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForGeneralPunctuationSegeoUI(System.String)">
            <summary>
            Checks for Segoe UI symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForExtendedPlan(System.String)">
            <summary>
            Checks for Segoe UI Emoji symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI Emoji Symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForDingbats(System.String)">
            <summary>
            Checks for Segoe UI Emoji symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI Emoji symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForGeneralPunctuation(System.String)">
            <summary>
            Checks for Segoe UI Emoji symbols characters in the Unicode string
            </summary>
            <param name="unicodeText">Input Unicode string</param>
            <returns>True if the Unicode string contain Segoe UI Emoji symbols characters. False otherwise</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForAmharic(System.String)">
            <summary>
                Checks for amharic characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Amharic characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForKhmer(System.String)">
            <summary>
                Checks for khmer characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Khmer characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForThai(System.String)">
            <summary>
                Checks for thai characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Thai characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForSinhala(System.String)">
            <summary>
                Checks for sinhala characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Sinhala characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForMyanmar(System.String)">
            <summary>
                Checks for myanmar characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Myanmar characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForTamil(System.String)">
            <summary>
                Checks for tamil characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Tamil characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForTelugu(System.String)">
            <summary>
                Checks for telugu characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Telugu characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForPunjabi(System.String)">
            <summary>
                Checks for punjabi characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Punjabi characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForMalayalam(System.String)">
            <summary>
                Checks for malayalam characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Malayalam characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForKanndada(System.String)">
            <summary>
                Checks for kannada characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Kannada characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForGujarati(System.String)">
            <summary>
                Checks for gujarati characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Gujarati characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForMarathi(System.String)">
            <summary>
                Checks for marathi characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Marathi characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForBengali(System.String)">
            <summary>
                Checks for bengali characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Bengali characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForOdia(System.String)">
            <summary>
                Checks for odia characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contain Odia characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForLatin(System.String)">
            <summary>
                Checks for Latin characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string does not contain Latin characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForCJK(System.String)">
            <summary>
                Checks for CJK characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contains CJK characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckForArabicOrHebrew(System.String)">
            <summary>
                Checks for Hebrew or Arabic characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contains Arabic or Hebrew characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.CheckforKorean(System.String)">
            <summary>
                Checks for Korean characters in the Unicode string.
            </summary>
            <param name="unicodeText">Input Unicode string.</param>
            <returns>True if the Unicode string contains Korean characters. False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfConverter.ContainsTransparent(Syncfusion.Drawing.SkiaSharpHelper.Bitmap)">
            <summary>
            Checks whether the image is transparent or not.
            </summary>
            <param name="image">Input Image</param>
            <returns>Returns whether the image is transparent or not</returns>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.ExcelToPDFConverterException">
            <summary>
            Returns the <see cref="T:System.Exception"/> when trying to convert the Excel document to a PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ExcelToPDFConverterException.DefaultMessage">
            <summary>
            Default message.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPDFConverterException.#ctor">
            <summary>
            Initializes a new instance of the class with an empty error message.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPDFConverterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.XlsIORendererSettings">
            <summary>
                Represents the conversion Settings for Excel to  PDF Converter.
            </summary>
            <remarks>
                Excel To Pdf Conversion is not supported in WinRT, Windows Phone, Universal, Portable and Silverlight platforms.
            </remarks>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._renderBySheet">
            <summary>
            True if rendering sheet by sheet, otherwise false.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._autoDetectComplexScript">
            <summary>
             Enables the complex script detection.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._HFOption">
            <summary>
                Represents the Header footer option of the output document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._displayGridLines">
            <summary>
                Represents the display style of the gridlines in the output document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._embedFonts">
            <summary>
                Indicates whether to embed the fonts to the output pdf document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._enableRTL">
            <summary>
                Indicates whether the output pdf sheet should be rendered from right to left.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._exportBookmarks">
            <summary>
                Indicates whether to export the bookmarks to the output pdf document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._exportDocumentProperties">
            <summary>
                Indicates whether to export the document properties to the output pdf document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._exportQulaityImage">
            <summary>
                TRUE - Use TIFF Quality Image while converting Excel to PDF document,otherwise FALSE
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._layoutOptions">
            <summary>
                Represents the layout mode of the output sheet.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._needBlankSheet">
            <summary>
                Represents the Need Blank Option
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._convertBlankPage">
            <summary>
                Indicates whether to export the blank PDF page in the output pdf document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._pdfDocument">
            <summary>
                Represents the Pdf document object.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._throwWhenExcelFileIsEmpty">
            <summary>
                TRUE - Throw exception when excel file is empty,otherwise FALSE
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._customPaperSize">
            <summary>
            Represents the custom paper size
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._pdfConformanceLevel">
            <summary>
            Represents Conformance level of PDF
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings.m_warning">
            <summary>
            Represents the warning details.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.XlsIORendererSettings._enableFormFields">
            <summary>
            Enables the form fields conversion
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORendererSettings.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.XlsIORendererSettings" /> class.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.RenderBySheet">
            <summary>
            Gets or sets value to indicate whether the PDF rendering to be done sheet-by-sheet or not.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.XlsIORenderer.XlsIORendererSettings.Warning" -->
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.AutoDetectComplexScript">
             <summary>
             Gets or sets a value to enable complex script validation for the text present in the Excel document and render it in PDF conversion. 
             Default value is FALSE.  
             </summary>
             <example>
             <code>
             using Syncfusion.XlsIO;
             using System.Text;
             using Syncfusion.Pdf;
             using Syncfusion.ExcelToPdfConverter;
             class Example
             {
               static void Main()
               {
                 using(ExcelEngine engine = new ExcelEngine())
                 {
                   IApplication application = excelEngine.Excel;
                   IWorkbook workbook = application.Workbooks.Open("Fund_Calendar_KF-US_2018.xlsx");
                   IWorksheet worksheet = workbook.Worksheets[0];
            
                   ExcelToPdfConverterSettings setting = new ExcelToPdfConverterSettings();
                   setting.AutoDetectComplexScript = true;
            
                   ExcelToPdfConverter converter = new ExcelToPdfConverter(workbook);
                   PdfDocument doc = converter.Convert(setting);
                   doc.Save("Output.pdf");
                 }
               }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.TemplateDocument">
            <summary>
                Gets or sets the PDF template document.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.DisplayGridLines">
            <summary>
                Gets or sets the style of grid lines.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.EmbedFonts">
            <summary>
                True if the font is an embedded font. The default value is False.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.ExportBookmarks">
            <summary>
                Gets or sets a value indicating whether to export bookmarks. The default value is True.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.ExportDocumentProperties">
            <summary>
                Gets or sets a value indicating whether to export document properties. The default value is True.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.HeaderFooterOption">
            <summary>
                Gets the header and footer option.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.LayoutOptions">
             <summary>
                 Gets or sets the layout mode.
             </summary>
             <value>The layout mode.</value>
             <example>
                 The following code snippet illustrates how to set the lay out options.
                 <code>
             using Syncfusion.XlsIO;
             using Syncfusion.ExcelToPdfConverter;
             class Example
             {
               static void Main()
               {
                 using(ExcelEngine excelEngine = new ExcelEngine())
                 {
                   IApplication application = excelEngine.Excel;
                   IWorkbook workbook = application.Workbooks.Open("Sample.xlsx");
                   IWorksheet worksheet = workbook.Worksheets[0];
            
                   ExcelToPdfConverter converter = new ExcelToPdfConverter(workbook);
            
            	      ExcelToPdfConverterSettings converterSettings = new ExcelToPdfConverterSettings();
                   converterSettings.LayoutOptions = LayoutOptions.FitAllColumnsOnOnePage;
                   PdfDocument doc = converter.Convert(converterSettings);
                   doc.Save("Output.pdf");
                 }
               }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.EnableRTL">
            <summary>
                Gets or sets a value indicating whether [enable RTL].
            </summary>
            <value><c>true</c> if [enable RTL]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.ThrowWhenExcelFileIsEmpty">
            <summary>
                Gets or sets a value indicating whether to throw exception when empty Excel document is being converted to a PDF
                document.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.ExportQualityImage">
            <summary>
                Gets or sets a value indicating whether to export quality image. The default value is False.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.IsConvertBlankSheet">
            <summary>
                Gets or sets a value indicating whether to convert blank sheet. The default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.IsConvertBlankPage">
            <summary>
                Gets or sets a value indicating whether to convert blank PDF page. The default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.CustomPaperSize">
            <summary>
            Gets or sets a Custom paper size in inches. The default value is empty(i.e.,{Width = 0.0 Height = 0.0})
            </summary>
            <example>
             The following code snippet illustrates how to set the custom page size for the document.
            <code>
            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;
            
            //Open the file as Stream
            FileStream excelStream = new FileStream("Template.xlsx", FileMode.Open, FileAccess.Read);
            IWorkbook workbook = application.Workbooks.Open(excelStream);
            ExcelToPdfConverterSettings settings = new ExcelToPdfConverterSettings();
            //Setting custom paper size to the document
            settings.CustomPaperSize = new SizeF(10, 20);
            //Convert the workbook into PDF.
            PdfDocument document = converter.Convert(settings);
            
            //Saving the PDF as stream
            FileStream stream = new FileStream("Output.pdf", FileMode.Create, FileAccess.ReadWrite);
            document.Save(pdfStream);
            
            pdfStream.Dispose();
            excelStream.Dispose();
            document.Close();
            workbook.Close();
            excelEngine.Dispose();
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.PdfConformanceLevel">
            <summary>
            Gets or sets the Pdf document's Conformance-level.
            </summary>
            <value>The <see cref="T:Syncfusion.Pdf.PdfConformanceLevel"/> of the PDF document.</value>
            <example>
             The following code snippet illustrates how to set set the PdfConformanceLevel while converting  Excel workbook to PDF.
            <code>
            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Excel2013;
            IWorkbook workbook = application.Workbooks.Open(DEFAULTPATH + "sample.xlsx");
            
            //Open the Excel document to Convert
            ExcelToPdfConverter converter = new ExcelToPdfConverter(workbook);
            ExcelToPdfConverterSettings settings = new ExcelToPdfConverterSettings();
            
            // Set the conformance for PDF/A-1b conversion.
            settings.PdfConformanceLevel = PdfConformanceLevel.Pdf_A1B;
            
            //Initialize PDF document
            PdfDocument pdfDocument = converter.Convert(settings);
            
            //Save the PDF file 
            pdfDocument.Save("Output.pdf");
            pdfDocument.Close();
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.XlsIORendererSettings.EnableFormFields">
            <summary>
            Gets or sets value to indicate whether the PDF rendering to be done by form fields or not.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORendererSettings.GetExcelSheetSize(Syncfusion.XlsIO.ExcelPaperSize,Syncfusion.XlsIORenderer.XlsIORendererSettings)">
            <summary>
                Gets the size of the excel sheet.
            </summary>
            <param name="paperSize">Size of the paper.</param>
            <param name="settings">Excel to PDF converter settings.</param>>
            <returns>The Size of the output pdf page.</returns>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.HeaderFooter">
            <summary>
                The class has the functions and properties to manipulate the Header and footers of the output page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooter.headerFooterName">
            <summary>
                Indicates the name of the HeaderFooter.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooter.headerFooterSections">
            <summary>
                Indicates the HeaderFooter Section collections.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooter.templateSize">
            <summary>
                Indicates the template size of the HeaderFooter.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HeaderFooter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.HeaderFooter" /> class.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooter.TemplateSize">
            <summary>
                Gets or sets the size of the template.
            </summary>
            <value>The size of the template.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooter.HeaderFooterName">
            <summary>
                Gets or sets the name of the header footer.
            </summary>
            <value>The name of the header footer.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooter.HeaderFooterSections">
            <summary>
                Gets or sets the header footer sections.
            </summary>
            <value>The header footer sections.</value>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HeaderFooter.Clone">
            <summary>
            Clone corresponding headerFooter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.HeaderFooterSection">
            <summary>
                The class has the properties to hold the header and footer section settings.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterSection.headerFooterCollections">
            <summary>
                Represents the collection of the HF.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterSection.headerFooterHeight">
            <summary>
                Represents the height of the HF Section.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterSection.headerFooterSectionName">
            <summary>
                Represents the HF Section name.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterSection.headerFooterWidth">
            <summary>
                Represents the width of the HF section.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterSection.m_rtf">
            <summary>
                Represents the collection of Richtext string.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterSection.m_textAlignment">
            <summary>
                Text Alignment of Header Footer String.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterSection._isPageCount">
             <summary>
            True, if header/footer having page count, false otherwise.
             </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterSection.IsPageCount">
            <summary>
            Gets and Sets to indicate if header or footer having page count. 
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterSection.Width">
            <summary>
                Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterSection.Height">
            <summary>
                Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterSection.SectionName">
            <summary>
                Gets or sets the name of the section.
            </summary>
            <value>The name of the section.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterSection.HeaderFooterCollections">
            <summary>
                Gets or sets the header footer collections.
            </summary>
            <value>The header footer collections.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterSection.RTF">
            <summary>
                Gets or sets the RTF.
            </summary>
            <value>The RTF.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterSection.TextAlignment">
            <summary>
                Represents the Header Footer Section text alignmet
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HeaderFooterSection.Clone">
            <summary>
            Clone corresponding HeaderFooterSection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings">
            <summary>
                The class has the properties and functions for the HF color and font settings.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.font">
            <summary>
                Represents the font of the header and footer text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.fontColor">
            <summary>
                Represents the font color of the header and footer text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.hasUnderline">
            <summary>
                Represents the Underline for the header and footer text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.hasStrikeThrough">
            <summary>
                Represents the StrikeThrough for the header and footer text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.hasSuperscript">
            <summary>
            Represents the superscript for the header and footer text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.hasSubscript">
            <summary>
            Represents the subscript for the header and footer text.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings" /> class.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.Font">
            <summary>
                Gets or sets the font.
            </summary>
            <value>The font of the header and footer text.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.HasUnderline">
            <summary>
                Gets or sets a value indicating whether this instance has underline.
            </summary>
            <value>
                <c>true</c> if this instance has underline; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.HasStrikeThrough">
            <summary>
                Gets or sets a value indicating whether this instance has StrikeThrough.
            </summary>
            <value>
                <c>true</c> if this instance has StrikeThrough; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.HasSuperscript">
            <summary>
            Get or set a value indicating wheather this instance has superscript. 
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.HasSubscript">
            <summary>
            Get or set a value indicating wheather this instance has subscript.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.FontColor">
            <summary>
                Gets or sets the color of the font.
            </summary>
            <value>The color of the font.</value>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HeaderFooterFontColorSettings.Clone">
            <summary>
                Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
                A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfLayoutSetting.#ctor(Syncfusion.XlsIORenderer.ExcelToPdfConverter)">
            <summary>
                To assign the Excel to pdf converter
            </summary>
            <param name="excelToPdfConverter"></param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfLayoutSetting.FitAllColumnOnOnePage(Syncfusion.Pdf.PdfSection,Syncfusion.XlsIO.IPageSetup,System.Single,System.Single)">
            <summary>
                It reture the pdftemplate for FitAllcolumnOnOnePage.
            </summary>
            <param name="pdfSection"></param>
            <param name="sheetPageSetup"></param>
            <param name="usedRangeWidth"></param>
            <param name="usedRangeHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfLayoutSetting.FitAllRowsOnOnePage(Syncfusion.Pdf.PdfSection,Syncfusion.XlsIO.IPageSetup,System.Single,System.Single)">
            <summary>
                It's Return the Pdf Template for FitAllrowsOnOnePage.
            </summary>
            <param name="pdfSection"></param>
            <param name="sheetPageSetup"></param>
            <param name="usedRangeWidth"></param>
            <param name="usedRangeHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ExcelToPdfLayoutSetting.NoScaling(Syncfusion.Pdf.PdfSection,Syncfusion.XlsIO.IPageSetup,System.Single,System.Single)">
            <summary>
                NoScaling Layout option
            </summary>
            <param name="pdfSection"></param>
            <param name="sheetPageSetup"></param>
            <param name="usedRangeWidth"></param>
            <param name="usedRangeHeight"></param>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.HeaderFooterOption">
            <summary>
                Represents the options for Header and footer.
            </summary>
            <remarks>
                The options of header and footer are show header and footer.
            </remarks>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterOption._showFooter">
            <summary>
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HeaderFooterOption._showHeader">
            <summary>
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HeaderFooterOption.#ctor">
            <summary>
                The options for showing header and footer are set.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterOption.ShowHeader">
            <summary>
                Gets or sets a value indicating whether to show header. The default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.HeaderFooterOption.ShowFooter">
            <summary>
                Gets or sets a value indicating whether to show footer. The default value is true.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HelperMethods._arrayValue">
            <summary>
                Represents font value.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HelperMethods._colTitle">
            <summary>
                Represents column title value.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.HelperMethods._rowTitle">
            <summary>
                Represents row title value.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HelperMethods.PrintTitlesWidth">
            <summary>
                Get print title width for custom scaling.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HelperMethods.PrintTitlesHeight">
            <summary>
                Get print title Height for custom scaling.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HelperMethods.CalculateFontValue(Syncfusion.XlsIORenderer.XlsIORendererSettings)">
            <summary>
                Calculate the font style value.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.HelperMethods.GetFontStyleValue(Syncfusion.XlsIO.IWorksheet)">
            <summary>
                Get the font style value.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.PageSetupOption">
            <summary>
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.PageSetupOption.Hash">
            <summary>
            Defines a hash reference of print title columns
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.PageSetupOption._horizontalIds">
            <summary>
            Contains the list of horizontal breaks.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.PageSetupOption._verticalIds">
            <summary>
            Contains the list of vertical breaks.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.PageSetupOption._isInvalidTitleRowOrColumn">
            <summary>
            Indicates whether print title row or print title column is invalid.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.#ctor(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.IRange)">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.PageSetupOption" /> class.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="actualUsedRange">The actual used range</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.#ctor(Syncfusion.XlsIO.Implementation.WorksheetImpl,Syncfusion.XlsIO.IRange,Syncfusion.XlsIORenderer.ExcelToPdfConverter)">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.PageSetupOption" /> class.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="actualUsedRange">Used range.</param>
            <param name="excelToPdfConverter">The converter.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.#ctor">
            <summary>
                Empty constructor
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.FitPagesWide">
            
            Fit pages wide
             
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.FitPagesTall">
            
            Fit pages tall
             
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.HorizontalBreaks">
            <summary>
            Horizontal breaks.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.VerticalBreaks">
            <summary>
            Vertical breaks.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.PrintTitleFirstRow">
            <summary>
                Gets the print title first row.
            </summary>
            <value>The print title first row.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.PrintTitleFirstColumn">
            <summary>
                Gets the print title first column.
            </summary>
            <value>The print title first column.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.PrintTitleLastRow">
            <summary>
                Gets the print title last row.
            </summary>
            <value>The print title last row.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.PrintTitleLastColumn">
            <summary>
                Gets the print title last column.
            </summary>
            <value>The print title last column.</value>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.IsPrintTitleValid(System.String[])">
            <summary>
            Validates row or column name wih the provided cell names.
            </summary>
            <param name="cellNames">The cell names to find column or row of.</param>
            <returns>True if print titles are valid. Otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.HasPrintTitleRows">
            <summary>
                Gets a value indicating whether this instance has print title rows.
            </summary>
            <value>
                <c>true</c> if this instance has print title rows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.HasPrintTitleColumns">
            <summary>
                Gets a value indicating whether this instance has print title columns.
            </summary>
            <value>
                <c>true</c> if this instance has print title columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.HasPrintArea">
            <summary>
                Gets a value indicating whether this instance has print area.
            </summary>
            <value>
                <c>true</c> if this instance has print area; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.TitleRowHeight">
            <summary>
                Gets the height of the title row.
            </summary>
            <value>The height of the title row.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.TitleColumnWidth">
            <summary>
                Gets the width of the title column.
            </summary>
            <value>The width of the title column.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.RowIndexes">
            <summary>
                Gets the row indexes.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.ColumnIndexes">
            <summary>
                Gets the column indexes.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.PrintAreas">
            <summary>
                Gets the print areas.
            </summary>
            <value>The print areas.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.Worksheet">
            <summary>
                Gets the worksheet.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.PageSetupOption.PageSetup">
            <summary>
                Gets the page setup of the worksheet.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.ParseTitleRows">
            <summary>
                Parses the title rows.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.ParseTitleColumns">
            <summary>
                Parses the title columns.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.ParsePrintArea">
            <summary>
                Parses the print area.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.GetValidRange(Syncfusion.XlsIO.Parser.Biff_Records.Formula.IRangeGetter,Syncfusion.XlsIO.Implementation.WorkbookImpl,Syncfusion.XlsIO.Implementation.WorksheetImpl)">
            <summary>
                From the input rangeHolder it returns the valid range
            </summary>
            <param name="rangeHolder">input range holder object</param>
            <param name="workbook">input workbook</param>
            <param name="worksheet">range holder's worksheet</param>
            <returns>the required range</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.GetSplittedTitle(System.String)">
            <summary>
                Gets the splitted title.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.GetRowHeight(Syncfusion.Pdf.Graphics.PdfUnitConvertor,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
                Gets the height of the row.
            </summary>
            <param name="converter">The converter.</param>
            <param name="rowHeightGetter">The row height getter.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.GetColumnWidth(Syncfusion.Pdf.Graphics.PdfUnitConvertor,Syncfusion.XlsIO.Implementation.ItemSizeHelper)">
            <summary>
                Gets the width of the column.
            </summary>
            <param name="converter">The converter.</param>
            <param name="columnWidthGetter">The column width getter.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.UpdateRange(Syncfusion.XlsIO.IRange)">
            <summary>
                Updates the range.
            </summary>
            <param name="range">The input range.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.CheckRowBounds(System.Int32,System.Int32)">
            <summary>
                Checks the row bounds.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.CheckColumnBounds(System.Int32,System.Int32)">
            <summary>
                Checks the column bounds.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.GetBreakRanges(Syncfusion.XlsIORenderer.LayoutOptions,Syncfusion.XlsIO.IRange[])">
            <summary>
                Gets the break ranges.
            </summary>
            <param name="option">The option.</param>
            <param name="actualUsedRange">The actual used range.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.GetHorizontalBreaks(System.Collections.Generic.List{Syncfusion.XlsIO.IRange})">
            <summary>
                Gets the horizontal breaks.
            </summary>
            <param name="ranges">The ranges.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PageSetupOption.GetVerticalBreaks(System.Collections.Generic.List{Syncfusion.XlsIO.IRange},System.Int32)">
            <summary>
                Gets the vertical breaks.
            </summary>
            <param name="veriRange">The veri range.</param>
            <param name="finalColumn">The final column.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PDFRenderer.GetAlternatePdfFont(Syncfusion.Drawing.Font,System.String)">
            <summary>
            Get alternate pdf font from system and substitute font
            </summary>
            <param name="systemFont">system font.</param>
            <param name="text">rendering text.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.PDFRenderer.DrawTextTemplate(Syncfusion.Drawing.RectangleF,Syncfusion.Pdf.Graphics.PdfGraphics,System.Collections.Generic.List{Syncfusion.XlsIO.Implementation.LineInfoImpl},System.Single)">
            <summary>
                Draw the text template.
            </summary>
            <param name="bounds">The cell bounds.</param>
            <param name="graphics">Pdf graphics.</param>
            <param name="lineInfoCollection">The lineinfo collection.</param>
            <param name="y">shift y.</param>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ShapePath._rectBounds">
             <summary>
            
             </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.ShapePath._shapeGuide">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.#ctor(Syncfusion.Drawing.RectangleF,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCurvedConnectorPath">
            <summary>
            Get Curved Connector path
            </summary>
            <formula>
            formulaColl.Add("x2","*/ w adj1 100000");
            formulaColl.Add("x1","+/ l x2 2");
            formulaColl.Add("x3","+/ r x2 2");
            formulaColl.Add("y3","*/ h 3 4");
            </formula>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetGDICurvedConnectorPath">
            <summary>
            Get Curved Connector path
            </summary>
            <formula>
            formulaColl.Add("x2","*/ w adj1 100000");
            formulaColl.Add("x1","+/ l x2 2");
            formulaColl.Add("x3","+/ r x2 2");
            formulaColl.Add("y3","*/ h 3 4");
            </formula>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetBentConnectorPath">
            <summary>
            Get Bent Connector path
            </summary>
            <formula>
            formulaColl.Add("x1","*/ w adj1 100000");
            </formula>>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetGDIBentConnectorPath">
            <summary>
            Get Bent Connector path
            </summary>
            <formula>
            formulaColl.Add("x1","*/ w adj1 100000");
            </formula>>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetBentConnector2Path">
            <summary>
            Get bend connector 2 path.
            </summary>
            <returns>bend connector2 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetGDIBentConnector2Path">
            <summary>
            Get bend connector 2 path.
            </summary>
            <returns> Graphics path for bend connector2 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetBentConnector4Path">
            <summary>
            Get bend connector4 path.
            </summary>
            <returns>Pdf path for bentconnector4 points </returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetBentConnector5Path">
             <summary>
            Get bent connector5 path. 
             </summary>
             <returns>Pdf path for bent connector5 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetGDIBentConnector4Path">
             <summary>
            Get bent connector4 path. 
             </summary>
             <returns>Graphics path for bent connector4 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetGDIBentConnector5Path">
            <summary>
            Get bent connector 5 path.
            </summary>
            <returns>Graphics path for bent connector5 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetGDICurvedConnector2Path">
            <summary>
            Get curved connector 2 path
            </summary>
            <returns>Grpahics path for curved connector 2 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetGDICurvedConnector4Path">
            <summary>
            Get curved connector 4 path.
            </summary>
            <returns>Graphics path for curved connector4 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetGDICurvedConnector5Path">
            <summary>
            Get curved connector5 path.
            </summary>
            <returns>Graphics path for curved connector5 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCurvedConnector2Path">
            <summary>
            Get curved connector2 path.
            </summary>
            <returns>Pdf path for curved connector2 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCurvedConnector4Path">
            <summary>
            Get curved connector 4 path.
            </summary>
            <returns>Pdf path for curved connector4 points</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCurvedConnector5Path">
            <summary>
            Get curved connector 5 path.
            </summary>
            <returns>Pdfpath for curved connector 5 path</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRoundedRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetSnipSingleCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetSnipSameSideCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetSnipDiagonalCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetSnipAndRoundSingleCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRoundSingleCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRoundSameSideCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRoundDiagonalCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetTrianglePath">
            <summary>
            Get Triangle path
            </summary>
            <param name="shapeType"></param>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetParallelogramPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetTrapezoidPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRegularPentagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetHexagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetHeptagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetOctagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDodecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetPiePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetChordPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetTearDropPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetHalfFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetL_ShapePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDiagonalStripePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCrossPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetPlaquePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCanPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCubePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetBevelPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDonutPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetNoSymbolPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetBlockArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFoldedCornerPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetSmileyFacePath(System.Boolean)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetHeartPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLightningBoltPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetSunPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetMoonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCloudPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDoubleBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDoubleBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLeftBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRightBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLeftBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRightBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRightArrowPath">
            <summary>
            Gets the right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLeftArrowPath">
            <summary>
            Gets the left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDownArrowPath">
            <summary>
            Gets down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLeftRightArrowPath">
            <summary>
            Gets the left right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCurvedRightArrowPath">
            <summary>
            Gets the curved right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCurvedLeftArrowPath">
            <summary>
            Gets the curved left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCurvedUpArrowPath">
            <summary>
            Gets the curved up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCurvedDownArrowPath">
            <summary>
            Gets the curved down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetUpDownArrowPath">
            <summary>
            Gets up down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetQuadArrowPath">
            <summary>
            Gets the quad arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLeftRightUpArrowPath">
            <summary>
            Gets the left right up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetBentArrowPath">
            <summary>
            Gets the bent arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetUTrunArrowPath">
            <summary>
            Gets the U trun arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLeftUpArrowPath">
            <summary>
            Gets the left up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetBentUpArrowPath">
            <summary>
            Gets the bent up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetStripedRightArrowPath">
            <summary>
            Gets the striped right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetNotchedRightArrowPath">
            <summary>
            Gets the notched right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetPentagonPath">
            <summary>
            Gets the pentagon path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetChevronPath">
            <summary>
            Gets the chevron path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRightArrowCalloutPath">
            <summary>
            Gets the right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDownArrowCalloutPath">
            <summary>
            Gets down arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLeftArrowCalloutPath">
            <summary>
            Gets the left arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetUpArrowCalloutPath">
            <summary>
            Gets up arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLeftRightArrowCalloutPath">
            <summary>
            Gets the left right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetQuadArrowCalloutPath">
            <summary>
            Gets the quad arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCircularArrowPath">
            <summary>
            Gets the circular arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetMathPlusPath">
            <summary>
            Gets the math plus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetMathMinusPath">
            <summary>
            Gets the math minus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetMathMultiplyPath">
            <summary>
            Gets the math multiply path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetMathDivisionPath">
            <summary>
            Gets the math division path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetMathEqualPath">
            <summary>
            Gets the math equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetMathNotEqualPath">
            <summary>
            Gets the math not equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartAlternateProcessPath">
            <summary>
            Gets the flow chart alternate process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartPredefinedProcessPath">
            <summary>
            Gets the flow chart predefined process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartInternalStoragePath">
            <summary>
            Gets the flow chart internal storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartDocumentPath">
            <summary>
            Gets the flow chart document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartMultiDocumentPath">
            <summary>
            Gets the flow chart multi document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartTerminatorPath">
            <summary>
            Gets the flow chart terminator path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartPreparationPath">
            <summary>
            Gets the flow chart preparation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartManualInputPath">
            <summary>
            Gets the flow chart manual input path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartManualOperationPath">
            <summary>
            Gets the flow chart manual operation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartConnectorPath">
            <summary>
            Gets the flow chart connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartOffPageConnectorPath">
            <summary>
            Gets the flow chart off page connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartCardPath">
            <summary>
            Gets the flow chart card path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartPunchedTapePath">
            <summary>
            Gets the flow chart punched tape path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartSummingJunctionPath">
            <summary>
            Gets the flow chart summing junction path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartOrPath">
            <summary>
            Gets the flow chart or path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartCollatePath">
            <summary>
            Gets the flow chart collate path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartSortPath">
            <summary>
            Gets the flow chart sort path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartExtractPath">
            <summary>
            Gets the flow chart extract path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartMergePath">
            <summary>
            Gets the flow chart merge path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartOnlineStoragePath">
            <summary>
            Gets the flow chart online storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartDelayPath">
            <summary>
            Gets the flow chart delay path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartSequentialAccessStoragePath">
            <summary>
            Gets the flow chart sequential access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartMagneticDiskPath">
            <summary>
            Gets the flow chart magnetic disk path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartDirectAccessStoragePath">
            <summary>
            Gets the flow chart direct access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFlowChartDisplayPath">
            <summary>
            Gets the flow chart display path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRectangularCalloutPath">
            <summary>
            Gets the rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetRoundedRectangularCalloutPath">
            <summary>
            Gets the rounded rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetOvalCalloutPath">
            <summary>
            Gets the oval callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetCloudCalloutPath">
            <summary>
            Gets the cloud callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout1Path">
            <summary>
            Gets the line callout1 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout2Path">
            <summary>
            Gets the line callout2 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout3Path">
            <summary>
            Gets the line callout3 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout1AccentBarPath">
            <summary>
            Gets the line callout1 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout2AccentBarPath">
            <summary>
            Gets the line callout2 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout3AccentBarPath">
            <summary>
            Gets the line callout3 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout1NoBorderPath">
            <summary>
            Gets the line callout1 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout2NoBorderPath">
            <summary>
            Gets the line callout2 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout3NoBorderPath">
            <summary>
            Gets the line callout3 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout1BorderAndAccentBarPath">
            <summary>
            Gets the line callout1 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout2BorderAndAccentBarPath">
            <summary>
            Gets the line callout2 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetLineCallout3BorderAndAccentBarPath">
            <summary>
            Gets the line callout3 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDegreeValue(System.Single)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetXYPosition(System.Single,System.Single,System.Single)">
             <summary>
            
             </summary>
             <param name="xDifference"></param>
             <param name="yDifference"></param>
             <param name="positionRatio"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetPathAdjustValue(Syncfusion.XlsIO.AutoShapeType)">
            <summary>
            Get Path adjust value
            </summary>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.ParseShapeFormula(Syncfusion.XlsIO.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="adjValue"></param>
             <param name="formulaColl"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetFormulaValues(Syncfusion.XlsIO.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
             <summary>
            
             </summary>
             <param name="formulaColl"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetOperandValues(Syncfusion.XlsIO.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.Single}@,System.String[],System.Boolean)">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="adjValues"></param>
             <param name="formulaValues"></param>
             <param name="splitFormula"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetPresetOperandValue(System.String)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetResultValue(System.String,System.Single[])">
             <summary>
            
             </summary>
             <param name="formula"></param>
             <param name="operandValues"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetShapeFormula(Syncfusion.XlsIO.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.ShapePath.GetDefaultPathAdjValues(Syncfusion.XlsIO.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.SplitText">
            <summary>
                Represents the splitting of text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._adjacentColumn">
            <summary>
                The column.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._brush">
            <summary>
                Pdf brush.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._format">
            <summary>
                Pdf string format.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._originRect">
            <summary>
                Text Bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._pageTemplate">
            <summary>
                The pdf template.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._pdfFont">
            <summary>
                Pdf font.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._row">
            <summary>
                The row.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._sheet">
            <summary>
                The sheet.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._text">
            <summary>
                Splitted text.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._richTextFont">
            <summary>
            RichText font collection
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.SplitText._richText">
            <summary>
            RichText string collection
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.OriginRect">
            <summary>
                Text Bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.Sheet">
            <summary>
                Splitted text.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.Text">
            <summary>
                Splitted text.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.TextFont">
            <summary>
                Pdf font.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.Brush">
            <summary>
                Pdf brush.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.Format">
            <summary>
                Pdf string format.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.Row">
            <summary>
                The row.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.AdjacentColumn">
            <summary>
                The column.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.PageTemplate">
            <summary>
                The pdf template.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.RichTextFont">
            <summary>
            RichText font collection
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SplitText.RichText">
            <summary>
            RichText string collection
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.TableStyleRenderer">
            <summary>
                Class used for Table style rendering in the pdf page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._borderColorList">
            <summary>
                Collection of List object ranges and their respective borders and bordercolors.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._borderList">
            <summary>
                Collection of built in styles bordercolors.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._colorFonts">
            <summary>
                Collection of font colors of listobjects.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._darkStyles">
            <summary>
                Collection of Dark built in styles for the Last and first column.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._doubleBorderList">
            <summary>
                Collection of double border built in styles.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._fontColorCollections">
            <summary>
                Collection of list object ranges and their font colors.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._lightStyleBorder">
            <summary>
                Collection of Light buit in Styles for the Row and column stripes.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._listObjects">
            <summary>
                Sheet List objects.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._mediumStyleBorder">
            <summary>
                Collection of Medium styles for the column stripes.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._mediumStyleWithBorder">
            <summary>
                Collection of Medium built in Styles for the Last and first column that has border settings.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._mediumStyleWithoutBorder">
            <summary>
                Collection of Medium built in Styles for the Last and first column that has no border settings.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._topSolidList">
            <summary>
                Collection of built in styles that has top border as solid.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._builtInStyle">
            <summary>
                List object built in style.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._columnStripes">
            <summary>
                Indicates whether the Column Stripes are shown.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._firstColumn">
            <summary>
                Indicates whether First Column is shown.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._headerColor">
            <summary>
                List Object Header color
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._headerRow">
            <summary>
                Indicates whether Header Row is shown.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._lastColumn">
            <summary>
                Indicates whether Last Column is shown.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer._rowStripes">
            <summary>
                Indicates whether the Row stripes are shown.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.TableStyleRenderer" /> class.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.#ctor(Syncfusion.XlsIO.IListObjects)">
            <summary>
                Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.TableStyleRenderer" /> class.
            </summary>
            <param name="sheetListObjects">The sheet list objects.</param>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle">
            <summary>
                Enumeration of the Border Styles.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle.None">
            <summary>
                Represents that no ExcelBorderIndex is set.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle.Top">
            <summary>
                Represents that Top ExcelBorderIndex is set.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle.Bottom">
            <summary>
                Represents that Bottom ExcelBorderIndex is set.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle.Left">
            <summary>
                Represents that Left ExcelBorderIndex is set.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle.Right">
            <summary>
                Represents that Right ExcelBorderIndex is set.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle.TopBottom">
            <summary>
                Represents that both Top and Bottom ExcelBorderIndex is set.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle.LeftRight">
            <summary>
                Represents that both Left and Right ExcelBorderIndex is set.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle.All">
            <summary>
                Represents that all ExcelBorderIndex is set.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle">
            <summary>
                Enumeration of the Solid style in Borders
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle.None">
            <summary>
                Represents the No Solidstyle.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle.Top">
            <summary>
                Represents the solid style for the Top ExcelBorderIndex.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle.Bottom">
            <summary>
                Represents the solid style for the Bottom ExcelBorderIndex.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle.Right">
            <summary>
                Represents the solid style for the Right ExcelBorderIndex.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle.Left">
            <summary>
                Represents the solid style for the Left ExcelBorderIndex.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle.TopBottom">
            <summary>
                Represents the solid style for both Top and Bottom ExcelBorderIndex.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle.LeftRight">
            <summary>
                Represents the solid style for both Right and Left ExcelBorderIndex.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyStyles(Syncfusion.XlsIO.IWorksheet,System.Collections.Generic.Dictionary{Syncfusion.XlsIO.IRange,Syncfusion.Drawing.Color}@)">
            <summary>
             Applies the styles.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="fontColorCollection">The font color collection.</param>
            <returns>Range collection with the borders and their respective colors</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.InitializeLightStyle">
            <summary>
                Initializes the light style.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.InitializeBorders(System.Boolean)">
            <summary>
                Initializes the borders.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.InitializeColorFonts">
            <summary>
                Initializes the color fonts.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.InitializeDoubleBorders(System.Boolean)">
            <summary>
                Initializes the double borders.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.InitializeTopSolid(System.Boolean)">
            <summary>
                Initializes the top solid.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.InitializeColumnSettings">
            <summary>
                Initializes the column settings.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.InitializeMediumStyle">
            <summary>
                Initializes the medium style.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.DrawLocationAndCustomTableStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.Implementation.TableStyleElement,Syncfusion.XlsIO.IRange,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Apply related table tyle element and range to set the  border, font and back ground color and format.
            </summary>
            <param name="sheet">Current work sheet from work book</param>
            <param name="tableStyleElement">Table style element object</param>
            <param name="objectLocation">Related table range</param>
            <param name="showTotals">True, If table style element total row is applied, Other wise false.</param>
            <param name="firstColumnStripeSize">FirstColumnStripeStyle stripe size</param>
            <param name="secondColumnStripeSize">SecondColumnStripeStyle stripe size</param>
            <param name="firstRowStripeSize">FirstRowStripeStyle stripe size</param>
            <param name="secondRowStripeSize">SecondRowStripeStyle stripe size</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.WholeTableStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.Implementation.TableStyleElement)">
            <summary>
            custom table style element in whole table element range to get and set the border, back ground and font color, format.
            </summary>
            <param name="sheet">current sheet in work book</param>
            <param name="range">whole table element range</param>
            <param name="tableStyleElement">custom table style element</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.TableStyleElementStyle(Syncfusion.XlsIO.IWorksheet,System.String,Syncfusion.XlsIO.Implementation.TableStyleElement)">
            <summary>
            Custom table style elements range get and set the border, back ground and font color, format.
            </summary>
            <param name="sheet">current sheet in work book</param>
            <param name="range">whole table element range</param>
            <param name="tableStyleElement">custom table style element</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.FirstColumnStripeStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.Implementation.TableStyleElement,System.Boolean,System.Int32)">
            <summary>
            Custom table style in first column stripe element range to set the border, back ground and font color and format.
            </summary>
            <param name="sheet"></param>
            <param name="headerRange"></param>
            <param name="tableStyleElement"></param>
            <param name="showTotals"></param>
            <param name="secondColumnStripeSize">SecondColumnStripeStyle stripe size</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.SecondColumnStripeStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.Implementation.TableStyleElement,System.Boolean,System.Int32)">
            <summary>
            Custom table style in second column stripe element range to set the border, back ground and font color and format.
            </summary>
            <param name="sheet"></param>
            <param name="headerRange"></param>
            <param name="tableStyleElement"></param>
            <param name="showTotals"></param>
            <param name="firstColumnStripeSize">FirstColumnStripeStyle stripe size</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.FirstRowStripeStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.Implementation.TableStyleElement,System.Boolean,System.Int32)">
            <summary>
            Custom table style in first row stripe element range to set the border, back ground and font color and format.
            </summary>
            <param name="sheet"></param>
            <param name="headerRange"></param>
            <param name="tableStyleElement"></param>
            <param name="showTotals"></param>
            <param name="secondRowStripeSize">SecondRowStripeStyle strip size</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.SecondRowStripeStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.Implementation.TableStyleElement,System.Boolean,System.Int32)">
            <summary>
            Custom table style in second row stripe element range to set the border, back ground and font color and format.
            </summary>
            <param name="sheet"></param>
            <param name="headerRange"></param>
            <param name="tableStyleElement"></param>
            <param name="showTotals"></param>
            <param name="firstRowStripeSize">firstRowStripeStyle strip size</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.DrawLocationAndStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.TableBuiltInStyles,Syncfusion.XlsIO.IRange,System.Boolean)">
            <summary>
                Draws the table style.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="listObjectBuiltInStyle">The built in style.</param>
            <param name="objectLocation">The list object location.</param>
            <param name="showTotals">if set to <c>true</c> [show totals].</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.TotalStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle,Syncfusion.Drawing.Color,System.Boolean,Syncfusion.Drawing.Color,Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle,System.Boolean,Syncfusion.Drawing.Color,System.Boolean)">
            <summary>
                Renders the style to the total part of the table.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="objectLocation">The listobject location.</param>
            <param name="borderStyle">The border style.</param>
            <param name="borderColor">Color of the border.</param>
            <param name="entireRow">if set to <c>true</c> [entire row].</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="solidStyle">The solid style.</param>
            <param name="showTotals">if set to <c>true</c> [show totals].</param>
            <param name="fontColor">Color of the font.</param>
            <param name="boldFont">if set to <c>true</c> [bold font].</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyFontColor(Syncfusion.Drawing.Color,Syncfusion.XlsIO.IRange)">
            <summary>
                Apply text color.
            </summary>
            <param name="fontColor">Text color.</param>
            <param name="range">The Range.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyBorderFormatAndLineStyle(Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.Implementation.TableStyleElement)">
            <summary>
            Apply borders and line style in table.
            </summary>
            <param name="range">Apply border color and line style range</param>
            <param name="tableStyleElement">custom table style element</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyWholeTableStyleBorder(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.Implementation.TableStyleElement)">
            <summary>
            Apply Whole table style element borders.
            </summary>
            <param name="sheet">Current sheet in work book</param>
            <param name="range">Apply Border color and line style range</param>
            <param name="tableStyleElement">sustom table style element</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyFontFormatAndColor(Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.Implementation.TableStyleElement)">
            <summary>
            Apply Font Color and format in table.
            </summary>
            <param name="range">Font Range</param>
            <param name="tableStyleElement">Custom table style element</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyBGColorAndFormat(Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.Implementation.TableStyleElement)">
            <summary>
            Apply back ground color and format.
            </summary>
            <param name="range">Apply back ground color and format range</param>
            <param name="tableStyleElement">custom table style element</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.HeaderStyle(Syncfusion.XlsIO.IWorksheet,System.String,Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle,Syncfusion.Drawing.Color,System.Boolean,Syncfusion.Drawing.Color,Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle,Syncfusion.Drawing.Color)">
            <summary>
                Renders the style to the header part of the table.
            </summary>
            <param name="sheet">The Worksheet.</param>
            <param name="headerRange">The header range.</param>
            <param name="headerBorderStyle">The header border style.</param>
            <param name="borderColor">Color of the border.</param>
            <param name="entireRow">if set to <c>true</c> [entire row].</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="solidLineStyle">The solid line style.</param>
            <param name="fontColor">Color of the font.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ContentStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle,Syncfusion.Drawing.Color,System.Boolean,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle,Syncfusion.Drawing.Color,System.Boolean)">
            <summary>
                Renders the style to the content part of the table.
            </summary>
            <param name="sheet">The Worksheet.</param>
            <param name="headerRange">The header range.</param>
            <param name="contentBorderStyle">The content border style.</param>
            <param name="borderColor">Color of the border.</param>
            <param name="entireRow">if set to <c>true</c> [entire row].</param>
            <param name="backgroundFirstColor">First color of the Background.</param>
            <param name="backgroundSecondColor">Second color of the Background.</param>
            <param name="solidLineStyle">The solid line style.</param>
            <param name="fontColor">Color of the font.</param>
            <param name="showTotals">if set to <c>true</c> [show totals].</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyBGColor(Syncfusion.Drawing.Color,Syncfusion.XlsIO.IRange)">
            <summary>
                Applies the background color.
            </summary>
            <param name="backgroundColor">Color of the background.</param>
            <param name="entireRange">Cells.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyBorder(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle,Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle,Syncfusion.Drawing.Color,System.Boolean)">
            <summary>
                Applies the border.
            </summary>
            <param name="sheet">The Worksheet.</param>
            <param name="borderRange">The border range.</param>
            <param name="solidStyle">The solid style.</param>
            <param name="borderStyle">The border style.</param>
            <param name="borderColor">Color of the border.</param>
            <param name="entireRow">if set to <c>true</c> [entire row].</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplySingleBorder(Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.ExcelBordersIndex,Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle,Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle,Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle,Syncfusion.Drawing.Color)">
            <summary>
                Apply border to cell.
            </summary>
            <param name="borderRange">The cell.</param>
            <param name="borderIndex">Excel border index.</param>
            <param name="solidStyle">Solid style.</param>
            <param name="firstStyle">Solid style first.</param>
            <param name="secondStyle">Solid style second.</param>
            <param name="borderColor">Border color.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyFirstLastColumnBorder(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle,Syncfusion.XlsIORenderer.TableStyleRenderer.BorderStyle,Syncfusion.Drawing.Color,System.Boolean)">
            <summary>
                Applies the border to the first and last column of the table.
            </summary>
            <param name="sheet">The Worksheet.</param>
            <param name="borderRange">The border range.</param>
            <param name="solidStyle">The solid style.</param>
            <param name="borderStyle">The border style.</param>
            <param name="borderColor">Color of the border.</param>
            <param name="entireRow">if set to <c>true</c> [entire row].</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyFirstLastColumnTopBorder(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.XlsIORenderer.TableStyleRenderer.SolidStyle,Syncfusion.Drawing.Color)">
            <summary>
                Applies the cell top border.
            </summary>
            <param name="sheet">The Worksheet.</param>
            <param name="borderRange">The border range.</param>
            <param name="solidStyle">The solid style.</param>
            <param name="borderColor">Color of the border.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.ApplyFirstLastColumnStyle(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIO.IRange,Syncfusion.Drawing.Color,Syncfusion.Drawing.Color,System.Boolean)">
            <summary>
                Applies the first and last column style.
            </summary>
            <param name="sheet">The Worksheet.</param>
            <param name="contentRange">The content range.</param>
            <param name="fontColor">Color of the font.</param>
            <param name="backgroundFirstColor">First color of the bg.</param>
            <param name="showTotals">if set to <c>true</c> [show totals].</param>
            <returns>IRange Object</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.TableStyleRenderer.CheckStyle">
            <summary>
                Checks the style.
            </summary>
            <returns>
                Returns true if the built in style is within the this.lastColumn and first column list else false will be returned.
            </returns>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.GridLinesDisplayStyle">
            <summary>
            Represents the display style of the grid lines.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.GridLinesDisplayStyle.Auto">
            <summary>
            Grid line is not rendered in the output page. The default value is Invisible.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.GridLinesDisplayStyle.Visible">
            <summary>
            Grid line is rendered in the output page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.GridLinesDisplayStyle.Invisible">
            <summary>
            Grid line is not rendered in the output page.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.LayoutOptions">
            <summary>
            Represents the layout of the output document.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.LayoutOptions.FitSheetOnOnePage">
            <summary>
            Renders the sheet in one page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.LayoutOptions.NoScaling">
            <summary>
            Print sheets at their actual size.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.LayoutOptions.FitAllColumnsOnOnePage">
            <summary>
            Renders all columns in one page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.LayoutOptions.FitAllRowsOnOnePage">
            <summary>
            Renders all rows in one page.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.LayoutOptions.CustomScaling">
            <summary>
            Print sheets at specified scaling option.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIORenderer.LayoutOptions.Automatic">
            <summary>
            Print sheets at their actual size. The default value is NoScaling.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.CurrentProgressChangedEventHandler">
            <summary>
            Represents the method that handles the CurrentProgressChanged Event.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.SheetBeforeDrawnEventHandler">
            <summary>
            Represents the method that handles the SheetBeforDrawn Event.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.SheetAfterDrawnEventHandler">
            <summary>
            Represents the method that handles the sheetAfterDrawn Event.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.CurrentProgressChangedEventArgs">
            <summary>
            Event occurs when current progress changed.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.CurrentProgressChangedEventArgs.CurrentProgressChanged">
            <summary>
            Gets the current progress changed.
            </summary>
            <value>The current progress changed.</value>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.CurrentProgressChangedEventArgs.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.CurrentProgressChangedEventArgs"/> class.
            </summary>
            <param name="noOfSheets">The no of sheets.</param>
            <param name="activeSheetIndex">Index of the active sheet.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.SheetBeforeDrawnEventArgs">
            <summary>
            Event occurs before sheet is drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SheetBeforeDrawnEventArgs.CurrentSheet">
            <summary>
            Gets or sets the current sheet.
            </summary>
            <value>The current sheet.</value>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SheetBeforeDrawnEventArgs.Skip">
            <summary>
            Gets or sets a value indicating whether to skip <see cref="T:Syncfusion.XlsIORenderer.SheetBeforeDrawnEventArgs"/>. The default value is false.
            </summary>
            <value><c>true</c> if skip; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.SheetBeforeDrawnEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.SheetBeforeDrawnEventArgs"/> class.
            </summary>
            <param name="currentSheet">The current sheet.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Syncfusion.XlsIORenderer.SheetAfterDrawnEventArgs">
            <summary>
            Event occurs after sheet is drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.XlsIORenderer.SheetAfterDrawnEventArgs.AfterSheet">
            <summary>
            Gets the current sheet.
            </summary>
            <value>The current sheet.</value>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.SheetAfterDrawnEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XlsIORenderer.SheetAfterDrawnEventArgs"/> class.
            </summary>
            <param name="afterSheet">The after sheet.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.#ctor">
            <summary>
            Default constructor for XlsIO Renderer class.
            </summary>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToImage(Syncfusion.XlsIO.IWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Converts the specified range into image. Default image format is PNG.
            </summary>
            <param name="worksheet">Worksheet from which image will be created.</param>
            <param name="firstRow">First row index. One-based.</param>
            <param name="firstColumn">First column index. One-based.</param>
            <param name="lastRow">Last row index. One-based.</param>
            <param name="lastColumn">Last column index. One-based.</param>
            <param name="outputStream">Stream to hold the converted image data.</param>
            <remarks> Subscript/Superscript,Shrink to fit,Shapes (except TextBox shape and Image)
            and Complex conditional formatting features are not supported in Worksheet 
            to image conversion. Gradient fill is partially supported</remarks>
            <example>
            <code>
            using (ExcelEngine excelEngine = new ExcelEngine())
            {
            	IApplication application = excelEngine.Excel;
                application.DefaultVersion = ExcelVersion.Excel2013;
                FileStream excelStream = new FileStream("Sample.xlsx", FileMode.Open, FileAccess.Read);
                IWorkbook workbook = application.Workbooks.Open(excelStream);
                IWorksheet sheet = workbook.Worksheets[0];
            
            	//Initialize XlsIORenderer
                XlsIORenderer renderer = new XlsIORenderer();
            
            	Stream image = new FileStream("Sample.png", FileMode.Create, FileAccess.ReadWrite);
            
            	//Converts the Range(R1C1 to R10C20) in worksheet to image
                renderer.ConvertToImage(sheet, 1, 1, 10, 20, image);
            }
            </code>
            </example>
            <remarks> 
            This method is supported in NetStandard supported platforms only.
            </remarks>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToImage(Syncfusion.XlsIO.IRange,System.IO.Stream)">
            <summary>
            Converts the specified range into image with default image settings.
            </summary>
            <param name="range">The range which is to be converted to image.</param>
            <param name="outputStream">Stream to hold the converted image data.</param>
            <remarks> Subscript/Superscript,Shrink to fit,Shapes (except TextBox shape and Image)
            and Complex conditional formatting features are not supported in Worksheet 
            to image conversion. Gradient fill is partially supported</remarks>
            <example>
            <code>
            using (ExcelEngine excelEngine = new ExcelEngine())
            {
            	IApplication application = excelEngine.Excel;
                application.DefaultVersion = ExcelVersion.Excel2013;
                FileStream excelStream = new FileStream("Sample.xlsx", FileMode.Open, FileAccess.Read);
                IWorkbook workbook = application.Workbooks.Open(excelStream);
                IWorksheet sheet = workbook.Worksheets[0];
            
            	//Initialize XlsIORenderer
                XlsIORenderer renderer = new XlsIORenderer();
            
            	Stream image = new FileStream("Sample.png", FileMode.Create, FileAccess.ReadWrite);
            
            	//Converts the Range used in worksheet to image
                renderer.ConvertToImage(sheet.UsedRange, image);
            }
            </code>
            </example>
            <remarks> 
            This method is supported in NetStandard supported platforms only.
            </remarks>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToImage(Syncfusion.XlsIO.IRange,Syncfusion.XlsIO.ExportImageOptions,System.IO.Stream)">
            <summary>
            Converts the specified range into image with the image settings given.
            </summary>
            <param name="range">The range which is to be converted to image.</param>
            <param name="imageOptions">object that defines Image quality and image format to be used for conversion.</param>
            <param name="outputStream">Stream to hold the converted image data.</param>
            <remarks> Subscript/Superscript,Shrink to fit,Shapes (except TextBox shape and Image)
            and Complex conditional formatting features are not supported in Worksheet 
            to image conversion. Gradient fill is partially supported</remarks>
            <example>
            <code>
            using (ExcelEngine excelEngine = new ExcelEngine())
            {
            	IApplication application = excelEngine.Excel;
                application.DefaultVersion = ExcelVersion.Excel2013;
                FileStream excelStream = new FileStream("Sample.xlsx", FileMode.Open, FileAccess.Read);
                IWorkbook workbook = application.Workbooks.Open(excelStream);
                IWorksheet sheet = workbook.Worksheets[0];
            
            	//Initialize XlsIORenderer
                XlsIORenderer renderer = new XlsIORenderer();
            
            	Stream image = new FileStream("Sample.png", FileMode.Create, FileAccess.ReadWrite);
            
            	//Converts the Range used in worksheet to image
                ExportImageOptions imageOptions = new ExportImageOptions();
                imageOptions.ImageFormat = ExportImageFormat.Jpeg;
                renderer.ConvertToImage(sheet.UsedRange, imageOptions, image);
            }
            </code>
            </example>
            <remarks> 
            This method is supported in NetStandard supported platforms only.
            </remarks>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToImage(Syncfusion.XlsIO.IWorksheet,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.XlsIO.ExportImageOptions,System.IO.Stream)">
            <summary>
            Converts the specified range into image with the image options given. Default image format is PNG.
            </summary>
            <param name="worksheet">Worksheet from which image will be created.</param>
            <param name="firstRow">First row index. One-based.</param>
            <param name="firstColumn">First column index. One-based.</param>
            <param name="lastRow">Last row index. One-based.</param>
            <param name="lastColumn">Last column index. One-based.</param>
            <param name="imageOptions">object that defines Image quality and image format to be used for conversion.</param>
            <param name="outputStream">Stream to hold the converted image data.</param>
            <remarks> Subscript/Superscript,Shrink to fit,Shapes (except TextBox shape and Image),
            Complex conditional formatting features are not supported in Worksheet 
            to image conversion. Gradient fill is partially supported</remarks>
            <example>
            <code>
            using (ExcelEngine excelEngine = new ExcelEngine())
            {
            	IApplication application = excelEngine.Excel;
                application.DefaultVersion = ExcelVersion.Excel2013;
                FileStream excelStream = new FileStream("Sample.xlsx", FileMode.Open, FileAccess.Read);
                IWorkbook workbook = application.Workbooks.Open(excelStream);
                IWorksheet sheet = workbook.Worksheets[0];
            
            	//Initialize XlsIORenderer
                XlsIORenderer renderer = new XlsIORenderer();
            
            	Stream image = new FileStream("Sample.png", FileMode.Create, FileAccess.ReadWrite);
            
            	//Converts the Range(R1C1 to R10C20) in worksheet to image
                ExportImageOptions imageOptions = new ExportImageOptions();
                imageOptions.ImageFormat = ExportImageFormat.Jpeg;
                renderer.ConvertToImage(sheet, 1, 1, 10, 20, imageOptions, image);
            }
            </code>
            </example>
            <remarks> 
            This method is supported in NetStandard supported platforms only.
            </remarks>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToPDF(Syncfusion.XlsIO.IWorkbook)">
            <summary>
            Converts the workbook to PDF document.
            </summary>
            <returns>Returns the PDFDocument Object</returns>
            <example>
            The following code snippet illustrates how to convert the workbook to PDF.
            <code>
            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;
            
            //Open the file as Stream
            FileStream excelStream = new FileStream("Template.xlsx", FileMode.Open, FileAccess.Read);
            IWorkbook workbook = application.Workbooks.Open(excelStream);
            
            // Creates an instance of XlsIORenderer for Excel to PDF conversion
            XlsIORenderer renderer = new XlsIORenderer();
            
            //Convert the workbook into PDF.
            PdfDocument document = renderer.ConvertToPDF(workbook);
            
            //Saving the PDF as stream
            FileStream stream = new FileStream("Output.pdf", FileMode.Create, FileAccess.ReadWrite);
            document.Save(pdfStream);
            
            pdfStream.Dispose();
            excelStream.Dispose();
            document.Close();
            renderer.Dispose();
            workbook.Close();
            excelEngine.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToPDF(Syncfusion.XlsIO.IWorkbook,Syncfusion.XlsIORenderer.XlsIORendererSettings)">
            <summary>
            Converts the workbook to PDF document with the specified renderer settings.
            </summary>
            <returns>Returns the PDFDocument Object</returns>
            <example>
            The following code snippet illustrates how to convert the workbook to PDF with the specified renderer settings.
            <code>
            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;
            
            //Open the file as Stream
            FileStream excelStream = new FileStream("Template.xlsx", FileMode.Open, FileAccess.Read);
            IWorkbook workbook = application.Workbooks.Open(excelStream);
            
            // Creates an instance of XlsIORenderer for Excel to PDF conversion
            XlsIORenderer renderer = new XlsIORenderer();
            
            //Creates an instance of XlsIORenderer settings.
            XlsIORendererSettings settings = new XlsIORendererSettings();
            
            //Set layout for the output Pdf page.
            settings.LayoutOptions = LayoutOptions.FitAllColumnsOnOnePage;
            
            //Convert the workbook into PDF.
            PdfDocument document = renderer.ConvertToPDF(workbook, settings);
            
            //Saving the PDF as stream
            FileStream stream = new FileStream("Output.pdf", FileMode.Create, FileAccess.ReadWrite);
            document.Save(pdfStream);
            
            pdfStream.Dispose();
            excelStream.Dispose();
            document.Close();
            renderer.Dispose();
            workbook.Close();
            excelEngine.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToPDF(Syncfusion.XlsIO.IWorksheet)">
            <summary>
            Converts the worksheet to PDF document.
            </summary>
            <returns>Returns the PDFDocument Object</returns>
            <example>
            The following code snippet illustrates how to convert the worksheet to PDF.
            <code>
            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;
            
            //Open the file as Stream
            FileStream excelStream = new FileStream("Template.xlsx", FileMode.Open, FileAccess.Read);
            IWorkbook workbook = application.Workbooks.Open(excelStream);
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Creates an instance of XlsIORenderer for Excel to PDF conversion
            XlsIORenderer renderer = new XlsIORenderer();
            
            //Convert the worksheet into PDF.
            PdfDocument document = renderer.ConvertToPDF(worksheet);
            
            //Saving the PDF as stream
            FileStream pdfStream = new FileStream("Output.pdf", FileMode.Create, FileAccess.ReadWrite);
            document.Save(pdfStream);
            
            pdfStream.Dispose();
            excelStream.Dispose();
            document.Close();
            renderer.Dispose();
            workbook.Close();
            excelEngine.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToPDF(Syncfusion.XlsIO.IWorksheet,Syncfusion.XlsIORenderer.XlsIORendererSettings)">
            <summary>
            Converts the worksheet to PDF document with the specified renderer settings.
            </summary>
            <returns>Returns the PDFDocument Object</returns>
            <example>
            The following code snippet illustrates how to convert the worksheet to PDF with the specified renderer settings.
            <code>
            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;
            
            //Open the file as Stream
            FileStream excelStream = new FileStream("Template.xlsx", FileMode.Open, FileAccess.Read);
            IWorkbook workbook = application.Workbooks.Open(excelStream);
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Creates an instance of XlsIORenderer for Excel to PDF conversion
            XlsIORenderer renderer = new XlsIORenderer();
            
            //Creates an instance of XlsIORenderer settings.
            XlsIORendererSettings settings = new XlsIORendererSettings();
            
            //Set layout for the output Pdf page.
            settings.LayoutOptions = LayoutOptions.FitAllColumnsOnOnePage;
            
            //Convert the worksheet into PDF.
            PdfDocument document = renderer.ConvertToPDF(worksheet, settings);
            
            //Saving the PDF as stream
            FileStream pdfStream = new FileStream("Output.pdf", FileMode.Create, FileAccess.ReadWrite);
            document.Save(pdfStream);
            
            pdfStream.Dispose();
            excelStream.Dispose();
            document.Close();
            renderer.Dispose();
            workbook.Close();
            excelEngine.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToPDF(System.IO.Stream)">
            <summary>
            Converts the Excel stream to PDF document.
            </summary>
            <returns>Returns the PDFDocument Object</returns>
            <example>
            The following code snippet illustrates how to convert the workbook to PDF.
            <code>
            //Open the file as Stream
            FileStream excelStream = new FileStream("Template.xlsx", FileMode.Open, FileAccess.Read);
            
            // Creates an instance of XlsIORenderer for Excel to PDF conversion
            XlsIORenderer renderer = new XlsIORenderer();
            
            //Convert the workbook into PDF.
            PdfDocument document = renderer.ConvertToPDF(excelStream);
            
            //Saving the PDF as stream
            FileStream pdfStream = new FileStream("Output.pdf", FileMode.Create, FileAccess.ReadWrite);
            document.Save(pdfStream);
            
            pdfStream.Dispose();
            excelStream.Dispose();
            document.Close();
            renderer.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORenderer.ConvertToPDF(System.IO.Stream,Syncfusion.XlsIORenderer.XlsIORendererSettings)">
            <summary>
            Converts the Excel stream to PDF document with the specified renderer settings.
            </summary>
            <returns>Returns the PDFDocument Object</returns>
            <example>
            The following code snippet illustrates how to convert the workbook to PDF with the specified renderer settings.
            <code>
            //Open the file as Stream
            FileStream excelStream = new FileStream("Template.xlsx", FileMode.Open, FileAccess.Read);
            
            //Creates an instance of XlsIORenderer for Excel to PDF conversion
            XlsIORenderer renderer = new XlsIORenderer();
            
            //Creates an instance of XlsIORenderer settings.
            XlsIORendererSettings settings = new XlsIORendererSettings();
            
            //Set layout for the output Pdf page.
            settings.LayoutOptions = LayoutOptions.FitAllColumnsOnOnePage;
            
            //Convert the Excel stream into PDF.
            PdfDocument document = renderer.ConvertToPDF(excelStream, settings);
            
            //Saving the PDF as stream
            FileStream pdfStream = new FileStream("Output.pdf", FileMode.Create, FileAccess.ReadWrite);
            document.Save(pdfStream);
            
            pdfStream.Dispose();
            excelStream.Dispose();
            document.Close();
            renderer.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORendererHepler.GetSystemFontName(System.String,System.Single,Syncfusion.Drawing.FontStyle)">
            <summary>
            Get the system fontName using FontExtension
            </summary>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontStyle">Style of the font.</param>
            <returns>returns the system fontname.</returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORendererHepler.SwitchFonts(System.String,System.Byte,System.String)">
            <summary>
                Modifies font name so as to render Unicode characters.
            </summary>
            <param name="testString">The sting in test for Unicode characters.</param>
            <param name="charSet">The Charset of the font.</param>
            <param name="fontName">The name of the font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XlsIORenderer.XlsIORendererHepler.CheckUnicode(System.String)">
            <summary>
                Checks the unicode.
            </summary>
            <param name="unicodeText">The unicode text.</param>
            <returns>
                True if the text is an unicode else false will returned.
            </returns>
        </member>
    </members>
</doc>
