<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor.Diagrams</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Diagrams.BasicShapeMargin">
            <summary>
            Specifies the space around the basic shape.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
              //Initialize node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
             {
               //Creates a basic shape node
               new DiagramNode()
               {
                Id="node1",
                //Size of the node
                Height=100,
                Width=100,
                Shape=new DiagramShape (){Type=Shapes.Basic,BasicShape=BasicShapes.Rectangle,Margin = new BasicShapeMargin(){ Top = 10, Left = 10, Bottom = 10, Right = 10} }
                }
              };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.BasicShapeMargin.#ctor">
            <summary>
            Specifies the space around the basic shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.CancelMargin">
            <summary>
            Represents the space around the cancel port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.CancelMargin.#ctor">
            <summary>
            Represents the space around the cancel port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorAnnotationDragLimit">
            <summary>
            It allows the user to limit the dragging of Connector Annotation to a certain distance.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                {
                    new DiagramConnectorAnnotation()
                    {
                     Content = "Annotation", Constraints = AnnotationConstraints.Select | AnnotationConstraints.Drag,
                     DragLimit = new ConnectorAnnotationDragLimit() { Left = 10, Top = 10, Right = 10, Bottom = 10 }
                     },
                 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorAnnotationDragLimit.#ctor">
            <summary>
            It allows the user to limit the dragging of Connector Annotation to a certain distance.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeAnnotationDragLimit">
            <summary>
            Specifies whether the node annotation can be moved or not.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
                protected override void OnInitialized()
                {
                  // A node is created and stored in the node array.
                  DiagramNode Node = new DiagramNode()
                  {
                     // Position of the node
                     OffsetX = 250,
                     OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    // Initialize port collection
                    Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                    {
                      // An annotation is created and stored in an Annotation collection of Node.
                      new DiagramNodeAnnotation() { Content = "Annotation",
                      Constraints=  AnnotationConstraints.Select|AnnotationConstraints.Drag,
                      DragLimit = new NodeAnnotationDragLimit(){Top = 30, Left = 0 ,Right = 20, Bottom = 20 } }
                     }
                   };
                  NodeCollection.Add(Node);
                 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeAnnotationDragLimit.#ctor">
            <summary>
            Specifies whether the node annotation can be moved or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorAnnotationMargin">
            <summary>
            Specifies the space around the connector annotation.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                 ConnectorCollection = new ObservableCollection<DiagramConnector>();
                 DiagramConnector Connector = new DiagramConnector()
                 {
                    SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                    TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                    Type = Segments.Orthogonal,
                    Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7" },
                    Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                    {
                      new DiagramConnectorAnnotation() { Content = "Annotation length will be varied", Width = 50, Height = 50 ,Margin = new ConnectorAnnotationMargin(){ Left=10} },
                    }
                  };
                  ConnectorCollection.Add(Connector);
                }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorAnnotationMargin.#ctor">
            <summary>
            Specifies the space around the connector annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorMargin">
            <summary>
            Specifies the space around the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                 DiagramConnector DiagramConnector = new DiagramConnector()
                 {
                    SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                    TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                     Margin = new ConnectorMargin()
                    {
                      Bottom = 10,
                      Top = 10,
                      Left = 10,
                      Right = 10
                     }
                   };
                   ConnectorCollection.Add(DiagramConnector);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorMargin.#ctor">
            <summary>
            Specifies the space around the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUserHandleMargin">
            <summary>
            Represents the space around the user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection" SelectedItems="@SelectedModel">
            </SfDiagram>
            @code{
                // Defines diagram's nodes collection
                public ObservableCollection<DiagramNode> NodeCollection { get; set; }
                // Defines diagram's SelectedItems
                public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
                ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
                protected override void OnInitialized()
                {
                    //Creating the user handle for cloning the objects
                     DiagramUserHandle CloneHandle = new DiagramUserHandle()
                      {
                        //Name of the user handle
                        Name = "clone",
                        //Set pathdata for userhandle
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                        //set margin to the user handle
                        Margin = new DiagramUserHandleMargin() { Top = 10, Bottom = 10, Left = 20, Right = 0 }
                        };
                        //Add user handle to the user handle collection
                        UserHandles = new ObservableCollection<DiagramUserHandle>()
                        {
                         CloneHandle
                        };
                        SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                         {
                          //Enable user handle for selected items...
                          Constraints = SelectorConstraints.UserHandle,
                          UserHandles = this.UserHandles
                         };
                         NodeCollection = new ObservableCollection<DiagramNode>();
                         DiagramNode DiagramNode = new DiagramNode()
                         {
                           Id = "node1",
                           OffsetX = 100,
                           OffsetY = 100,
                           Width = 100,
                           Height = 100,
                           Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                         };
                        NodeCollection.Add(DiagramNode);
                       }
                 }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUserHandleMargin.#ctor">
            <summary>
            Represents the space around the user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FailureMargin">
            <summary>
            Represents the space around the failure port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FailureMargin.#ctor">
            <summary>
            Represents the space around the failure port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeAnnotationMargin">
            <summary>
            Represents the space around the annotation content.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
                // A node is created and stored in the node array.
                DiagramNode Node = new DiagramNode()
                {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    // Initialize port collection
                    Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                   {
                      // An annotation is created and stored in an Annotation collection of Node.
                      new DiagramNodeAnnotation() { Content = "Annotation",
                      //set margin to label
                      Margin = new NodeAnnotationMargin(){ Top = 30, Left = 10, Bottom = 0, Right = 0}}
                    }
                  };
                  NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeAnnotationMargin.#ctor">
            <summary>
            Represents the space around the annotation content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeMargin">
            <summary>
            Sets the outer space for a node on all the four sides. By default, the margin is set to 0 in all the four sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 250,
                       OffsetY = 250,
                       Width = 100,
                       Height = 100,
                       Margin = new NodeMargin()
                       {
                           Bottom = 20,
                           Left = 20,
                           Right = 20,
                           Top = 20
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeMargin.#ctor">
            <summary>
            Sets the outer space for a node on all the four sides. By default, the margin is set to 0 in all the four sides.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortMargin">
            <summary>
            Represents the space from the actual offset values of the port.
            </summary>
            <remarks>
            By default, it will be 0 from all sides. The following code shows how to define PortMargin and its properties.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
               // A node is created and stored in nodes collection.
               DiagramNode Node = new DiagramNode()
               {
                   // Position of the node
                   OffsetX = 250,
                   OffsetY = 250,
                   // Size of the node
                   Width = 100,
                   Height = 100,
                   Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                   // Initialize port collection
                   Ports = new ObservableCollection<DiagramPort>() {
                   new DiagramPort() {
                       Id = "port1", Visibility = PortVisibility.Visible,
                       //Set the style for the port
                       Style= new PortShapeStyle(){ Fill="gray"},
                       //set the margin to the port
                       Margin = new PortMargin{Top= 10,Bottom=0,Left=10,Right=0}
                       }
                     },
                 };
                 NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PortMargin.#ctor">
            <summary>
            Represents the space from the actual offset values of the port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SuccessMargin">
            <summary>
            Represents the space around the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SuccessMargin.#ctor">
            <summary>
            Represents the space around the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.CancelOffset">
            <summary>
            Represents the position of the cancel port.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">CancelOffset is used to set the fraction relative to the parent that represents the position of the Cancel port. Fraction value ranges from 0 to 1.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the cancel port will be position at the top left corner of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the cancel port will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the cancel port will be position at the bottom right corner of the node.  </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
              {
                Type = Shapes.Bpmn,
                BpmnShape = BpmnShapes.Activity,
                //Sets the activity to subprocess
                Activity = new DiagramBpmnActivity()
                {
                  Activity = BpmnActivities.SubProcess,
                  //Sets collapsed to true and type to Transaction
                  SubProcess = new DiagramBpmnSubProcess()
                  {
                     //Collapsed = true,
                     Type = BpmnSubProcessTypes.Transaction,
                     //Sets offset and visible for cancel
                     Transaction = new DiagramBpmnTransactionSubProcess()
                     {
                        Cancel = new CancelSubEvent() { Visible = true, Offset = new BpmnSubEventOffset() { X = 0, Y = 0 } },
                     }
                   },
                }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.CancelOffset.#ctor">
            <summary>
            Represents the position of the cancel port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FailureOffset">
            <summary>
            Represents the position of the failure port.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">FailureOffset is used to set the fraction relative to the parent that represents the position of the Failure port. Fraction value ranges from 0 to 1.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the failure port will be position at the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the failure port will be position at the center of the node.   </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the failure port will be position at the bottom right corner of the node.  </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
             {
              Type = Shapes.Bpmn,
              BpmnShape = BpmnShapes.Activity,
              //Sets the activity to subprocess
              Activity = new DiagramBpmnActivity()
              {
                Activity = BpmnActivities.SubProcess,
                //Sets collapsed to true and type to Transaction
                SubProcess = new DiagramBpmnSubProcess()
                {
                  //Collapsed = true,
                  Type = BpmnSubProcessTypes.Transaction,
                  //Sets offset for cancel
                  Transaction = new DiagramBpmnTransactionSubProcess()
                  {
                    Failure = new FailureSubEvent() { Offset = new BpmnSubEventOffset() { X = 0, Y = 0 } }
                  }
                },
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FailureOffset.#ctor">
            <summary>
            Represents the position of the failure port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SuccessOffset">
            <summary>
            Represents the point in a diagram offset for a node/connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SuccessOffset.#ctor">
            <summary>
            Initialize the point in a diagram offset for a node/connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorDisplacementPoint">
            <summary>
            Represents the point where the connector annotation should be positioned from its actual position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorDisplacementPoint.#ctor">
            <summary>
            Represents the point where the connector annotation should be positioned from its actual position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorSourcePoint">
            <summary>
            Represents the Point where the source point of the connector should be placed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //...
               DiagramConnector DiagramConnector = new DiagramConnector()
               {
                  // Set the source point of the connector
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                  TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                };
               //...
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorSourcePoint.#ctor">
            <summary>
            Represents the Point where the source point of the connector should be placed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorTargetPoint">
            <summary>
            Represents the Point where the target point of the connector should be placed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              //...
               DiagramConnector DiagramConnector = new DiagramConnector()
               {
                 // Set the target point of the connector
                 SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                 TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                };
               //...
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorTargetPoint.#ctor">
            <summary>
            Represents the Point where the target point of the connector should be placed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FirstSegmentPoint">
            <summary>
            Represents the first control point of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FirstSegmentPoint.#ctor">
            <summary>
            Represents the first control point of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SecondSegmentPoint">
            <summary>
            Represents the second control point of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SecondSegmentPoint.#ctor">
            <summary>
            Represents the second control point of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.StraightSegmentPoint">
            <summary>
            Represents the control point of the straight line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.StraightSegmentPoint.#ctor">
            <summary>
            Represents the control point of the straight line connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.CancelSubEvent">
            <summary>
            Represents the event within another subprocess.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       // Position of the node
                       OffsetX = 100, OffsetY = 100,
                       // Size of the node
                       Width = 100, Height = 100,
                       // Unique id of the node
                       Id = "node1",
                       //Defines the type to BPMN and shape to activity
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.Activity,
                           //Sets the activity to subprocess
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.SubProcess,
                               //Sets collapsed to true and type to Transaction
                               SubProcess = new DiagramBpmnSubProcess()
                               {
                                   Collapsed = true,
                                   Type = BpmnSubProcessTypes.Transaction,
                                   //Sets offset and visible for cancel and offset for failure
                                   Transaction = new DiagramBpmnTransactionSubProcess()
                                   {
                                       Cancel = new CancelSubEvent(){ Visible = true, Offset = new BpmnSubEventOffset(){ X = 0.25, Y = 1}},
                                       Failure = new FailureSubEvent(){ Offset = new BpmnSubEventOffset(){ X = 0.75, Y = 1}}
                                   }
                               },
                           }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.CancelSubEvent.#ctor">
            <summary>
            Represents the event within another subprocess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Annotations">
            <summary>
            Represents to connect an annotation element to the SubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Event">
            <summary>
            Gets or sets the type of BpmnEvent. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Height">
            <summary>
            Gets or sets the height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.HorizontalAlignment">
            <summary>
            Represents how to horizontally align a node concerning its parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Id">
            <summary>
            Specifies the Id of the BpmnSubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Margin">
            <summary>
            Specifies the space to be left between the node and its immediate parent. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Offset">
            <summary>
            Specifies the position of the sub-event. By default, it is set to 0.5 in X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Ports">
            <summary>
            Specifies the collection of connection points of the sub-events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Trigger">
            <summary>
            Specifies the type of event trigger. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.VerticalAlignment">
            <summary>
            Represents how to vertically align a node with respect to its immediate parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Visible">
            <summary>
            Specifies the visibility of the sub-event. By default, it is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Width">
            <summary>
            Gets or sets the width of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity">
            <summary>
            Represents the task that is performed in a business process.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">There are two types of activities. They are listed as follows:</td>
            </tr>
            <tr>
            <td style = "border: none">1.Task: This occurs within a process and it is not broken down to a finer level of detail.</td>
            </tr>
            <tr>
            <td style = "border: none">2.Subprocess: This occurs within a process and it is broken down to a finer level of detail.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                 new DiagramNode()
                 {
                   //Position of the node
                   OffsetX = 100, OffsetY = 100,
                   //Size of the node
                   Width = 100, Height = 100,
                   //Unique Id of the node
                   Id = "node1",
                   //sets the type of shape to Bpmn and shape to activity
                   Shape = new DiagramShape()
                   {
                     Type = Shapes.Bpmn,
                     BpmnShape = BpmnShapes.Activity,
                     //Sets the activity type to task
                     Activity = new DiagramBpmnActivity(){ Activity = BpmnActivities.Task },
                    }
                   }
                };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.#ctor">
            <summary>
            Represents the task that is performed in a business process.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.Activity">
            <summary>
            Specifies the type of activity to be performed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.SubProcess">
            <summary>
            Specifies the group of tasks that are used to hide or reveal details of an additional level using the collapsed property.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
                 {
                    //Sets type to Bpmn and shape to Activity
                    Type = Shapes.Bpmn, BpmnShape=BpmnShapes.Activity,
                    Activity=new DiagramBpmnActivity()
                    {
                        //Sets activity to subprocess
                        Activity = BpmnActivities.SubProcess,
                        // Set collapsed of subprocess to true
                        SubProcess = new DiagramBpmnSubProcess() { Collapsed = true }
                    },
                  }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.Task">
            <summary>
            Specifies the type of task such as sending, receiving, etc. By default, the task is set to None.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
                 {
                    Type = Shapes.Bpmn, BpmnShape=BpmnShapes.Activity,
                    //Sets activity to Task
                    Activity = new DiagramBpmnActivity()
                    {
                        Activity = BpmnActivities.Task,
                        //Sets the type of the task to Send
                        Task = new DiagramBpmnTask() { Type = BpmnTasks.Send }
                     }
                  }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation">
            <summary>
            Represents to connect an annotation element to the BPMN node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">A BPMN object can be associated with a text annotation that does not affect the flow but gives details about objects within a flow. The annotation element can be switched from a BPMN node to another BPMN node simply by dragging the source end of the annotation connector into the other BPMN node.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              //Initialize the node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
              {
                 new DiagramNode()
                 {
                    //Position of the node
                    OffsetX = 100,
                    OffsetY = 100,
                    //Size of the node
                    Width = 100,
                    Height = 100,
                    //Unique Id of the node
                    Id = "node1",
                    //Sets type as BPMN and shape as DataObject
                    Shape = new DiagramShape()
                    {
                      Type = Shapes.Bpmn,
                      BpmnShape=BpmnShapes.DataObject,
                      //Sets collection as true when Dataobject is not a Single instance
                      DataObject=new DiagramBpmnDataObject()
                      {
                        Collection=true,
                        Type=BpmnDataObjects.Input
                      }
                     },
                     //Sets the id, angle, and text for the annotation
                     Annotations=new ObservableCollection<DiagramNodeAnnotation>()
                     {
                     new DiagramNodeAnnotation()
                     {
                        Id="Left",
                        RotateAngle=45,
                        Content="Left"
                      }
                    }
                 },
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.#ctor">
            <summary>
            Represents to connect an annotation element to the BPMN node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Angle">
            <summary>
            Sets the angle between the BPMN shape and the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Height">
            <summary>
            Sets the height of the text annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Id">
            <summary>
            Sets the id of the BPMN sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Length">
            <summary>
            Specifies the distance between the Bpmn shape and the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Text">
            <summary>
            Specifies the additional information about the flow object in a BPMN process.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Width">
            <summary>
            Sets the width of the text annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnDataObject">
            <summary>
            Represents the behavior of the Bpmn data object.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">A data object represents information flowing through the process, such as data placed into the process, data resulting from the process, data that needs to be collected, or data that must be stored. To define a DataObject, set the shape to DataObject and the type of property defines whether data is an input or output. Users can create multiple instances of the data object with the collection property of data.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram ID="Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             //Initialize the node collection with node
             ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
             {
               new DiagramNode()
               {
                 //Position of the node
                 OffsetX = 100,
                 OffsetY = 100,
                 //Size of the node
                 Width = 100,
                 Height = 100,
                 //Unique Id of the node
                 Id = "node1",
                 //Sets type to Bpmn and shape to DataObject
                 Shape = new DiagramShape()
                 {
                    Type = Shapes.Bpmn,
                    BpmnShape=BpmnShapes.DataObject,
                    //Sets collection to true when Dataobject is not a Single instance
                    DataObject=new DiagramBpmnDataObject()
                    {
                      Collection=true,
                      Type=BpmnDataObjects.Input
                     }
                  }
                 },
                };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnDataObject.#ctor">
            <summary>
            Represents the behavior of the Bpmn data object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnDataObject.Collection">
            <summary>
             Specifies whether the data object is a collection or not. By default, it is set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnDataObject.Type">
            <summary>
            Specifies whether the data is an input or output. By default, it is set to None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnEvent">
            <summary>
            Represents something happens during a business process and it is notated with a circle.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The type of events are as follows:</td>
            </tr>
            <tr>
            <td style = "border: none">•    Start - indicates the beginning of the process and every business process starts with an event.</td>
            </tr>
            <tr>
            <td style = "border: none">•    Intermediate - indicates the middle of the process.</td>
            </tr>
            <tr>
            <td style = "border: none">•    End - indicates the beginning of the process and every business process ends with an event.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                  new DiagramNode()
                  {
                    //Position of the node
                    OffsetX = 100, OffsetY = 100,
                    //Size of the node
                    Width = 100, Height = 100,
                    //Unique Id of the node
                    Id = "node1",
                    Shape = new DiagramShape()
                    {
                       //Sets type to Bpmn and shape to Event
                       Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Event,
                       // Set the event type to End
                       Event = new DiagramBpmnEvent() { Event = BpmnEvents.End }
                     }
                    }
                };
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnEvent.#ctor">
            <summary>
            Represents something happens during a business process and it is notated with a circle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnEvent.Event">
            <summary>
            It allows the user to define the type of event. The default value of the event is Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnEvent.Trigger">
            <summary>
            Specifies the type of trigger. By default, it is set to None.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[//...
                Shape = new DiagramShape()
                {
                   //Sets type to Bpmn and shape to Event
                   Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Event,
                   // Set the event type to NonInterruptingIntermediate and set the trigger as message
                   Event = new DiagramBpmnEvent() { Event = BpmnEvents.NonInterruptingIntermediate, Trigger = BpmnTriggers.Message }
                 }
                //...
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnGateway">
            <summary>
            Represents to control the flow of a process and it is represented as a diamond shape.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">To create a gateway, the shape property of the node should be set to “Gateway” and the Gateway property can be set with any of the appropriate gateways.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
               @code{
                //Initialize the node collection with node
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                  new DiagramNode()
                  {
                    //Position of the node
                    OffsetX = 100, OffsetY = 100,
                    //Size of the node
                    Width = 100, Height = 100,
                    //Unique Id of the node
                    Id = "node1",
                    Shape = new DiagramShape()
                    {
                        //Sets type to Bpmn and shape to Gateway
                        Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Gateway,
                        //Sets type of the gateway to None
                        Gateway = new DiagramBpmnGateway(){Type = BpmnGateways.None}
                    }
                   }
                 };
                }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnGateway.#ctor">
            <summary>
            Represents to control the flow of a process and it is represented as a diamond shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnGateway.Type">
            <summary>
            Specifies the type of BpmnGateway. By default, the Gateway will be set to None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent">
            <summary>
            Represents the event placed within another subprocess.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Users can set an event to a subprocess with the event and trigger the properties of the subprocess. The Type property of the subprocess allows you to define the type of subprocess.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
             @code {
             //Initialize the node collection with node
             ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
             {
               new DiagramNode()
              {
                 // Position of the node
                 OffsetX = 100, OffsetY = 100,
                 // Size of the node
                 Width = 100, Height = 100,
                 // Unique id of the node
                 Id = "node1",
                 //Defines the type to BPMN and shape to activity
                 Shape = new DiagramShape()
                 {
                    Type = Shapes.Bpmn,
                    BpmnShape = BpmnShapes.Activity,
                    //Sets the activity to subprocess
                    Activity = new DiagramBpmnActivity()
                    {
                       Activity = BpmnActivities.SubProcess,
                       //Sets collapsed to true and type to Transaction
                       SubProcess = new DiagramBpmnSubProcess()
                       {
                          Collapsed = true,
                          Type = BpmnSubProcessTypes.Transaction,
                          //Sets offset and visible for cancel and offset for failure
                          Transaction = new DiagramBpmnTransactionSubProcess()
                           {
                             Cancel = new CancelSubEvent(){ Visible = true, Offset = new BpmnSubEventOffset(){ X = 0.25, Y = 1}},
                             Failure = new FailureSubEvent(){ Offset = new BpmnSubEventOffset(){ X = 0.75, Y = 1}}
                            }
                       },
                    }
                   }
                  }
                 };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.#ctor">
            <summary>
            Represents the event placed within another subprocess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Annotations">
            <summary>
            Represents to connect an annotation element to the BpmnSubEvent.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">A BpmnSubEvent can be associated with a text annotation that does not affect the flow but gives details about objects within a flow.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Event">
            <summary>
            Gets or sets the type of BpmnEvent. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Height">
            <summary>
            Gets or sets the height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.HorizontalAlignment">
            <summary>
            Represents how to horizontally align a node concerning its parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Id">
            <summary>
            Specifies the Id of the BpmnSubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Margin">
            <summary>
            Specifies the space to be left between the node and its immediate parent. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Offset">
            <summary>
            Specifies the position of the sub-event. By default, it is set to 0.5 in X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Ports">
            <summary>
            Specifies the collection of connection points of the sub-events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Trigger">
            <summary>
            Specifies the type of event trigger. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.VerticalAlignment">
            <summary>
            Represents how to vertically align a node concerning its immediate parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Visible">
            <summary>
            Specifies the visibility of the sub-event. By default, it is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Width">
            <summary>
            Gets or sets the width of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess">
            <summary>
            This occurs within a process and it is broken down to a finer level of detail.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
              //Initialize the node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
              {
                new DiagramNode()
                {
                  //Position of the node
                  OffsetX = 100, OffsetY = 100,
                  //Size of the node
                  Width = 100, Height = 100,
                  //unique id of the node
                  Id = "node1",
                  //Defines the type to BPMN and shape to activity
                  Shape = new DiagramShape()
                  {
                    Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                    //Sets the activity to subprocess
                    Activity=new DiagramBpmnActivity()
                    {
                      Activity = BpmnActivities.SubProcess,
                      //sets collapsed and ad hoc to true
                      SubProcess = new DiagramBpmnSubProcess()
                      {
                        Collapsed = true,
                        Adhoc = true
                       },
                     }
                    }
                  },
                };
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.#ctor">
            <summary>
            This occurs within a process and it is broken down to a finer level of detail.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Adhoc">
            <summary>
            Specifies whether the subprocess is without any prescribed order or not.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Specifies a subprocess is a group of tasks that are executed in any order or skipped to fulfill the end condition and set it with the Ad-hoc property of the subprocess.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity = BpmnActivities.SubProcess,
                      //sets collapsed and ad hoc to true
                      SubProcess = new DiagramBpmnSubProcess()
                      {
                        Collapsed = true,
                        Adhoc = true
                       },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Boundary">
            <summary>
            Represent the type of task that is being processed.
            </summary>
            <remarks>
            The Boundary property of the subprocess allows you to define the type of boundary.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity = BpmnActivities.SubProcess,
                //Sets collapsed to true and boundary to Call
                SubProcess = new DiagramBpmnSubProcess()
                {
                  Collapsed = true,
                  Boundary = BpmnBoundary.Call
                },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Collapsed">
            <summary>
            Specifies whether the shape is collapsed or not. By default, it is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Compensation">
            <summary>
            Specifies whether the task is triggered as compensation for another task.
            </summary>
            <remarks>
            Compensation is triggered when the operation is partially failed and enabled it with the compensation property of the task and the subprocess.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity = new DiagramBpmnActivity()
                   {
                     Activity = BpmnActivities.Task,
                     //set compensation to true
                     Task=new DiagramBpmnTask()
                     {
                       Compensation = true,
                     },
                    }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Events">
            <summary>
            It allows the user to define the type of event. The default value of the event starts.
            </summary>
            <remarks>
            Event SubProcess has placed within another subprocess that part of the normal flow of its parent process is not.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Loop">
            <summary>
            Specifies the task that is internally being looped and allows users to define the type of loop. The default value for Loop is None.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Activity = BpmnActivities.SubProcess,
                //Sets collapsed to true and loop to standard
                SubProcess=new DiagramBpmnSubProcess()
                {
                  Collapsed = true,
                  Loop = BpmnLoops.Standard,
                },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Processes">
            <summary>
            Specifies an array collection that defines the children's values for the Bpmn subprocess.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[SubProcess = new DiagramBpmnSubProcess() {
                Collapsed = false,
                Type = BpmnSubProcessTypes.Event,
                Processes = new string[] { "Start", "End", "Node1" }
                }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Transaction">
            <summary>
            Specifies the transaction of the subprocess.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The transaction is a set of activities that logically belong together that all contained activities must complete their parts of the transaction otherwise, the process is failed. The execution result of a transaction is one of the following.</td>
            </tr>
            <tr>
            <td style = "border: none">�    Successful Completion.</td>
            </tr>
            <tr>
            <td style = "border: none">�    Unsuccessful Completion (Cancel).</td>
            </tr>
            <tr>
            <td style = "border: none">�    Hazard (Exception).</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[//Sets collapsed to true and type to Transaction
                SubProcess = new DiagramBpmnSubProcess()
                {
                    Collapsed = true,
                    Type = BpmnSubProcessTypes.Transaction,
                    //Sets offset and visible for cancel and offset for failure
                    Transaction = new DiagramBpmnTransactionSubProcess()
                     {
                        Cancel = new CancelSubEvent() { Visible = true, Offset = new BpmnSubEventOffset() { X = 0.25, Y = 1 } },
                        Failure = new FailureSubEvent() { Offset = new BpmnSubEventOffset() { X = 0.75, Y = 1 } }
                     }
                 },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Type">
            <summary>
            Specifies the type of BpmnSubProcess. The default value for type is None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnTask">
            <summary>
            This occurs within a process and it is not broken down to a finer level of detail.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The task property of the node allows you to define the type such as sending, receiving, user-based tasks, etc. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              //Initialize the node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
              {
                new DiagramNode()
                {
                  //Position of the node
                  OffsetX = 100, OffsetY = 100,
                  //Size of the node
                  Width = 100, Height = 100,
                  //Unique Id of the node
                  Id = "node1",
                  //sets the type of shape to Bpmn and shape to activity
                  Shape = new DiagramShape()
                  {
                    Type = Shapes.Bpmn,
                    BpmnShape = BpmnShapes.Activity,
                    //Sets the activity type to task
                    Activity = new DiagramBpmnActivity(){ Activity = BpmnActivities.Task },
                   }
                 }
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.#ctor">
            <summary>
            This occurs within a process and it is not broken down to a finer level of detail.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.Call">
            <summary>
            Specifies whether the task is global or not. By default, it is set false.
            </summary>
            <remarks>
            The task property of the node allows you to define the type such as sending, receiving, user-based tasks, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity=new DiagramBpmnActivity()
                  {
                    Activity = BpmnActivities.Task,
                    //Sets call to true
                    Task = new DiagramBpmnTask()
                    {
                      Call = true,
                    },
                   }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.Compensation">
            <summary>
            Specifies whether the task is triggered as compensation for another task.
            </summary>
            <remarks>
            Compensation is triggered when the operation is partially failed and enabled it with the compensation property of the task.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity=new DiagramBpmnActivity()
                  {
                    Activity = BpmnActivities.Task,
                    //set compensation to true
                    Task = new DiagramBpmnTask()
                    {
                     Compensation=true,
                    },
                   }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.Loop">
            <summary>
            Specifies the task that is internally being looped and allows users to define the type of loop. The default value for Loop is None.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.Type">
            <summary>
            Specifies the type of Task. The default value for type is None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess">
            <summary>
            Specifies the behavior of the BpmnTransactionSubProcess.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The transaction is a set of activities that logically belong together that all contained activities must complete their parts of the transaction otherwise, the process is failed. The execution result of a transaction is one of the following </td>
            </tr>
            <tr>
            <td style = "border: none">•    Successful Completion. </td>
            </tr>
            <tr>
            <td style = "border: none">•    Unsuccessful Completion (Cancel). </td>
            </tr>
            <tr>
            <td style = "border: none">•    Hazard (Exception). </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
                //Initialize the node collection with node
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                  new DiagramNode()
                  {
                    // Position of the node
                    OffsetX = 100, OffsetY = 100,
                    // Size of the node
                    Width = 100, Height = 100,
                    // Unique id of the node
                    Id = "node1",
                    //Defines the type to BPMN and shape to activity
                    Shape = new DiagramShape()
                    {
                      Type = Shapes.Bpmn,
                      BpmnShape = BpmnShapes.Activity,
                      //Sets the activity to subprocess
                      Activity = new DiagramBpmnActivity()
                      {
                        Activity = BpmnActivities.SubProcess,
                        //Sets collapsed to true and type to Transaction
                        SubProcess = new DiagramBpmnSubProcess()
                        {
                          Collapsed = true,
                          Type = BpmnSubProcessTypes.Transaction,
                          //Sets offset and visible for cancel and offset for failure
                          Transaction = new DiagramBpmnTransactionSubProcess()
                          {
                            Cancel = new CancelSubEvent(){ Visible = true, Offset = new BpmnSubEventOffset(){ X = 0.25, Y = 1}},
                            Failure = new FailureSubEvent(){ Offset = new BpmnSubEventOffset(){ X = 0.75, Y = 1}}
                           }
                        },
                       }
                     }
                    }
                  };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess.#ctor">
            <summary>
            Specifies the behavior of the BpmnTransactionSubProcess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess.Cancel">
            <summary>
            Specifies the size and position of the cancel port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess.Failure">
            <summary>
            Specifies the size and position of the failure port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess.Success">
            <summary>
            Specifies the size and position of the success port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity">
            <summary>
            Represents the behavior of the UMLActivity Classifier Multiplicity connection defaults.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The Multiplicity property in UML allows you to specify a large number of elements or some collection of elements. By default, the multiplicity will be considered as OneToOne. The type of multiplicity is as follows. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   OneToOne. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   ManyToOne. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   OneToMany.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   ManyToMany.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                   //...
                 Shape = new DiagramConnectorShape()
                 {
                     Type = ConnectionShapes.UmlClassifier,
                     //Set a relationship for connector
                     Relationship = ClassifierShape.Dependency,
                     Multiplicity = new DiagramClassifierMultiplicity()
                      {
                        //Set multiplicity type
                        Type = Multiplicity.OneToMany,
                        //Set source label to connector
                        Source = new SourceMultiplicityLabel()
                         {
                           Optional = true,
                           LowerBounds = "89",
                           UpperBounds = "67"
                          },
                          //Set target label to a connector
                          Target = new TargetMultiplicityLabel()
                          {
                            Optional = true,
                            LowerBounds = "78",
                            UpperBounds = "90"
                           }
                      }
                  },
                 //...
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity.#ctor">
            <summary>
            Represents the behavior of the UMLActivity Classifier Multiplicity connection defaults.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity.Source">
            <summary>
            Specifies the source label to a connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity.Target">
            <summary>
            Specifies the target label to a connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity.Type">
            <summary>
            Specifies the type of Classifier multiplicity. By default, it is set to OneToOne.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnector">
            <summary>
            A path between two points, like nodes or ports.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">A connector is a piece of a path in the diagram, connecting two points. The points might be nodes, ports, etc., A connector is created using a source point and a target point. The connector might contain decorators, which distinguish the target point from the source point. A connector can be straight or orthogonal. </td>
            </tr>
            <tr>
            <td style = "border: none">The following code demonstrates, how to define the DiagramConnector and its properties.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
                //Defines diagram's connector collection
                public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
                protected override void OnInitialized()
                {
                  DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                     // Set the source and target point of the connector
                     SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                     TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                     // Type of the connector segemnts
                     Type = Segments.Straight,
                   };
                   //Add the connector into connectors' collection.
                   ConnectorCollection.Add(DiagramConnector);
                 }
             }
            ]]>
            </code>
            </example>
            <summary>
            Represents the objects used to create link between two points, nodes or ports to represent the relationships between them.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnector.#ctor">
            <summary>
            A path between two points, like nodes or ports.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.AddInfo">
            <summary>
            It allows the user to store additional information about the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramConnector()
             {
                //Define the addInfo value.
                AddInfo = "Central Connector",
              };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Annotations">
            <summary>
            Defines the collection of textual annotations of connectors.
            </summary>
            <remarks>
            Annotation can be customized as per the user's preference by adding font color, border color, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramConnector()
             {
               Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                {
                //A annotation is created and stored in Annotations collection of connector.
                new DiagramConnectorAnnotation() { Content = "Connector" }
                 }
              };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.BridgeSpace">
            <summary>
            Defines the width for line bridging.
            </summary>
            <remarks>
            At points of intersection, line bridging creates a bridge to crossover the other connectors. The bridgeSpace defines the width for line bridging. However, Beizer does not support line bridging. Bridging can be enabled by including the “DiagramConstraints.Bridging” constraint.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[//Enable the bridging constraint for diagram.
            public DiagramConstraints DiagramConstraints = DiagramConstraints.Bridging;
            DiagramConnector DiagramConnector1 = new DiagramConnector()
            {
              SourcePoint = new ConnectorSourcePoint() { X = 200, Y = 200 },
              TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 200 }
             };
             DiagramConnector DiagramConnector2 = new DiagramConnector()
             {
               SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 100 },
               TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 }
              };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.ConnectionPadding">
            <summary>
            Sets padding value to the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Constraints">
            <summary>
            Certain behavior of connectors are enabled or disabled using constraints.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.CornerRadius">
            <summary>
            Corner radius allows creating objects with rounded corners.By default, the value of the corner radius is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.DragSize">
            <summary>
            Defines the size of a drop symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SymbolInfo">
            <summary>
            Defines the information of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.ExcludeFromLayout">
            <summary>
            Defines whether the connector should be automatically positioned or not.
            </summary>
            <remarks>
            ExcludeFromLayout is a Boolean type. By default, ExcludeFromLayout is false. It can be enabled by setting the Boolean to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.FixedUserHandles">
            <summary>
            It allows the user to store the collection of fixed user handles of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Flip">
            <summary>
            Turns over or translates the connector according to the specified type.
            </summary>
            <remarks>
            Flip can be set to None, Horizontal, Vertical, Both according to the user’s perception.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.HitPadding">
            <summary>
            Sets padding like space around the edges of the connector, such that selection for connector might be easy.By default, the value of HidPadding is 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Id">
            <summary>
            Sets each connector with a unique identity.
            </summary>
            <remarks>
            The Id of each connector should be unique if-else overlap over the connectors might occur.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Margin">
            <summary>
            Sets/Gets the margin of the element.By default, the value of the Margin is 0 in all four sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.PreviewSize">
            <summary>
            Defines the size of the symbol before dragging into the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Segments">
            <summary>
            Specifies the collection of diagram connector segments.
            </summary>
            <remarks>
            The Segments can be set to Straight, Orthogonal, Beizer, or Polyline. By default, the segments are straight.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Shape">
            <summary>
            Defines the shape of the connector segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourceDecorator">
            <summary>
            Defines the source decorator of the connector.
            </summary>
            <remarks>
            The width, height, style, pivot, etc., of the SourceDecorator, can be set as per the user’s requirement.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourceID">
            <summary>
            Sets the source node id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourcePadding">
            <summary>
            Defines the space between the source node  and the source connector end. By default, the value is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourcePoint">
            <summary>
            Sets the beginning point of the connector.
            </summary>
            <remarks>
            The SourcePoint for the connector is set on X, Y. X defines the space from left and Y defines the space from the top. By default, the X and Y are set to 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourcePortID">
            <summary>
            Defines the port id to which the connector’s source point is to be connected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Style">
            <summary>
            Defines the appearance of the connection.
            </summary>
            <remarks>
            The appearance of the connector can be customized according to the user’s perception. For example, the border color, border width, fill color of the connector can be set as per the user’s requirement.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetDecorator">
            <summary>
            Defines the target decorator of the connector.
            </summary>
            <remarks>
            The width, height, style, pivot, etc., of the TargetDecorator, can be set as per the user’s requirement.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetID">
            <summary>
            Sets the target node/connector object of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetPadding">
            <summary>
            Sets the target padding of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetPoint">
            <summary>
            Sets the end point of the connector.
            </summary>
            <remarks>
            The TargetPoint for the connector is set on X, Y. X defines the space from left and Y defines the space from the top. By default, the X and Y are set to 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetPortID">
            <summary>
            Defines the port id to which the connector’s target point is to be connected.
            </summary>
            <remarks>
            The TargetPortID is a string type. By default, the TargetPortID is empty.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Tooltip">
            <summary>
            Tooltip is a message displayed over the connector when hovered.
            </summary>
            <remarks>
            The message to be displayed can be set in the Content of the tooltip property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Type">
            <summary>
            Defines the type of connector segment.
            </summary>
            <remarks>
            The Type can be set to Straight, Orthogonal, Beizer, or Polyline. By default, the segments are straight.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Visible">
            <summary>
            Sets the visibility of the connector segment.
            </summary>
            <remarks>
            Visible is a Boolean type. By default, visible is set to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.ZIndex">
            <summary>
            Sets the stack and z-order of the connector.
            </summary>
            <remarks>
            The ZIndex is a number type. The connector with higher stack order is always at the top of all the connectors.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnector.BeginUpdate">
            <summary>
            Prevents redrawing of model on the client side.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnector.EndUpdate">
            <summary>
            Enable redrawing of model on the client side.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation">
            <summary>
            Represents the block of text displayed over the connector.
            </summary>
            <remarks>
            Annotation is used to present some textual data for the connector which can be edited at runtime. Multiple annotations can be added to the connector. Users can able to modify the annotation style, visibility, width, height, and content of the annotation through code or visually.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
             //Defines diagram's connector collection
             public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
             protected override void OnInitialized()
             {
                ConnectorCollection = new ObservableCollection<DiagramConnector>();
                DiagramConnector Connector = new DiagramConnector()
               {
                  SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                  TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                  Type = Segments.Orthogonal,
                  Style = new ConnectorShapeStyle()
                  {StrokeColor = "#6BA5D7”},
                  Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                  {
                    //An annotation is created and stored in the Annotation collection of the connector.
                    new DiagramConnectorAnnotation () {Content = "Annotation" }
                  }
                };
                ConnectorCollection.Add(Connector);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.#ctor">
            <summary>
            Represents the block of text displayed over the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.AddInfo">
            <summary>
            Specifies the additional information about annotation.
            </summary>
            <remarks>
            Enables the user to store data of any datatype. It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public class AddInfo{
            public string Description{get, set}
            }
             // An annotation is created and stored in an Annotation collection of the Connector.
             Annotations = new ObservableCollection<DiagramConnectorAnnotation>() {
             new DiagramConnectorAnnotation()
             Content = "Annotation"
             AddInfo = new AddInfo() { Description = “Annotation1”}
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Alignment">
            <summary>
            Specifies the position of the label based on the segment alignment.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Specifies the position of the label based on the segment alignment. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1.  Center - Aligns the annotation at the center of a connector segment.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2.  Before - Aligns the annotation before a connector segment.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3.  After - Aligns the annotation after a connector segment.</td>
            </tr>
            <tr>
            <td style = "border: none"> By default, the alignment is set as the center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.AnnotationType">
            <summary>
             This property allows the users to define a type of annotation template.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set for the value of the Annotation. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   String - Annotation template to be in the string. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Template - Annotation template to be in HTML Content.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Constraints">
            <summary>
            The constraints property allows the user to enable or disable certain behaviors of the label. For instance, the user can disable annotation editing and able to make it as read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Content">
            <summary>
            Gets or sets the textual description of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Displacement">
            <summary>
            The Displacement property allows the user to dislocate the annotation from its original place by the given value.
            </summary>
            <remarks>
            By default, the annotation will be in the center of the connector path. When the user assigns value to the Displacement property, the annotation will be displaced from its position by displacement value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.DragLimit">
            <summary>
            This property allows the user to limit the dragging of connector label to a certain distance. By default, it is set to 20 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[// An annotation is created and stored in the Annotation collection of the connector.
            Annotations = new ObservableCollection<DiagramConnectorAnnotation>() {
            new DiagramConnectorAnnotation()
            Content = "Annotation"
            DragLimit = new DiagramConnectorAnnotationDragLimit() { Top = 20, Left = 20 ,Right = 20, Bottom = 20}
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Height">
            <summary>
            Gets or sets the height of the annotations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.HorizontalAlignment">
            <summary>
            Describes how an annotation element is horizontally positioned or stretched within a connector. the characteristics of its immediate parent.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the Horizontal Alignment of the annotation</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the connector</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the connector</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the connector</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the connector</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the connector</td>
            </tr>
            <tr>
            <td style = "border: none">By default, HorizontalAlignment is set to center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Hyperlink">
            <summary>
            This property allows the user to add a hyperlink to the connector label.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Id">
            <summary>
            Returns the unique id of an Annotation.  .
            </summary>
            <remarks>
            Annotation Id needs to be unique to use. When creating a label, the user should not provide the same id to other labels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Margin">
            <summary>
            Specifies the space around the annotation content. The default values for the Margin are set to 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Annotations = new ObservableCollection<DiagramConnectorAnnotation> ()
            {
              //An annotation is created and stored in the Annotations collection of Connector.
              new DiagramConnectorAnnotation()
              {
               Content = "Annotation),
               Margin = new ConnectorAnnotationMargin() { Top = 0, Left = 0, Bottom = 0, Right = 0 }
              }
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Offset">
            <summary>
            Specifies the position of the label relative to the bounds of the connector. The default value for offset is set to 0.5.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.RotateAngle">
            <summary>
            Gets or sets the rotation angle of the label.
            </summary>
            <remarks>
            Connector labels can be rotated either by code-behind or mouse interaction. By default, the rotate angle will be 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.SegmentAngle">
            <summary>
            This property allows the user to rotate the annotation based on the connector segment direction.
            </summary>
            <remarks>
            By default, the annotation will be rotated in the connector path. When the user assigns value to the SegmentPath property, the annotation will be rotated from its position based on the connector segment direction.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Style">
            <summary>
            Defines the appearance of the text.
            </summary>
            <remarks>
            Users can change the font style of the label with the font specific properties such as  font family, font size, font color, bold, etc., The fill and border appearances of the text can also be customized with appearance specific properties of label such as fill color, border color, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Template">
            <summary>
            This property represents the template’s content of the label. The User can define any HTML content as a template.
            </summary>
            <remarks>
            Users can set the label content as a template instead of textual content or hyperlink, by using template property. For that SVG or HTML content should be defined as a string in an annotation’s template property. By default, it is undefined.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Type">
            <summary>
            This property is used to define the positioning behavior of the annotation. It can be either “Shape” or “Path”.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set for the Type property of the annotation,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   shape - sets the annotation type to shape.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Path – sets the annotation type to the path.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.VerticalAlignment">
            <summary>
            Describes how an annotation element is vertically positioned or stretched within a connector.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options  is used to defining the vertical alignment of the annotation,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Top - Aligns the diagram element at the top of the connector.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Bottom - Aligns the diagram element at the bottom of the connector.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Center - Aligns the diagram element at the center of the connector.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Auto - Aligns the diagram element based on the characteristics of the connector.</td>
            </tr>
            <tr>
            <td style = "border: none">By default, VerticalAlignment is set to center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Visibility">
            <summary>
            specifies the visibility of the annotation.
            </summary>
            <remarks>
            By default, visibility is set to true. If the visibility is false, then the connector annotation will not be visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Width">
            <summary>
            Gets or sets the width of an annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment">
            <summary>
            Specifies the collection connector segment that may have types like Straight, Orthogonal, Beizer.
            </summary>
            <remarks>
            The connector segment can be customized as per the user’s perception. The available connector segment types are Straight, Orthogonal, Beizer.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
              protected override void OnInitialized()
             {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                   SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 200 },
                   TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 200 },
                   Segments = new ObservableCollection<DiagramConnectorSegment>()
                  {
                    //Create a new segment with length and direction
                    new DiagramConnectorSegment()
                    {
                      Length = 100,
                      Type = Segments.Orthogonal,
                      Direction = Direction.Right,
                    },
                 }
                };
               ConnectorCollection.Add(DiagramConnector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.#ctor">
            <summary>
            Defines the type of segment. To create a connector segment, specify the source point and target point. Hence a connector of Straight type is formed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.AllowDrag">
            <summary>
            Defines whether the connector can be draggable or not.
            </summary>
            <remarks>
            AllowDrag is of type Boolean. By default, AllowDrag is true. All the connectors are draggable unless the AllowDrag of it is set to false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Direction">
            <summary>
            Sets the direction of the orthogonal segment.
            </summary>
            <remarks>
            By default, the value of the Direction is null. The Direction of the connector segment can be set to Top, Left, Bottom, or Right.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Length">
            <summary>
            Sets the length of the orthogonal connector segment.
            </summary>
            <remarks>
            By default, the value of Length is 0 and it is applicable only for the orthogonal segment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Point">
            <summary>
            Sets the control point of the Bezier segment.
            </summary>
            <remarks>
            It applies only to the Bezier segment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Point1">
            <summary>
            Sets the first control point of the connector segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Point2">
            <summary>
            Sets the second control point of the connector segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Type">
            <summary>
            Defines the type of connector segment.
            </summary>
            <remarks>
            The connector segments can be of Orthogonal, Straight, Beizer types.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Vector1">
            <summary>
            Defines the length and angle between the source point and the first control point.
            </summary>
            <remarks>
            It applies only to the Bezier segment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Vector2">
            <summary>
            Defines the length and angle between the target point and the second control point.
            </summary>
            <remarks>
            It applies only to the Bezier segment.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectorShape">
            <summary>
            Defines the shape of the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
             public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
             protected override void OnInitialized()
             {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 200 },
                  TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 200 },
                  //Sets the type to Bpmn, flow to Association and association to bidirectional
                  Shape = new DiagramConnectorShape()
                  {
                    Type = ConnectionShapes.Bpmn,
                    BpmnFlow = BpmnFlows.Association,
                    Association = BpmnAssociationFlows.Directional
                  }
                };
               ConnectorCollection.Add(DiagramConnector);
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.#ctor">
            <summary>
            Defines the shape of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Association">
            <summary>
            Sets the BPMN Flow Type as Association.
            </summary>
            <remarks>
            The diagram connector shape can be set to the association by setting the BPMNFlow property to the association. Types of the association are Directional, BiDirectional, Default.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramConnector Connector = new DiagramConnector()
            {
               //Sets the type to Bpmn, flow to Association and association to bidirectional
               Shape=new DiagramConnectorShape()
               {
                Type = ConnectionShapes.Bpmn,
                BpmnFlow = BpmnFlows.Association,
                Association = BpmnAssociationFlows.BiDirectional
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.AssociationType">
            <summary>
            Defines the type of connector shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.BpmnFlow">
            <summary>
            It defines whether the connector can act as a normal connector or BPMN flow.
            </summary>
            <remarks>
            The BPMNFlow can be set to Association, Sequence, or Message.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.ExceptionFlowHeight">
            <summary>
            Defines the height of exception flow.
            </summary>
            <remarks>
            By default, the value of ExceptionHeightFlow is 50.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Message">
            <summary>
            The message flow represents the flow of messages between two points.
            </summary>
            <remarks>
            The BPMN Flow Type can be set to Message. The types of message flow are Initiating, NonInitiating, and Default.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramConnector Connector = new DiagramConnector()
            {
             // Start and endpoint of the connector
             SourcePoint=new ConnectorSourcePoint() { X = 100,Y = 200},
             TargetPoint=new ConnectorTargetPoint() { X = 300,Y = 200},
             //Sets type to Bpmn, flow to Message, and message to InitiatingMessage
             Shape=new DiagramConnectorShape()
             {
                Type = ConnectionShapes.Bpmn,
                BpmnFlow = BpmnFlows.Message,
                Message = BpmnMessageFlows.InitiatingMessage
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Multiplicity">
            <summary>
            Defines the type of classifier multiplicity.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Relationship">
            <summary>
            Represents the relationship for UML Classifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Sequence">
            <summary>
            The sequence flow represents a solid graphic flow segment.
            </summary>
            <remarks>
            This sets the BPMN Flow Type as Sequence. The types of sequences are Normal, Conditional, and Default.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramConnector Connector = new DiagramConnector()
            {
               //Sets type to Bpmn, flow to Sequence, and sequence to Conditional
               Shape=new DiagramConnectorShape()
               {
                 Type = ConnectionShapes.Bpmn,
                 BpmnFlow = BpmnFlows.Sequence,
                 Sequence = BpmnSequenceFlows.Default
                }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Type">
            <summary>
            Defines the type of connector shape.
            </summary>
            <remarks>
            The connector shape can be set to None, BPMN, UMLActivity or UMLClassifier.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramConnector Connector = new DiagramConnector()
            {
             //Unique Id of the connector
             Id="connector1",
             // Start and end point of the connector
             SourcePoint=new ConnectorSourcePoint() { X = 100,Y = 200},
             TargetPoint=new ConnectorTargetPoint() { X = 300,Y = 200},
             //Sets type to Bpmn
             Shape=new DiagramConnectorShape()
              {
               Type = ConnectionShapes.Bpmn,
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.UmlActivityFlow">
            <summary>
            Defines the type of connector shape as UMLActivity.
            </summary>
            <remarks>
            The UMLActivityFlow can be set to either Basic or Action.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings">
            <summary>
            It is a built-in menu loaded with few features which open when right-clicked.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram @ref="@Diagram" Nodes="@NodeCollection">
            // Defines context menu and set the ShowCustomMenuOnly to false to render the custom context menu along with the default context menu
            <DiagramContextMenuSettings Show = "true" Items="@ContextMenuItemModels" >
            </DiagramContextMenuSettings>
            </SfDiagram>
            @code
            {
             //Reference to diagram
             SfDiagram Diagram;
             //Defines diagram's nodes collection
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
             protected override void OnInitialized()
             {
                //Create a node
                DiagramNode Node = new DiagramNode()
                {
                  OffsetX = 100,
                  OffsetY = 100,
                  Height = 100,
                  Width = 100,
                  Id = "node1",
                };
                //Add node into node's collection
                NodeCollection.Add(Node);
              }
              // Add the custom context menu items
              List<ContextMenuItemModel> ContextMenuItemModels = new List<ContextMenuItemModel>()
              {
              new ContextMenuItemModel()
              {
                 Text ="color",
                 Id="Save",
                  Target =".e-elementcontent",
                  // Add the nested custom context menu items
                 Items = new List<ContextMenuItemModel>()
               {
                new ContextMenuItemModel(){  Text ="Red", Id="Red", },
                new ContextMenuItemModel(){  Text ="Yellow", Id="Yellow", },
                new ContextMenuItemModel(){  Text ="Green", Id="Green", }
                }
                },
              };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings._jsNamespace">
            <summary>
            It is a built-in menu loaded with few features which open when right-clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.Items">
            <summary>
            Defines the items to be displayed in the context menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.Show">
            <summary>
            Defines whether to enable or disable the context menu.
            </summary>
            <remarks>
            By default, the Show is set to false. The context menu can be enabled by setting the Show to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.ShowCustomMenuOnly">
            <summary>
            Enables only the custom menu items.
            </summary>
            <remarks>
            By default, the ShowCustomMenuOnly is set to false. The context menu can be enabled by setting the ShowCustomMenuOnly to true.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
              // Define custom menu  <DiagramContextMenuSettings ShowCustomMenuOnly="true">
            </DiagramContextMenuSettings></SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnHybridInitialized">
            <returns> Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree. </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnHybridParametersSet">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnHybridAfterRender(System.Boolean)">
            <returns>  Returns asynchronous operation which is executed when the rendering of all the references to the component are populated. </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnAfterRenderAsync(System.Boolean)">
            <returns> Returns asynchronous operation which is executed when the rendering of all the references to the component are populated </returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramCustomCursor">
            <summary>
            Represents which type of cursor has to displayed to the specific action.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCustomCursor.#ctor">
            <summary>
            Represents which type of cursor has to displayed to the specific action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCustomCursor.Action">
            <summary>
            Defines which type of action will take place.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none"> �   There are several Actions are available such as Drag, Select, ResizeNorth, Rotate, etc.,</td>
            </tr>
            <tr>
            <td style = "border: none">�    Each Action has a specific cursor. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCustomCursor.Cursor">
            <summary>
            Sets or gets the cursor that corresponds to the action taken.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramDecorator">
            <summary>
            Represents the connector's start and endpoint decorations.
            </summary>
            <remarks>
            The connector's start and endpoints can be decorated with some customizable shapes such as arrows, circles, diamonds, or path. The start and endpoint of the connector can be decorated with the connector 's source decorator and target decorator properties. The following code shows how the target decorator and its property should be defined.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
                //Defines diagram's connector collection
                public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
                protected override void OnInitialized()
                {
                  DiagramConnector DiagramConnector = new DiagramConnector()
                    {
                     SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                     TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                     TargetDecorator = new ConnectorTargetDecorator()
                     {
                      Shape = DecoratorShapes.Arrow,
                      Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 }
                      },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       //Specify the segment types as straight.
                       Type = Segments.Straight,
                      };
                      ConnectorCollection.Add(DiagramConnector);
                  }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDecorator.#ctor">
            <summary>
            Represents the connector's start and endpoint decorations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Height">
            <summary>
            Gets or sets the height of the decorator. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.PathData">
            <summary>
            Defines the shape of the decorator geometry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Pivot">
            <summary>
            Specifies the position (X, Y) of the decorator to the source or target point of the connector. By default, it is set to X=0,Y=0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Shape">
            <summary>
            This property allows the user to define the shape of the decorator.
            </summary>
            <remarks>
            Start and endpoints of a connector can be decorated with some customizable shapes like arrows, circles, diamonds, or path.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Style">
            <summary>
            Defines the appearance of the decorator.
            </summary>
            <remarks>
            Users can customize the appearance of the source or target decorator by using the property such as StrokeColor, Strokewidth, StrokeDashArray, and Fill.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[TargetDecorator = new ConnectorTargetDecorator()
            {
                Shape = DecoratorShapes.Arrow,
                //Defines the style of decorator
                Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Width">
            <summary>
            Gets or sets the width of the decorator.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramNodeFixedUserHandle">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
            <example>
            <remarks>
            The user handles are icons that are placed around the node or connector to run the frequently used commands.
            </remarks>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                  TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                  //Specify the segments types as straight.
                  Type = Segments.Straight,
                  Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
                  //Defines mouse over tooltip for a connector
                  Tooltip = new ConnectorTooltip()
                  {
                    //Sets the content of the tooltip
                    Content = "Connector1",
                    //Sets the position of the tooltip
                    Position = Syncfusion.Blazor.Popups.Position.BottomRight,
                    //Sets the tooltip position relative to the connector
                    RelativeMode = TooltipRelativeMode.Object
                  }
                };
               ConnectorCollection.Add(DiagramConnector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNodeFixedUserHandle.#ctor">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeFixedUserHandle.Margin">
            <summary>
            Specifies the space that the fixed user handle has to be moved from its actual position.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[   FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                    {
                      new DiagramNodeFixedUserHandle() { Id = "user1", Height = 20, Width = 20, Visibility = true,Margin = new UserHandleMargin() { Right = 20, Bottom = 20 }, Offset = new IconOffset() { X = 1, Y = 0 },CornerRadius = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                    },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeFixedUserHandle.Offset">
            <summary>
            Specifies the position of the node fixed user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
            <remarks>
            The user handles are icons that are placed around the node or connector to run the frequently used commands.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px"  Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>() { };
               protected override void OnInitialized()
               {
                 DiagramConnector connector1 = new DiagramConnector()
                 {
                   // Unique name for the connector
                   Id = "connector1",
                   // Source and Target node's name to which connector needs to be connected.
                   SourcePoint = new ConnectorSourcePoint() { X = 200, Y = 100 },
                   TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 },
                   Type = Segments.Orthogonal,
                   FixedUserHandles = new ObservableCollection<DiagramConnectorFixedUserHandle>()
                   {
                    new DiagramConnectorFixedUserHandle() { Id = "user2",Height = 20, Width = 20, Offset = 1,Fill = "red",Visibility = true, Alignment = AnnotationAlignment.After, Displacement ={ X = 10,Y = 10 },CornerRadius = 4, HandleStrokeColor = "green" , HandleStrokeWidth = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                   },
                  };
                 ConnectorCollection.Add(connector1);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle.#ctor">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle.Offset">
            <summary>
            Specifies the position of the connector fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle.Displacement">
            <summary>
            Specifies the displacement of an fixed user handle from its actual position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle.Alignment">
            <summary>
            Specifies the segment alignment of the fixed user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramGradient">
            <summary>
            It allows the user to define and apply the gradient effect.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">There are two types of gradients as follows</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Linear Gradient. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Radial Gradient. </td>
            </tr>
            <tr>
            <td style = "border: none"> The following code demonstrates, how to define the Linear Gradient and its properties.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
               // A node is created and stored in nodes array.
               DiagramNode Node = new DiagramNode()
               {
                 // Position of the node
                 OffsetX = 250,
                 OffsetY = 250,
                 // Size of the node
                 Width = 100,
                 Height = 100,
                 Style = new NodeShapeStyle()
                 {
                    Gradient = new DiagramGradient()
                    {
                     //Start point of linear gradient
                     X1 = 0,
                     Y1 = 0,
                     //End point of linear gradient
                     X2 = 50,
                     Y2 = 50,
                     //Sets an array of stop objects
                     Stops = new ObservableCollection<DiagramsGradientStop>()
                     {
                        new DiagramsGradientStop(){ Color = "white", Offset = 0},
                        new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
                      },
                      Type = GradientType.Linear
                    }
                  },
                };
                NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramGradient.#ctor">
            <summary>
            It allows the user to define and apply the gradient effect.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Cx">
            <summary>
            Specifies the center point of the outer circle of the radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Cy">
            <summary>
            Specifies the center point of the outer circle of the radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Fx">
            <summary>
            Specifies the center point of the inner circle of the radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Fy">
            <summary>
            Specifies the center point of the inner circle of the radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Id">
            <summary>
            Specifies the Id of the gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.R">
            <summary>
            Specifies the radius of a radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Stops">
            <summary>
            Specifies the color and a position, where the previous color transition ends, and a new color transition starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Type">
            <summary>
            Specifies the type of gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.X1">
            <summary>
            Specifies the start point of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.X2">
            <summary>
            Specifies the start point of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Y1">
            <summary>
            Specifies the endpoint of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Y2">
            <summary>
            Specifies the endpoint of the Linear gradient.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramLayer">
            <summary>
            Represents to organize related shapes on a diagram.
            </summary>
            <remarks>
            A layer is a named category of shapes. By assigning shapes to different layers, the user can selectively view, remove, and lock different categories of shapes.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramLayer.#ctor">
            <summary>
            Represents to organize related shapes on a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.AddInfo">
            <summary>
            Allows the user to store the additional information about the Layer.
            </summary>
            <remarks>
            The additional information can be stored in any type while serializing and can be retrieved whenever the user needs it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.Id">
            <summary>
            Specifies the unique id of the layer.
            </summary>
            <remarks>
            Layer Id needs to be unique to use. Users should not provide the same id to another layer.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.Lock">
            <summary>
            Enables or disables the editing of objects in a specific layer.
            </summary>
            <remarks>
            This property is used to prevent or allow changes to the element dimension and position.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.Objects">
            <summary>
            Specifies objects which are added to a specific layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.Visible">
            <summary>
            Control the visibility of the elements assigned to the layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.ZIndex">
            <summary>
            Specifies the visual order of the layer.
            </summary>
            <remarks>
            The property specifies the stack order of the layer. A node with greater stack order is always in front of a Layer with a lower stack order.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramLayout">
            <summary>
            Represents the class to arrange the nodes and connectors in a tree structure.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">There are various layout modes available for user`s, they are as follows </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Hierarchical layout </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Organization chart </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Mind Map layout</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Radial tree</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Symmetric layout</td>
            </tr>
            <tr>
            <td style = "border: none">6.   Complex hierarchical tree layout</td>
            </tr>
            <tr>
            <td style = "border: none">The following code demonstrates, how to define the Hierarchical layout and its properties.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram id="diagram" Height="600px" Nodes="@NodeCollection" @ref="@Diagram" Connectors="@ConnectorCollection" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
            </SfDiagram>
            @code {
              SfDiagram Diagram;
              public async Task DownloadDiagram()
              {
             string data = await Diagram.SaveDiagram();
              }
              ObservableCollection<DiagramNode>
                  NodeCollection;
              ObservableCollection<DiagramConnector>
                 ConnectorCollection;
              //Uses layout to auto-arrange nodes on the diagram page
              DiagramLayout LayoutValue = new DiagramLayout()
              {
                   //Sets layout type as HierarchicalTree...
                   Type = LayoutType.HierarchicalTree,
                   VerticalSpacing = 40,
                   HorizontalSpacing = 40,
              };
              //Sets the default properties for nodes
              DiagramNode NodeDefaults = new DiagramNode()
              {
                Height = 40,
                Width = 100,
                //Initializing the default node's shape style
                Style = new NodeShapeStyle() { Fill = "darkcyan", StrokeWidth = 3, StrokeColor = "Black" },
                Annotations = new ObservableCollection<DiagramNodeAnnotation()
                {
                    new DiagramNodeAnnotation() { Style = new AnnotationStyle() { Color = "white", Bold = true }, }
                }
               };
               //Sets the default properties for the connectors
               DiagramConnector ConnectorDefaults = new DiagramConnector()
               {
                 Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
               };
               protected override void OnInitialized()
               {
                 //Initializing node and connectors
                 NodeCollection = new ObservableCollection<DiagramNode>()
                  {  new DiagramNode(){Id="node1",Annotations = new ObservableCollection<DiagramNodeAnnotation>
                     (){new DiagramNodeAnnotation(){Content="Steve-Ceo"}}},
                     new DiagramNode(){Id="node2",Annotations = new ObservableCollection<DiagramNodeAnnotation>
                     (){new DiagramNodeAnnotation(){Content="Kevin-Manager"}}},
                     new DiagramNode(){Id="node3",Annotations = new ObservableCollection<DiagramNodeAnnotation>
                     (){new DiagramNodeAnnotation(){Content="Peter-Manager"}}},
                   };
                  ConnectorCollection = new ObservableCollection<DiagramConnector()
                 {
                    new DiagramConnector(){Id="connector1",SourceID="node1",TargetID="node2"},
                    new DiagramConnector(){Id="connector2",SourceID="node1",TargetID="node3"},
                  };
                }
             }
            ]]>
            </code>
            </example>
            <summary>
            Represents the class to arrange the nodes and connectors in a tree structure.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramLayout.#ctor">
            <summary>
            Represents the class to arrange the nodes and connectors in a tree structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Bounds">
            <summary>
            Aligns the layout within the given bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.ConnectionDirection">
            <summary>
            Specifies the Connection segment direction, by default it`s auto.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following list shows the ConnectionDirection types.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Auto - Defines the first segment direction based on the type of layout </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Orientation - Defines the first segment direction based on the orientation of the layout. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Custom - Defines the first segment direction dynamically by the user.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.ConnectorSegments">
            <summary>
            Specifies whether the segments must be customized based on the layout or not.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following list shows the ConnectionSegments types.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Default - Routes the connectors like a default diagram.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Layout - Routes the connectors based on the type of the layout. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.EnableAnimation">
            <summary>
            Enables/Disables animation option when a node is expanded/collapsed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[protected override void OnInitialized()
            {
             LayoutValue = new DiagramLayout()
             {
              Type = LayoutType.HierarchicalTree,
              VerticalSpacing = 30,
              HorizontalSpacing = 30,
              EnableAnimation = true,
              LayoutInfo = this.LayoutInfo
             };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.EnableRouting">
            <summary>
            Enable / Disable connector routing for the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.FixedNode">
            <summary>
            Sets the name of the node concerning which all other nodes will be translated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.HorizontalAlignment">
            <summary>
            Describes how the layout should be positioned or stretched in HorizontalAlignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.ConnectionPointOrigin">
            <summary>
            connect the connector to node without overlapping in automatic layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Arrangement">
            <summary>
            Child nodes will be arranged in linear way Or Non linear way in complex layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.HorizontalSpacing">
            <summary>
            Specifies the space that must be horizontally left between the nodes. It is 30, by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.LayoutInfo">
            <summary>
            Sets the layout properties using node property.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[TreeInfo LayoutInfo = new TreeInfo()
             {
               CanEnableSubTree = true,
               Orientation = SubTreeOrientation.Horizontal
              };
             protected override void OnInitialized()
             {
               LayoutValue = new DiagramLayout()
              {
                Type = LayoutType.HierarchicalTree,
                VerticalSpacing = 30,
                HorizontalSpacing = 30,
                EnableAnimation = true,
                LayoutInfo = this.LayoutInfo
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Margin">
            <summary>
            Specifies the space between the viewport and the layout. By default {left:50, top:50, right:0, bottom:0}.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramLayout LayoutValue = new DiagramLayout()
            {
              Type = LayoutType.ComplexHierarchicalTree,
              HorizontalSpacing = 40,
              VerticalSpacing = 40,
              Orientation = LayoutOrientation.TopToBottom,
              Margin = new LayoutMargin() { Left = 20, Top = 20 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.MaxIteration">
            <summary>
            Sets the maximum no of iteration of the layout. It is 30, by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Orientation">
            <summary>
            Specifies the orientation of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Root">
            <summary>
            Specifies the parent node of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.SpringFactor">
            <summary>
            Specifies the edge attraction and vertex repulsion forces. More sibling nodes repel each other.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.SpringLength">
            <summary>
            Sets how long edges should be, ideally of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Type">
            <summary>
            This type property is used to define the type of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.VerticalAlignment">
            <summary>
            Describes how the layout should be positioned or stretched in VerticalAlignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.VerticalSpacing">
            <summary>
            Specifies the space that must be Vertically left between the nodes. It is 30, by default.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramMargin">
            <summary>
            Specifies the space to be left from an element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramMargin.#ctor">
            <summary>
            Specifies the space to be left from an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMargin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMargin.Left">
            <summary>
            It sets the space to be left from the left side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMargin.Right">
            <summary>
            It sets the space to be left from the right side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMargin.Top">
            <summary>
            It sets the space to be left from the top side of the parent of an element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramMethodArguments">
            <summary>
            Represents the behavior of the uml class method.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
                //Defines diagram's Node collection
                public ObservableCollection<DiagramNode> NodeCollection { get; set;
                protected override void OnInitialized()
                {
                  NodeCollection = new ObservableCollection<DiagramNode>();
                  DiagramNode Node = new DiagramNode()
                  {
                     Id = "Patient",
                     OffsetX = 200,
                     OffsetY = 200,
                     Shape = new DiagramShape()
                     {
                      Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                      Classifier = ClassifierShape.Interface,
                      //Define interface object
                      InterfaceShape = new DiagramUmlInterface()
                      {
                         Name = "Patient",
                         //Define interface attributes
                         Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                         {
                            new DiagramUmlClassAttribute() { Name = "owner", Type = "String[*]" }
                          },
                          //Define interface methods
                          Methods = new ObservableCollection<DiagramUmlClassMethod>()
                          {
                            new DiagramUmlClassMethod()
                            {
                              Name = "deposit",
                              Parameters = new ObservableCollection<DiagramMethodArguments>()
                              {
                                new DiagramMethodArguments(){Name = "amount", Type = "Dollars" }
                              }
                            }
                          }
                        }
                      }
                    };
                    //Add node
                    NodeCollection.Add(Node);
                 }
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramMethodArguments.#ctor">
            <summary>
            Represents the behavior of the uml class method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMethodArguments.Name">
            <summary>
            Specifies the name of the method argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMethodArguments.Style">
            <summary>
            Specifies the shape style of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMethodArguments.Type">
            <summary>
            This type property is used to define the type of the DiagramMethodArguments.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramNode">
            <summary>
            Represents the graphical objects that are used to visually represent the geometrical information.
            </summary>
            <remarks>
            Nodes are graphical objects that are used to visually represent the geometrical information. A node can be resized by dragging the user handle proportionally or by selecting a side to make the shape taller or wider.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                 // A node is created and stored in the nodes collection.
                 DiagramNode Node = new DiagramNode()
                 {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                  };
                  // Add node
                  NodeCollection.Add(Node);
                }
             }
            ]]>
            </code>
            </example>
            <summary>
            Represents the graphical objects used to visually represent the geometrical information, process flow, internal business procedure, entity, or any other kind of data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNode.#ctor">
            <summary>
            Represents the graphical objects that are used to visually represent the geometrical information.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.AddInfo">
            <summary>
            It allows the user to store additional information about the nodes.
            </summary>
            <remarks>
            Enables the user to store data of any datatype.  It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public List<NodeAddInfo> AddInfo = new List<NodeAddInfo>()
             {
               new NodeAddInfo() { Content = "NodeContent", ParentID = "diagram" }
             };
             protected override void OnInitialized()
             {
                DiagramNode Node = new DiagramNode()
               {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    AddInfo = AddInfo
                };
                // Add node
                NodeCollection.Add(Node);
              }
            public class NodeAddInfo
            {
               public string ParentID;
               public string Content;
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Annotations">
            <summary>
            It allows the user to store the collection of textual annotations of the node.
            </summary>
            <remarks>
            Annotation is used to textually represent an object with a string that can be edited at runtime. Users can able to modify the annotation Style, Visibility, Width, Height, and content of the annotation.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.FixedUserHandles">
            <summary>
            It allows the user to store the collection of Fixed User Handles of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.BackgroundColor">
            <summary>
            Get or Set node BackGroundColor, by default its Transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Branch">
            <summary>
            Specifies Mindmap Branch.
            </summary>
            <remarks>
            Users can able to set the Branch based on its parent element.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public class MindMapDetails
            {
              public string Branch { get; set; }
            }
            public object DataSource = new List<object>()
            {
              new MindMapDetails() { Id= "1", Label="Creativity", ParentId ="", Branch = "Root" },
              new MindMapDetails() { Id= "2",  Label="Brainstorming", ParentId ="1", Branch = "subLeft" },
              new MindMapDetails() { Id= "3",  Label="Complementing", ParentId ="1", Branch = "subLeft" },
              new MindMapDetails() { Id= "4",  Label="Sessions", ParentId ="1", Branch = "subRight" },
              new MindMapDetails() { Id= "5",  Label="Complementing", ParentId ="1", Branch = "subRight" },
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Children">
            <summary>
            Represents the children in a group element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.CollapseIcon">
            <summary>
            Represents the state of the node.
            </summary>
            <remarks>
            CollapseIcon can be aligned relative to the node boundaries. User can able to Customize CollapseIcon using BorderColor, BorderWidth, Fill, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ColumnIndex">
            <summary>
            Used to define an index of the column in the grid, by default it is undefined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ColumnSpan">
            <summary>
            Merge the column use the property in the grid container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Constraints">
            <summary>
            The constraints property allows you to enable or disable certain behaviors or the node. Annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Data">
            <summary>
            Nodes can be generated automatically with the information provided through the data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.DragSize">
            <summary>
            Defines the size of a drop symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.SymbolInfo">
            <summary>
            Defines the information of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ExcludeFromLayout">
            <summary>
            Defines whether the node should be positioned automatically or not. Applicable, if the layout option is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ExpandIcon">
            <summary>
            Represents the state of the node.
            </summary>
            <remarks>
            ExpandIcon can be aligned relative to the node boundaries. User can able to Customize ExpandIcon using BorderColor, BorderWidth, Fill, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Flip">
            <summary>
            A flip is performed to give the mirror image of the original element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Height">
            <summary>
            Gets or sets the node height.
            </summary>
            <remarks>
            The height of a node does not include borders or margins.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.HorizontalAlignment">
            <summary>
            Describes how a node should be positioned or stretched in HorizontalAlignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Id">
            <summary>
            Returns the unique id of the node.
            </summary>
            <remarks>
            Node Id needs to be unique to use. While creating a node, the user should not provide the same id to other nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.IsExpanded">
            <summary>
            Defines Whether the node is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.LayoutInfo">
            <summary>
            Sets the layout properties using node property.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[TreeInfo LayoutInfo = new TreeInfo()
             {
               CanEnableSubTree = true,
               Orientation = SubTreeOrientation.Horizontal
              };
              protected override void OnInitialized()
               {
                 LayoutValue = new DiagramLayout()
                 {
                    Type = LayoutType.HierarchicalTree,
                    VerticalSpacing = 30,
                    HorizontalSpacing = 30,
                    EnableAnimation = true,
                    LayoutInfo = this.LayoutInfo
                 };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Margin">
            <summary>
            Specifies the space around the node. The default values for the margin are set to 0 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.MaxHeight">
            <summary>
            Sets the maximum height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.MaxWidth">
            <summary>
            Sets the maximum width of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.MinHeight">
            <summary>
            Sets the minimum height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.MinWidth">
            <summary>
            Sets the minimum width of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.OffsetX">
            <summary>
            Sets the X-coordinate of the position of the node, by default its 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.OffsetY">
            <summary>
            Sets the Y-coordinate of the position of the node, by default its 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Pivot">
            <summary>
            Sets the reference point, that will act as the offset values (offsetX, offsetY) of a node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Pivot values range from 0 to 1. By default, the Pivot values are set to X= 0.5 and Y=0.5.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When X= 0 and Y = 0, OffsetX and OffsetY values are considered as the top-left corner of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When X= 0.5 and Y = 0.5, OffsetX and OffsetY values are considered as the node’s center point.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   When X= 1 and Y = 1, OffsetX and OffsetY values are considered as the bottom-right corner of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Ports">
            <summary>
            Represents a port or connection point in the node. points of nodes/connectors.
            </summary>
            <remarks>
            Ports act as the connection points of node and allow them to create connections with only those specific points. There may be any number of ports in a node. You can able to modify the Ports appearance, visibility, positioning, and can add custom shapes to it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.PreviewSize">
            <summary>
            Defines the size of the symbol preview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.RotateAngle">
            <summary>
            Sets the rotate angle of the node, by default it is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.RowIndex">
            <summary>
            Used to define an index of the row in the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.RowSpan">
            <summary>
            Merge the row use the property in the grid container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Shadow">
            <summary>
            Defines the shadow of a node.
            </summary>
            <remarks>
            Shadow effect to a node is disabled, by default. It can be enabled with the constraint’s property of the node. The Angle, Distance, and Opacity of the shadow can be customized with the shadow property of the node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Shape">
            <summary>
            Defines the geometrical representation of a node.
            </summary>
            <remarks>
             A provided option such as BasicShape, PathModel, BPMNShapemodel, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Style">
            <summary>
            Provides the options to personalize or customize the appearance of the node.
            </summary>
            <remarks>
            A provided option such as Fill, StrokeColor, StrokeWidth, Gradient, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramNode Node = new DiagramNode()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                // Add node
                Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeDashArray = "5,5", StrokeColor = "red", StrokeWidth = 2 },
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Tooltip">
            <summary>
            Specifies the message that is displayed when the mouse hovers over a node.
            </summary>
            <remarks>
            By default, Tooltip will provide the size, position, and angle related information while dragging, resizing, and rotating.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[//...
            public DiagramTooltip Tooltip = new DiagramTooltip()
            {
               Content = "Nodes",
               Position = Syncfusion.Blazor.Popups.Position.TopLeft
             };
              DiagramNode Node = new DiagramNode()
              {
               Id = "node1",
               Width = 100,
               Height = 100,
               OffsetX = 200,
               OffsetY = 200,
               Style = new NodeShapeStyle() { StrokeColor = "#6BA5D7", Fill = "#6BA5D7" },
               Constraints = NodeConstraints.Default | NodeConstraints.Tooltip,
               }
              //...
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.VerticalAlignment">
            <summary>
            Describes how a node should be positioned or stretched in VerticalAlignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Visible">
            <summary>
            Enables or disables the visibility of the node, by default its true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Width">
            <summary>
            Gets or sets the node Width.
            </summary>
            <remarks>
            The width of a node does not include borders or margins.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ZIndex">
            <summary>
            Defines the visual order of the node in DOM.
            </summary>
            <remarks>
            The property specifies the stack order of the node. A node with greater stack order is always in front of a node with a lower stack order.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNode.BeginUpdate">
            <summary>
            Prevents redrawing of model on the client side.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNode.EndUpdate">
            <summary>
            Enable redrawing of model on the client side.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation">
            <summary>
            Represents the block of text displayed over the node.
            </summary>
            <remarks>
            Annotation is used to present some textual data for the node which can be edited at runtime. Multiple annotations can be added to a node. User can able to modify the annotation style, visibility, width, height, and content of the annotation through code or visually.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
             protected override void OnInitialized()
             {
             // A node is created and stored in the node array.
             DiagramNode Node = new DiagramNode()
                {
                   // Position of the node
                   OffsetX = 250,
                   OffsetY = 250,
                   // Size of the node
                   Width = 100,
                   Height = 100,
                   Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                   // Initialize port collection
                   Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                   {
                     // An annotation is created and stored in an Annotation collection of Node.
                     new DiagramNodeAnnotation() { Content = "Annotation" }
                   }
                  };
                 };
                 NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.#ctor">
            <summary>
            Represents the block of text displayed over the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.AddInfo">
            <summary>
            Specifies the additional information about annotation.
            </summary>
            <remarks>
            Enables the user to store data of any datatype. It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <summary>
            Represents the graphical objects that are used to visually represent the geometrical information.
            </summary>
            <remarks>
            Nodes are graphical objects that are used to visually represent the geometrical information. A node can be resized by dragging the user handle proportionally or by selecting a side to make the shape taller or wider.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public class AddInfo{
              public string Description{get, set}}
             // An annotation is created and stored in an annotation collection of the node.
             Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
             new DiagramNodeAnnotation()
             Content = "Annotation"
             AddInfo = new AddInfo() { Description = “Annotation1”}
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.AnnotationType">
            <summary>
            This property allows the user to define a type of annotation template.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set for the value of the Annotation,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   String - Annotation template to be in the string.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Template - Annotation template to be in HTML Content. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Constraints">
            <summary>
            The constraints property allows the user to enable or disable certain behaviors of the label. For instance, the user can disable annotation editing and able to make it as read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Content">
            <summary>
            Gets or sets the textual description of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.DragLimit">
            <summary>
            This property allows the user to limit the dragging of node labels to a certain distance. By default, DragLimit is set to 20 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[// An annotation is created and stored in an annotation collection of the node.
            Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
            new DiagramNodeAnnotation()
            Content = "Annotation"
            DragLimit = new NodeAnnotationDragLimit() { Top = 20, Left = 20 ,Right = 20, Bottom = 20}
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Height">
            <summary>
            Gets or sets the height of the annotations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.HorizontalAlignment">
            <summary>
            Describes how an annotation element is horizontally positioned or stretched within a node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options  is used to defining the Horizontal Alignment of the annotation</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Hyperlink">
            <summary>
            This property allows the user to add a hyperlink to the node label.
            </summary>
            <remarks>
            User can able to show hyperlink as an annotation content or alternate display text for the hyperlink
             In the following image, you can see the alternate display text for the hyperlink has set as an annotation content.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Id">
            <summary>
            Returns the unique id of an annotation.
            </summary>
            <remarks>
            Annotation Id needs to be unique to use. When creating a label, the user should not provide the same id to other labels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Margin">
            <summary>
            Specifies the space around the annotation content. The default values for the Margin are set to 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Annotations = new ObservableCollection<DiagramNodeAnnotation> ()
             {
              //An annotation is created and stored in the Annotations collection of Node.
              new DiagramNoderAnnotation()
              {
                Content = "Annotation",
                Margin = new NodeAnnotationMargin() { Top = 10, Left = 10, Bottom = 10, Right = 10 }
              }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Offset">
            <summary>
            Specifies the position of the label relative to the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1. By default, the offset values are set to X= 0.5 and Y=0.5. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the label will be position at the top left corner of the node.    </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the label will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the label will be position at the bottom right corner of the node.   </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.RotateAngle">
            <summary>
            Gets or sets the rotation angle of the label.
            </summary>
            <remarks>
            Node labels can be rotated either by code-behind or mouse interaction. By default, the rotate angle will be 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Style">
            <summary>
            Defines the appearance of the text.
            </summary>
            <remarks>
            User can change the font style of the label with the font specific properties such as  font family, font size, font color, bold, etc., The fill and border appearances of the text can also be customized with appearance specific properties of label such as fill color, border color, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Template">
            <summary>
            This property represents the template’s content of the label. The User can define any HTML content as a template.
            </summary>
            <remarks>
            Users can set the label content as a template instead of textual content or hyperlink, by using template property. For that SVG/HTML content should be defined as a string in an annotation’s template property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Type">
            <summary>
            This property is used to define the positioning behavior of the annotation. It can be either “Shape” or “Path”.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set for the Type property of the annotation,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   shape - sets the annotation type to shape. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Path – sets the annotation type to the path.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.VerticalAlignment">
            <summary>
            Describes how an annotation element is vertically positioned or stretched within a node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the vertical Alignment of the annotation</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Top - Aligns the diagram element at the top of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Bottom - Aligns the diagram element at the bottom of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Center - Aligns the diagram element at the center of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Auto - Aligns the diagram element based on the characteristics of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Visibility">
            <summary>
            specifies the visibility of the annotation.
            </summary>
            <remarks>
            By default, visibility is set to true. If it is false, then the node annotation will not be visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Width">
            <summary>
            Gets or sets the width of an annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo">
            <summary>
            Represents the necessary information of a node�s children and the way to arrange them.
            </summary>
            <remarks>
            User can able to set chart orientations, chart types, and offset to be left between parent and child nodes.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
             <DiagramDataSource Id = "Id" ParentId="Team" DataSource="@DataSource" ></DiagramDataSource>
            </SfDiagram>
            @code {
              //Initializing layout
              DiagramLayout LayoutValue;
              protected override void OnInitialized()
              {
                 LayoutValue = new DiagramLayout()
                 {
                   //Sets layout type as OrganizationalChart...
                   Type = LayoutType.OrganizationalChart,
                   VerticalSpacing = 50,
                   HorizontalSpacing = 40,
                   //Initialize the layout info for the org chart layout
                   LayoutInfo = new TreeInfo
                   {
                     Orientation = SubTreeOrientation.Vertical,
                     CanEnableSubTree = true,
                    }
                  };
                }
                //Initializing node defaults
                DiagramNode NodeDefaults = new DiagramNode()
                {
                  Width = 150,
                  Height = 50,
                  Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Id = "label1", Style = new AnnotationStyle() { Color = "white" } }, },
                  Style = new NodeShapeStyle { Fill = "#6BA5D7", StrokeColor = "black", },
                  LayoutInfo = new DiagramNodeLayoutInfo()
                  {
                    Orientation = Orientation.Vertical,
                    Type = SubTreeAlignments.Right
                   }
               };
               //Initializing connector defaults
               DiagramConnector ConnectorDefaults = new DiagramConnector()
               {
                 Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                 Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7", StrokeWidth = 1 },
                 TargetDecorator = new ConnectorTargetDecorator()
                 {
                    Shape = DecoratorShapes.None,
                   Style = new DecoratorShapeStyle() { Fill = "#6BA5D7", StrokeColor = "#6BA5D7", },
                  }
                };
              public class OrgChartDataModel
              {
                 public string Id { get; set; }
                 public string Team { get; set; }
                 public string Role { get; set; }
               }
              public object DataSource = new List<object>()
              {
                new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                new OrgChartDataModel() { Id= "2", Role= "Human Resource Manager", Team= "1" },
                new OrgChartDataModel() { Id= "3", Role= "Design Manager", Team= "1" },
                new OrgChartDataModel() { Id= "4", Role= "Operation Manager", Team= "1" },
                new OrgChartDataModel() { Id= "5", Role= "Marketing Manager", Team= "1" }
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.#ctor">
            <summary>
            Represents the necessary information of a node’s children and the way to arrange them.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Assistants">
            <summary>
            Specifies a child item that has a different relationship with the parent node.
            </summary>
            <remarks>
            A node can be specified as an assistant of its parent by adding it to the assistant’s property of the argument. They are laid out in a dedicated part of the tree.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[LayoutInfo = new TreeInfo
              {
                Orientation = SubTreeOrientation.Vertical,
                Offset = -20,
                CanEnableSubTree = true,
                //provides an assitant details for the root node
                GetAssistantDetails = new AssistantsDetails()
                {
                  Root = "General Manager",
                  Assistants = new string[] {“Assistant Manager" }
                 }
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Children">
            <summary>
            Specifies the children for the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.EnableRouting">
            <summary>
            LineRouting constraints allow to enable line routing.
            </summary>
            <remarks>
            This Reroutes the connector segment whenever the node is placed over it. Routing can be possible only if the connector type is set to orthogonal.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.HasSubTree">
            <summary>
            Specifies whether the node has subTree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Level">
            <summary>
            Arranges the leaf level child nodes in multiple rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Offset">
            <summary>
            Specifies the position of the node to be arranged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Orientation">
            <summary>
            Arranges the child nodes to the parent based on its type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Rows">
            <summary>
            Specifies the row for the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Type">
            <summary>
            Specifies the collection of subtree alignments in a layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramPoint">
            <summary>
            Represents the point in a diagram where a node/connector to be placed in it.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPoint.#ctor">
            <summary>
            Represents the point in a diagram where a node/connector to be placed in it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPoint.X">
            <summary>
            Sets the X-coordinate of a position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPoint.Y">
            <summary>
            Sets the Y-coordinate of a position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramPort">
            <summary>
            Represents a port or connection point in the node.
            </summary>
            <remarks>
            Ports act as the connection points of node and allow them to create connections with only those specific points. There may be any number of ports in a node. You can able to modify the Ports appearance, visibility, positioning, and can add custom shapes to it.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
             </SfDiagram>
             @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
               // A node is created and stored in nodes array.
                DiagramNode Node = new DiagramNode()
                {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  // Initialize port collection
                  Ports = new ObservableCollection<DiagramPort>() {
                  new DiagramPort() {
                       Offset = new NodePortOffset() { X = 0.5, Y = 0.5 },
                       Visibility = PortVisibility.Visible,
                       Style= new PortShapeStyle(){ Fill="gray”},
                   }},
                  };
                 NodeCollection.Add(Node);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPort.#ctor">
            <summary>
            Represents a port or connection point in the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.AddInfo">
            <summary>
            It allows the user to store additional information about the ports.
            </summary>
            <remarks>
            Enables the user to store data of any datatype.  It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public class AdditionalInfo
             {
               public string Description { get; set; }
             };
            new DiagramPort()
            {
                Offset = new NodePortOffset() { X = 0.5, Y = 0.5 },
                Style = new PortShapeStyle()
                {Fill = "gray”},
             AddInfo = new AdditionalInfo() { Description = "Port1" }
             }
             },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Constraints">
            <summary>
            The constraints property allows you to enable or disable certain behaviors or the port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Height">
            <summary>
            Gets or sets the port height.
            </summary>
            <remarks>
            The height of a port does not include borders or margins and by default its 12 px.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.HorizontalAlignment">
            <summary>
            Describes how a child element is horizontally positioned or stretched within a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Id">
            <summary>
            Returns the unique id of the port.
            </summary>
            <remarks>
             Port Id needs to be unique to use. While creating a port, the user should not provide the same id to other ports.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.InEdges">
            <summary>
            Returns the collection of incoming connector IDs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Margin">
            <summary>
            Specifies the space from the actual offset values of the port. The default values for the Margin are set to 0 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Offset">
            <summary>
            Specifies the position of the port concerning the boundaries of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1. By default, the offset values are set to X= 0.5 and Y=0.5.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When X= 0 and Y = 0, then the port will be position at the top left corner of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When X= 0.5 and Y = 0.5, then the port will be position at the center of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When X= 1 and Y = 1, then the port will be position at the bottom right corner of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.OutEdges">
            <summary>
            Specifies the collection outgoing connectors id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.PathData">
            <summary>
            Specifies the custom graphical path (shape) of the Port.
            </summary>
            <remarks>
            To create a custom shaped port, the user must set the shape as ‘custom’ and then set the PathData.   (A custom graphics path is a set of connected lines, curves, and other simple graphics objects, including rectangles, ellipses, and text. A path works as a single graphics object, so an effect applied to the graphics path will be applied to the port.)
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Shape">
            <summary>
            Specifies the shape of the port, by default it will Square.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The below list of shape types is used to define the port shape.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   X - Sets the shape as X.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Circle - Sets the shape as Circle. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Square - Sets the shape as Square. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Custom - Sets the shape as Custom..</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Style">
            <summary>
            Provides the options to personalize or customize the appearance of port.
            </summary>
            <remarks>
            A provided option such as Fill, StrokeColor, StrokeWidth, Gradient, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramPort() {
              Id = "port1",
              Offset = new NodePortOffset() { X = 0, Y = 0.5 },
              Visibility = PortVisibility.Visible,
              //Set the style for the port
              Style= new PortShapeStyle() { Fill = "red", StrokeColor = "black", StrokeWidth = 2},
              // Sets the shape of the port as Circle
              Width= 12, Height=12, Shape= PortShapes.Circle
              }
             },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.VerticalAlignment">
            <summary>
            Describes how a port element is vertically positioned or stretched within a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Visibility">
            <summary>
            specifies the Visibility of the port.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">  The below list of options is used to control the visibility of the ports. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Visible - Default value. The port is visible</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Hidden - The port is hidden.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Hover - Shows the port when the mouse hovers a node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Connect - Shows the port when a connection endpoint is dragged over a node.  </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Width">
            <summary>
            Gets or sets the width of the port.
            </summary>
            <remarks>
            The width of a port does not include borders or margins and by default its 12 px.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramSelectedItems">
            <summary>
            Represents the collection of selected items in the diagram.
            </summary>
            <summary>
            Represents the collection of selected items in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.#ctor">
            <summary>
            Represents the collection of selected items in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Connectors">
            <summary>
            Get the collection of selected connector objects in the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Constraints">
            <summary>
            The constraints property is used to enable or disable certain behaviors of the Selected Items.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    This property controls the visibility of the selector. </td>
            </tr>
            <tr>
            <td style = "border: none">•    Users can able to control the resize, user handles behaviors, etc.</td>
            </tr>
            <tr>
            <td style = "border: none">•     By default, the constraints will be SelectorConstraints.All. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Height">
            <summary>
            Gets the height of the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Nodes">
            <summary>
            Gets the collection of selected node objects in the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.OffsetX">
            <summary>
            Gets the X coordinate position of the selected region.  Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.OffsetY">
            <summary>
            Gets the Y coordinate position of the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Pivot">
            <summary>
            Gets the position(X,Y) to the selector .By default, this will be (0.5,0.5) to the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.RotateAngle">
            <summary>
            Gets the rotate angle of the selection area. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.RubberBandSelectionMode">
            <summary>
            Specifies whether the diagram objects can be selected, when the selection region intersects the objects or selected only when the complete object's bounds inside the selection region.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">This property has two options. They are  </td>
            </tr>
            <tr>
            <td style = "border: none">•    CompleteIntersect </td>
            </tr>
            <tr>
            <td style = "border: none">•    PartialIntersect  </td>
            </tr>
            <tr>
            <td style = "border: none">By default, this Mode will be CompleteIntersect. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.UserHandles">
            <summary>
            Defines the collection of UserHandle objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Width">
            <summary>
            Gets the width of the selection region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramsGridLines">
            <summary>
            Represents the visual guidance while dragging or arranging the objects.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px">
               @* Customize the appearance of the grid lines *@
               <DiagramSnapSettings Constraints = "SnapConstraints.ShowLines" >
                  < HorizontalGridlines LineColor="blue" LineDashArray="2,2" LineIntervals="@LineIntervals">
                  </HorizontalGridlines>
                  <VerticalGridlines LineColor = "blue" LineDashArray="2,2" LineIntervals="@LineIntervals">
                  </VerticalGridlines>
             </DiagramSnapSettings>
            </SfDiagram>
            @code{
              //Sets the line intervals for the gridlines
              public double[] LineIntervals { get; set; } = new double[] {
                        1.25, 14, 0.25, 15, 0.25, 15, 0.25, 15, 0.25, 15
            };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines._jsNamespace">
            <summary>
            Represents the visual guidance while dragging or arranging the objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.DotIntervals">
            <summary>
            A pattern of gaps that defines a set of horizontal/vertical grid dots.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.LineColor">
            <summary>
            Sets the line color of gridlines.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.LineDashArray">
            <summary>
            Defines the pattern of dashes and gaps used to stroke horizontal grid lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.LineIntervals">
            <summary>
            A pattern of lines and gaps that defines a set of horizontal/vertical gridlines.
            </summary>
            <remarks>
             In the line intervals collections, values at the odd places are referred to as the thickness of lines and values at the even places are referred to as the space between gridlines.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.SnapIntervals">
            <summary>
            Specifies a set of intervals to snap the objects. By default, the objects are snapped towards the nearest grid line.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsGridLines.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsGridLines.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsGridLines.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramShadow">
            <summary>
            Represents the shadow appearance of the objects.
            </summary>
            <remarks>
            By default, the shadow effect is disabled. It can be enabled with the constraint’s property.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[@using Syncfusion.Blazor.Diagrams
            @using System.Collections.ObjectModel
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                // A node is created and stored in nodes array.
                DiagramNode Node = new DiagramNode()
                {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    Constraints = NodeConstraints.Default | NodeConstraints.Shadow,
                    // Custom Shadow of the node
                    Shadow = new DiagramShadow()
                    {
                     Angle = 50,
                     Opacity = 0.8,
                     Distance = 9
                    }
                  };
                 NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramShadow.#ctor">
            <summary>
            Represents the shadow appearance of the objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShadow.Angle">
            <summary>
            Specifies the Angle of the shadow. By default, it is 45.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShadow.Color">
            <summary>
            Specifies the color of the shadow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShadow.Distance">
            <summary>
            Specifies the Distance of shadow. By default, it is 5px.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShadow.Opacity">
            <summary>
            Specifies the Opacity of shadow. The opacity value ranges from 0 to 1.  By default, it is 0.7.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramShape">
            <summary>
            Defines the shape for the diagram nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramShape.#ctor">
            <summary>
            Initialize the members of the shape for the diagram nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Activity">
            <summary>
            Defines the type of the BPMN Activity shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Align">
            <summary>
            Defines the alignment of the image within the node boundary.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Annotation">
            <summary>
            Defines the text of the bpmn annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Annotations">
            <summary>
            Defines the text of the bpmn annotation collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.BasicShape">
            <summary>
            Defines the type of the basic shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.BpmnShape">
            <summary>
            Represents the internal business procedure in a graphical notation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.ClassShape">
            <summary>
            Defines the text of the bpmn annotation collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Classifier">
            <summary>
            Defines the type of classifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Content">
            <summary>
            Defines the geometry of a native element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.CornerRadius">
            <summary>
            Sets the corner of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Data">
            <summary>
            Defines the geometry of a path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.DataObject">
            <summary>
            Defines the type of the BPMN DataObject shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.EnumerationShape">
            <summary>
            Defines the text of the bpmn annotation collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Event">
            <summary>
            Defines the type of the BPMN Event shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.FlowShape">
            <summary>
            Defines the type of the flow shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Gateway">
            <summary>
            Defines the type of the BPMN Gateway shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.InterfaceShape">
            <summary>
            Defines the text of the bpmn annotation collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Margin">
            <summary>
            Defines the space to be let between the node and its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Points">
            <summary>
            Defines the collection of points to draw a polygon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Scale">
            <summary>
            Defines the scale of the native element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Source">
            <summary>
            Defines the source of the image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.TextContent">
            <summary>
            Defines the text of the text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Type">
            <summary>
            Defines the type of node shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.UmlActivityShape">
            <summary>
            Defines the type of the UMLActivity shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramsRuler">
            <summary>
            Represents the behavior and appearance of the horizontal/vertical rulers for the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.Interval">
            <summary>
            Defines the number of intervals to be present on each segment of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.MarkerColor">
            <summary>
            Defines the color of the ruler marker brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.Orientation">
            <summary>
            Defines the orientation of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.SegmentWidth">
            <summary>
            Defines the textual description of the ruler segment, and the appearance of the ruler ticks of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.Thickness">
            <summary>
            Defines the height of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.TickAlignment">
            <summary>
            Defines and sets the tick alignment of the ruler scale.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsRuler.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsRuler.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsRuler.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramsTooltip">
            <summary>
            Represents the textual content that appears while the mouse is hovering  over an element of the diagram.
            </summary>
            <remarks>
            The Tooltip will be displayed, when dragging, resizing, rotating a node, and when the cursor hovers over any diagram elements.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="DiagramConstraints.Default | DiagramConstraints.Tooltip" Tooltip="@Tooltip">
              <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               //Defines diagram's node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines position of the tooltip
               public DiagramTooltip Tooltip = new DiagramTooltip()
               {
                  Content = "Nodes",
                  Position = Syncfusion.Blazor.Popups.Position.TopLeft
               };
               protected override void OnInitialized()
               {
                 NodeCollection = new ObservableCollection<DiagramNode>();
                 //Defines nodes
                 DiagramNode Node = new DiagramNode()
                 {
                  Id = "node1",
                  Width = 100,
                  Height = 100,
                  OffsetX = 200,
                  OffsetY = 200,
                  Style = new NodeShapeStyle() { StrokeColor = "#6BA5D7", Fill = "#6BA5D7" },
                  Constraints = NodeConstraints.Default | NodeConstraints.InheritTooltip,
                 };
                 NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip._jsNamespace">
            <summary>
            Represents the textual content that appears while the mouse is hovering  over an element of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Animation">
            <summary>
            This property allows the user to enable the animation to the tooltip.
            </summary>
            <remarks>
            To animate the tooltip specific animation effects are available, and it can be controlled by Animation property. This property allows the user to set some animation effects such as display, duration, zoom in, zoom out,etc., The following code shows how to define the Animation property of DiagramsTooltip.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[//.     .
            //.     .
             //Defines mouse over tooltip for a node
             Tooltip = new NodeTooltip()
             {
              Animation = new Syncfusion.Blazor.Popups.AnimationModel()
                {
                  //Animation settings to be applied on the tooltip, while it is being shown over the target.
                  Open = new Syncfusion.Blazor.Popups.TooltipAnimationSettings()
                  {
                    //Animation effect on the tooltip is applied during open and close actions.
                    Effect = Syncfusion.Blazor.Popups.Effect.ZoomIn,
                    //Duration of the animation that is completed per animation cycle.
                    Duration = 1000,
                    //Indicating the waiting time before the animation begins.
                    Delay = 0
                   },
                   //Animation settings to be applied on the tooltip, when it is closed.
                   Close = new Syncfusion.Blazor.Popups.TooltipAnimationSettings()
                   {
                     Effect = Syncfusion.Blazor.Popups.Effect.ZoomOut,
                     Duration = 500,
                     Delay = 0
                   }
                 }
              }
             //.     .
             //.    .
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Content">
            <summary>
            Defines the content of the Tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Height">
            <summary>
            Gets or sets the height of the tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.OpenOn">
            <summary>
            Specifies whether the tooltip can be open automatically or open manually using public API.
            </summary>
            <remarks>
            This property has two options, they are Auto and custom. By default, it will be Auto.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Position">
            <summary>
            Defines the position of the Tooltip.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    Tooltip can be aligned by using the DiagramsTooltip property. </td>
            </tr>
            <tr>
            <td style = "border: none">•    There are applicable positions such as TopLeft,  TopRight, BottomLeft, BottomRight, etc., where the tooltip can be displayed over the specific target elements. </td>
            </tr>
            <tr>
            <td style = "border: none">•    By default, the position of the tooltip will be TopLeft.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.RelativeMode">
            <summary>
            This property defines whether the tooltip has to displayed around the object or at the mouse position. By default, it will be Mouse.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.ShowTipPointer">
            <summary>
            Defines the tooltip has tip pointer or not. By default, it will be true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Width">
            <summary>
            Gets or sets the width of the tooltip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsTooltip.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsTooltip.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsTooltip.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramstrokeStyle">
            <summary>
            Represents the appearance of the connector stroke style.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramstrokeStyle.#ctor">
            <summary>
            Initialize the appearance of the connector stroke style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTextStyle">
            <summary>
            Represents the text style for an object.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
              //Defines diagram's node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               SnapConstraints snapConstraints;
               protected override void OnInitialized()
               {
                  snapConstraints = SnapConstraints.None;
                  NodeCollection = new ObservableCollection<DiagramNode>();
                  DiagramNode Node = new DiagramNode()
                  {
                    Id = "node1",
                    Width = 100,
                    Height = 100,
                    OffsetX = 100,
                    OffsetY = 100,
                    // Sets the annotation for the node
                    Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                    new DiagramNodeAnnotation() {Content = "Annotation Text",Style = new AnnotationStyle() {Color="black",Bold = true,Italic = true,TextDecoration=TextDecoration.Underline,FontSize = 12,FontFamily = "TimesNewRoman"  } }
                  },
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                };
                NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTextStyle.#ctor">
            <summary>
            Represents the text style for an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Bold">
            <summary>
            Specifies whether a font appears in bold or not. By default, it`s false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Color">
            <summary>
            Specifies the font color of a text. By default, it`s black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Fill">
            <summary>
            Sets the fill color of a shape/path. By default, it`s transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.FontFamily">
            <summary>
            Specifies the font type of a text. By default, it`s Arial.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.FontSize">
            <summary>
            Specifies the font size of a text. By default, it`s 12.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Italic">
            <summary>
            Enables/disables the italic style of a text. By default, it`s false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Opacity">
            <summary>
            Specifies the transparency level of the text. By default, it`s 1.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Opacity values are ranges from 0 to 1 are as follow as, </td>
            </tr>
            <tr>
            <td style = "border: none">•    0- completely transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    0.5- Partially transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    1- not transparent at all. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.StrokeColor">
            <summary>
            Gets or sets the stroke color of a text. By default, it`s black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.StrokeDashArray">
            <summary>
            Specifies the patterns of dashes and spaces to stroke the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.StrokeWidth">
            <summary>
            Specifies the stroke width of the text. By default, it`s 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.TextAlign">
            <summary>
            Specifies how they should be aligned within its bounds. By default, it`s set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.TextDecoration">
            <summary>
            Specifies how the text should be decorated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.TextOverflow">
            <summary>
            Specifies how to handle the text when it exceeds the given size. By default, it`s set to Wrap.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.TextWrapping">
            <summary>
            Specifies how the text should be wrapped when the text size exceeds some specific bounds. By default, it`s set to WrapWithOverflow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.WhiteSpace">
            <summary>
            Specifies how to white space and new line characters must be handled. By default, it`s set to CollapseSpace.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlClass">
            <summary>
            Sets or gets the behavior of the Uml class shapes.
            </summary>
            <remarks>
            Used to represent the static view of an application. The class diagrams are widely used in the modeling of object-oriented systems because they are the only UML diagrams that can be mapped directly with object-oriented languages. Diagram supports to generate the class diagram shapes from business logic.
            The following code demonstrates, how to define the DiagramUmlClass and its properties.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                  // . . .
                  Shape = new DiagramShape()
                  {
                    Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                    Classifier = ClassifierShape.Class,
                    //Define class object
                    ClassShape = new DiagramUmlClass()
                    {
                       Name = "Patient",
                       //Define class attributes
                       Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                       {
                         new DiagramUmlClassAttribute() {Name = "accepted", Type = "Date"}
                       },
                       //Define class methods
                       Methods = new ObservableCollection<DiagramUmlClassMethod>()
                       {
                        new DiagramUmlClassMethod()
                        {
                          Name = "getHistory", Type = "getHistory"
                        }
                     }
                  }
                }
               //Add node
               NodeCollection.Add(Node);
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlClass.#ctor">
            <summary>
            Sets or gets the behavior of the Uml class shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClass.Attributes">
            <summary>
            Specifies the variable, where user can define when creating a class.
            </summary>
            <remarks>
            The attribute’s Name, Type, and Scope properties allow you to define the name, data type, and visibility of the attribute.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClass.Methods">
            <summary>
            Specifies the implementation of operation in a class.
            </summary>
            <remarks>
            The method`s Name, Parameters, Type, and scope properties allow you to define the name, parameter, return type, and visibility of the methods.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClass.Name">
            <summary>
            Defines the name of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClass.Style">
            <summary>
            Sets the shape style of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute">
            <summary>
            Sets or gets the behavior of the Uml class Attribute.
            </summary>
            <remarks>
            The attribute’s Name, Type, and Scope properties allow you to define the name, data type, and visibility of the attribute.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.#ctor">
            <summary>
            Sets or gets the behavior of the Uml class Attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.IsSeparator">
            <summary>
            Specifies the Separator of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.Name">
            <summary>
            Specifies the name of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.Scope">
            <summary>
            Specifies whether each instance of the class has its distinct value or just a single value by all instances of the class.
            </summary>
            <remarks>
            There are two types of scope for members. They are instance and classifier.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.Style">
            <summary>
            Sets the Shape style of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.Type">
            <summary>
            Specifies the Data type of attributes.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod">
            <summary>
            Defines the appearance and behavior of the UML Class Shape.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              //Defines diagram's Node collection
              public ObservableCollection<DiagramNode> NodeCollection { get; set; }
              protected override void OnInitialized()
              {
                 NodeCollection = new ObservableCollection<DiagramNode>();
                 DiagramNode Node = new DiagramNode()
                {
                    OffsetX = 200,
                    OffsetY = 200,
                    Shape = new DiagramShape()
                    {
                     Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                     Classifier = ClassifierShape.Class,
                     //Define class object
                     ClassShape = new DiagramUmlClass()
                     {
                       Name = "Patient",
                       //Define class methods
                       Methods = new ObservableCollection<DiagramUmlClassMethod>()
                       {
                        new DiagramUmlClassMethod()
                        {
                          Name = "getHistory", Type = "getHistory", Style = new UMLParameterShapeStyle()
                          { Color = "red" }, IsSeparator = true, Scope = UmlScope.Private
                        }
                      }
                    }
                   }
                  };
                  //Add node
                  NodeCollection.Add(Node);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.#ctor">
            <summary>
            Defines the appearance and behavior of the UML Class Shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.IsSeparator">
            <summary>
            Specifies wether we need separator lines for each patrameters. By default, set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Name">
            <summary>
            Defines the name of the UML class attributes. By default, set to empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Parameters">
            <summary>
            Defines the arguments to the UML class shape. By default, set to null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Scope">
            <summary>
            Defines the scope(visibility) of the UML class attributes. By default, set to public.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Style">
            <summary>
            Defines the appearance of the Uml class method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Type">
            <summary>
            Defines the type of the UML class attributes. By default, it is set to empty string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration">
            <summary>
            Gets or sets the behavior of the UmlEnumeration.
            </summary>
            <remarks>
            To define an enumeration, define the classifier property of node as Enumeration.  Also, define the name and members of the enumeration using the enumeration property of the node.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               // . . .
               DiagramNode Node = new DiagramNode()
               {
                 Id = "Patient",
                 OffsetX = 200,
                 OffsetY = 200,
                 Shape = new DiagramShape()
                 {
                   Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                   Classifier = ClassifierShape.Enumeration,
                   //Define enumeration object
                   EnumerationShape = new DiagramUmlEnumeration()
                   {
                     Name = "AccountType",
                     //set the members of enumeration
                     Members = new ObservableCollection<DiagramUmlEnumerationMember>()
                     {
                       new DiagramUmlEnumerationMember()
                       {
                         Name = "Checking Account"
                       },
                       new DiagramUmlEnumerationMember()
                       {
                         Name = "Savings Account"
                        },
                        new DiagramUmlEnumerationMember()
                        {
                          Name = "Credit Account"
                        }
                     }
                    }
                  }
                };
                NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration.#ctor">
            <summary>
            Gets or sets the behavior of the UmlEnumeration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration.Members">
            <summary>
            Specifies the implementation of operation in enumeration members.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration.Name">
            <summary>
            Specifies the name of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration.Style">
            <summary>
            Sets the Shape style of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember">
            <summary>
            Represents the UML enumeration members of the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.#ctor">
            <summary>
            Represents the UML enumeration members of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.IsSeparator">
            <summary>
            Defines the separator of the attribute. By default, it’s set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.Name">
            <summary>
            Defines the name of the member. By default, it will be an empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.Style">
            <summary>
            Sets the shape style of the node. By default, it’s set to null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.Value">
            <summary>
            Defines the value of the member. By default, it will be an empty string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlInterface">
            <summary>
            Sets or gets the behavior of the UmlInterface.
            </summary>
            <remarks>
            An Interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. To create an interface, define the classifier property as Interface.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //...
               DiagramNode Node = new DiagramNode()
               {
                  Id = "Patient",
                  OffsetX = 200,
                  OffsetY = 200,
                  Shape = new DiagramShape()
                  {
                     Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                     Classifier = ClassifierShape.Interface,
                     //Define interface object
                     InterfaceShape = new DiagramUmlInterface()
                     {
                       Name = "Patient",
                       //Define interface attributes
                       Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                       {
                         new DiagramUmlClassAttribute() { Name = "owner", Type = "String[*]" }
                       },
                       //Define interface methods
                       Methods = new ObservableCollection<DiagramUmlClassMethod>()
                       {
                         new DiagramUmlClassMethod()
                         {
                           Name = "deposit",
                           Parameters = new ObservableCollection<DiagramMethodArguments>()
                           {
                             new DiagramMethodArguments(){Name = "amount", Type = "Dollars" }
                           }
                        }
                       }
                     }
                  }
               };
               //Add node
               NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.#ctor">
            <summary>
            Sets or gets the behavior of the UmlInterface.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.Attributes">
            <summary>
            Specifies the variable, where user can define when creating a class.
            </summary>
            <remarks>
            The attribute’s Name, Type and Scope properties allow you to define the name, data type, and visibility of the attribute.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.IsSeparator">
            <summary>
            Specifies the Separator of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.Methods">
            <summary>
            Specifies the implementation of operation in a class.
            </summary>
            <remarks>
            The method’s Name, Parameters, Type, and Scope properties allow you to define the Name, Parameter, Return type, and Visibility of the methods.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.Name">
            <summary>
            Specifies the name of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.Style">
            <summary>
            Sets the Shape style of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUserHandle">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
            <remarks>
            The user handles are icons that are placed around the selected node or connector to run the frequently used commands, and that icons can be the path, image, SVG content, or HTMLTemplate.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection" SelectedItems="@SelectedModel">
            </SfDiagram>
            @code{
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines diagram's SelectedItems
               public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
               ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
               protected override void OnInitialized()
               {
                 //Creating the user handle for cloning the objects
                 DiagramUserHandle CloneHandle = new DiagramUserHandle()
                 {
                     //Name of the user handle
                      Name = "clone",
                     //Set pathdata for userhandle
                     PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                 };
                 //Add user handle to the user handle collection
                 UserHandles = new ObservableCollection<DiagramUserHandle>()
                 {
                     CloneHandle
                 };
                 SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                 {
                  //Enable user handle for selected items...
                  Constraints = SelectorConstraints.UserHandle,
                  UserHandles = this.UserHandles
                 };
                 NodeCollection = new ObservableCollection<DiagramNode>();
                 DiagramNode DiagramNode = new DiagramNode()
                 {
                    Id = "node1",
                    OffsetX = 100,
                    OffsetY = 100,
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                  };
                  NodeCollection.Add(DiagramNode);
                 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUserHandle.#ctor">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.BackgroundColor">
            <summary>
            Defines the background color of the user handles. By default, it will be black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.BorderColor">
            <summary>
            Defines the border color of the user handles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.BorderWidth">
            <summary>
            Defines the border width of the user handles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Content">
            <summary>
            Defines the shape information of the user handle. This property is specific to the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.DisableConnectors">
            <summary>
            Defines the visibility of the user handles to the Connectors.
            </summary>
            <remarks>
            By default, this property will be false. If set true, the user handles prevent rendering for the connectors.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.DisableNodes">
            <summary>
            Defines the visibility of the user handles to the Nodes.
            </summary>
            <remarks>
            By default, this property will be false. If set true, the user handles prevent rendering for the nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Displacement">
            <summary>
            This property allows the user to dislocate the user handle from its original position by the given value. By default, it will be 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.HorizontalAlignment">
            <summary>
            Defines the horizontal alignment of the user handle.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the HorizontalAlignment of the user handle,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">By default, the HorizontalAlignment of the user handle will be center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Margin">
            <summary>
            Specifies the space around the user handles. By default, it will be 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[//set margin for the user handle
              Margin = new DiagramUserHandleMargin() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Name">
            <summary>
            Returns the unique name of the user handle.
            </summary>
            <remarks>
            user handle Name needs to be unique to use. When creating a handle, the user should not provide the same Name to other handles.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Offset">
            <summary>
            Gets or sets the position for the user handle.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1.  </td>
            </tr>
            <tr>
            <td style = "border: none">1.   0 represents the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   0.5 represents half of the width or height.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   1  represents the bottom right corner of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">By default, the offset value is set to 0.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.PathColor">
            <summary>
            Defines the path color of the user handle. By default, it will be white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.PathData">
            <summary>
            Defines the shape information of the user handle. This property is specific to the Path of the user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[    DiagramUserHandle cloneHandle = new DiagramUserHandle()
            {
               //Set pathdata to userhandle
               PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Side">
            <summary>
            Gets or sets the side of the user handle based on the given offset.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Users can customize the side property of the user handle. This property has the following options</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Top - Aligns the user handles at the top of an object.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Bottom - Aligns the user handles at the bottom of an object.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Left - Aligns the user handles at the left of an object</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Right - Aligns the user handles at the right of an object</td>
            </tr>
            <tr>
            <td style = "border: none">By default, the side property will be Top.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Size">
            <summary>
            Gets or sets the size of the user handle. By default, it will be 25.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Source">
            <summary>
            Defines the shape information of the user handle. This property is specific to the image source of the user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramUserHandle CloneHandle = new DiagramUserHandle()
              {
                  //Set image source to userhandle
                  Source =  './download.png',
              },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.VerticalAlignment">
            <summary>
            Defines the vertical alignment of the user handle.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the Horizontal Alignment of the user handle</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the selector.</td>
            </tr>
             /// <tr>
            <td style = "border: none">By default, the VerticalAlignment of the user handle will be center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Visible">
            <summary>
            Specifies the visibility of the user handle. By default, it will be true.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EnumerationMemberShapeStyle">
            <summary>
            Represents the text style for an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.EnumerationMemberShapeStyle.#ctor">
            <summary>
            Specifies the UML enumeration member shape style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UMLClassShapeStyle">
            <summary>
            Defines the UML class shape style.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.UMLClassShapeStyle.#ctor">
            <summary>
            Defines the UML class shape style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UMLEnumerationShapeStyle">
            <summary>
            defines the UML Enumeration shape style.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.UMLEnumerationShapeStyle.#ctor">
            <summary>
            defines the UML Enumeration shape style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UMLParameterShapeStyle">
            <summary>
            defines the UML parameter shape style.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.UMLParameterShapeStyle.#ctor">
            <summary>
            defines the UML parameter shape style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BridgeDirection">
            <summary>
            BridgeDirection allows the user to set the bridging (crossover to avoid intersection) direction according to their preference.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following code snippet is an example to set the bridge’s direction to the right.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection" Constraints="@DiagramConstraints" BridgeDirection="BridgeDirection.Right"/>
            @code
            {
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               //Enable the bridging constraint for diagram.
               public DiagramConstraints DiagramConstraints = DiagramConstraints.Default | DiagramConstraints.Bridging;
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector1 = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 200, Y = 200 },
                       TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 200 },
                   };
                   ConnectorCollection.Add(DiagramConnector1);
                   DiagramConnector DiagramConnector2 = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 },
                   };
                   ConnectorCollection.Add(DiagramConnector2);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BridgeDirection.Top">
            <summary>
            Sets the bridge’s direction to the top. It is the default value.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BridgeDirection.Bottom">
            <summary>
            Sets the bridge’s direction to the bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BridgeDirection.Left">
            <summary>
            Sets the bridge’s direction to the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BridgeDirection.Right">
            <summary>
            Sets the bridge’s direction to the right.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConstraints">
            <summary>
            Constraints enable or disable certain behaviors of the diagram, nodes, and nodes, etc.,.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The constraints are enabled or disabled using bitwise operators. The constraints are disabled using ‘~’ bitwise operator.</td>
            </tr>
            <tr>
            <td style = "border:none">The constraints should be set in the Constraints of the SfDiagram.</td>
            </tr>
            <tr>
            <td style = "border:none">The following links might be useful in understanding the Constraints in the diagram.</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.AnnotationConstraints.html">1. AnnotationConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BoundaryConstraints.html">2.   BoundaryConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.ConnectorConstraints.html">3.  ConnectorConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeConstraints.html">4.   NodeConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.PortConstraints.html">5.   PortConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.SnapConstraints.html">6.   SnapConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.SelectorConstraints.html">7.   SelectorConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set diagram constraints as default and page editable.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="@DiagramConstraints">
            </SfDiagram>
            @code{
            //Sets the Diagram constraints...
            DiagramConstraints DiagramConstraints = DiagramConstraints.Default & ~DiagramConstraints.PageEditable;
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.ApiUpdate">
            <summary>
            Enables or disables the update through public API  diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Bridging">
            <summary>
            Enables or disables the Bridging support for the connector in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Default">
            <summary>
            Enables all default constraints to the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.LineRouting">
            <summary>
            Enables or disables the line routing for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.None">
            <summary>
            Disables all the diagram functionalities except rendering.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.PageEditable">
            <summary>
            PageEditable enables or disables the page editing support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Pan">
            <summary>
            Enables or disables the panning both X and Y coordinates support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.PanX">
            <summary>
            Enables or disables the Paning X coordinate support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.PanY">
            <summary>
            Enables or disables the Panning Y coordinate support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Tooltip">
            <summary>
            Enables or disables the Tooltip option for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.UndoRedo">
            <summary>
            Enables or disables the Undo/Redo option for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.UserInteraction">
            <summary>
            Enables or disables the user interaction for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Virtualization">
            <summary>
            Enables or disables the Virtualization support for  the diagram
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Zoom">
            <summary>
            Enables or disables the Zoom support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.ZoomTextEdit">
            <summary>
            Enables or disables zooming the text box while editing the text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.RenderingMode">
            <summary>
            Defines the type of diagram to be rendered either Canvas or SVG.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following code snippet is an example to set the rendering mode to Canvas</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Mode="RenderingMode.Canvas"></SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RenderingMode.SVG">
            <summary>
            Renders the diagram in SVG element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RenderingMode.Canvas">
            <summary>
            Renders the diagram in Canvas element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Actions">
            <summary>
            Specifies a custom cursor action in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.None">
            <summary>
            Disable all actions for cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Select">
            <summary>
            Sets the select action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Drag">
            <summary>
            Sets the Drag action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeWest">
            <summary>
            Sets the ResizeWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ConnectorSourceEnd">
            <summary>
            Sets the Connector SourceEnd action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ConnectorTargetEnd">
            <summary>
            Sets the Connector TargetEnd action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeEast">
            <summary>
            Sets the ResizeEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeSouth">
            <summary>
            Sets the ResizeSouth action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeNorth">
            <summary>
            Sets the select action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeSouthEast">
            <summary>
            Sets the Resize SouthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeSouthWest">
            <summary>
            Sets the Resize SouthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeNorthEast">
            <summary>
            Sets the Resize NorthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeNorthWest">
            <summary>
            Sets the Resize NorthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Rotate">
            <summary>
            Sets the Rotate action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ConnectorEnd">
            <summary>
            Sets the Connector End action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Custom">
            <summary>
            Sets the Custom action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Draw">
            <summary>
            Sets the Draw action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Pan">
            <summary>
            Sets the Pan action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.BezierSourceThumb">
            <summary>
            Sets the Bezier SourceThumb action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.BezierTargetThumb">
            <summary>
            Sets the Bezier TargetThumb action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LayoutAnimation">
            <summary>
            Sets the Layout Animation action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.PinchZoom">
            <summary>
            Sets the Pinch Zoom action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Hyperlink">
            <summary>
            Sets the Hyperlink action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.SegmentEnd">
            <summary>
            Sets the SegmentEnd action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.OrthoThumb">
            <summary>
            Sets the OrthoThumb action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.PortDrag">
            <summary>
            Sets the Port Drag action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.PortDraw">
            <summary>
            Sets the Port Draw action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelSelect">
            <summary>
            Sets the Label Select action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelDrag">
            <summary>
            Sets the Label Drag action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeSouthEast">
            <summary>
            Sets the Label ResizeSouthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeSouthWest">
            <summary>
            Sets the Label ResizeSouthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeNorthEast">
            <summary>
            Sets the Label ResizeNorthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeNorthWest">
            <summary>
            Sets the Label ResizeNorthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeSouth">
            <summary>
            Sets the Label ResizeSouth action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeNorth">
            <summary>
            Sets the Label ResizeNorth action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeWest">
            <summary>
            Sets the Label ResizeWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeEast">
            <summary>
            Sets the Label ResizeEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelRotate">
            <summary>
            Sets the LabelRotate action for the cursor.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorConstraints">
            <summary>
            The connector constraints allow the users to enable or disable certain behaviors and features of the connectors.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The connector constraints can be enabled or disabled using the Bitwise operators. The ‘~’ operator can be used to disable the connector constraints.</td>
            </tr>
            <tr>
            <td style = "border:none">The below code snippet is an example to set connector constraints to default and to enable connector selection.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
              ObservableCollection<DiagramConnector> ConnectorCollection;
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       //sets the ConnectorConstraints...
                       Constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.AllowDrop">
            <summary>
            Enables to trigger drop event when any object is dragged or dropped to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.BridgeObstacle">
            <summary>
            Enables the connector to be treated as bridge obstacle..
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Bridging">
            <summary>
            Enables bridging to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.ConnectToNearByElement">
            <summary>
            Enables to connect nearest elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.ConnectToNearByNode">
            <summary>
            Enables to connect nearest node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.ConnectToNearByPort">
            <summary>
            Enables to connect nearest port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Default">
            <summary>
            Enables all constraints for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Delete">
            <summary>
            Enables or Disables the deletion of a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Drag">
            <summary>
            Enables or Disables connector to be Dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.DragSegmentThumb">
            <summary>
            Enables the control point and endpoint of every segment in a connector for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.DragSourceEnd">
            <summary>
            Enables the connector's source end to be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.DragTargetEnd">
            <summary>
            Enables connectors target end to be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.InheritBridging">
            <summary>
            Enables to inherit bridging option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.InheritLineRouting">
            <summary>
            Enables or disables to inheriting the routing option from the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.InheritTooltip">
            <summary>
            Enables or disables to inheriting tooltip option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Interaction">
            <summary>
            Enables or disables Interaction for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.LineRouting">
            <summary>
            Enables or disables routing to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.None">
            <summary>
            Disable all connector Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.PointerEvents">
            <summary>
            Enables to set the pointer-events.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.ReadOnly">
            <summary>
            Enables or disables read-only for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Select">
            <summary>
            Enables or Disables the selection of a  connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Tooltip">
            <summary>
            Enables or disables tooltip for the connectors.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FlipDirection">
            <summary>
            Specifies how the diagram elements have to be flipped.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using flip direction, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/connectors/customization/">1.    Connectors</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/nodes/positioning/#flip">2.  Nodes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply vertical flip direction, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
               SfDiagram diagram;
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   // A node is created and stored in nodes array.
                   DiagramNode Node = new DiagramNode()
                   {
                       // Position of the node
                       OffsetX = 250,
                       OffsetY = 250,
                       // Size of the node
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                       // Flip the node in Vertical Direction
                       Flip = FlipDirection.Vertical,
                       Shape = new DiagramShape()
                       {
                           Type = Syncfusion.Blazor.Diagrams.Shapes.Basic,
                           BasicShape = BasicShapes.Triangle
                       }
                   };
                   // Add node
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlipDirection.Horizontal">
            <summary>
            Flip the diagram shape horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlipDirection.Vertical">
            <summary>
            Flip the diagram shape vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlipDirection.Both">
            <summary>
            Flip the diagram shape to both horizontally and vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlipDirection.None">
            <summary>
            No flip will be applied and this is the default value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Segments">
            <summary>
            Specifies the segment type of the connector.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the segments, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/connectors/segments/">1. Connector</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply straight segments, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       TargetDecorator = new ConnectorTargetDecorator()
                       {
                           Shape = DecoratorShapes.Arrow,
                           Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 }
                       },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       //Specify the segments type as straight.
                       Type = Segments.Straight,
                   };
                   ConnectorCollection.Add(DiagramConnector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Segments.Straight">
            <summary>
            Sets the segment type as Straight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Segments.Orthogonal">
            <summary>
            Sets the segment type as Orthogonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Segments.Polyline">
            <summary>
            Sets the segment type as Polyline.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Segments.Bezier">
            <summary>
            Sets the segment type as Bezier.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationAlignment">
            <summary>
            Specifies how the diagram elements must be aligned based on its immediate parent.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">To know more about using annotation alignment, refer to these links <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation~Alignment.html">DiagramConnectorAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border: none">To apply annotation alignment to a connector, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                       TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                       Type = Segments.Orthogonal,
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7" },
                       Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                       {
                          new DiagramConnectorAnnotation() { Content = "Before",Alignment=AnnotationAlignment.Before },
                           new DiagramConnectorAnnotation() { Content = "After",Alignment=AnnotationAlignment.After },
                       }
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationAlignment.Center">
            <summary>
            Annotation placed over the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationAlignment.Before">
            <summary>
            Annotation placed top of the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationAlignment.After">
            <summary>
            Annotation placed bottom to the connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FixedUserHandleAlignment">
            <summary>
            Specifies how the fixed user handle must be aligned.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[FixedUserHandles = new ObservableCollection<DiagramConnectorFixedUserHandle>()
                   {
                    new DiagramConnectorFixedUserHandle() { Id = "user2", Padding = new IconPadding { Top = 0 , Left = 0, Bottom = 0, Right = 0 },Height = 20, Width = 20, Offset = 1,Fill = "red",Visibility = true, Alignment = FixedUserHandleAlignment.After, Displacement ={ X = 10,Y = 10 },CornerRadius = 4, HandleStrokeColor = "green" , HandleStrokeWidth = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                   },
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FixedUserHandleAlignment.Center">
            <summary>
            Fixed user handle placed over the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FixedUserHandleAlignment.Before">
            <summary>
            Fixed user handle placed top of the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FixedUserHandleAlignment.After">
            <summary>
            Fixed user handle placed bottom to the connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationType">
            <summary>
            Specifies the type of annotation template.
            </summary>
            <remarks>
            <table style = "border:none;">
            <tr>
            <td style = "border: none">To know more about using annotation type, refer to these links</td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation~Alignment.html">1.    DiagramConnectorAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation_members.html">2.   DiagramNodeAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border: none">To apply annotation type to a connector, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" ModelType="@Model" Connectors="@ConnectorCollection">
               <DiagramTemplates>
                   <AnnotationTemplate>
                       @{
                           <table style = "width:100%;" >
                               < tbody >
                                   < tr >
                                       < th class="c1">ID</th>
                                       <td class="c1">Label1<b></b></td>
                                   </tr>
                                   <tr>
                                       <th class="c1">Width</th>
                                       <td class="c1">
                                           <b>  <input type = "button" value="Click Me"> </b>
                                       </td>
                                   </tr>
                               </tbody>
                           </table>
                       }
                   </AnnotationTemplate>
               </DiagramTemplates>
            </SfDiagram>
            @code
            {
            //Defines diagram's connector collection
            public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
            public Type Model = typeof(Node);
            public class Node
            {
               public string Id { get; set; }
               public double Width { get; set; }
            }
            protected override void OnInitialized()
            {
                ConnectorCollection = new ObservableCollection<DiagramConnector>();
                DiagramConnector Connector = new DiagramConnector()
                {
                    SourcePoint = new ConnectorSourcePoint() { X = 220, Y = 40 },
                    TargetPoint = new ConnectorTargetPoint() { X = 310, Y = 150 },
                    Type = Segments.Orthogonal,
                    Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7" },
                    Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                    {
                        new DiagramConnectorAnnotation() {Id="label2", AnnotationType=AnnotationType.Template },
                    }
               };
               ConnectorCollection.Add(Connector);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationType.String">
            <summary>
            Specifies that the annotation will be string content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationType.Template">
            <summary>
            Specifies that the annotation user defined Html template.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationConstraints">
            <summary>
            Annotation constraints control the features and behaviors of the annotations.
            </summary>
            <remarks>
            The annotation constraints are enabled or disabled using the Bitwise operators. The ‘~’ operator is used to disable the constraint.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   Node.Annotations = new ObservableCollection<DiagramNodeAnnotation>()
               {
                       new DiagramNodeAnnotation()
                       {
                           Content="Annotation Text Wrapping",
                           ///sets the Constraints for Annotation...
                           Constraints=AnnotationConstraints.ReadOnly,
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Drag">
            <summary>
            It enables the user to drag the annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.InheritReadOnly">
            <summary>
            Enables or disables the user to inherit the ReadOnly option from the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Interaction">
            <summary>
            Enables or Disable annotation to inherit the interaction option
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.None">
            <summary>
            Disables all the functionalities of annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.ReadOnly">
            <summary>
            It enables the user to only read (cannot be edited) the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Resize">
            <summary>
            Enables or disables the resizing support for the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Rotate">
            <summary>
            Enables or disables the annotation rotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Select">
            <summary>
            It enables the user to select the desired node or connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HorizontalAlignment">
            <summary>
            Defines how the diagram elements must be aligned based on its immediate parent.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Horizontal Alignment, refer to these links:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramPort_members.html">1.  DiagramPort</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNode_members.html">2.  DiagramNode</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramLayout_members.html">3.    DiagramLayout</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramUserHandle_members.html">4.    DiagramUserHandle</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation_members.html">5.   DiagramConnectorAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation_members.html">6.    DiagramNodeAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeExpandIcon_members.html">7. NodeExpandIcon</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeCollapseIcon_members.html">8. NodeCollapseIcon</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply port horizontal alignment, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   // A node is created and stored in nodes array.
                   DiagramNode Node = new DiagramNode()
                   {
                       // . .
                       // Initialize port collection
                       Ports = new ObservableCollection<DiagramPort>() {
                       new DiagramPort() {
                           HorizontalAlignment = HorizontalAlignment.Left
                       }},
                   };
                   NodeCollection.Add(Node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Stretch">
            <summary>
            Stretch the diagram element horizontally to its immediate parent’s.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Left">
            <summary>
            Align the diagram element horizontally to its immediate parent's left side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Right">
            <summary>
            Align the diagram element horizontally to its immediate parent's right side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Center">
            <summary>
            Align the diagram element horizontally to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent’s horizontal alignment property.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionPointOrigin.SamePoint">
            <summary>
            Connectors will connect with same point in the layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionPointOrigin.DifferentPoint">
            <summary>
            Connectors will connect with different points in the layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ChildArrangement.Linear">
            <summary>
            Child nodes will be arranged in linear manner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ChildArrangement.Nonlinear">
            <summary>
            Child nodes will be arranged in non linear manner.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationTypes">
            <summary>
            It allows the user to define the type of annotation.
            </summary>
            <example>
            <code land="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "@snapConstraints" />
            </SfDiagram >
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               SnapConstraints snapConstraints;
               protected override void OnInitialized()
               {
                   snapConstraints = SnapConstraints.None;
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                           /// A annotation is created and stored in Annotations collection of Node.
                            new DiagramNodeAnnotation() { Content = "Node" ,Type=  AnnotationTypes.Shape} }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationTypes.Shape">
            <summary>
            Sets the annotation type as Path.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationTypes.Path">
            <summary>
            Sets the annotation type as Shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.VerticalAlignment">
            <summary>
            Defines how the diagram elements must be aligned based on its immediate parent.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using vertical alignment, refer to these links:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramPort_members.html">1. DiagramPort</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNode_members.html">2. DiagramNode</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramLayout_members.html">3. DiagramLayout</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramUserHandle_members.html">4. DiagramUserHandle</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation_members.html">5. DiagramConnectorAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation_members.html">6. DiagramNodeAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeExpandIcon_members.html">7. NodeExpandIcon</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeCollapseIcon_members.html">8. NodeCollapseIcon.</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply vertical alignment to a port, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   /// A node is created and stored in nodes array.
                   DiagramNode Node = new DiagramNode()
                   {
                       /// . .
                       /// Initialize port collection
                       Ports = new ObservableCollection<DiagramPort>() {
                       new DiagramPort() {
                           VerticalAlignment = VerticalAlignment.Left
                       }},
                   };
                   NodeCollection.Add(Node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Stretch">
            <summary>
            Stretch the diagram element vertically to its immediate parent’s.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Top">
            <summary>
            Align the diagram element vertically to its immediate parent's top side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Bottom">
            <summary>
            Align the diagram element vertically to its immediate parent's bottom side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Center">
            <summary>
            Align the diagram element vertically to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent’s Vertical alignment property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TextDecoration">
            <summary>
            The TextDecoration property defines the decoration for a text in the text block.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the TextDecoration is set to None.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                         new DiagramNodeAnnotation() {Content = "Annotation Text",Style = new AnnotationStyle() {
                             //Set the TextDecoration for the annotation
                             TextDecoration=TextDecoration.Overline } }
                       },
                   };
                   NodeCollection.Add(Node);
               }
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextDecoration.Overline">
            <summary>
            The Overline property draws a horizontal line above the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextDecoration.Underline">
            <summary>
            This property draws a horizontal line under the text in the text block.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextDecoration.LineThrough">
            <summary>
            LineThrough property draws a horizontal line in the center of the text of a node or a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextDecoration.None">
            <summary>
            The None property represents the default text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TextAlign">
            <summary>
            The TextAlign property allows the user to define the alignment of the text inside the text block.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set the TextAlign to Justify.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
               ///Defines diagram's node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100, = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       // Sets the textAlign as left for the content
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                           new DiagramNodeAnnotation() { Content = "Text align is set as Justify",Style = new AnnotationStyle(){ TextAlign = TextAlign.Justify} }
                       },
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextAlign.Left">
            <summary>
            Sets the alignment of text in the text block to the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextAlign.Right">
            <summary>
            Sets the alignment of text in the text block to the right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextAlign.Center">
            <summary>
            Sets the alignment of text in the text block to the center.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextAlign.Justify">
            <summary>
            Sets the alignment of text in respective to left and right margins.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TextOverflow">
            <summary>
            The overflow property allows the user to clip the text content or to add scrollbars when the content of the text element is too large to fit in the specified diagram area.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the TextOverflow is set to Wrap.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set TextOverflow for annotations.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px" Nodes="@NodeCollection">
               </SfDiagram>
            @code
            {
                   public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       // Sets the style for the text to be displayed
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                           new DiagramNodeAnnotation() {Content = "The text element with property of overflow as Wrap and wrapping as NoWrap",
                           Style = new AnnotationStyle(){ TextOverflow = TextOverflow.Clip} },
                       },
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextOverflow.Wrap">
            <summary>
            Wraps the text to the next line, when it exceeds its bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextOverflow.Ellipsis">
            <summary>
            Ellipsis hides the text if the text size exceeds the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextOverflow.Clip">
            <summary>
            The text is restricted to the node/connector boundary and the text will not be overflown.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TextWrap">
            <summary>
            TextWrap property is used to control the overflow of text in the node boundaries. The wrapping property defines how the text should be wrapped.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the TextWrap is set to WrapWithOverflow.</td>
            </tr>
            <tr>
            <td style = "border:none">The below link might be useful in understanding the TextWrap,</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.TextOverflow.html">1.  TextOverflow</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100, = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                   new DiagramNodeAnnotation() {Content = "Annotation Text Wrapping",Style = new AnnotationStyle(){ TextWrapping = TextWrap.Wrap} }
                       },
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextWrap.WrapWithOverflow">
            <summary>
            Text-wrapping occurs when the text overflows beyond the available node width. However, the text may overflow beyond the node width in the case of a very long word.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextWrap.Wrap">
            <summary>
            The text will be wrapped inside the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextWrap.NoWrap">
            <summary>
            The text will not be wrapped. If lengthy text exists, the boundary will not be a limitation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.WhiteSpace">
            <summary>
            Specifies how the white space and new line characters should be set.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white", WhiteSpace = WhiteSpace.CollapseAll },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                            new DiagramNodeAnnotation() { Content = "This is a node in diagram component" } }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.WhiteSpace.PreserveAll">
            <summary>
            Preserves (Includes) all empty spaces and empty lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.WhiteSpace.CollapseSpace">
            <summary>
            Collapses (Excludes) all consequent empty spaces and empty lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.WhiteSpace.CollapseAll">
            <summary>
            Collapses (Excludes) the consequent spaces into one
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DecoratorShapes">
            <summary>
            Specifies the connector decorator shape of the connector.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using decorator shapes, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/">1. DiagramMethods</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/context-menu/">2. ContextMenu</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/data-binding/">3. DataBinding</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/overview/">4. OverviewControl</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/symbol-palette/?no-cache=1">5. SymbolPalette</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/connectors/connectors/">6. Connectors</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/">7. Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply connector decorator shapes, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 100 },
                       SourceDecorator = new ConnectorSourceDecorator()
                       {
                           Shape = DecoratorShapes.Circle,
                           Style = new DecoratorShapeStyle() { StrokeColor = "Black", Fill = "Red", StrokeWidth = 1 },
                       },
                       TargetDecorator = new ConnectorTargetDecorator()
                       {
                           Shape = DecoratorShapes.Diamond,
                           Style = new DecoratorShapeStyle() { StrokeColor = "Black", Fill = "Red", StrokeWidth = 1 },
                       },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#37909A", StrokeWidth = 1 },
                       Type = Segments.Orthogonal,
                   };
                   ConnectorCollection.Add(DiagramConnector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Arrow">
            <summary>
            Sets the decorator shape as Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.None">
            <summary>
            Sets the decorator shape as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Diamond">
            <summary>
            Sets the decorator shape as Diamond
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.OpenArrow">
            <summary>
            Sets the decorator shape as OpenArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Circle">
            <summary>
            Sets the decorator shape as Circle
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Square">
            <summary>
            Sets the decorator shape as Square
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Fletch">
            <summary>
            Sets the decorator shape as Fletch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.OpenFetch">
            <summary>
            Sets the decorator shape as OpenFetch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.IndentedArrow">
            <summary>
            Sets the decorator shape as Indented Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.OutdentedArrow">
            <summary>
            Sets the decorator shape as Outdented Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.DoubleArrow">
            <summary>
            Sets the decorator shape as DoubleArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Custom">
            <summary>
            Sets the decorator shape as Custom
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnAssociationFlows">
            <summary>
            The Association is used to link flow objects. It is denoted by a dotted line representation.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">By default, the Association flow is set to default.</td>
            </tr>
            <tr>
            <td style = "border: none" >The below links might be useful in understanding BpmnAssociationFlows,</td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnFlows.html">1. BpmnFlows</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
                ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
                {
                   new DiagramConnector()
                   {
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       ///Sets the type to Bpmn, flow to Association and association to bidirectional
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.Bpmn,
                           BpmnFlow=BpmnFlows.Association,
                           Association=BpmnAssociationFlows.BiDirectional
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnAssociationFlows.Default">
            <summary>
            Sets the Association flow to Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnAssociationFlows.Directional">
            <summary>
            Sets the Association flow to directional and it is single directional.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnAssociationFlows.BiDirectional">
            <summary>
            Sets the Association flow to Bidirectional. This flow is represented with a source and a target decorator from which it gets its name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AssociationFlow">
            <summary>
            Specifies the direction to the UML connectors.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the Association flow is set to default.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set AssociationFlow to Directional.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px " Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               //Create connector and stored it to the connector collection
               ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
               {
                   new DiagramConnector()
                   {
                       // Startpoint and endpoint of the connector
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       ///Sets the type to Bpmn, flow to Association and association to bidirectional
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.UmlClassifier,
                           AssociationType = AssociationFlow.Directional
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AssociationFlow.Directional">
            <summary>
            Sets the Association flow to directional and it is single directional.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AssociationFlow.Default">
            <summary>
            Sets the Association flow to Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AssociationFlow.BiDirectional">
            <summary>
            Sets the Association flow to Bidirectional.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnFlows">
            <summary>
            BpmnFlows are used as connection(links) between Bpmn Flow objects.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following links might be useful in understanding BpmnFlows,</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnAssociationFlows.html">1.  BpmnAssociationFlows</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnMessageFlows.html">2.  BpmnMessageFlows</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnSequenceFlows.html">3. BpmnSequenceFlows</a></td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet demonstrates how to set BpmnFlow types.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               //Create connector and stored it to the connector collection
               ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
               {
                   new DiagramConnector()
                   {
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       //Sets type to Bpmn, flow to Sequence, and sequence to Conditional
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.Bpmn,
                           BpmnFlow=BpmnFlows.Sequence,
                           Sequence=BpmnSequenceFlows.Conditional
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnFlows.Sequence">
            <summary>
            Sets the BpmnFlow to Sequence and shows the order of activities performed in a BPMN activity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnFlows.Association">
            <summary>
            Sets the BpmnFlow to Association and it is used to link flow objects. It is denoted by a dotted line representation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnFlows.Message">
            <summary>
            Sets the BpmnFlow to Message and it shows the flow of messages between two participants, represented by a dashed line.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnMessageFlows">
            <summary>
            A Message flow shows the flow of messages between two participants, represented by a dashed line.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, BpmnMessageFlows is set to Default.</td>
            </tr>
            <tr>
            <td style = "border:none">The following links might be useful in understanding BpmnMessageFlows, <a href = "https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnFlows.html">BpmnFlows</a></td>
            </tr>
            <td style = "border:none">The below code snippet is an example to set Message Flow to NonInitiatingMessage.</td>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
               {
                   new DiagramConnector()
                   {
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       //Sets type to Bpmn, flow to Message, and message to InitiatingMessage
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.Bpmn,
                           BpmnFlow=BpmnFlows.Message,
                           Message=BpmnMessageFlows.NonInitiatingMessage
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnMessageFlows.Default">
            <summary>
            Sets the Message Flow to Default without a message symbol in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnMessageFlows.InitiatingMessage">
            <summary>
            Sets the Message Flow to InitiatingMessage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnMessageFlows.NonInitiatingMessage">
            <summary>
            Sets the Message Flow to NonInitiatingMessage.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ClassifierShape">
            <summary>
            Defines the type of UML shapes to be drawn.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Classifier shape, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/umldiagram/">1.  ClassifierShape</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply classifier class shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Defines diagram's Node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "Patient",
                       OffsetX = 200,
                       OffsetY = 200,
                       Shape = new DiagramShape()
                       {
                           Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                           Classifier = ClassifierShape.Class,
                           //Define class object
                           ClassShape = new DiagramUmlClass()
                           {
                               Name = "Patient",
                               //Define class attributes
                               Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                           {
                                   new DiagramUmlClassAttribute() { Name = "accepted", Type = "Date" }
                               },
                               //Define class methods
                               Methods = new ObservableCollection<DiagramUmlClassMethod>()
                           {
                                   new DiagramUmlClassMethod()
                                   {
                                       Name = "getHistory", Type = "getHistory"
                                   }
                               }
                           }
                       }
                   };
                   //Add node
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Aggregation">
            <summary>
            It indicates the scope is a package. Aggregation is a binary association between a property and one or more composite objects which group a set of instances
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Class">
            <summary>
            It indicates the scope is protected. A class describes a set of objects that shares the same specifications of features, constraints, and semantics.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Interface">
            <summary>
            It indicates the scope is private. An Interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Enumeration">
            <summary>
            It indicates the scope is a package.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Inheritance">
            <summary>
            It indicates the scope is protected. Inheritance is also called as “generalization”. Inheritance is a binary taxonomic directed relationship between a more general classifier (superclass) and a more specific classifier (subclass)
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Association">
            <summary>
            It indicates the scope is private. Association is a set of links that connects elements of a UML model
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Composition">
            <summary>
            It indicates the scope is public. The composition is a “strong” form of “aggregation”
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Realization">
            <summary>
            It indicates the scope is protected.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Dependency">
            <summary>
            It indicates the scope is a package. Dependency is a directed relationship, which is used to show that some UML elements need or depends on other model elements for specifications.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnSequenceFlows">
            <summary>
            A Sequence flow represents the order of the activities performed in a BPMN process. It is represented by a solid graphical line.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the BpmnSequenceFlow is set to Default.</td>
            </tr>
            <tr>
            <td style = "border:none">The following links might be useful in understanding BpmnSequenceFlows</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnFlows.html">  BpmnFlows</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
               {
                   new DiagramConnector()
                   {
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       ///Sets type to Bpmn, flow to Sequence, and sequence to Conditional
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.Bpmn,
                           BpmnFlow=BpmnFlows.Sequence,
                           Sequence=BpmnSequenceFlows.Conditional
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSequenceFlows.Normal">
            <summary>
            Sets Sequence flow to Normal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSequenceFlows.Default">
            <summary>
            Sets Sequence flow to Default and it has a small crossover line over the flow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSequenceFlows.Conditional">
            <summary>
            Sets Sequence flow to Conditional and it has a diamond-like shape in the source point.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectionShapes">
            <summary>
            Specifies the type of BPMN connection to be drawn.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using connection shapes, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/umldiagram/">1.  Uml Diagram Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/bpmn-shapes/bpmn-connectors/#association">2. Bpmn Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply UmlClassifier connection shapes, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       Id = "Connector1",
                       Type = Segments.Straight,
                       //Define connector start and end points
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 },
                       Shape = new DiagramConnectorShape()
                       {
                           Type = ConnectionShapes.UmlClassifier,
                           Relationship = ClassifierShape.Association,
                           //Define type of association
                           Association = BpmnAssociationFlows.BiDirectional
                       }
                   };
                   //Add connector
                   ConnectorCollection.Add(Connector).
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionShapes.None">
            <summary>
            Specifies the connection type as a normal connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionShapes.Bpmn">
            <summary>
            Specifies the connection type as a BPMN connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionShapes.UmlActivity">
            <summary>
            Specifies the connection type as a UML activity type connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionShapes.UmlClassifier">
            <summary>
            Specifies the connection type as a UML classifier type connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UmlActivityFlows">
            <summary>
            UMLActivityFlows enumeration allows the user to set the type of UmlActivity connector.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">UMLActivityFlows enumeration allows the user to set the type of UmlActivity connector.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       Type = Segments.Straight,
                       Shape = new DiagramConnectorShape()
                       {
                           Type = ConnectionShapes.UmlActivity,
                           //Set the UmlActivityFlows to Exception
                           UmlActivityFlow = UmlActivityFlows.Exception
                       },
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 }
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityFlows.Object">
            <summary>
            Sets the type of UMLActivityFlows as Object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityFlows.Control">
            <summary>
            Sets the type of UMLActivityFlows as Control.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityFlows.Exception">
            <summary>
            Sets the type of UMLActivityFlows as Exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Multiplicity">
            <summary>
            Specifies the multiplicity of uml connector shapes.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using multiplicity, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/umldiagram/#multiplicity">1. Uml Diagram Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply one to many multiplicity, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
               </SfDiagram>
            @code{
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       Id = "Connector1",
                       Type = Segments.Straight,
                       Shape = new DiagramConnectorShape()
                       {
                           Type = ConnectionShapes.UmlClassifier,
                           //Set an relationship for connector
                           Relationship = ClassifierShape.Dependency,
                           Multiplicity = new DiagramClassifierMultiplicity()
                           {
                               //Set multiplicity type
                               Type = Multiplicity.OneToMany,
                               //Set source label to connector
                               Source = new SourceMultiplicityLabel()
                               {
                                   Optional = true,
                                   LowerBounds = "89",
                                   UpperBounds = "67"
                               },
                               //Set target label to a connector
                               Target = new TargetMultiplicityLabel()
                               {
                                   Optional = true,
                                   LowerBounds = "78",
                                   UpperBounds = "90"
                               }
                           }
                       },
                       //Define connector start and endpoints
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 }
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Multiplicity.OneToOne">
            <summary>
            Indicates the connector multiplicity is OneToOne.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Multiplicity.OneToMany">
            <summary>
            Indicates the connector multiplicity is OneToMany.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Multiplicity.ManyToOne">
            <summary>
            Indicates the connector multiplicity is ManyToOne.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TooltipMode">
            <summary>
            Allows the user to define how to show the tooltip.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px" Nodes="@NodeCollection" Tooltip="@Tooltip">
               </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines mode of the tooltip
               public DiagramTooltip Tooltip = new DiagramTooltip()
               {
                   Content = "Nodes",
                   OpenOn = TooltipMode.Auto
               };
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   ///Defines nodes
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 200,
                       OffsetY = 200,
                       Constraints = NodeConstraints.Tooltip,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TooltipMode.Auto">
            <summary>
            Displays the tooltip when the object is dragged, scaled or rotated.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TooltipMode.Custom">
            <summary>
            Displays the tooltip based on the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TooltipRelativeMode">
            <summary>
            The RelativeMode property of the tooltip defines whether the tooltip should be displayed around the object or at the mouse position.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the relative mode is set to Mouse.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example that sets RelativeMode to the tooltip,</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Constraints="DiagramConstraints.Default | DiagramConstraints.Tooltip" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 200,
                       OffsetY = 200,
                       Constraints = NodeConstraints.Default | NodeConstraints.Tooltip,
                       Tooltip = new NodeTooltip()
                       {
                           Content = "Node1",
                           //Sets to show tooltip around the element
                           RelativeMode = TooltipRelativeMode.Object
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TooltipRelativeMode.Object">
            <summary>
            Displays the tooltip around the object when pointed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TooltipRelativeMode.Mouse">
            <summary>
            Displays the tooltip at the mouse position when pointed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Direction">
            <summary>
            Specifies the orthogonal connector's connection segment direction.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using direction, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/connectors/segments/">1. Connectors</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the connector segment direction, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       TargetDecorator = new ConnectorTargetDecorator()
                       {
                           Shape = DecoratorShapes.Arrow,
                           Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 }
                       },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       //Specify the connector type as orthogonal.
                       Type = Segments.Orthogonal,
                       //Initialize the segments collection
                       Segments = new ObservableCollection<DiagramConnectorSegment>()
                       {
                           //Create a new segment with length and direction
                           new DiagramConnectorSegment()
                           {
                               Length = 100,
                               Type = Segments.Orthogonal,
                               Direction = Direction.Right,
                           },
                           //Create another new segment with length and direction
                           new DiagramConnectorSegment()
                           {
                               Length = 100,
                               Type = Segments.Orthogonal,
                               Direction = Direction.Top,
                           }
                       },
                   };
                   ConnectorCollection.Add(DiagramConnector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Direction.Left">
            <summary>
            Sets the direction of the connector segment direction to Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Direction.Right">
            <summary>
            Sets the direction of the connector segment direction to Right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Direction.Top">
            <summary>
            Sets the direction of the connector segment direction to Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Direction.Bottom">
            <summary>
            Sets the direction of the connector segment direction to Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BranchTypes">
            <summary>
            Allows the user to set the alignment position.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 250,
                       OffsetY = 250,
                       Width = 100,
                       Height = 100,
                       Branch = BranchTypes.Root
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.Left">
            <summary>
            Sets the branch type to left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.Right">
            <summary>
            Sets the branch type to right
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.SubLeft">
            <summary>
            Sets the branch type to SubLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.SubRight">
            <summary>
            Sets the branch type to SubRight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.Root">
            <summary>
            Sets the branch type to root.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeConstraints">
            <summary>
            The node constraints allow the users to enable or disable certain behaviors and features of the diagram nodes.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The node constraints are enabled or disabled using the bitwise operators. The ’~’ operator is used to disable the node constraints.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set node constraints.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       //sets the NodeConstraints constraints...
                       Constraints = NodeConstraints.Default & ~NodeConstraints.Rotate
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.AllowDrop">
            <summary>
            AllowDrop allows dropping a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.AllowMovingOutsideLane">
            <summary>
            Enables or disables child in parent for the swimLane node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.AspectRatio">
            <summary>
            Enables the Aspect ratio of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Default">
            <summary>
            Enables all the constraints for a node
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Delete">
            <summary>
            Enables or disables node deletion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Drag">
            <summary>
            Enables or disables the dragging functionality of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Expandable">
            <summary>
            Enables or disables the node expansion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.HideThumbs">
            <summary>
            Enables to hide all resize thumbs for the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.InConnect">
            <summary>
            Enables node to allow only in coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Individual">
            <summary>
            Enables node to provide individual resize option.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Inherit">
            <summary>
            It allows the node to inherit the interaction option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.InheritTooltip">
            <summary>
            Enables or disables the inherit tooltip option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.None">
            <summary>
            Disable all node Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.OutConnect">
            <summary>
            Enables node to allow only out coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.PointerEvents">
            <summary>
            Enables or disables the mouse pointer’s events when clicking with a mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ReadOnly">
            <summary>
            Enables the ReadOnly mode(Write operations cannot be done) for the annotation in the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Resize">
            <summary>
            Enables or Disables the expansion or compression of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeEast">
            <summary>
            It enables or disables the resizing of the node in the East direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeNorth">
            <summary>
            It enables or disables the resizing of the node in the North direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeNorthEast">
            <summary>
            It enables or disables the resizing of the node in the NorthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeNorthWest">
            <summary>
            It enables or disables the resizing of the node in the NorthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeSouth">
            <summary>
            It enables or disables the resizing of the node in the South direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeSouthEast">
            <summary>
            It enables or disables the resizing of the node in the SouthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeSouthWest">
            <summary>
            It enables or disables the resizing of the node in the SouthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeWest">
            <summary>
            It enables or disables the resizing of the node in the West direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Rotate">
            <summary>
            Enables or disables node rotation. It is done with the help of a curvy arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Select">
            <summary>
            Enables or disables the selection of a node in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Shadow">
            <summary>
            Enables or disables to display the node’s shadow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Tooltip">
            <summary>
            Enables or disables the tooltip for the Nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortConstraints">
            <summary>
            The behavior and features of the ports can be enabled or disabled using the PortConstraints.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The port constraints can be enabled or disabled using Bitwise operators. The ‘~’ operator can be used to disable the port constraints.</td>
            </tr>
            <tr>
            <td style = "border:none">The below code is an example to set port constraints to disable all functionalities.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   Node.Ports = new ObservableCollection<DiagramPort>()
                   {
                       new DiagramPort()
                       {
                           Offset=new NodePortOffset () {X=0, Y=0.5}, Shape=PortShapes.Circle,
                           Visibility=PortVisibility.Visible,
                           //sets the PortConstraints...
                           Constraints=PortConstraints.None
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.Default">
            <summary>
            Enables all constraints for a port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.Drag">
            <summary>
            Enables or disables port dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.Draw">
            <summary>
            Enables to create the connection when mouse hover on the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.InConnect">
            <summary>
            Enables or disables to connect only the target end of connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.None">
            <summary>
            Disables all the Port functionalities.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.OutConnect">
            <summary>
            Enables or disables to connect only the source end of connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortShapes">
            <summary>
            Specifies the shape of the ports.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using port shapes, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/ports/ports/">1. Ports</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-ports">2.   Diagram Methods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply X port shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   Node.Ports = new ObservableCollection<DiagramPort>()
                   {
                       new DiagramPort()
                       {
                           Id="port1",
                           Offset=new NodePortOffset(){X=0,Y=0.5},
                           Shape=PortShapes.X,
                           Visibility=PortVisibility.Visible,
                           //sets the PortConstraints...
                           Constraints=PortConstraints.None
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortShapes.X">
            <summary>
            Sets the port shape as X.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortShapes.Circle">
            <summary>
            Sets the port shape as Circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortShapes.Square">
            <summary>
            Sets the port shape as Square.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortShapes.Custom">
            <summary>
            Sets the port shape as Custom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortVisibility">
            <summary>
            Constraints to control the visibility property of the port.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using port visibility, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/ports/ports/">1. Ports</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-ports">2. DiagramMethods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply port visibility, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   Node.Ports = new ObservableCollection<DiagramPort>()
                   {
                       new DiagramPort()
                       {
                           Id="port1",
                           Offset=new NodePortOffset(){X=0,Y=0.5},
                           Shape=PortShapes.X,
                           Visibility=PortVisibility.Visible,
                           //sets the PortConstraints...
                           Constraints=PortConstraints.None
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortVisibility.Connect">
            <summary>
            Shows the port when a connector endpoint is dragged over a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortVisibility.Hidden">
            <summary>
            Always hides the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortVisibility.Hover">
            <summary>
            Shows the port when the mouse hovers over a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortVisibility.Visible">
            <summary>
            Always shows the port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IconShapes">
            <summary>
            Specifies the icon to be shown in the node’s expand or collapsed state.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using icon shapes, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="decoratorshapes.docxhttps://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/">1.  HierarchicalLayout</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/organizational-chart/">2. Organizational Chart</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/nodes/appearance/">3.    Nodes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply icon shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" NodeDefaults="@NodeDefault" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
                 public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>() { };
               DiagramNode NodeDefault = new DiagramNode()
               {
                   Width = 140,
                   Height = 50,
                   Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
               };
               protected override void OnInitialized()
               {
                   DiagramNode Node1 = new DiagramNode()
                   {
                       Id = "Start",
                       OffsetX = 300,
                       OffsetY = 50,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
               {
                           new DiagramNodeAnnotation(){ Content = "Node1" }
                       },
                       ExpandIcon = new NodeExpandIcon() { Shape = IconShapes.ArrowDown, Width = 10, Height = 10 },
                       CollapseIcon = new NodeCollapseIcon() { Shape = IconShapes.ArrowUp, Width = 10, Height = 10 }
                   };
                   NodeCollection.Add(Node1);
                   DiagramNode Node2 = new DiagramNode()
                   {
                       Id = "Init",
                       OffsetX = 300,
                       OffsetY = 140,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                           new DiagramNodeAnnotation(){ Content = "Node2" }
                       },
                   };
                   NodeCollection.Add(Node2);
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       // Unique name for the connector
                       Id = "connector1",
                       // Source and Target node's name to which connector needs to be connected.
                       SourceID = "Start",
                       TargetID = "Init",
                       Type = Segments.Orthogonal
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.None">
            <summary>
            sets the icon shape as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.Minus">
            <summary>
            sets the icon shape as a minus.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.Plus">
            <summary>
            sets the icon shape as Plus.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.ArrowUp">
            <summary>
            sets the icon shape as ArrowUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.ArrowDown">
            <summary>
            sets the icon shape as Arrow down.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.Template">
            <summary>
            sets the icon shape based on the given custom template.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.Path">
            <summary>
            sets the icon shape based on the given custom Path.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Orientation">
            <summary>
            Specifies the orientation of the layouts.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Orientation, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/data-binding/">1.    DataBinding</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/overview/">2.    Overview</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/automatic-layout/">3. Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply hierarchical layout orientation, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram ID="diagram" Height="600px" Layout="@LayoutValue" ConnectorDefaults="@ConnectorDefault" NodeDefaults="@NodeDefaults" SelectedItems="@selectedItems">
               <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource">
                   <DiagramDataMapSettings>
                       <DiagramDataMapSetting Property = "Shape.TextContent" Field="Name"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.StrokeColor" Field="FillColor"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.Fill" Field="FillColor"></DiagramDataMapSetting>
                   </DiagramDataMapSettings>
               </DiagramDataSource>
               <DiagramPageSettings>
                   <DiagramFitOptions CanFit = "true" Mode="FitModes.Width"></DiagramFitOptions>
               </DiagramPageSettings>
            </SfDiagram>
            @code{
               DiagramSelectedItems selectedItems = new DiagramSelectedItems()
               {
                   Constraints = SelectorConstraints.All & ~SelectorConstraints.ResizeAll & ~SelectorConstraints.Rotate
               };
               TreeInfo LayoutInfo = new TreeInfo()
               {
                   CanEnableSubTree = true,
                   Orientation = SubTreeOrientation.Horizontal
               };
               DiagramLayout LayoutValue = new DiagramLayout() { };
               DiagramConnector ConnectorDefault = new DiagramConnector()
               {
                   TargetDecorator = new ConnectorTargetDecorator() { Shape = DecoratorShapes.None },
                   Type = Segments.Orthogonal,
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6d6d6d" },
                   Constraints = 0,
                   CornerRadius = 5
               };
               DiagramNode NodeDefaults = new DiagramNode
               {
                   Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none", Color = "white", StrokeWidth = 2, },
                   BackgroundColor = "#659be5",
                   Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Text, Margin = new BasicShapeMargin() { Left = 10, Right = 10, Bottom = 10, Top = 10 } },
                   ExpandIcon = new NodeExpandIcon()
                   {
                       Height = 10,
                       Width = 10,
                       Shape = IconShapes.Minus,
                       Fill = "lightgray",
                       Offset = new IconOffset() { X = 0.5, Y = 1 },
                       VerticalAlignment = VerticalAlignment.Auto,
                       Margin = new ExpandIconMargin() { Bottom = 0, Left = 0, Right = 0, Top = 0 }
                   },
                   CollapseIcon = new NodeCollapseIcon()
                   {
                       Offset = new IconOffset() { X = 0.5, Y = 1 },
                       VerticalAlignment = VerticalAlignment.Auto,
                       Height = 10,
                       Width = 10,
                       Shape = IconShapes.Plus,
                       Fill = "lightgray",
                       Padding = new IconPadding() { Top = 5 }
                   }
               };
               public class HierarchicalDetails
               {
                   public string Name { get; set; }
                   public string FillColor { get; set; }
                   public string Category { get; set; }
               }
               public List<object> DataSource = new List<object>()
               {
                   new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Layout", Category="Diagram",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Tree layout", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Organizational chart", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Hierarchical tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Radial tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Mind map", Category="Hierarchical tree",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Family tree", Category="Hierarchical tree",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Management", Category="Organizational chart",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Human resources", Category="Management",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="University", Category="Management",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Business", Category="#Management",FillColor="#659be5"}
               };
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       Type = LayoutType.HierarchicalTree,
                       VerticalSpacing = 30,
                       HorizontalSpacing = 30,
                       EnableAnimation = true,
                       LayoutInfo = this.LayoutInfo
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Orientation.Horizontal">
            <summary>
            Sets the layout orientation as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Orientation.Vertical">
            <summary>
            Sets the layout orientation as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SubTreeAlignments">
            <summary>
            Specifies the subtree alignments in an organizational chart.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the Subtree Alignments, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/organizational-chart/">1. Organizational chart</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the Subtree Alignments, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
               <DiagramDataSource Id = "Id" ParentId="Team" DataSource="@DataSource" ></DiagramDataSource>
            </SfDiagram>
            @code {
               //Initializing layout
               DiagramLayout LayoutValue;
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       //Sets layout type as OrganizationalChart...
                       Type = LayoutType.OrganizationalChart,
                       VerticalSpacing = 50,
                       HorizontalSpacing = 40,
                       //Initialize the layout info for the org chart layout
                       LayoutInfo = new TreeInfo
                       {
                           Orientation = SubTreeOrientation.Vertical,
                           CanEnableSubTree = true,
                       }
                   };
               }
               //Initializing node defaults
               DiagramNode NodeDefaults = new DiagramNode()
               {
                   Width = 150,
                   Height = 50,
                   Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Id = "label1", Style = new AnnotationStyle() { Color = "white" } }, },
                   Style = new NodeShapeStyle { Fill = "#6BA5D7", StrokeColor = "black", },
                   LayoutInfo = new DiagramNodeLayoutInfo()
                   {
                       Orientation = Orientation.Vertical,
                       Type = SubTreeAlignments.Right
                   }
               };
               //Initializing connector defaults
               DiagramConnector ConnectorDefaults = new DiagramConnector()
               {
                   Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7", StrokeWidth = 1 },
                   TargetDecorator = new ConnectorTargetDecorator()
                   {
                       Shape = DecoratorShapes.None,
                       Style = new DecoratorShapeStyle() { Fill = "#6BA5D7", StrokeColor = "#6BA5D7", },
                   }
               };
               public class OrgChartDataModel
               {
                   public string Id { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                   new OrgChartDataModel() { Id= "2", Role= "Human Resource Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "3", Role= "Design Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "4", Role= "Operation Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "5", Role= "Marketing Manager", Team= "1" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Left">
            <summary>
            Aligns the child nodes at the left of the parent in a horizontal/vertical subtree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Right">
            <summary>
            Aligns the child nodes at the right of the parent in a horizontal/vertical subtree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Center">
            <summary>
            Aligns the child nodes at the center of the parent in a horizontal subtree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Alternate">
            <summary>
            Aligns the child nodes at both left and right sides of the parent in a vertical subtree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Balanced">
            <summary>
             Aligns the child nodes in multiple rows to balance the width and height of the horizontal subtree.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ImageAlignment">
            <summary>
            Specifies the alignment for the image based on the given viewport.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.None">
            <summary>
            Sets the none alignments for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMinYMin">
            <summary>
            Sets the smallest X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMidYMin">
            <summary>
            Sets the midpoint X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMaxYMin">
            <summary>
            Sets the maximum X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMinYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMidYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMaxYMid">
            <summary>
            Sets the maximum X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMinYMax">
            <summary>
            Sets the smallest X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMidYMax">
            <summary>
            Sets the midpoint X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMaxYMax">
            <summary>
            Sets the maximum X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BasicShapes">
            <summary>
            Specifies the common shapes that are used to represent information visually.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">To know more about using basic shapes, refer to these links</td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://blazor.syncfusion.com/documentation/diagram/symbol-palette/?no-cache=1">1.  SymbolPalette</a></td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://blazor.syncfusion.com/documentation/diagram/group/#create-group">2. Group</a></td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://blazor.syncfusion.com/documentation/diagram/shapes/#basic-shapes">3. Shapes</a></td>
            </tr>
            <tr>
            <td style = "border: none">To apply basic shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette ID="palettes" Height="600px" SymbolHeight=60 SymbolWidth=60 Palettes="@Palettes">
            </SfSymbolPalette>
            @code{
               public ObservableCollection<SymbolPalettePalette> Palettes;
               /// Defines palette's basic-shape collection
               public ObservableCollection<Object> BasicShapes { get; set; }
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalettePalette>();
                   BasicShapes = new ObservableCollection<Object>()
                   {
                        new DiagramNode()
                        {
                            Id = "Rectangle",
                            Shape = new DiagramShape() {
                            Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle
                            }
                        },
                        new DiagramNode()
                        {
                            Id="Ellipse",
                            Shape = new DiagramShape() {
                            Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Ellipse
                            }
                        },
                        new DiagramNode()
                        {
                            Id="Hexagon",
                            Shape = new DiagramShape() {
                            Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Hexagon
                            }
                        }
                    };
                   Palettes.Add(new SymbolPalettePalette() { Id = "BasicShapes", Expanded = true, Symbols = BasicShapes, Title = "Basicshapes" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle">
            <summary>
            Sets the type of the basic shape as Rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Ellipse">
            <summary>
            Sets the type of the basic shape as Ellipse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Hexagon">
            <summary>
            Sets the type of the basic shape as Hexagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Parallelogram">
            <summary>
            Sets the type of the basic shape as Parallelogram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Triangle">
            <summary>
            Sets the type of the basic shape as Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Plus">
            <summary>
            Sets the type of the basic shape as Plus.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Star">
            <summary>
            Sets the type of the basic shape as Star.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Pentagon">
            <summary>
            Sets the type of the basic shape as Pentagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Heptagon">
            <summary>
            Sets the type of the basic shape as Heptagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Octagon">
            <summary>
            Sets the type of the basic shape as Octagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Trapezoid">
            <summary>
            Sets the type of the basic shape as Trapezoid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Decagon">
            <summary>
            Sets the type of the basic shape as Decagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.RightTriangle">
            <summary>
            Sets the type of the basic shape as the Right Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Cylinder">
            <summary>
            Sets the type of the basic shape as Cylinder.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Diamond">
            <summary>
            Sets the type of the basic shape as Diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Polygon">
            <summary>
            Sets the type of the basic shape as Polygon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnShapes">
            <summary>
            The graphical representation of the internal business procedure and communicating the procedures in a standard manner is done using BpmnShapes. The BPMN stands for Business Process Model and Notation.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">All the BPMN shapes represent the business process.</td>
            </tr>
            <tr>
            <td style = "border:none">The following links can be used in understanding BpmnShapes,</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnActivities.html">1.    BpmnActivities</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnDataObjects.html">2.   BpmnDataObjects</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnEvents.html">3.    BpmnEvents</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnGateways.html">4.  BpmnGateways</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnMessageFlows.html">5.  BpmnMessageFlows</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection"> </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,
                       Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.DataSource
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Event">
            <summary>
            Sets the Bpmn shape type to Event and it is represented with a circle-like shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Gateway">
            <summary>
            Sets the Bpmn shape type to Gateway and it is represented with a diamond-like shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Message">
            <summary>
            Sets the Bpmn shape type to Message.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.DataObject">
            <summary>
            Sets the Bpmn shape type to DataObject.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.DataSource">
            <summary>
            Sets the Bpmn shape type to DataSource.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Activity">
            <summary>
            Sets the Bpmn shape type to Activity and it is represented with a curved corner square-like shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Group">
            <summary>
            Sets the Bpmn shape type to Group.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.TextAnnotation">
            <summary>
            Sets the Bpmn shape type to TextAnnotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FlowShapes">
            <summary>
            Specifies the type of process flow used for analyzing designing and managing for documentation process.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none"></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/symbol-palette/?no-cache=1">1.   SymbolPalette</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/shapes/">2.  Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply flow shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection"/>
            @code{
               //Initialize node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                    //Creates a flow shape node
                    new DiagramNode()
                    {
                        Id="node1",
                        //Size of the node
                        Height=100,
                        Width=100,
                        //Position of the node
                        OffsetX=100,
                        OffsetY=100,
                        //Sets the type of the shape as flow
                        Shape=new DiagramShape()
                        {
                            Type=Shapes.Flow,
                            FlowShape=FlowShapes.DirectData
                        }
                    }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Terminator">
            <summary>
            Sets the flow shape type as Terminator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Process">
            <summary>
            Sets the flow shape type as Process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Decision">
            <summary>
            Sets the flow shape type as Decision.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Document">
            <summary>
            Sets the flow shape type as Document.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.PreDefinedProcess">
            <summary>
            Sets the flow shape type as PreDefinedProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.PaperTap">
            <summary>
            Sets the flow shape type as PaperTap.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.DirectData">
            <summary>
            Sets the flow shape type as DirectData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.SequentialData">
            <summary>
            Sets the flow shape type as SequentialData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Sort">
            <summary>
            Sets the flow shape type as Sort.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.MultiDocument">
            <summary>
            Sets the flow shape type as MultiDocument.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Collate">
            <summary>
            Sets the flow shape type as Collate.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.SummingJunction">
            <summary>
            Sets the flow shape type as SummingJunction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Or">
            <summary>
            Sets the flow shape type as Or.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.InternalStorage">
            <summary>
            Sets the flow shape type as internal storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Extract">
            <summary>
            Sets the flow shape type as Extract.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.ManualOperation">
            <summary>
            Sets the flow shape type as ManualOperation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Merge">
            <summary>
            Sets the flow shape type as Merge.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.OffPageReference">
            <summary>
            Sets the flow shape type as OffPageReference.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.SequentialAccessStorage">
            <summary>
            Sets the flow shape type as SequentialAccessStorage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Annotation">
            <summary>
            Sets the flow shape type as Annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Annotation2">
            <summary>
            Sets the flow shape type as Annotation2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Data">
            <summary>
            Sets the flow shape type as Data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Card">
            <summary>
            Sets the flow shape type as Card.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Delay">
            <summary>
            Sets the flow shape type as Delay.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Preparation">
            <summary>
            Sets the flow shape type as Preparation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Display">
            <summary>
            Sets the flow shape type as Display.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.ManualInput">
            <summary>
            Sets the flow shape type as ManualInput.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.LoopLimit">
            <summary>
            Sets the flow shape type as LoopLimit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.StoredData">
            <summary>
            Sets the flow shape type as stored data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Stretch">
            <summary>
            Allows the user to define how to stretch the image.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set Stretch to a node.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Export" @onclick="@OnExport" />
            <SfDiagram Height="600px" @ref="@Diagram">
            </SfDiagram>
            @code{
                SfDiagram Diagram;
               private void OnExport()
               {
                   IExportOptions options = new IExportOptions()
                   {
                       Mode = ExportModes.Data,
                       FileName = "region",
                       Stretch = Stretch.Stretch,
                       Region = DiagramRegions.Content,
                       Format = FileFormats.SVG
                   };
                   Diagram.ExportDiagram(options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Stretch.None">
            <summary>
            Does not preserve aspect ratio. Scales image to fit view box fully into viewport. Proportions will be distorted
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Stretch.Stretch">
            <summary>
            Stretch the entire image to the page in both horizontally and vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Stretch.Meet">
            <summary>
            Preserves aspect ratio and scales view box to fit within page size.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Stretch.Slice">
            <summary>
            Preserves aspect ratio and slices off any part of the image that does not fit inside page size.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Shapes">
            <summary>
            Specifies the type of a node.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the Shapes, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/bpmn-shapes/bpmn-shapes/">1. Bpmn</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/">2. DiagramMethods</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/shapes/">3. Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply text shape to a node, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                //Initialize node collection with node
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                   //Creates a text node
                    new DiagramNode()
                    {
                        Id="node1",
                        // Size of the node
                        Height=100,
                        Width=100,
                        // Position of the node
                        OffsetX=100,
                        OffsetY=100,
                        //Sets type of the shape as text
                        Shape=new DiagramShape(){Type=Shapes.Text,Content="Text Node"}
                    }
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Basic">
            <summary>
            Sets the node as Basic.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Path">
            <summary>
            Sets the node as Path.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Text">
            <summary>
            Sets the node as Text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Image">
            <summary>
            Sets the node as Image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Flow">
            <summary>
            Sets the node as Flow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Bpmn">
            <summary>
            Sets the node as Bpmn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Native">
            <summary>
            Sets the node as Native.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.HTML">
            <summary>
            Sets the node as HTML.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.UmlActivity">
            <summary>
            Sets the node as a UmlActivity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier">
            <summary>
            Sets the node as a UmlClassifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.SwimLane">
            <summary>
            Sets the node as SwimLane.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UmlActivityShapes">
            <summary>
            The UML activity diagram is a flowchart that represents the flow from one activity to another. It describes the activity flow of a system, and the parallel flow of a system.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set UMLActivity shape.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Defines diagram's connector collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               public DiagramConstraints diagramConstraints = DiagramConstraints.Default;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 200,
                       OffsetY = 200,
                       Shape = new DiagramShape()
                       {
                           Type = Syncfusion.Blazor.Diagrams.Shapes.UmlActivity,
                           //Define UmlActivity shape
                           UmlActivityShape = UmlActivityShapes.Action
                       }
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.Action">
            <summary>
            Sets the type of UMLActivity to Action and it has a rounded corner square shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.Decision">
            <summary>
            Sets the type of UMLActivity to Decision and it has a diamond-like shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.MergeNode">
            <summary>
            Sets the type of UMLActivity to MergeNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.InitialNode">
            <summary>
            Sets the type of UMLActivity to InitialNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.FinalNode">
            <summary>
            Sets the type of UMLActivity to FinalNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.ForkNode">
            <summary>
            Sets the type of UMLActivity to ForkNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.JoinNode">
            <summary>
            Sets the type of UMLActivity to JoinNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.TimeEvent">
            <summary>
            Sets the type of UMLActivity to TimeEvent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.AcceptingEvent">
            <summary>
            Sets the type of UMLActivity to AcceptingEvent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.SendSignal">
            <summary>
            Sets the type of UMLActivity to SendSignal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.ReceiveSignal">
            <summary>
            Sets the type of UMLActivity to RecieveSignal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.StructuredNode">
            <summary>
            Sets the type of UMLActivity to StructuredNode and has a square shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.Note">
            <summary>
            Sets the type of UMLActivity to Note.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UmlScope">
            <summary>
            Defines the scope of the UML shape.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following code snippet is an example to set the UMLScope to Private,</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode node = new DiagramNode()
                   {
                       Id = "Patient",
                       OffsetX = 200,
                       OffsetY = 200,
                       Shape = new DiagramShape()
                       {
                           Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                           Classifier = ClassifierShape.Class,
                           //Define class object
                           ClassShape = new DiagramUmlClass()
                           {
                               Name = "Patient",
                               Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                               {
                                   new DiagramUmlClassAttribute() { Name = "accepted", Type = "Date" }
                               },
                               //Define class methods
                               Methods = new ObservableCollection<DiagramUmlClassMethod>()
                               {
                                   new DiagramUmlClassMethod()
                                   {
                                       Name = "getHistory", Type = "getHistory",Scope=UmlScope.Private
                                   }
                               }
                           }
                       }
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlScope.Public">
            <summary>
            Sets the scope of the attribute to Public
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlScope.Protected">
            <summary>
            Sets the scope of the attribute to Protected
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlScope.Private">
            <summary>
            Sets the scope of the attribute to Private
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlScope.Package">
            <summary>
            Sets the visibility of the attribute to Package
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.GradientType">
            <summary>
            Specifies the type of transition between two or more colors.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Gradient type, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/nodes/appearance/">1.    NodesAppearance</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramGradient_members.html">2. DiagramGradient</a></td>
            </tr>
            <tr>
            <td style = "border:none"></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   // A node is created and stored in nodes array.
                   DiagramNode node1 = new DiagramNode()
                   {
                       // Position of the node
                       OffsetX = 250,
                       OffsetY = 250,
                       // Size of the node
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle()
                       {
                           Gradient = new DiagramGradient()
                           {
                               //Start point of linear gradient
                               X1 = 0,
                               Y1 = 0,
                               //End point of linear gradient
                               X2 = 50,
                               Y2 = 50,
                               //Sets an array of stop objects
                               Stops = new ObservableCollection<DiagramsGradientStop>()
                               {
                                   new DiagramsGradientStop(){ Color = "white", Offset = 0},
                                   new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
                               },
                               Type = GradientType.Linear
                           }
                       },
                   };
                   NodeCollection.Add(node1);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GradientType.None">
            <summary>
            No gradient will be applied by default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GradientType.Linear">
            <summary>
            Sets the type of gradient as Linear.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GradientType.Radial">
            <summary>
            Sets the type of gradient as Radial.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnEvents">
            <summary>
            A common BPMN process model element that represents some happening during a business process is an Event.
            </summary>
            <remarks>
            The below code snippet is an example to set the BpmnEvents,.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "@SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {`
                       OffsetX = 100, OffsetY = 100,
                       Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           ///Sets type to Bpmn and shape to Event
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Event,
                           /// Set the event type to NonInterruptingIntermediate
                           Event = new DiagramBpmnEvent() { Event = BpmnEvents.NonInterruptingIntermediate }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.Start">
            <summary>
            Indicates the beginning of the process and every business process starts with an event.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.Intermediate">
            <summary>
            Indicates the ongoing stage (Middle � after starting and before ending) of the process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.End">
            <summary>
            Indicates the beginning of the process and every business process ends with an event.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.NonInterruptingStart">
            <summary>
            Sets the type of the BPMN Event as NonInterruptingStart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.NonInterruptingIntermediate">
            <summary>
            Sets the type of the BPMN Event as NonInterruptingIntermediate.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.ThrowingIntermediate">
            <summary>
            Sets the type of the BPMN Event as ThrowingIntermediate.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnTriggers">
            <summary>
            The Trigger property of the node allows the user to set the type of BPMN trigger. Triggers are notated as icons inside the circle.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The Trigger members can be set to any one of the BPMN events.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set Trigger to NonInterruptingIntermediate Bpmn event.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100, Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Event,
                           // Set the event type to NonInterruptingIntermediate and set the trigger as message
                           Event = new DiagramBpmnEvent() { Event = BpmnEvents.NonInterruptingIntermediate }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.None">
            <summary>
            Sets the type of the trigger as None. None is the default value for the trigger.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Message">
            <summary>
            Sets the type of the trigger as Message.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Timer">
            <summary>
            Sets the type of the trigger as Timer.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Escalation">
            <summary>
            Sets the type of the trigger as Escalation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Link">
            <summary>
            Sets the type of the trigger as Link.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Error">
            <summary>
            Sets the type of the trigger as Error.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Compensation">
            <summary>
            Sets the type of the trigger as Compensation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Signal">
            <summary>
            Sets the type of the trigger as Signal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Multiple">
            <summary>
            Sets the type of the trigger as Multiple.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Parallel">
            <summary>
            Sets the type of the trigger as Parallel.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Cancel">
            <summary>
            Sets the type of the trigger as Cancel.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Conditional">
            <summary>
            Sets the type of the trigger as Conditional.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Terminate">
            <summary>
            Sets the type of the trigger as Termination.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnGateways">
            <summary>
            The Gateway controls the flow of a process and it is represented by a diamond shape. This enumeration defines the type of gateway to be set in the BPMN shape.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">The BPMN Gateway can be set to Complex, EventBased, etc., All the gateway shapes are covered by a diamond-like shape in the outer.</td>
            </tr>
            <tr>
            <td style = "border: none">The below code snippet is an example to set BPMN Gateways,</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,
                       Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Gateway,
                           ///Sets type of the gateway to None
                           Gateway = new DiagramBpmnGateway(){Type = BpmnGateways.Parallel}
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.None">
            <summary>
            Sets the gateway type to None and it is represented by a diamond(gateway) shape with no symbols in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.Exclusive">
            <summary>
            Sets the gateway type to Exclusive and it is represented by a cross symbol inside the gateway shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.Inclusive">
            <summary>
            Sets the gateway type to Inclusive and it is represented by a circle inside the gateway shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.Parallel">
            <summary>
            Sets the gateway type to Parallel. It is represented by an addition sign inside the gateway shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.Complex">
            <summary>
            Sets the gateway type to Complex and it is represented by an asterisk symbol inside the gateway.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.EventBased">
            <summary>
            Sets the gateway type to Event.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.ExclusiveEventBased">
            <summary>
            Sets the gateway type to ExclusiveEventBased.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.ParallelEventBased">
            <summary>
            Sets the gateway type to ParallelEventBased.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnDataObjects">
            <summary>
            A data object represents the information flowing throughout the BPMN process. This enumeration defines the type of Data object to be set in the BPMN shape.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">The BPMN Data object can be set to Input, Output or None.</td>
            </tr>
            <tr>
            <td style = "border: none">The below code is an example to set BPMN Data objects</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagram ID="Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       //Sets type to Bpmn and shape to DataObject
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape=BpmnShapes.DataObject,
                           //Sets collection to true when Dataobject is not a Single instance
                           DataObject=new DiagramBpmnDataObject()
                           {
                               Collection=true,
                               Type=BpmnDataObjects.Input
                           }
                       }
                   },
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnDataObjects.None">
            <summary>
            The BPMN Data object type is set to None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnDataObjects.Input">
            <summary>
            The BPMN Data object type is set to Input.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnDataObjects.Output">
            <summary>
            The BPMN Data object type is set to Output.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnActivities">
            <summary>
            The BPMN activity is a task performed in a business process and it is represented by a rounded rectangle.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">To know more about BpmnActivities, refer the following links:</td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.html">DiagramBpmnActivity</a></td>
            </tr>
            <tr>
            <td style = "border: none">The following code snippet demonstrates how to set BPMNActivity to Task.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,
                       Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.Activity,
                           ///Sets the activity type to task
                           Activity = new DiagramBpmnActivity(){ Activity = BpmnActivities.Task },
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnActivities.Task">
            <summary>
            Sets the BPMN activity as Task.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnActivities.None">
            <summary>
            Renders a BPMN activity shape of type None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnActivities.SubProcess">
            <summary>
            Defines the BPMN activity to Subprocess.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnLoops">
            <summary>
            The loop property of a task allows the user to define the type of loop. Loop is a task looped internally. Loops can be set to both tasks and subprocesses.
            </summary>
            <remarks>
            By default, Loops are set to None.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.Activity,
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.Task,
                               ///Sets collapsed to true and loop to standard
                               Task=new DiagramBpmnTask()
                               {
                                   Loop = BpmnLoops.SequenceMultiInstance,
                               }, }
                       }
                    }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnLoops.None">
            <summary>
            Sets the loop for task or subprocess as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnLoops.Standard">
            <summary>
            Sets the loop for task or subprocess as Standard.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnLoops.ParallelMultiInstance">
            <summary>
            Sets the loop for task or subprocess as ParallelMultiInstance.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnLoops.SequenceMultiInstance">
            <summary>
            Sets the loop for task or subprocess as SequenceMultiInstance.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnTasks">
            <summary>
            The Task property allows the users to define the type of task such as sending, receiving, etc.,.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following links can be used in understanding Tasks,</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnActivities.html">1.    BpmnActivities</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, Off   setY = 100, Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.Task,
                               //Sets the type of the task to BusinessRule
                               Task = new DiagramBpmnTask(){ Type = BpmnTasks.BusinessRule }
                           }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.None">
            <summary>
            Sets the Bpmn task type to None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Service">
            <summary>
            Sets the Bpmn task type to Service.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Receive">
            <summary>
            Sets the Bpmn task type to Recieve.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Send">
            <summary>
            Sets the Bpmn task type to Send.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.InstantiatingReceive">
            <summary>
            Sets the Bpmn task type to InstantiatingReceive.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Manual">
            <summary>
            Sets the Bpmn task type to Manual.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.BusinessRule">
            <summary>
            Sets the Bpmn task type to BusinessRule.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.User">
            <summary>
            Sets the Bpmn task type to User.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Script">
            <summary>
            Sets the Bpmn task type to Script.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnBoundary">
            <summary>
            The boundary represents the type of task that is being processed. The boundary property of subprocess allows you to define the type of boundary.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, BpmnBoundary is set to Default.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
            ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
            {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100, Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.SubProcess,
                               ///Sets collapsed to true and boundary to Call
                               SubProcess = new DiagramBpmnSubProcess()
                               {
                                   Collapsed = true,
                                   Boundary = BpmnBoundary.Call
                               },
                           }
                       }
                   },
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnBoundary.Default">
            <summary>
            Sets the boundary to Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnBoundary.Call">
            <summary>
            Sets the boundary to Call and it is represented with a bolder layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnBoundary.Event">
            <summary>
            Sets the boundary to Event and it is represented with a dotted layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnSubProcessTypes">
            <summary>
            A group of tasks that are used to hide or reveal details of additional levels using the Collapsed property are known as Subprocess.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following links might be helpful in understanding Subprocess</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnEvents.html">1. BpmnEvents</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                           ///Sets activity to SubProcess
                           Activity=new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.SubProcess,
                               ///Sets the collapsed to true and type to Event
                               SubProcess=new DiagramBpmnSubProcess()
                               {
                                   Collapsed = true, Type = BpmnSubProcessTypes.Transaction,
                               }
                            }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSubProcessTypes.None">
            <summary>
            Sets the Subprocess to None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSubProcessTypes.Transaction">
            <summary>
            A Transaction is a set of activities that logically belong together to be completed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSubProcessTypes.Event">
            <summary>
            A Subprocess is an event�s subprocess triggered by an event. The Type property of the subprocess allows users to define the type of subprocess.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ScrollLimit">
            <summary>
            Defines the scrollable region of the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the scroll limit, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/scroll-settings/#scroll-limit">1.    ScrollSettings</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the infinity scroll limit, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
               @* Sets the ScrollLimit of scroll settings*@
               <DiagramScrollSettings HorizontalOffset = "100" VerticalOffset="50" ScrollLimit="ScrollLimit.Infinity">
               </DiagramScrollSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ScrollLimit.Diagram">
            <summary>
            Enables scrolling to view the diagram content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ScrollLimit.Infinity">
            <summary>
            Diagram will be extended, when we try to scroll the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ScrollLimit.Limited">
            <summary>
            Enables scrolling to view the specified area.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SnapConstraints">
            <summary>
            Specifies the constraints to enable/ disable snapping and to controls the visibility of gridlines.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the snap constraints, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/constraints/#snap-constraints">1.    Constraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/grid-lines/">2.  Gridlines</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply show horizontal lines snap constraints, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               @* Initialize the snapsettings with constraints *@
               <DiagramSnapSettings Constraints = "SnapConstraints.ShowHorizontalLines" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.All">
            <summary>
            Shows gridlines and enables snapping.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.None">
            <summary>
            Disable to snapping the nodes/connectors in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.ShowHorizontalLines">
            <summary>
            Displays only the horizontal gridlines in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.ShowLines">
            <summary>
            Display both Horizontal and Vertical gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.ShowVerticalLines">
            <summary>
            Displays only the Vertical gridlines in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.SnapToHorizontalLines">
            <summary>
            Enables the object to snap only with horizontal gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.SnapToLines">
            <summary>
            Enables the object to snap with both horizontal and vertical gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.SnapToObject">
            <summary>
            Enables the object to snap with the other objects in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.SnapToVerticalLines">
            <summary>
            Enables the object to snap only with Vertical gridlines.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.GridType">
            <summary>
            It allows the user to define the type of the grid as either lines or dots.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set GridType to Dots.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramSnapSettings GridType = "GridType.Dots" >
                   < HorizontalGridlines LineColor="red" />
                   <VerticalGridlines LineColor = "red" />
               </ DiagramSnapSettings >
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GridType.Lines">
            <summary>
            Renders grid patterns as dots.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GridType.Dots">
            <summary>
            Renders grid patterns as lines.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.RulerOrientation">
            <summary>
            Specifies the orientation(direction) for both horizontal and vertical rulers.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
                   <DiagramRulerSettings ShowRulers = "true" >
                       < HorizontalRuler Orientation="RulerOrientation.Vertical"></HorizontalRuler>
                       <VerticalRuler Orientation = "RulerOrientation.Horizontal" ></ VerticalRuler >
                   </ DiagramRulerSettings >
               </ SfDiagram >
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RulerOrientation.Horizontal">
            <summary>
            Sets the orientation of both the rulers to horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RulerOrientation.Vertical">
            <summary>
            Sets the orientation of both the rulers to vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TickAlignment">
            <summary>
            Specifies the Tick Alignment for the ruler.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
                <DiagramRulerSettings ShowRulers = "true" >
                <HorizontalRuler TickAlignment="TickAlignment.RightOrBottom"></HorizontalRuler>
                </DiagramRulerSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TickAlignment.LeftOrTop">
            <summary>
            Sets the TickAlignment to LeftOrTop.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TickAlignment.RightOrBottom">
            <summary>
            Sets the TickAlignment to RightOrBottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BoundaryConstraints">
            <summary>
            It allows the users to set the region to allow interaction with the diagram.
            </summary>
            <remarks>
            The boundary constraints are enabled or disabled using the Bitwise operators. The ‘~’ operator is used to disable the boundary constraints. The boundary constraints can be enabled in the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramPageSettings.html">DiagramPageSettings</a>.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               // Initialize the page settings with boundary constraints.
               <DiagramPageSettings Height = "500" BoundaryConstraints="BoundaryConstraints.Page"></DiagramPageSettings>
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode node = new DiagramNode()
                   {
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BoundaryConstraints.Infinity">
            <summary>
            Allow the interactions to take place at the infinite height and width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BoundaryConstraints.Diagram">
            <summary>
            Allow the interactions to take place around the diagram height and width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BoundaryConstraints.Page">
            <summary>
            Allow the interactions to take place around the height and width mentioned on the page settings.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PageOrientation">
            <summary>
            Specifies the orientation of the page.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Page Orientation, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/page-settings/">1.   PageSettings</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply page orientation, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
               @* Initialize the page settings with page orientation and break lines*@
               <DiagramPageSettings Height = "300" Width="500" Orientation="PageOrientation.Portrait" ShowPageBreaks="true">
               </DiagramPageSettings>
            </SfDiagram>
            @code
            {
               //Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               protected override void OnInitialized()
               {
                   DiagramNode node = new DiagramNode()
                   {
                       Id = "group",
                       OffsetX = 200,
                       OffsetY = 200,
                       Width = 100,
                       Height = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                           new DiagramNodeAnnotation()
                           {
                               Content = "Node1",
                               Style = new AnnotationStyle()
                               {
                                   Color = "white",
                               }
                           }
                       },
                       Style = new NodeShapeStyle() { Fill = "cornflowerblue", StrokeColor = "white" }
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PageOrientation.Landscape">
            <summary>
            Specifies the page Width is more than the page Height.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PageOrientation.Portrait">
            <summary>
            Specifies the page Height is more than the page width.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Scale">
            <summary>
            It allows the user to stretch the image as desired.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the scale, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/shapes/#image-alignment">1.  Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the scale to meet, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection"/>
            @code{
               //Initialize node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                    //Creates an image node
                    new DiagramNode()
                    {
                        Id="node1",
                        //Size of the node
                        Height=100,
                        Width=100,
                        //Position of the node
                        OffsetX=100,
                        OffsetY=100,
                        //Sets type of the shape as image
                        Shape=new DiagramShape (){Type=Shapes.Image,Source="/diagram/images/syncfusion.png",Scale=Stretch.Meet, Align = ImageAlignment.XMinYMin}
                    }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Scale.None">
            <summary>
            There will be no scaling to the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Scale.Meet">
            <summary>
            It aligns the image to the center of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Scale.Slice">
            <summary>
            It zooms in to fill the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FitModes">
            <summary>
            Specifies how the diagram has to be fit into the viewport.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using fit modes, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/">1.  Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply fit modes, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram ID="diagram" Height="600px" Layout="@LayoutValue" ConnectorDefaults="@ConnectorDefault" NodeDefaults="@NodeDefaults" SelectedItems="@SelectedItems">
               <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource">
                   <DiagramDataMapSettings>
                       <DiagramDataMapSetting Property = "Shape.TextContent" Field="Name"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.StrokeColor" Field="FillColor"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.Fill" Field="FillColor"></DiagramDataMapSetting>
                   </DiagramDataMapSettings>
               </DiagramDataSource>
               <DiagramPageSettings>
                   <DiagramFitOptions CanFit = "true" Mode="FitModes.Height"></DiagramFitOptions>
               </DiagramPageSettings>
            </SfDiagram>
            @code{
               DiagramSelectedItems SelectedItems = new DiagramSelectedItems()
               {
                   Constraints = SelectorConstraints.All & ~SelectorConstraints.ResizeAll & ~SelectorConstraints.Rotate
               };
               TreeInfo LayoutInfo = new TreeInfo()
               {
                   CanEnableSubTree = true,
                   Orientation = SubTreeOrientation.Horizontal
               };
               DiagramLayout LayoutValue = new DiagramLayout() { };
               DiagramConnector ConnectorDefault = new DiagramConnector()
               {
                   TargetDecorator = new ConnectorTargetDecorator() { Shape = DecoratorShapes.None },
                   Type = Segments.Orthogonal,
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6d6d6d" },
                   Constraints = 0,
                   CornerRadius = 5
               };
               DiagramNode NodeDefaults = new DiagramNode
               {
                   Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none", Color = "white", StrokeWidth = 2, },
                   BackgroundColor = "#659be5",
                   Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Text, Margin = new BasicShapeMargin() { Left = 10, Right = 10, Bottom = 10, Top = 10 } },
                   ExpandIcon = new NodeExpandIcon()
                   {
                       Height = 10,
                       Width = 10,
                       Shape = IconShapes.Minus,
                       Fill = "lightgray",
                       Offset = new IconOffset() { X = 0.5, Y = 1 },
                       VerticalAlignment = VerticalAlignment.Auto,
                       Margin = new ExpandIconMargin() { Bottom = 0, Left = 0, Right = 0, Top = 0 }
                   },
                   CollapseIcon = new NodeCollapseIcon()
                   {
                       Offset = new IconOffset() { X = 0.5, Y = 1 },
                       VerticalAlignment = VerticalAlignment.Auto,
                       Height = 10,
                       Width = 10,
                       Shape = IconShapes.Plus,
                       Fill = "lightgray",
                       Padding = new IconPadding() { Top = 5 }
                   }
               };
               public class HierarchicalDetails
               {
                   public string Name { get; set; }
                   public string FillColor { get; set; }
                   public string Category { get; set; }
               }
               public List<object> DataSource = new List<object>()
               {
                   new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Layout", Category="Diagram",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Tree layout", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Organizational chart", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Hierarchical tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Radial tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Mind map", Category="Hierarchical tree",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Family tree", Category="Hierarchical tree",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Management", Category="Organizational chart",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Human resources", Category="Management",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="University", Category="Management",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Business", Category="#Management",FillColor="#659be5"}
               };
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       Type = LayoutType.HierarchicalTree,
                       VerticalSpacing = 30,
                       HorizontalSpacing = 30,
                       EnableAnimation = true,
                       LayoutInfo = this.LayoutInfo
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FitModes.Page">
            <summary>
            Fits the entire diagram content within the viewport
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FitModes.Width">
            <summary>
            Fits the width of the diagram content within the viewport
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FitModes.Height">
            <summary>
            Fits the height of the diagram content within the viewport
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramRegions">
            <summary>
            Specifies the region that has to be drawn as an image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramRegions.PageSettings">
            <summary>
            Sets to export the diagram with the given page settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramRegions.Content">
            <summary>
            Sets to export the diagram content alone.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramRegions.CustomBounds">
            <summary>
            Sets to export the diagram with the given bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SelectorConstraints">
            <summary>
            Specifies the visibility of the selector handles.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the selector constraints, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/constraints/#selector-constraints">1. Constraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/user-handle/">2. User handles</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply UserHandle selector constraints, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px"  Nodes="@NodeCollection" SelectedItems="@SelectedModel">
            </SfDiagram>
            @code{
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines diagram's SelectedItems
               public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
               ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
               protected override void OnInitialized()
               {
                   //Creating the userhandle for cloning the objects
                   DiagramUserHandle CloneHandle = new DiagramUserHandle()
                   {
                       //Name of the user handle
                       Name = "clone",
                       //Set pathdata for userhandle
                       PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                       //Set visibility for the user handle
                       Visible = true,
                       //Set the position for the user handle
                       Offset = 0,
                       //Set side based on the given offset
                       Side = Side.Bottom,
                       //set margin for the user handle
                       Margin = new DiagramUserHandleMargin() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
                   };
                   //Add user handle to the collection...
                   UserHandles = new ObservableCollection<DiagramUserHandle>()
                   {
                       CloneHandle
                   };
                   SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                   {
                       //Enable userhandle for selected items...
                       Constraints = SelectorConstraints.UserHandle,
                       UserHandles = this.UserHandles
                   };
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.All">
            <summary>
            Shows all handles of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ConnectorSourceThumb">
            <summary>
            Shows the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ConnectorTargetThumb">
            <summary>
            Shows the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.None">
            <summary>
            Hides all the selector elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeAll">
            <summary>
            Shows all resize handles of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeEast">
            <summary>
            Shows the middle right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeNorth">
            <summary>
            Shows the top center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeNorthEast">
            <summary>
            Shows the top right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeNorthWest">
            <summary>
            Shows the top left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeSouth">
            <summary>
            Shows the bottom center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeSouthEast">
            <summary>
            Shows the bottom right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeSouthWest">
            <summary>
            Shows the bottom left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeWest">
            <summary>
            Shows the middle left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.Rotate">
            <summary>
            Shows the rotate handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ToolTip">
            <summary>
            Shows the default tooltip of nodes and connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.UserHandle">
            <summary>
            Shows the user handles of the selector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.RubberBandSelectionMode">
            <summary>
            Specifies how to handle the selected items via rubber band selection.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram SelectedItems="@Sels"> </SfDiagram>
            @code
            {
               DiagramSelectedItems Sels = new DiagramSelectedItems()
               {
                   RubberBandSelectionMode = RubberBandSelectionMode.CompleteIntersect
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RubberBandSelectionMode.CompleteIntersect">
            <summary>
            Selects the objects that are contained within the selected region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RubberBandSelectionMode.PartialIntersect">
            <summary>
            Selects the objects that are partially intersected with the selected region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Side">
            <summary>
            Specifies where the user handles have to be aligned.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the side, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/user-handle/">1. UserHandles</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the user handle side, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" SelectedItems="@SelectedModel">
            </SfDiagram>
            @code{
               /// Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               /// Defines diagram's SelectedItems
               public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
               ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
               protected override void OnInitialized()
               {
                   ///Creating the userhandle for cloning the objects
                   DiagramUserHandle CloneHandle = new DiagramUserHandle()
                   {
                       ///Name of the user handle
                       Name = "clone",
                       ///Set pathdata for userhandle
                       PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                       ///Set visibility for the user handle
                       Visible = true,
                       ///Set the position for the user handle
                       Offset = 0,
                       ///Set side based on the given offset
                       Side = Side.Bottom,
                       ///set margin for the user handle
                       Margin = new DiagramUserHandleMargin() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
                   };
                   ///Add user handle to the collection...
                   UserHandles = new ObservableCollection<DiagramUserHandle>()
                   {
                       CloneHandle
                   };
                   SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                   {
                       ///Enable userhandle for selected items...
                       Constraints = SelectorConstraints.UserHandle,
                       UserHandles = this.UserHandles
                   };
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Side.Top">
            <summary>
            Aligns the user handles at the top of an object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Side.Bottom">
            <summary>
            Aligns the user handles at the bottom of an object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Side.Left">
            <summary>
            Aligns the user handles at the left of an object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Side.Right">
            <summary>
            Aligns the user handles at the right of an object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectionDirection">
            <summary>
            Specifies the directions of the first segment have to be defined in a layout.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height = "600px" Layout="@LayoutValue">
            </SfDiagram>
            @code {
               DiagramLayout LayoutValue;
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       ConnectionDirection = ConnectionDirection.Auto,
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionDirection.Auto">
            <summary>
            Sets the first segment direction based on the type of the layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionDirection.Orientation">
            <summary>
            Sets the first segment direction based on the orientation of the layout
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionDirection.Custom">
            <summary>
            Sets the first segment direction dynamically by the user
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorSegments">
            <summary>
            It allows the user to customize the connector segments according to the layout.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px"  Layout="@LayoutValue">
               </SfDiagram>
               @code {
                   DiagramLayout LayoutValue;
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       ConnectorSegments = ConnectorSegments.Default
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorSegments.Default">
            <summary>
            The connectors appear as in the default diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorSegments.Layout">
            <summary>
            The connectors are customized based on the type of layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.LayoutOrientation">
            <summary>
            Specifies the orientation of the layout.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using LayoutOrientation, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/#orientation">1.  Hierarchical Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/organizational-chart/">2. Organizational Chart</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply complex hierarchical layout orientation, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram @ref="@Diagram" Height="600px" tool="@DiagramTools.ZoomPan" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefault" Layout="@LayoutValue">
                   <DiagramDataSource Id = "Name" ParentId="ReportingPerson" DataMapSettings="@Datamap" DataSource="@DataSource"></DiagramDataSource>
               </SfDiagram>
            @code {
               SfDiagram Diagram;
               List<DiagramDataMapSetting> Datamap = new List<DiagramDataMapSetting>() {
                   new DiagramDataMapSetting() { Property = "Style.fill", Field = "fillColor" },
                   new DiagramDataMapSetting() { Property = "Style.strokeColor", Field = "border" }
               };
               DiagramLayout LayoutValue = new DiagramLayout()
               {
                   Type = LayoutType.ComplexHierarchicalTree,
                   HorizontalSpacing = 40,
                   VerticalSpacing = 40,
                   Orientation = LayoutOrientation.TopToBottom,
                   Margin = new LayoutMargin() { Left = 20, Top = 20 },
               };
               DiagramNode NodeDefaults = new DiagramNode
               {
                   Height = 40,
                   Width = 40,
                   Shape = new DiagramShape() { BasicShape = BasicShapes.Rectangle, Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, CornerRadius = 7 },
               };
               DiagramConnector ConnectorDefault = new DiagramConnector
               {
                   Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                   CornerRadius = 7,
                   TargetDecorator = new ConnectorTargetDecorator() { Width = 7, Height = 7 },
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6d6d6d" }
               };
               public class DataModel
               {
                   public string Name;
                   public string fillColor;
                   public string border;
                   public string[] ReportingPerson;
               }
               public object DataSource = new List<object>()
               {
                   new DataModel { Name = "node11", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node12", ReportingPerson = new string[]{ "node114" }, fillColor = "#efd46e", border = "#d6b123" },
                   new DataModel {  Name = "node13", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node14", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node15", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node16", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node17", ReportingPerson = new string[] { "node13", "node14", "node15" }, fillColor = "#659be5", border = "#3a6eb5" },
                   new DataModel {  Name = "node18", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node19", ReportingPerson = new string[] { "node16", "node17", "node18" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node110", ReportingPerson = new string[] { "node16", "node17", "node18" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node111", ReportingPerson = new string[] { "node16", "node17", "node18", "node116" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node21", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node22", ReportingPerson = new string[] { "node114" }, fillColor = "#efd46e", border = "#d6b123" },
                   new DataModel {  Name = "node23", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node24", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node25", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node26", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node27", ReportingPerson = new string[] { "node23", "node24", "node25" }, fillColor = "#659be5", border = "#3a6eb5" },
                   new DataModel {  Name = "node28", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node29", ReportingPerson = new string[] { "node26", "node27", "node28", "node116" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node210", ReportingPerson = new string[] { "node26", "node27", "node28" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node211", ReportingPerson = new string[] { "node26", "node27", "node28" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node31", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node114", ReportingPerson = new string[] { "node11", "node21", "node31" }, fillColor = "#f3904a", border = "#d3722e" },
                   new DataModel {  Name = "node116", ReportingPerson = new string[] { "node12", "node22" }, fillColor = "#58b087", border = "#16955e" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutOrientation.TopToBottom">
            <summary>
            Renders the layout from top to bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutOrientation.BottomToTop">
            <summary>
            Renders the layout from bottom to top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutOrientation.LeftToRight">
            <summary>
            Renders the layout from left to right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutOrientation.RightToLeft">
            <summary>
            Renders the layout from right to left.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.LayoutType">
            <summary>
            Specifies the type of automatic layout.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using LayoutType, refer to these links></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/automatic-layout/">Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply ComplexHierarchical Layout type, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram @ref="@Diagram" id="diagram" Height="600px" tool="@DiagramTools.ZoomPan" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefault" Layout="@LayoutValue">
                   <DiagramDataSource Id = "Name" ParentId="ReportingPerson" DataMapSettings="@Datamap" DataSource="@DataSource"></DiagramDataSource>
               </SfDiagram>
            @code {
               SfDiagram Diagram;
               List<DiagramDataMapSetting> Datamap = new List<DiagramDataMapSetting>() {
                   new DiagramDataMapSetting() { Property = "Style.fill", Field = "fillColor" },
                   new DiagramDataMapSetting() { Property = "Style.strokeColor", Field = "border" }
               };
               DiagramLayout LayoutValue = new DiagramLayout()
               {
                   Type = LayoutType.ComplexHierarchicalTree,
                   HorizontalSpacing = 40,
                   VerticalSpacing = 40,
                   Orientation = LayoutOrientation.TopToBottom,
                   Margin = new LayoutMargin() { Left = 20, Top = 20 },
               };
               DiagramNode NodeDefaults = new DiagramNode
               {
                   Height = 40,
                   Width = 40,
                   Shape = new DiagramShape() { BasicShape = BasicShapes.Rectangle, Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, CornerRadius = 7 },
               };
               DiagramConnector ConnectorDefault = new DiagramConnector
               {
                   Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                   CornerRadius = 7,
                   TargetDecorator = new ConnectorTargetDecorator() { Width = 7, Height = 7 },
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6d6d6d" }
               };
               public class DataModel
               {
                   public string Name;
                   public string fillColor;
                   public string border;
                   public string[] ReportingPerson;
               }
               public object DataSource = new List<object>()
               {
                   new DataModel { Name = "node11", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node12", ReportingPerson = new string[]{ "node114" }, fillColor = "#efd46e", border = "#d6b123" },
                   new DataModel {  Name = "node13", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node14", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node15", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node16", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node17", ReportingPerson = new string[] { "node13", "node14", "node15" }, fillColor = "#659be5", border = "#3a6eb5" },
                   new DataModel {  Name = "node18", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node19", ReportingPerson = new string[] { "node16", "node17", "node18" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node110", ReportingPerson = new string[] { "node16", "node17", "node18" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node111", ReportingPerson = new string[] { "node16", "node17", "node18", "node116" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node21", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node22", ReportingPerson = new string[] { "node114" }, fillColor = "#efd46e", border = "#d6b123" },
                   new DataModel {  Name = "node23", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node24", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node25", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node26", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node27", ReportingPerson = new string[] { "node23", "node24", "node25" }, fillColor = "#659be5", border = "#3a6eb5" },
                   new DataModel {  Name = "node28", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node29", ReportingPerson = new string[] { "node26", "node27", "node28", "node116" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node210", ReportingPerson = new string[] { "node26", "node27", "node28" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node211", ReportingPerson = new string[] { "node26", "node27", "node28" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node31", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node114", ReportingPerson = new string[] { "node11", "node21", "node31" }, fillColor = "#f3904a", border = "#d3722e" },
                   new DataModel {  Name = "node116", ReportingPerson = new string[] { "node12", "node22" }, fillColor = "#58b087", border = "#16955e" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.None">
            <summary>
            None of the layouts is applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.HierarchicalTree">
            <summary>
            Defines the type of layout as a Hierarchical Tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.RadialTree">
            <summary>
            Defines the type of layout as a Radial tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.OrganizationalChart">
            <summary>
            Defines the type of layout as an Organizational Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.SymmetricalLayout">
            <summary>
            Defines the type of layout as a Symmetrical layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.ComplexHierarchicalTree">
            <summary>
            Defines the type of layout as complex HierarchicalTree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.MindMap">
            <summary>
            Defines the type of layout as Mind Map.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Keys">
            <summary>
            Sets the key value, on recognition of which the command key will be executed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.A">
            <summary>
            Sets the key value as A when A key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.B">
            <summary>
            Sets the key value as B when B key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.BackSpace">
            <summary>
            Sets the key value as BackSpace when BackSpace key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.C">
            <summary>
            Sets the key value as C when C key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.D">
            <summary>
            Sets the key value as D when D key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Delete">
            <summary>
            Sets the key value as Delete when Delete key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Down">
            <summary>
            Sets the key value as Down when Down arrow key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.E">
            <summary>
            Sets the key value as E when E key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.End">
            <summary>
            Sets the key value as End when End key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Enter">
            <summary>
            Sets the key value as Enter when Enter key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Escape">
            <summary>
            Sets the key value as Escape when Escape key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F">
            <summary>
            Sets the key value as F when F key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F1">
            <summary>
            Sets the key value as F1 when F1 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F10">
            <summary>
            Sets the key value as F10 when F10 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F11">
            <summary>
            Sets the key value as F11 when F11 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F12">
            <summary>
            Sets the key value as F12 when F12 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F2">
            <summary>
            Sets the key value as F2 when F2 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F3">
            <summary>
            Sets the key value as F3 when F3 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F4">
            <summary>
            Sets the key value as F4 when F4 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F5">
            <summary>
            Sets the key value as F5 when F5 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F6">
            <summary>
            Sets the key value as F6 when F6 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F7">
            <summary>
            Sets the key value as F7 when F7 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F8">
            <summary>
            Sets the key value as F8 when F8 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F9">
            <summary>
            Sets the key value as F9 when F9 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.G">
            <summary>
            Sets the key value as G when G key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.H">
            <summary>
            Sets the key value as H when H key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Home">
            <summary>
            Sets the key value as Home when Home key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.I">
            <summary>
            Sets the key value as I when I key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.J">
            <summary>
            Sets the key value as J when J key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.K">
            <summary>
            Sets the key value as K when K key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.L">
            <summary>
            Sets the key value as L when L key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Left">
            <summary>
            Sets the key value as Left when Left key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.M">
            <summary>
            Sets the key value as M when M key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Minus">
            <summary>
            Sets the key value as Minus when Minus key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.N">
            <summary>
            Sets the key value as N when N key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.None">
            <summary>
            Sets the key value as null when none keys to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number0">
            <summary>
            Sets the key value as 0 when 0 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number1">
            <summary>
            Sets the key value as 1 when 1 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number2">
            <summary>
            Sets the key value as 2 when 2 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number3">
            <summary>
            Sets the key value as 3 when 3 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number4">
            <summary>
            Sets the key value as 4 when 4 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number5">
            <summary>
            Sets the key value as 5 when 5 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number6">
            <summary>
            Sets the key value as 6 when 6 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number7">
            <summary>
            Sets the key value as 7 when 7 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number8">
            <summary>
            Sets the key value as 8 when 8 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number9">
            <summary>
            Sets the key value as 9 when 9 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.O">
            <summary>
            Sets the key value as O when O key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.P">
            <summary>
            Sets the key value as P when P key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.PageDown">
            <summary>
            Sets the key value as PageDown when PageDown key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.PageUp">
            <summary>
            Sets the key value as PageUp when PageUp key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Plus">
            <summary>
            Sets the key value as Plus when Plus key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Q">
            <summary>
            Sets the key value as Q when Q key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.R">
            <summary>
            Sets the key value as R when R key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Right">
            <summary>
            Sets the key value as Right when Right arrow key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.S">
            <summary>
            Sets the key value as S when S key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Space">
            <summary>
            Sets the key value as Space when Space key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Star">
            <summary>
            Sets the key value as Star when Star key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.T">
            <summary>
            Sets the key value as T when T key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Tab">
            <summary>
            Sets the key value as Tab when Tab key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.U">
            <summary>
            Sets the key value as U when U key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Up">
            <summary>
            Sets the key value as Up when Up arrow key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.V">
            <summary>
            Sets the key value as V when V key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.W">
            <summary>
            Sets the key value as W when W key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.X">
            <summary>
            Sets the key value as X when X key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Y">
            <summary>
            Sets the key value as Y when Y key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Z">
            <summary>
            Sets the key value as Z when Z key to be pressed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.KeyModifiers">
            <summary>
            Specifies a combination of key modifiers, on recognition of which the command will be executed.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Key Modifiers, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/commands/#custom-command">1. Commands</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply control key modifier, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram @ref="@Diagram" Height="600px"
               Nodes="@NodeCollection">
               @* Initializing the custom commands*@
               <DiagramCommandManager>
                   <DiagramCommands>
                       <DiagramCommand Name = "customGroup" >
                           < DiagramKeyGesture Key="Keys.G" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                       <DiagramCommand Name = "customUnGroup" >
                           < DiagramKeyGesture Key="Keys.U" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                   </DiagramCommands>
               </DiagramCommandManager>
               @* To define the custom commands execution event *@
               <DiagramEvents OnCommandExecuted="@CommandExecute"></DiagramEvents>
            </SfDiagram>
            @code
               {
                   // Reference to diagram
                   SfDiagram Diagram;
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   //Initializing the nodes collection
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode1 = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode1);
                   DiagramNode DiagramNode2 = new DiagramNode()
                   {
                       Id = "node2",
                       OffsetX = 300,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode2);
               }
               /// <summary>
               /// Custom command execution event
               /// </summary>
               public void CommandExecute(ICommandExecuteEventArgs args)
               {
                   if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.G)
                   {
                       //Custom command to group the selected nodes
                       Diagram.Group();
                   }
                   if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.U)
                   {
                       //Custom command to ungroup the selected items
                       if (Diagram.SelectedItems.Nodes.Count > 0 && Diagram.SelectedItems.Nodes[0].Children != null && Diagram.SelectedItems.Nodes[0].Children.Length > 0)
                       {
                           Diagram.UnGroup();
                       }
                   }
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.Alt">
            <summary>
            specifies the alt key as a key modifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.Control">
            <summary>
            specifies the Ctrl key as a key modifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.Meta">
            <summary>
            specifies meta key in mac.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.None">
            <summary>
            specifies no modifiers are pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.Shift">
            <summary>
            specifies the shift key as a key modifier.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AlignmentMode">
            <summary>
            It allows the user to the alignment of the selected objects based on the first object in the selector or entire selector bounds.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Alignment" @onclick="@OnAlign" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           OffsetX = 50, OffsetY = 100,Width = 70, Height = 40,
                       },
                       new DiagramNode()
                       {
                           OffsetX = 292, OffsetY = 293,Width = 60, Height = 80,
                       },
                   };
               }
               public async void OnAlign()
               {
                   Diagram.SelectAll();
                   //Aligns the selected items to top
                   Diagram.Align(AlignmentOptions.Top, null, AlignmentMode.Selector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentMode.Object">
            <summary>
            Aligns the objects based on the first object in the selected list
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentMode.Selector">
            <summary>
            Aligns the objects based on the selector bounds
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AlignmentOptions">
            <summary>
            It allows the user to define the alignment position for the selected objects.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Alignment" @onclick="@OnAlign" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           OffsetX = 50, OffsetY = 100,Width = 70, Height = 40,
                       },
                       new DiagramNode()
                       {
                           OffsetX = 292, OffsetY = 293,Width = 60, Height = 80,
                       },
                   };
               }
               public async void OnAlign()
               {
                   Diagram.SelectAll();
                   //Aligns the selected items to left
                   Diagram.Align(AlignmentOptions.Left);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Left">
            <summary>
            Aligns the selected objects at the left side of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Right">
            <summary>
            Aligns the selected objects at the right side of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Center">
            <summary>
            Aligns the selected objects at the horizontal center of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Top">
            <summary>
            Aligns the selected objects at the top of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Bottom">
            <summary>
            Aligns the selected objects at the bottom of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Middle">
            <summary>
            Aligns the selected objects at the vertical center of the selector bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ChangeType">
            <summary>
            Specifies whether an object is added/removed from diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="1000"></SfDiagram>
            @code
            {
               public void ChangeType(ISelectionChangeEventArgs args)
               {
                   ChangeType hh = ChangeType.Addition;
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ChangeType.Addition">
            <summary>
            Sets the ChangeType to Addition.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ChangeType.Removal">
            <summary>
            Sets the ChangeType to Removal.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ContainerTypes">
            <summary>
            Specifies the container type for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ContainerTypes.Canvas">
            <summary>
            Sets the container types as Canvas
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ContainerTypes.Stack">
            <summary>
            Sets the container types as Stack
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ContainerTypes.Grid">
            <summary>
            Sets the container types as Grid
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DistributeOptions">
            <summary>
            Specifies to place the selected objects on the page at an equal interval from each other.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using distribute options, refer to these links:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/commands/">1. Commands</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#distribution-commands">2. Diagram Methods</a></td>
            </tr>
            <tr>
            <td style = "border:none">For distribute options to the middle, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Distribute" @onclick="@OnDistribution" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node's collection.
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           Id = "Node1",
                           // Position of the node
                           OffsetX = 100, OffsetY = 100,
                           /// Size of the node
                           Width = 70, Height = 40,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                       new DiagramNode()
                       {
                           Id = "Node2",
                           // Position of the node
                           OffsetX = 156, OffsetY = 305,
                           // Size of the node
                           Width = 60, Height = 80,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                        new DiagramNode()
                       {
                           Id = "Node3",
                           // Position of the node
                           OffsetX = 239, OffsetY = 188,
                           // Size of the node
                           Width = 50, Height = 50,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                       new DiagramNode()
                       {
                           Id = "Node4",
                           // Position of the node
                           OffsetX = 392, OffsetY = 179,
                           // Size of the node
                           Width = 70, Height = 90,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       }
                   };
               }
               public async void OnDistribution()
               {
                   Diagram.SelectAll();
                   //Distribute the selected items to middle
                   Diagram.Distribute(DistributeOptions.Middle);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.RightToLeft">
            <summary>
            Distributes the objects based on the distance between the right and left sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Left">
            <summary>
            Distributes the objects based on the distance between the left sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Right">
            <summary>
             Distributes the objects based on the distance between the right sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Center">
            <summary>
            Distributes the objects based on the distance between the center of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.BottomToTop">
            <summary>
            Distributes the objects based on the distance between the bottom and top sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Top">
            <summary>
            Distributes the objects based on the distance between the top sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Bottom">
            <summary>
            Distributes the objects based on the distance between the bottom sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Middle">
            <summary>
            Distributes the objects based on the distance between the vertical center of the adjacent objects
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EntryCategory">
            <summary>
            Defines the wether the history entry as internal entry as a user defined entry.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set the EntryCategory to External</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            HistoryEntry Entry = new HistoryEntry() {
               BlazorHistoryEntryType = HistoryEntryType.Object, Category = EntryCategory.External
            };
            Diagram.AddCustomHistoryEntry(Entry);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryCategory.Internal">
            <summary>
            Sets the entry category as internal
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryCategory.External">
            <summary>
            Sets the entry category as external
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EntryChangeType">
            <summary>
            Defines whether the history action contains any insert or remove operation.
            </summary>
            <remarks>
            The below code is an example to set the EntryChangeType to Insert.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            HistoryEntry Entry = new HistoryEntry() {
               BlazorHistoryEntryType = HistoryEntryType.Object,
               Category = EntryCategory.External,ChangeType = EntryChangeType.Insert
            };
            Diagram.AddCustomHistoryEntry(Entry);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryChangeType.Insert">
            <summary>
            specifies the history entry created for the insert action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryChangeType.Remove">
            <summary>
            specifies the history entry created for the removal action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.MouseButtons">
            <summary>
            Returns which mouse button is clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.MouseButtons.Left">
            <summary>
            Whenever the left button of the mouse is clicked, �Left� is returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.MouseButtons.Middle">
            <summary>
            Whenever the mouse wheel is clicked, �Middle� is returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.MouseButtons.Right">
            <summary>
            Whenever the right button of the mouse is clicked, �Right� is returned.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EntryType">
            <summary>
            Specifies to sets the property change entry type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PositionChanged">
            <summary>
            Sets the entry type as PositionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.Align">
            <summary>
            Sets the entry type as Align
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.Distribute">
            <summary>
            Sets the entry type as Distribute
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SizeChanged">
            <summary>
            Sets the entry type as SizeChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.Sizing">
            <summary>
            Sets the entry type as Sizing
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.RotationChanged">
            <summary>
            Sets the entry type as RotationChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.ConnectionChanged">
            <summary>
            Sets the entry type as ConnectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PropertyChanged">
            <summary>
            Sets the entry type as PropertyChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.CollectionChanged">
            <summary>
            Sets the entry type as CollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.StartGroup">
            <summary>
            Sets the entry type as StartGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.EndGroup">
            <summary>
            Sets the entry type as EndGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.Group">
            <summary>
            Sets the entry type as Group
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.UnGroup">
            <summary>
            Sets the entry type as UnGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SegmentChanged">
            <summary>
            Sets the entry type as SegmentChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.LabelCollectionChanged">
            <summary>
            Sets the entry type as LabelCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PortCollectionChanged">
            <summary>
            Sets the entry type as PortCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PortPositionChanged">
            <summary>
            Sets the entry type as PortPositionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.AnnotationPropertyChanged">
            <summary>
            Sets the entry type as AnnotationPropertyChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.ChildCollectionChanged">
            <summary>
            Sets the entry type as ChildCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.StackChildPositionChanged">
            <summary>
            Sets the entry type as StackChildPositionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.ColumnWidthChanged">
            <summary>
            Sets the entry type as ColumnWidthChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.RowHeightChanged">
            <summary>
            Sets the entry type as RowHeightChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.LanePositionChanged">
            <summary>
            Sets the entry type as LanePositionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PhaseCollectionChanged">
            <summary>
            Sets the entry type as PhaseCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.LaneCollectionChanged">
            <summary>
            Sets the entry type as LaneCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SendForward">
            <summary>
            Sets the entry type as SendForward
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SendBackward">
            <summary>
            Sets the entry type as SendBackward
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.BringToFront">
            <summary>
            Sets the entry type as BringToFront
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SendToBack">
            <summary>
            Sets the entry type as SendToBack
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EventState">
            <summary>
            Specifies the events current state.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EventState.Changing">
            <summary>
            Sets the event state as Changing
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EventState.Changed">
            <summary>
            Sets the event state as Changed
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EventState.Cancelled">
            <summary>
            Sets the event state as canceled
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ExportModes">
            <summary>
            Specifies whether the diagram has to be exported as an image or it has to be converted as an image URL.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Export Modes, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/export/">1.  Printing and Exporting</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply data as Export Modes, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Export" @onclick="@OnExport" />
            <SfDiagram ID = "diagram" Height="600px" @ref="@Diagram">
            </SfDiagram>
            @code{
                SfDiagram Diagram;
               private void OnExport()
               {
                   //Sets the export option for diagram
                   IExportOptions Options = new IExportOptions()
                   {
                       Mode = ExportModes.Data,
                       //Sets the format for diagram export
                       Format = FileFormats.SVG
                   };
                   Diagram.ExportDiagram(Options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ExportModes.Download">
            <summary>
            Return the diagram content as an image URL.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ExportModes.Data">
            <summary>
            Downloads the Images in the browser.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FileFormats">
            <summary>
            Specifies the filename of the diagram image to be download.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using file format, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/export/">1.  Printing and Exporting</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the SVG file format, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Export" @onclick="@OnExport" />
            <SfDiagram ID = "diagram" Height="600px" @ref="@Diagram">
            </SfDiagram>
            @code{
                SfDiagram Diagram;
               private void OnExport()
               {
                   //Sets the export option for diagram
                   IExportOptions Options = new IExportOptions()
                   {
                       Mode = ExportModes.Data,
                       //Sets the format for diagram export
                       Format = FileFormats.SVG
                   };
                   Diagram.ExportDiagram(Options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FileFormats.JPG">
            <summary>
            Diagram will be exported as a JPG file
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FileFormats.PNG">
            <summary>
            Diagram will be exported as a PNG file
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FileFormats.BMP">
            <summary>
            Diagram will be exported as a BMP file.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FileFormats.SVG">
            <summary>
            Diagram will be exported as an SVG file
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HistoryChangeAction">
            <summary>
            Specifies the history entry type for the nodes/connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryChangeAction.CustomAction">
            <summary>
            Sets the history entry type is node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryChangeAction.Undo">
            <summary>
            Sets the history entry type is Connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryChangeAction.Redo">
            <summary>
            Sets the history entry type is Selector Model.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HistoryEntryType">
            <summary>
            Specifies the history entry created for the modification of the diagram element like node, connector, port and more.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to demonstrate HistoryEntryType is object,</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            HistoryEntry Entry = new HistoryEntry() {
               BlazorHistoryEntryType = HistoryEntryType.Object
            };
            Diagram.AddCustomHistoryEntry(Entry);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Node">
            <summary>
            Define the history entry created for node modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Connector">
            <summary>
            Define the history entry created for connector modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Selector">
            <summary>
            Define the history entry created for Selector modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Diagram">
            <summary>
            Define the history entry created for diagram modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.ShapeAnnotation">
            <summary>
            Define the history entry created for Shape Annotation modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.PathAnnotation">
            <summary>
            Define the history entry created for path annotation modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.PortObject">
            <summary>
            Define the history entry created for port modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Object">
            <summary>
            Define the history entry created for custom object modification.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NudgeDirection">
            <summary>
            Specifies the direction in which the selected element must be moved during nudge operation.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using nudging direction, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/commands/#nudge-command">1.  Commands</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#nudge">2.   DiagramMethods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply nudging direction, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            DiagramMethods
            <input type = "button" value="Nudge Left" @onclick="@OnNudgeLeft">
            <input type = "button" value="Nudge Right" @onclick="@OnNudgeRight">
            <input type = "button" value="Nudge Top" @onclick="@OnNudgeTop" />
            <input type = "button" value="Nudge Bottom" @onclick="@OnNudgeBottom" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code {
               /// reference of the diagram
               SfDiagram Diagram;
               /// To define node collection
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               ///Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                   /// A node is created and stored in nodes collection.
                   DiagramNode Node1 = new DiagramNode()
                   {
                       Id = "Node1",
                       /// Position of the node
                       OffsetX = 250,
                       OffsetY = 250,
                       /// Size of the node
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                   };
                   /// Add node
                   NodeCollection.Add(Node1);
                   DiagramConnector Connector1 = new DiagramConnector()
                   {
                       Id = "Connector1",
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       TargetDecorator = new ConnectorTargetDecorator()
                       {
                           Shape = DecoratorShapes.Arrow,
                           Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 }
                       },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       Type = Segments.Orthogonal
                   };
                   ConnectorCollection.Add(Connector1);
               }
               public void OnNudgeLeft()
               {
                   /// Selected objects move one step to left
                   Diagram.Nudge(NudgeDirection.Left);
               }
               public void OnNudgeRight()
               {
                   /// Selected objects move one step to right
                   Diagram.Nudge(NudgeDirection.Right);
               }
               public void OnNudgeTop()
               {
                   /// Selected objects move one step to top
                   Diagram.Nudge(NudgeDirection.Up);
               }
               public void OnNudgeBottom()
               {
                   /// Selected objects move one step to bottom
                   Diagram.Nudge(NudgeDirection.Down);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NudgeDirection.Left">
            <summary>
            Nudge the object in the left direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NudgeDirection.Right">
            <summary>
            Nudge the object in the right direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NudgeDirection.Up">
            <summary>
            Nudge the object in the up direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NudgeDirection.Down">
            <summary>
            Nudge the object in the down direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SizingOptions">
            <summary>
            Specifies to equally size the selected nodes with respect to the first selected object.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the SizingOptions, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/commands/#sizing-commands">1. Commands</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#sizing-commands">2. Diagram Methods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the sizing options, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Same Width" @onclick="@OnSameWidth" />
            <input type = "button" value="Same Height" @onclick="@OnSameHeight" />
            <input type = "button" value="Same Size" @onclick="@OnSameSize" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node's collection.
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           Id = "Node1",
                           // Position of the node
                           OffsetX = 100, OffsetY = 100,
                           // Size of the node
                           Width = 70, Height = 40,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                       new DiagramNode()
                       {
                           Id = "Node2",
                           // Position of the node
                           OffsetX = 100, OffsetY = 300,
                           // Size of the node
                           Width = 60, Height = 80,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                        new DiagramNode()
                       {
                           Id = "Node3",
                           // Position of the node
                           OffsetX = 100, OffsetY = 200,
                           // Size of the node
                           Width = 50, Height = 50,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                       new DiagramNode()
                       {
                           Id = "Node4",
                           // Position of the node
                           OffsetX = 200, OffsetY = 250,
                           // Size of the node
                           Width = 70, Height = 90,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       }
                   };
               }
               // Same width
               public async void OnSameWidth()
               {
                   Diagram.Select(new ObservableCollection<DiagramNode>() { Diagram.Nodes[0], Diagram.Nodes[1], Diagram.Nodes[2] }, true);
                   SizingOptions SizingOptions = SizingOptions.Width;
                   Diagram.SameSize(SizingOptions);
               }
               // Same Height
               public async void OnSameHeight()
               {
                   Diagram.Select(new ObservableCollection<DiagramNode>() { Diagram.Nodes[0], Diagram.Nodes[1], Diagram.Nodes[2] }, true);
                   //Changing the selected nodes to same height
                   SizingOptions SizingOptions = SizingOptions.Height;
                   Diagram.SameSize(SizingOptions);
               }
               // Same Height
               public async void OnSameSize()
               {
                   Diagram.SelectAll();
                   //Changing the selected nodes to same size
                   SizingOptions SizingOptions = SizingOptions.Size;
                   Diagram.SameSize(SizingOptions);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SizingOptions.Width">
            <summary>
            Scales the width of the selected objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SizingOptions.Height">
            <summary>
            Scales the height of the selected objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SizingOptions.Size">
            <summary>
            Scales the selected objects both vertically and horizontally.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.State">
            <summary>
            Specifies the state of interactions such as drag, resize, and rotate.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="1000"></SfDiagram>
            @code
            {
               public void State(ISizeChangeEventArgs args)
               {
                   State state = State.Completed;
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.State.Start">
            <summary>
            Sets the interaction state to start.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.State.Progress">
            <summary>
            Sets the interaction state to progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.State.Completed">
            <summary>
            Sets the interaction state to completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SubTreeOrientation">
            <summary>
            Specifies the subtree orientation in layout.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the Subtree Orientations, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/organizational-chart/">1. Organizational chart</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/">2. Hierarchical layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply vertical Subtree Orientation, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
               <DiagramDataSource Id = "Id" ParentId="Team" DataSource="@DataSource" ></DiagramDataSource>
            </SfDiagram>
            @code {
               //Initializing layout
               DiagramLayout LayoutValue;
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       //Sets layout type as OrganizationalChart...
                       Type = LayoutType.OrganizationalChart,
                       VerticalSpacing = 50,
                       HorizontalSpacing = 40,
                       //Initialize the layout info for the org chart layout
                       LayoutInfo = new TreeInfo
                       {
                           Orientation = SubTreeOrientation.Vertical,
                           CanEnableSubTree = true,
                       }
                   };
               }
               //Initializing node defaults
               DiagramNode NodeDefaults = new DiagramNode()
               {
                   Width = 150,
                   Height = 50,
                   Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Id = "label1", Style = new AnnotationStyle() { Color = "white" } }, },
                   Style = new NodeShapeStyle { Fill = "#6BA5D7", StrokeColor = "black", },
                   LayoutInfo = new DiagramNodeLayoutInfo()
                   {
                       Orientation = Orientation.Vertical,
                       Type = SubTreeAlignments.Right
                   }
               };
               //Initializing connector defaults
               DiagramConnector ConnectorDefaults = new DiagramConnector()
               {
                   Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7", StrokeWidth = 1 },
                   TargetDecorator = new ConnectorTargetDecorator()
                   {
                       Shape = DecoratorShapes.None,
                       Style = new DecoratorShapeStyle() { Fill = "#6BA5D7", StrokeColor = "#6BA5D7", },
                   }
               };
               public class OrgChartDataModel
               {
                   public string Id { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                   new OrgChartDataModel() { Id= "2", Role= "Human Resource Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "3", Role= "Design Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "4", Role= "Operation Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "5", Role= "Marketing Manager", Team= "1" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeOrientation.Horizontal">
            <summary>
            Horizontally aligns the child nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeOrientation.Vertical">
            <summary>
            Vertically aligns the child nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ZoomTypes">
            <summary>
            Specifies the zoom type.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the zoom, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#zoom">1.    Diagram Methods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply zoom in and zoom out, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Zoom" @onclick="@OnZoom" />
            <input type = "button" value="Zoom To" @onclick="@OnZoomRegion" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               public ObservableCollection<DiagramConnector> ConnectorCollection;
               public ObservableCollection<DiagramLayer> LayersCollection;
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node's collection.
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           Id = "Node1",
                           // Position of the node
                           OffsetX = 250, OffsetY = 250,
                           // Size of the node
                           Width = 100, Height = 100,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       }
                   };
                   ConnectorCollection = new ObservableCollection<DiagramConnector>()
                   {
                       new DiagramConnector()
                       {
                           Id = "Connector1",
                           SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 100 },
                           TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 200 },
                           Type = Segments.Orthogonal
                       }
                   };
               }
               // Zoom the diagram
               public void OnZoom()
               {
                   Diagram.Zoom(0.5);
               }
               public void OnZoomRegion()
               {
                   ZoomOptions Options = new ZoomOptions() { FocusPoint = new PointModel() { X = 100, Y = 100 }, Type = ZoomTypes.ZoomIn, ZoomFactor = 2.5 };
                   Diagram.ZoomTo(Options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ZoomTypes.ZoomIn">
            <summary>
            Zooms in the diagram control.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ZoomTypes.ZoomOut">
            <summary>
            Zooms out the diagram control.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramAction">
            <summary>
            Specifies to Enables/Disables certain actions of diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.Clear">
            <summary>
            Indicates diagram have clear all.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.DecoratorPropertyChange">
            <summary>
            Indicates whether decorator property is changed or not
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.DragUsingMouse">
            <summary>
            Indicates whether drag is initiated by mouse
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.Group">
            <summary>
            Indicates the group is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.Interactions">
            <summary>
            Indicates whether drag or rotate tool has been activated/].
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventClearSelection">
            <summary>
            prevents diagram from clear selection.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventCollectionChangeOnDragOver">
            <summary>
            Use to prevent the collection change event while dragging lane from palette and over it in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventHistory">
            <summary>
            Use to prevent the history during some action in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventIconsUpdate">
            <summary>
            Use to prevent the icon while expand a node in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventZIndexOnDragging">
            <summary>
            Use to prevent the z order on dragging the diagram elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PublicMethod">
            <summary>
            Indicates the diagram public method is in action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.Render">
            <summary>
            Indicates the diagram is in render state.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.TextEdit">
            <summary>
            Indicates the text editing is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.ToolAction">
            <summary>
            Indicates the diagram Tool is in action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.UndoRedo">
            <summary>
            Indicates the diagram undo/redo is in action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.isGroupDragging">
            <summary>
            Indicates whether group dragging has been activated.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTools">
            <summary>
            DrawingTools allow users to draw objects (nodes, connectors, etc.,) during runtime by clicking and dragging.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set DiagramTools to DrawOnce.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input Type="button" value="addNode" @onclick="AddNode" />
            <SfDiagram @ref = "Diagram" Nodes="@NodeCollection" Width="100%" Height="540px">
                <DiagramSnapSettings Constraints = "SnapConstraints.None" />
            </ SfDiagram >
            @code
            {
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 200,
                       OffsetY = 200,
                       Width = 100,
                       Height = 100,
                   };
                   NodeCollection.Add(Node);
               }
               private void AddNode()
               {
                   //To draw an object once, activate draw once
                   Diagram.Tool = DiagramTools.DrawOnce;
                   Diagram.DrawingObject = new DiagramNode()
                   {
                       Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = BasicShapes.Rectangle },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.ContinuousDraw">
            <summary>
            It allows users to draw the nodes or connectors continuously. Once it is activated, users cannot perform any other interaction in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.Default">
            <summary>
            Sets the drawing tools to default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.DrawOnce">
            <summary>
            It allows users to draw a node or connector at once.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.MultipleSelect">
            <summary>
            It allows users to select multiple nodes and connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.None">
            <summary>
            Disables all the drawing tools.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.SingleSelect">
            <summary>
            It allows users to select only individual nodes or connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.ZoomPan">
            <summary>
            It allows users to pan the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ThumbsConstraints">
            <summary>
            Specifies to enables/disbles the handles for the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ConnectorSource">
            <summary>
            Sets the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ConnectorTarget">
            <summary>
            Sets the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.Default">
            <summary>
            Sets all handles of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeEast">
            <summary>
            Sets the middle right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeNorth">
            <summary>
            Sets the top center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeNorthEast">
            <summary>
            Sets the top right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeNorthWest">
            <summary>
            Sets the top left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeSouth">
            <summary>
            Sets the bottom center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeSouthEast">
            <summary>
            Sets the bottom right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeSouthWest">
            <summary>
            Sets the bottom left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeWest">
            <summary>
            Sets the middle left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.Rotate">
            <summary>
            Sets the rotate handle of the selected items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Effect">
            <summary>
            Animation effects that are applicable to the Tooltip. A different animation can be set for tooltip open and close action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FadeIn">
            <summary>
            Tooltip open/close actions occur with the FadeIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FadeOut">
            <summary>
            Tooltip open/close actions occur with the FadeOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FadeZoomIn">
            <summary>
            Tooltip open/close actions occur with the FadeZoomIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FadeZoomOut">
            <summary>
            Tooltip open/close actions occur with the FadeZoomOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipXDownIn">
            <summary>
            Tooltip open/close actions occur with the FlipXDownIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipXDownOut">
            <summary>
            Tooltip open/close actions occur with the FlipXDownOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipXUpIn">
            <summary>
            Tooltip open/close actions occur with the FlipXUpIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipXUpOut">
            <summary>
            Tooltip open/close actions occur with the FlipXUpOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipYLeftIn">
            <summary>
            Tooltip open/close actions occur with the FlipYLeftIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipYLeftOut">
            <summary>
            Tooltip open/close actions occur with the FlipYLeftOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipYRightIn">
            <summary>
            Tooltip open/close actions occur with the FlipYRightIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipYRightOut">
            <summary>
            Tooltip open/close actions occur with the FlipYRightOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.ZoomIn">
            <summary>
            Tooltip open/close actions occur with the ZoomIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.ZoomOut">
            <summary>
            Tooltip open/close actions occur with the ZoomOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.None">
            <summary>
            Tooltip open/close actions occur without any animation effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramModel">
            <summary>
            Represents the interface for a class diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Click">
            <summary>
            Triggers when a node, connector or diagram is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.CommandExecute">
            <summary>
            Triggers when a command executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ConnectionChange">
            <summary>
            Triggers when the connection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ContextMenuClick">
            <summary>
            Triggers when a context menu item is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ContextMenuOpen">
            <summary>
            Triggers before opening the context menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Created">
            <summary>
            Triggered when the diagram is rendered completely.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DoubleClick">
            <summary>
            Triggers when a node, connector or diagram model is clicked twice.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DragEnter">
            <summary>
            Triggers when a symbol is dragged into diagram from symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DragLeave">
            <summary>
            Triggers when a symbol is dragged outside of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Drop">
            <summary>
            Triggers when a symbol is dragged and dropped from symbol palette to drawing area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.HistoryChange">
            <summary>
            Triggers when a change is reverted or restored(undo/redo).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.HistoryStateChange">
            <summary>
            Triggers when a custom entry change is reverted or restored(undo/redo).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.KeyDown">
            <summary>
            Triggers when a user is pressing a key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.KeyUp">
            <summary>
            Triggers when a user releases a key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.MouseEnter">
            <summary>
            Triggered when mouse enters a node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.MouseLeave">
            <summary>
            Triggered when mouse leaves node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.OnUserHandleMouseDown">
            <summary>
            Triggers when a mouseDown on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.FixedUserHandleClick">
            <summary>
            Triggers when a mouseDown on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.OnUserHandleMouseEnter">
            <summary>
            Triggers when a mouseEnter on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.OnUserHandleMouseLeave">
            <summary>
            Triggers when a mouseLeave on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.OnUserHandleMouseUp">
            <summary>
            Triggers when a mouseUp on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.PositionChange">
            <summary>
            Triggers while dragging the elements in diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.PropertyChange">
            <summary>
            Triggers once the node or connector property changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.RotateChange">
            <summary>
            Triggers when the diagram elements are rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SelectionChange">
            <summary>
            Triggers when the selection is changed in diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SizeChange">
            <summary>
            Triggers when a node is resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.TextEdit">
            <summary>
            Triggers when editor got focus at the time of node’s label or text node editing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.AddInfo">
            <summary>
            Allows the user to save custom information/data about diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.AnnotationTemplate">
            <summary>
            Customizes the annotation template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.BackgroundColor">
            <summary>
            Defines the background color of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.BridgeDirection">
            <summary>
            Defines the direction of the bridge that is inserted when the segments are intersected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.CommandManager">
            <summary>
            Defines a set of custom commands and binds them with a set of desired key gestures.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ConnectorDefaults">
            <summary>
            Helps to assign the default properties of connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Connectors">
             <summary>
             Defines a collection of objects, used to create link between two points, nodes or ports to represent the relationships between them.
            
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Constraints">
            <summary>
            Defines the collection of constraints which enable or disable certain features of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ContextMenuSettings">
            <summary>
            Represents the context menu for an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.CustomCursor">
            <summary>
            A collection of JSON objects where each object represents a custom cursor action. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DataSourceSettings">
            <summary>
            Configures the data source that is to be bound with diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DrawingObject">
            <summary>
            Defines the object to be drawn using drawing tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Height">
            <summary>
            Defines the height of the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.HistoryManager">
            <summary>
            Customizes the undo redo functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Layers">
            <summary>
            A collection of JSON objects where each object represents a layer. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Layout">
            <summary>
            Layout is used to auto-arrange the nodes in the Diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Mode">
            <summary>
            Defines the diagram rendering mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.NodeDefaults">
            <summary>
            Helps to assign the default properties of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.NodeTemplate">
            <summary>
            Customizes the node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Nodes">
            <summary>
            Defines the node's collection and properties of each node to be rendered in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.PageSettings">
            <summary>
            Page settings enable to customize the appearance, width, and height of the Diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.RulerSettings">
            <summary>
            Defines the properties of both horizontal and vertical guides/rulers to measure the diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status and view port size of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SelectedItems">
            <summary>
            Defines the collection of selected items, size and position of the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SerializationSettings">
            <summary>
            Defines the properties of saving and loading for the state persistence of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DiagramSettings">
            <summary>
            Defines the settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SnapSettings">
            <summary>
            Defines the gridlines and defines how and when the objects have to be snapped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Tooltip">
            <summary>
            Defines the tooltip that should be shown when the mouse hovers over a node or connector
            An object that defines the description, appearance and alignments of tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Width">
            <summary>
            Defines the width of the diagram model.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.History">
            <summary>
            Notifies when changes are reverted or restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.CanLog">
            <summary>
            Decides whether the changes are stored in the history or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.CanRedo">
            <summary>
            Sets the history entry can be redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.CanUndo">
            <summary>
            Sets the history entry can be undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.CurrentEntry">
            <summary>
             Sets the current entry object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.EndGroupAction">
            <summary>
            Used to intimate group action is end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.Push">
            <summary>
            Stores a history entry to the history list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.Redo">
            <summary>
            Used for custom redo action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.RedoStack">
            <summary>
            Used to store the list of entries in the redo list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.StartGroupAction">
            <summary>
            Used to intimate group action is the start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.Undo">
            <summary>
            Used for custom undo action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.UndoStack">
            <summary>
            Used to store the list of entries in the undo list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HistoryEntry">
            <summary>
            Represents the entry of the changed history of an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.BlazorHistoryEntryType">
            <summary>
            Used to define the object’s type that is to be added to the entry list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Cancel">
            <summary>
            Defines whether the user can prevent drag entry or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Category">
            <summary>
            Sets the category for the entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.ChangeType">
            <summary>
            Sets the type of the object that is added or removed from the entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.ChildTable">
            <summary>
            Sets the changed value to be stored in the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.HistoryAction">
            <summary>
            Used to store the cause of the added node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.IsLastPhase">
            <summary>
            Used to indicate the last phase to be changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.IsUndo">
            <summary>
            Sets the value for undo action is activated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Next">
            <summary>
            Sets the next action of the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.ObjectId">
            <summary>
            Used to store the id of an object that means, used to indicate which annotation or port has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Previous">
            <summary>
            Used to store the previous phase.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.RedoObject">
            <summary>
            Sets the changed values to be stored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Type">
            <summary>
            Sets the type of entry to be stored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.UndoObject">
            <summary>
            Sets the changed values to be stored.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.RulerSettingsModel">
            <summary>
            Defines the appearance and behavior of the rulers in the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px" Nodes="@NodeCollection">
                  <DiagramRulerSettings ShowRulers = "true" DynamicGrid="true">
                       <HorizontalRuler></HorizontalRuler>
                       <VerticalRuler></VerticalRuler>
                   </DiagramRulerSettings>
               </SfDiagram>
               @code{
                   public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 250,
                       OffsetY = 250,
                       Width = 100,
                       Height = 100,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.RulerSettingsModel.DynamicGrid">
            <summary>
            Sets the gridlines relative to the ruler ticks. By default, DynamicGrid is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.RulerSettingsModel.HorizontalRuler">
            <summary>
            Sets the behavior and appearance of the horizontal rulers.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.RulerSettingsModel.ShowRulers">
            <summary>
            Enables or disables the visibility of both horizontal and vertical rulers. By default, the ShowRulers is set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.RulerSettingsModel.VerticalRuler">
            <summary>
            Sets the behavior and appearance of the vertical rulers.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AssistantsDetails">
            <summary>
            Represents the details of the assistants in an organizational chart.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[@using Syncfusion.Blazor.Diagrams
            <SfDiagram Height="600px" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
               <DiagramDataSource Id = "Id" ParentId= "Team" DataSource= "@DataSource" DataMapSettings= "@DataMap" ></ DiagramDataSource >
            </ SfDiagram >
            @code {
              //Initializing layout
              DiagramLayout LayoutValue;
              protected override void OnInitialized()
              {
              LayoutValue = new DiagramLayout()
                {
                 //Sets layout type as OrganizationalChart...
                 Type = LayoutType.OrganizationalChart,
                 VerticalSpacing = 50,
                 HorizontalSpacing = 40,
                 //Initialize the layout info for the org chart layout
                 LayoutInfo = new TreeInfo
                 {
                   Orientation = SubTreeOrientation.Vertical,
                   Offset = -20,
                   CanEnableSubTree = true,
                   //provides an assitant details for the root node
                   GetAssistantDetails = new AssistantsDetails()
                   {
                     Root = "General Manager",
                     Assistants = new string[] { "Assistant Manager" }
                    }
                  }
                };
              }
              //Initializing DataMap Setting
              List<DiagramDataMapSetting> DataMap = new List<DiagramDataMapSetting>()
              {
                new DiagramDataMapSetting() { Property = "Annotations[0].Content, Field = "Role" },
               };
               //Initializing node defaults
               DiagramNode NodeDefaults = new DiagramNode()
               {
                 Width = 150,
                 Height = 50,
                 Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Id = "label1", Style = new AnnotationStyle() { Color = "white" } }, },
                 Style = new NodeShapeStyle { Fill = "darkcyan", StrokeColor = "white", }
                };
                //Initializing connector defaults
                DiagramConnector ConnectorDefaults = new DiagramConnector()
                {
                  Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                  Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7", StrokeWidth = 2 },
                  TargetDecorator = new ConnectorTargetDecorator()
                  {
                    Shape = DecoratorShapes.None,
                    Style = new DecoratorShapeStyle() { Fill = "#6BA5D7", StrokeColor = "#6BA5D7", },
                   }
                 };
                public class OrgChartDataModel
                {
                  public string Id { get; set; }
                  public string Team { get; set; }
                  public string Role { get; set; }
                 }
                 public object DataSource = new List<object>()
                 {
                     new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                     new OrgChartDataModel() { Id= "2", Role= "Assistant Manager", Team= "1" },
                     new OrgChartDataModel() { Id= "3", Role= "Human Resource Manager", Team= "1" },
                     new OrgChartDataModel() { Id= "4", Role= "Design Manager", Team= "1" },
                     new OrgChartDataModel() { Id= "5", Role= "Operation Manager", Team= "1" },
                     new OrgChartDataModel() { Id= "6", Role= "Marketing Manager", Team= "1" }
                  };
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AssistantsDetails.Assistants">
            <summary>
            Specifies the details of the child item that have a different relationship with the parent node in an Organizational chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AssistantsDetails.Root">
            <summary>
            Returns the parent node for assistants.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Bounds">
            <summary>
            Defines the properties of the layout bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.Bottom">
            <summary>
            returns the bottom position, where layout is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.CanMoveBy">
            <summary>
            returns how much distance layout is moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.Right">
            <summary>
            returns the right position, where layout is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.X">
            <summary>
            returns the left position, where the layout is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.Y">
            <summary>
            returns the top position, where layout is rendered.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TreeInfo">
            <summary>
            Defines the behavior and appearance of the tree.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram ID="diagram" Height="600px" Layout="@LayoutValue">
                <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource">
                    <DiagramDataMapSettings>
                       <DiagramDataMapSetting Property = "Shape.TextContent" Field="Name"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.StrokeColor" Field="FillColor"></DiagramDataMapSetting>
                                <DiagramDataMapSetting Property = "Style.Fill" Field="FillColor"></DiagramDataMapSetting>
                    </DiagramDataMapSettings>
                 </DiagramDataSource>
             </SfDiagram>
             @code{
              TreeInfo LayoutInfo = new TreeInfo()
              {
               CanEnableSubTree = true,
               Orientation = SubTreeOrientation.Horizontal,
               Offset = -20,
               GetAssistantDetails = new AssistantsDetails()
               {
                Root = "Diagram",
                Assistants = new string[] { "Component" }
               },
               Type = SubTreeAlignments.Alternate
              };
              DiagramLayout LayoutValue = new DiagramLayout() { };
              public class HierarchicalDetails
              {
                public string Name { get; set; }
                public string FillColor { get; set; }
                public string Category { get; set; }
              }
              public List<object> DataSource = new List<object>()
              {
                new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#659be5"},
              };
              protected override void OnInitialized()
              {
              LayoutValue = new DiagramLayout()
               {
                 LayoutInfo = this.LayoutInfo
               };
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Assistants">
            <summary>
            Defines the tree assistants.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.CanEnableSubTree">
            <summary>
            Enables or disables the sub tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Children">
            <summary>
            A string type that mentions the children.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.EnableRouting">
            <summary>
            A Boolean type that enables or disables routing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.GetAssistantDetails">
            <summary>
            Defines the behavior of assistant details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.HasSubTree">
            <summary>
            A Boolean type that enables or disables the sub tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.IsRootInverse">
            <summary>
            A Boolean type that enables or disables root inverse.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Level">
            <summary>
            Sets the level for the tree. It is a double type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Offset">
            <summary>
            Sets the value of offset.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Orientation">
            <summary>
            Sets the orientation to horizontal or vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Rows">
            <summary>
            Sets the rows for a tree. It is a double type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Type">
            <summary>
            Defines the type of sub tree alignments.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel">
            <summary>
            Represents the orthogonal segment type of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel.AllowDrag">
            <summary>
            Defines the segment to be a drag or not. By default, it will be true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel.Direction">
            <summary>
            Sets the direction of the orthogonal segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel.Length">
            <summary>
            Defines the length of the orthogonal segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel.Type">
            <summary>
            Defines the type of the segment. By default, it will be Orthogonal.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BlazorConnectionObject">
            <summary>
            Represent the source node or target of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.BlazorConnectionObject.Connector">
            <summary>
            Returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.BlazorConnectionObject.ConnectorSourceValue">
            <summary>
            Defines the source node Id or Source port Id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.BlazorConnectionObject.ConnectorTargetValue">
            <summary>
            Defines the target node Id or target port Id of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ChangedObject">
            <summary>
            Represents the objects that have changed in the action such as undo, redo.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents PropertyChanged = "Changed" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Changed(IBlazorPropertyChangeEventArgs args)
               {
                   if ((args != null) && (args.Element != null) && (args.NewValue != null) && (args.OldValue != null) && (args.Cause == DiagramAction.Render))
                   {
                       Console.WriteLine("Changed");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedObject.EntryType">
            <summary>
            Returns the type of entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedObject.NewValue">
            <summary>
            Returns the collection of objects that have changed in the last undo or redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedObject.OldValue">
            <summary>
            Returns the collection of objects, where each object represents the changes made in the last action such as undo, redo.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ChangedValues">
            <summary>
            Represents the objects’ position and size properties that have changed in the last action such as undo, redo.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents HistoryChanged = "History" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void History(IBlazorHistoryChangeArgs args)
               {
                   if ((args! = null) && (args.Action == HistoryChangeAction.CustomAction) && (args.Change != null) && (args.Source != null))
                   {
                       Console.WriteLine("Dragged");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.Height">
            <summary>
            Returns the object’s height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.OffsetX">
            <summary>
            Returns the object’s offsetX.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.OffsetY">
            <summary>
            Returns the object’s offsetY.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.RotateAngle">
            <summary>
            Returns the object’s RotateAngle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.Width">
            <summary>
            Returns the object’s width.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorValue">
            <summary>
            Represents the source and target id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorValue.NodeId">
            <summary>
            Defines the source or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorValue.PortId">
            <summary>
            Defines the source or target port of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramClickEventObject">
            <summary>
            ClickedObject notifies whether it is node or connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClickEventObject.Diagram">
            <summary>
            Represents the interface for a class diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClickEventObject.Selector">
            <summary>
            returns the selected items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation">
            <summary>
            DiagramObject is the interface for the diagram object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation.ConnectorAnnotation">
            <summary>
            returns the  connector annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation.NodeAnnotation">
            <summary>
            returns the  node annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation.AnnotationId">
            <summary>
            returns the id of annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation.TextNode">
            <summary>
            returns the  text node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEventDropObject">
            <summary>
            DiagramDropObject notifies when the element is dropped in the diagram in blazor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventDropObject.Connector">
            <summary>
            returns a connector objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventDropObject.DiagramId">
            <summary>
            returns a diagram objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventDropObject.Node">
            <summary>
            returns a node objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEventObject">
            <summary>
            DiagramObject is the interface for the diagram object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObject.Connector">
            <summary>
            returns the  connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObject.Node">
            <summary>
            returns the  node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObject.NodeId">
            <summary>
            returns the id of annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObject.ConnectorId">
            <summary>
            returns the id of connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramFixedUserHandle">
            <summary>
            DiagramFixedUserHandle is the interface for the connector fixed user handle and node fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFixedUserHandle.ConnectorFixedUserHandle">
            <summary>
            returns the  connector fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFixedUserHandle.NodeFixedUserHandle">
            <summary>
            returns the  node fixed user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection">
            <summary>
            DiagramCollectionObject is the interface for the diagram objects.
            MouseEventElement notifies whether it is node or connector or selector model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.Connector">
            <summary>
            returns the collection of connectors
            ObservableCollection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.Connectors">
            <summary>
            returns the collection of connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.NodeCollection">
            <summary>
            returns the collection of connector id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.ConnectorCollection">
            <summary>
            returns the collection of connector id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.Node">
            <summary>
            returns the collection of node
            ObservableCollection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.Nodes">
            <summary>
            returns the collection of node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramMouseEventObject">
            <summary>
            MouseEventElement notifies whether it is node or connector or selector model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMouseEventObject.Connector">
            <summary>
            returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMouseEventObject.Node">
            <summary>
            returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMouseEventObject.Selector">
            <summary>
            Defines the collection of selected items in the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramPropertyChangeObject">
            <summary>
            Notifies whether the changed object is the node, connector or diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents PropertyChanged = "Changed" ></ DiagramEvents >
            </ SfDiagram >
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Changed(IBlazorPropertyChangeEventArgs args)
               {
                   if ((args != null) && (args.Element != null) && (args.NewValue != null) && (args.OldValue != null) && (args.Cause == DiagramAction.Render))
                   {
                       Console.WriteLine("Changed");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPropertyChangeObject.Connector">
            <summary>
            Returns the connector when the connector properties were changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPropertyChangeObject.Diagram">
            <summary>
            Returns the diagram when diagram properties were changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPropertyChangeObject.Node">
            <summary>
            Returns the node when the node properties were changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject">
            <summary>
            Represents the object when the change is reverted, restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Connector">
            <summary>
            Returns the connector when changes are made in the connector history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Diagram">
            <summary>
            Returns the diagram when changes are made in the diagram history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Node">
            <summary>
            Returns the node when changes are made in the node history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Object">
            <summary>
            Returns the custom objects when changes are made in the custom objects otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.PathAnnotation">
            <summary>
            Returns a path annotation object when changes are made in the path annotation history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.PointPortModel">
            <summary>
            Returns a port object when changes are made in port history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Selector">
            <summary>
            Returns the selected object when changes are made in selector history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.ShapeAnnotation">
            <summary>
            Returns the shape annotation object when changes are made in shape annotation history otherwise, it returns null.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs">
            <summary>
            Notifies when clicking on an object or diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height=”600px” Nodes=”@NodeCollection">
               <DiagramEvents Clicked = "Clicked" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Clicked(IBlazorClickEventArgs args)
               {
                   if ((args != null) && (args.Element != null) && (args.Count == 1) && (args.Position != null) && (args.ActualObject != null))
                   {
                       Console.WriteLine("Clicked");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.ActualObject">
            <summary>
            Returns the object to be clicked on, or returns the diagram Id when the diagram clicks on.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.Count">
            <summary>
            Returns number of times the object or diagram has clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.Element">
            <summary>
            Returns the object or id of the diagram based on which has been clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.Button">
            <summary>
            Returns which mouse button is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.Position">
            <summary>
            Returns the position of the clicked object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs">
            <summary>
            IBlazorCollectionChangeEventArgs notifies while the node/connector are added or removed in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.Cancel">
            <summary>
            returns whether to cancel the change or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.Cause">
            <summary>
            returns the action of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.Element">
            <summary>
            returns the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.State">
            <summary>
            returns the state of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.Type">
            <summary>
            returns the type of the collection change.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs">
            <summary>
            Notifies when the connector’s source id or target id was changed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
               <DiagramEvents OnConnectionChange = "ConnectionChange" ></ DiagramEvents >
            </ SfDiagram >
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               public void ConnectionChange(IBlazorConnectionChangeEventArgs args)
               {
                   args.Cancel = false;
                   if ((args != null) && (args.Connector != null) && (args.ConnectorEnd != null) && (args.State == EventState.Changing) && (args.NewValue != null) && (args.OldValue != null))
                   {
                       Console.WriteLine("commandExecuted");
                   }
               }
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       ///Specify the segments types as straight.
                       Type = Segments.Straight,
                   };
                   ConnectorCollection.Add(DiagramConnector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.Cancel">
            <summary>
            Defines wether the user can prevent the connection or disconnection of the connector or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.Connector">
            <summary>
            Returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.ConnectorEnd">
            <summary>
            Returns the wether it is source end or target end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.NewValue">
            <summary>
            Returns the current source or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.OldValue">
            <summary>
            Returns the previous source or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.State">
            <summary>
            Returns the state of connection endpoint dragging such as starting,  completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorCustomHistoryChangeArgs">
            <summary>
            Notifies when a custom entry change is reverted or restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCustomHistoryChangeArgs.EntryType">
            <summary>
            Returns the type of entry such as undo, redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCustomHistoryChangeArgs.NewValue">
            <summary>
            Returns the collection of objects where each object represents changed made in current undo, redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCustomHistoryChangeArgs.OldValue">
            <summary>
            Returns the collection of objects where each object represents changes made in last undo, redo.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDoubleClickEventArgs">
            <summary>
            Triggers while double click on the diagram or its objects.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnDoubleClick = "DoubleClick" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void DoubleClick(IBlazorDoubleClickEventArgs args)
               {
                   if ((args != null) && (args.Count == 2) && (args.Position != null) && (args.Source != null))
                   {
                       Console.WriteLine("doubleClick");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDoubleClickEventArgs.Count">
            <summary>
            Returns the number of times clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDoubleClickEventArgs.Position">
            <summary>
            Returns the object position that is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDoubleClickEventArgs.Source">
            <summary>
            Returns the object that is clicked or id of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs">
            <summary>
            Triggers when the element entered in the diagram from the symbol palette.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette id = "palettes" Height="600px"  SymbolWidth="100" SymbolHeight="100">
               <SymbolPalettePalettes>
                   <SymbolPalettePalette Id = "flow" Expanded="true" Symbols="@BasicShapes" IconCss="e-ddb-icons e-flow" Title="Flow Shapes">
                   </SymbolPalettePalette>
               </SymbolPalettePalettes>
            </SfSymbolPalette>
            <SfDiagram Height="600px"  >
               <DiagramEvents DragEnter = "DragEnter" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public void DragEnter(IBlazorDragEnterEventArgs args)
               {
                   if ((args != null) && (args.Element != null))
                   {
                       Console.WriteLine("Dragged");
                   }
               }
               public ObservableCollection<DiagramNode> BasicShapes { get; set; } = new ObservableCollection<DiagramNode>();
               protected override void OnInitialized()
               {
                   DiagramNode BasicShape1 = new DiagramNode()
                   {
                       Id = "child1",
                       Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Rectangle }
                   };
                   BasicShapes.Add(BasicShape1);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs.Cancel">
            <summary>
            Defines whether the user can prevent drag event or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs.DiagramId">
            <summary>
            Returns the id of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs.Element">
            <summary>
            Returns the element of the diagram, such as the node, the connector that is to be dragged into the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs.Source">
            <summary>
            Returns the element of the diagram, such as the node, the connector that is to be dragged into the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDragLeaveEventArgs">
            <summary>
             Notifies when the elements leave from the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragLeaveEventArgs.DiagramId">
            <summary>
            Returns the id of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragLeaveEventArgs.Element">
            <summary>
            Returns the element of the diagram, such as the node, the connector that is dragged outside of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs">
            <summary>
            Notifies when the node or connector is dragged.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnPositionChange = "PositionChanged" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void PositionChanged(IBlazorDraggingEventArgs args)
               {
                   args.Cancel = true;
                   if ((args != null) && (args.State == State.Completed))
                   {
                       Console.WriteLine("Dragging");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.AllowDrop">
            <summary>
            Defines the object that can be dropped over another element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.Cancel">
            <summary>
            Defines if the user can prevent dragging of element over the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.NewValue">
            <summary>
            Returns the current node or connector that is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.OldValue">
            <summary>
            Returns the previous node or connector that has dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.Source">
            <summary>
            Returns the node or connector that is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.State">
            <summary>
            Returns the current action of the dragged element such as starting, dragging, completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.Target">
            <summary>
            Returns the node or connector that has dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.TargetPosition">
            <summary>
            Returns the position of the Target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs">
            <summary>
            Notifies when the element is dropped in the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette id="palettes" Height="600px" SymbolWidth="100" SymbolHeight="100">
               <SymbolPalettePalettes>
                   <SymbolPalettePalette Id = "flow" Expanded="true" Symbols="@BasicShapes" IconCss="e-ddb-icons e-flow" Title="Flow Shapes">
                   </SymbolPalettePalette>
               </SymbolPalettePalettes>
            </SfSymbolPalette>
            <SfDiagram Height="600px">
               <DiagramEvents OnDrop = "Drop" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public void Drop(IBlazorDropEventArgs args)
               {
                   if ((args != null))
                   {
                       Console.WriteLine("Drop");
                   }
               }
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public ObservableCollection<DiagramNode> BasicShapes { get; set; } = new ObservableCollection<DiagramNode>();
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                         // An annotation is created and stored in an Annotation collection of Node.
                          new DiagramNodeAnnotation() { Content = "Offset(0,0)", Offset = new NodeAnnotationOffset() { X = 0, Y = 0 }}
                       }
                   };
                   NodeCollection.Add(Node);
                   DiagramNode BasicShape1 = new DiagramNode()
                   {
                       Id = "child1",
                       Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Rectangle }
                   };
                   BasicShapes.Add(BasicShape1);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Cancel">
            <summary>
            Returns whether the event is canceled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Element">
            <summary>
            Returns the element such as node, connector that is being dropped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Position">
            <summary>
            Returns the position of the object that is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Source">
            <summary>
            Returns the object from where the object such as node, connector is dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Target">
            <summary>
            Returns the object over which the object such as node, connector is dropped.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs">
            <summary>
            Notifies when the change is reverted, restored or any custom actions detected in the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
               <SfDiagram Height = "600px" Nodes="@NodeCollection">
               <DiagramEvents HistoryChanged = "History" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void History(IBlazorHistoryChangeArgs args)
               {
                   if ((args != null) && (args.Action == HistoryChangeAction.CustomAction) && (args.Change != null) && (args.Source != null))
                   {
                       Console.WriteLine("Dragged");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs.Action">
            <summary>
            Returns the action of an element such as undo, redo, or any custom action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs.Cause">
            <summary>
            Returns the cause of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs.Change">
            <summary>
            Returns the collection of objects that have changed in the last action such as undo, redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs.Source">
            <summary>
            Returns the collection of objects that have changed in the last action such as undo, redo.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorMouseEventArgs">
            <summary>
            Notifies when the mouse events such as mouse enter, mouse leave, and mouseover are detected.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Blazor Property: MouseEnter</td>
            <td style = "border:none">Triggers when the mouse enters a node or connector</td>
            </tr>
            <tr>
            <td style = "border:none">Blazor Property: MouseLeave</td>
            <td style = "border:none">Triggers when the mouse leave from  the node or connector</td>
            </tr>
            <tr>
            <td style = "border:none">The following code shows how to define MouseEnter event.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
                   <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
                   < DiagramEvents MouseEnter="Enter"></DiagramEvents>
            </SfDiagram>
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Enter(IBlazorMouseEventArgs args)
               {
                   if ((args != null) && (args.Element == null) && (args.ActualObject != null) && (args.Targets != null))
                   {
                       Console.WriteLine("Entered");
                   }
               }
               protected override void OnInitialized()
               {
                   /// A node is created and stored in the node array.
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorMouseEventArgs.ActualObject">
            <summary>
            Returns the object such as node or connector when the mouse hovers over the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorMouseEventArgs.Element">
            <summary>
            Returns the parent of the target node or connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorMouseEventArgs.Targets">
            <summary>
            Returns the target object over which the selected object is dragged.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs">
            <summary>
            Notifies when the node, connector, or diagram property has changed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents PropertyChanged = "Changed" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Changed(IBlazorPropertyChangeEventArgs args)
               {
                   if ((args != null) && (args.Element != null) && (args.NewValue != null) && (args.OldValue != null) && (args.Cause == DiagramAction.Render))
                   {
                       Console.WriteLine("Changed");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs.Cause">
            <summary>
            Returns the cause of the event whether it nudge or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs.Element">
            <summary>
            Returns the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs.NewValue">
            <summary>
            Returns the new value of the node or connectors property that is being changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs.OldValue">
            <summary>
            Returns the old value of the node or connector’s property that is being changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs">
            <summary>
            IBlazorSegmentCollectionChangeEventArgs notifies while the segment of the connectors changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.AddSegments">
            <summary>
            returns the action of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.Cancel">
            <summary>
            returns whether to cancel the change or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.Element">
            <summary>
            returns the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.RemoveSegments">
            <summary>
            returns the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.Type">
            <summary>
            returns the type of the collection change.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs">
            <summary>
            Notifies when select or deselect any objects from the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
                   <DiagramEvents SelectionChanged = "Selection" ></ DiagramEvents >
            </ SfDiagram >
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Selection(IBlazorSelectionChangeEventArgs args)
               {
                   args.Cancel = false;
                   if ((args != null) && (args.State == EventState.Changed) && (args.NewValue != null))
                   {
                       Console.WriteLine("Edited");
                   }
               }
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node array.
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.Cancel">
            <summary>
            Users can define whether the element can be selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.Cause">
            <summary>
            Returns the actual cause of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.NewValue">
            <summary>
            Returns the selected element after the event has triggered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.OldValue">
            <summary>
            Returns the last selected elements, it's empty if previously, not objects have selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.State">
            <summary>
            Triggers before and after adding the selection to the object
            in the diagram which can be differentiated through `state` argument.
            We can cancel the event only before the selection of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.Type">
            <summary>
            Returns whether the item is added or removed from the list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs">
            <summary>
            Notifies when the label of an element undergoes editing.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
                   <DiagramEvents TextEdited = "TextEdited" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void TextEdited(IBlazorTextEditEventArgs args)
               {
                   args.Cancel = true;
                   if ((args != null) && (args.Annotation != null) && (args.Element != null))
                   {
                       Console.WriteLine("Edited");
                   }
               }
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node array.
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                         // An annotation is created and stored in an Annotation collection of Node.
                          new DiagramNodeAnnotation() { Content = "Offset(0,0)", Offset = new NodeAnnotationOffset() { X = 0, Y = 0 }}
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.Annotation">
            <summary>
            Returns the annotation which is being edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.Cancel">
            <summary>
            Users can define whether the annotation can be edit or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.Element">
            <summary>
            Returns the element such as node or connector in which the label is being edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.NewValue">
            <summary>
            Returns the new text value of the element which has edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.OldValue">
            <summary>
            Returns the old text value of the element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ICommandExecuteEventArgs">
            <summary>
            Notifies when a command executed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnCommandExecuted = "CommandExecute" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void CommandExecute(ICommandExecuteEventArgs args)
               {
                   if ((args != null))
                   {
                       Console.WriteLine("commandExecuted");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ICommandExecuteEventArgs.Gesture">
            <summary>
            Returns the key value and key modifier value when command gets executed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IConnectorInitEventArgs">
            <summary>
            IConnectorInitEventArgs notifies when the connector is initiated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IConnectorInitEventArgs.Element">
            <summary>
            returns connector that is being changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IDataLoadedEventArgs">
            <summary>
            IDataLoadedEventArgs defines the event arguments after data is loaded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDataLoadedEventArgs.Diagram">
            <summary>
            returns the id of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IDragLeaveEventArgs">
            <summary>
            IDragLeaveEventArgs notifies when the element leaves from  the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragLeaveEventArgs.Diagram">
            <summary>
            returns the id of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragLeaveEventArgs.Element">
            <summary>
            returns the node or connector that is dragged outside of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IDragOverEventArgs">
            <summary>
            IDragOverEventArgs notifies when an element drag over another diagram element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragOverEventArgs.Diagram">
            <summary>
            returns the id of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragOverEventArgs.Element">
            <summary>
            returns the node or connector that is dragged over diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragOverEventArgs.MousePosition">
            <summary>
            returns the mouse position of the node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragOverEventArgs.Target">
            <summary>
            returns the node/connector over which the symbol is dragged.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IKeyEventArgs">
            <summary>
            Notifies while performing key actions.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Blazor property: OnKeyUP</td>
            <td style = "border:none">Triggers when the user releases the key</td>
            </tr>
            <tr>
            <td style = "border:none">Blazor property: OnKeyDown</td>
            <td style = "border:none">Triggers when the user press the key</td>
            </tr>
            <tr>
            <td style = "border:none">The following code demonstrates how to define IKeyEvent and OnKeyDown property</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnKeyDown = "Down" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Down(IKeyEventArgs args)
               {
                   if ((args != null) && (args.Key != null) && (args.KeyCode != null) && (args.Label != null) && (args.Text != null))
                   {
                       Console.WriteLine("Entered");
                   }
               }
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node array.
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                         // An annotation is created and stored in an Annotation collection of Node.
                          new DiagramNodeAnnotation() { Content = "Offset(0,0)", Offset = new NodeAnnotationOffset() { X = 0, Y = 0 }}
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Element">
            <summary>
            Returns the selected element of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Key">
            <summary>
            Returns the value of the key action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.KeyCode">
            <summary>
            Returns a number that represents the actual key pressed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.KeyModifiers">
            <summary>
            Returns any, modifier keys were pressed when the flick gesture occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Label">
            <summary>
            Returns the label which is being edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Target">
            <summary>
            Returns the Id of the text box element in an editing mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Text">
            <summary>
            Returns the text content of the label which is currently editing.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IPaletteSelectionChangeArgs">
            <summary>
            IPaletteSelectionChangeArgs notifies when the selection objects change in the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPaletteSelectionChangeArgs.NewValue">
            <summary>
            returns the new palette item that is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPaletteSelectionChangeArgs.OldValue">
            <summary>
            returns the old palette item that is selected.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IRotationEventArgs">
            <summary>
            Notifies when the selected element has rotated.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnRotateChange = "Rotate" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Rotate(IRotationEventArgs args)
               {
                   args.Cancel = false;
                   if ((args != null) && (args.Cancel == false) && (args.State == State.Completed) && (args.Source != null) && (args.NewValue != null))
                   {
                       Console.WriteLine("Rotated");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                  {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.Cancel">
            <summary>
            Users can define whether the selected node can be edit or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.NewValue">
            <summary>
            Returns the element with the new rotation angle after the event has triggered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.OldValue">
            <summary>
            Returns the element with the old size property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.Source">
            <summary>
            Returns the element which has selected for the rotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.State">
            <summary>
            Returns the state of the event such as start, completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs">
            <summary>
            Notifies when the element is being resized.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
                   <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
                   < DiagramEvents OnSizeChange="Size"></DiagramEvents>
            </SfDiagram>
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Size(ISizeChangeEventArgs args)
               {
                   args.Cancel = true;
                   if ((args != null) && (args.State == State.Completed) && (args.Source != null) && (args.NewValue != null))
                   {
                       Console.WriteLine("Resized");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.Cancel">
            <summary>
            Users can define whether the selected node can be resized or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.NewValue">
            <summary>
            Returns the element with new size property after the event has triggered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.OldValue">
            <summary>
            Returns the element with the old size property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.Source">
            <summary>
            Returns the element which has selected for the resizing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.State">
            <summary>
            Returns the state of the event such as start, completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ScrollValues">
            <summary>
            Specifies the functionalities of the diagram scroll bar.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramScrollSettings CurrentZoom = "2" HorizontalOffset="20" VerticalOffset="20" ViewPortHeight="20" ViewPortWidth="20">
               </DiagramScrollSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.CurrentZoom">
            <summary>
            Defines the current close-up view of the diagram. By default, CurrentZoom is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.HorizontalOffset">
            <summary>
            Sets the value of the horizontal scroll offset. By default, the HorizontalOffset is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.VerticalOffset">
            <summary>
            Sets the value of the vertical scroll offset. By default, the VerticalOffset is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.ViewportHeight">
            <summary>
            Sets the height of the user-visible area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.ViewportWidth">
            <summary>
            Sets the width of the user-visible area.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UserHandleEventsArgs">
            <summary>
            Notifies when the mouse events such as mouse enter, mouse leave, mouse down, mouse up carried on the user handle.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none;font-weight: bold;">Property</td>
            <td style = "border:none;font-weight: bold;">Descriptions</td>
            </tr>
            <tr>
            <td style = "border:none">OnUserHandleMouseDown</td>
            <td style = "border:none">Triggers when the mouseDown on the user handle.</td>
            </tr>
            <tr>
            <td style = "border:none">OnUserHandleMouseUp</td>
            <td style = "border:none">Triggers when the mouseUp on the user handle.</td>
            </tr>
            <tr>
            <td style = "border:none">OnUserHandleMouseEnter</td>
            <td style = "border:none">Triggers when the mouseEnter on the user handle.</td>
            </tr>
            <tr>
            <td style = "border:none">OnUserHandleMouseLeave</td>
            <td style = "border:none">Triggers when the mouseLeave from the user handle.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code shows how to define OnUserHandleMoudeDown property.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" SelectedItems="@SelectedModel">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
               < DiagramEvents OnUserHandleMouseDown="MouseDown"></DiagramEvents>
            </SfDiagram>
            @code{
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines diagram's SelectedItems
               public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
               ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
               public void MouseDown(UserHandleEventsArgs args)
               {
                   if ((args != null) && (args.Element != null))
                   {
                       Console.WriteLine("MouseDown");
                   }
               }
               protected override void OnInitialized()
               {
                   //Creating the user handle for cloning the objects
                   DiagramUserHandle CloneHandle = new DiagramUserHandle()
                   {
                       //Name of the user handle
                       Name = "clone",
                       //Set pathdata for userhandle
                       PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                   };
                   //Add user handle to the user handle collection
                   UserHandles = new ObservableCollection<DiagramUserHandle>()
                   {
                       CloneHandle
                   };
                   SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                   {
                       //Enable user handle for selected items...
                       Constraints = SelectorConstraints.UserHandle,
                       UserHandles = this.UserHandles
                   };
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                   };
                   NodeCollection.Add(DiagramNode);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.UserHandleEventsArgs.Element">
            <summary>
            Returns the user handle object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FixedUserHandleClickEventArgs">
            <summary>
            Notifies when the mouse up carried on the fixed user handle.
            </summary>
            <remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Connectors="@ConnectorCollection" @ref="diagram">
              <DiagramEvents FixedUserHandleClick = "Changed" ></ DiagramEvents >
            </ SfDiagram >
              @code{
                 SfDiagram diagram;
                // Defines diagram's nodes collection
                public ObservableCollection<DiagramNode> NodeCollection { get; set; }
                public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
                public async void Changed(FixedUserHandleClickEventArgs args)
                {
                 if (args.Element.Connector.Id == "connector1" && args.FixedUserHandle.ConnectorFixedUserHandle.Id == "user3")
                 {
                   await diagram.Remove();
                 }
                 else if (args.Element.Connector.Id == "connector1" && args.FixedUserHandle.ConnectorFixedUserHandle.Id == "user4")
                 {
                    await diagram.Copy();
                    await diagram.Paste();
                  }
                }
               protected override void OnInitialized()
               {
                ConnectorCollection = new ObservableCollection<DiagramConnector>();
                DiagramConnector connector1 = new DiagramConnector()
                {
                  // Unique name for the connector
                  Id = "connector1",
                  // Source and Target node's name to which connector needs to be connected.
                  SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 50 },
                  TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 150 },
                  Type = Segments.Orthogonal,
                  FixedUserHandles = new ObservableCollection<DiagramConnectorFixedUserHandle>()
                  {
                    new DiagramConnectorFixedUserHandle() { Id = "user3",Height = 20, Width = 20, Offset = 1,Visibility = true,Alignment = FixedUserHandleAlignment.Before,Displacement = new ConnectorDisplacementPoint{X = 5, Y = 5 }, PathData = "M18.693,3.338h-1.35l0.323-1.834c0.046-0.262-0.027-0.536-0.198-0.739c-0.173-0.206-0.428-0.325-0.695-0.325 H3.434c-0.262,0-0.513,0.114-0.685,0.312c-0.173,0.197-0.25,0.46-0.215,0.721L2.79,3.338H1.307c-0.502,0-0.908,0.406-0.908,0.908 c0,0.502,0.406,0.908,0.908,0.908h1.683l1.721,13.613c0.057,0.454,0.444,0.795,0.901,0.795h8.722c0.458,0,0.845-0.34,0.902-0.795 l1.72-13.613h1.737c0.502,0,0.908-0.406,0.908-0.908C19.601,3.744,19.195,3.338,18.693,3.338z M15.69,2.255L15.5,3.334H4.623 L4.476,2.255H15.69z M13.535,17.745H6.413L4.826,5.193H15.12L13.535,17.745z" },
                    new DiagramConnectorFixedUserHandle() { Id = "user4",Height = 25, Width = 25, Offset = 0.5,Visibility = true,Alignment = FixedUserHandleAlignment.After,Displacement = new ConnectorDisplacementPoint{X = 5, Y = 5 }, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                  },
                };
              ConnectorCollection.Add(connector1);
              NodeCollection = new ObservableCollection<DiagramNode>();
              DiagramNode node1 = new DiagramNode()
              {
                Id = "node1",
                OffsetX = 100,
                OffsetY = 100,
                Width = 100,
                Height = 100,
                FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                {
                  new DiagramNodeFixedUserHandle() { Id = "user1",Height = 20, Width = 20, Visibility = true, Margin = new NodeMargin(){ Right = 20} ,Offset = new IconOffset() { X = 0, Y = 0 }, PathData = "M18.693,3.338h-1.35l0.323-1.834c0.046-0.262-0.027-0.536-0.198-0.739c-0.173-0.206-0.428-0.325-0.695-0.325 H3.434c-0.262,0-0.513,0.114-0.685,0.312c-0.173,0.197-0.25,0.46-0.215,0.721L2.79,3.338H1.307c-0.502,0-0.908,0.406-0.908,0.908 c0,0.502,0.406,0.908,0.908,0.908h1.683l1.721,13.613c0.057,0.454,0.444,0.795,0.901,0.795h8.722c0.458,0,0.845-0.34,0.902-0.795 l1.72-13.613h1.737c0.502,0,0.908-0.406,0.908-0.908C19.601,3.744,19.195,3.338,18.693,3.338z M15.69,2.255L15.5,3.334H4.623 L4.476,2.255H15.69z M13.535,17.745H6.413L4.826,5.193H15.12L13.535,17.745z" },
                  new DiagramNodeFixedUserHandle() { Id = "user2",Height = 20, Width = 20, Visibility = true, Margin = new NodeMargin(){ Left = 20} ,Offset = new IconOffset() { X = 1, Y = 0 }, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                 },
                Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
               };
              NodeCollection.Add(node1);
             }
             ]]>
             </code>
            </example>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FixedUserHandleClickEventArgs.Element">
            <summary>
            Returns the node or connector in whixh the fixed user handle is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FixedUserHandleClickEventArgs.FixedUserHandle">
            <summary>
            Returns fixed user handle which is clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ColorValue">
            <summary>
            Represents the intensity of the color as an integer between 0 to 225.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ColorValue.B">
            <summary>
            Defines the intensity of the blue color as an integer between 0 and 255.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ColorValue.G">
            <summary>
            Defines the intensity of the green color as an integer between 0 and 255.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ColorValue.R">
            <summary>
            Defines the intensity of the red color as an integer between 0 and 255.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ContextMenuItemModel">
            <summary>
            Represents the custom context menu items.
            </summary>
            <remarks>
            The custom context menu provides an option to add the new custom items to the context menu. Those additional custom items have to be defined and added to the Items property of the context menu.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="@DiagramConstraints">
              // Defines context menu and set the ShowCustomMenuOnly to false to render the custom context menu along with the default context menu
              <DiagramContextMenuSettings Show = "true" Items="@ContextMenuItemModels"  ShowCustomMenuOnly="true">
              </DiagramContextMenuSettings>
            </SfDiagram>
            @code
            {
              //Defines diagram's nodes collection
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
              public DiagramConstraints DiagramConstraints = DiagramConstraints.Default;
              protected override void OnInitialized()
              {
                  //Create a node
                  DiagramNode Node = new DiagramNode()
                 {
                    OffsetX = 100,
                    OffsetY = 100,
                    Height = 100,
                    Width = 100,
                    Id = "node1",
                    Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Ellipse },
                    Style = new NodeShapeStyle()
                    {
                        Fill = "#6BA5D7",
                        StrokeColor = "#6BA5D7",
                     },
                  };
                  //Add node into node's collection
                  NodeCollection.Add(Node);
                 }
                // Add the custom context menu items
                List<ContextMenuItemModel> ContextMenuItemModels = new List<ContextMenuItemModel>()
                {
                  new ContextMenuItemModel()
                  {
                    Text ="color",
                    Id="Save",
                    Target =".e-elementcontent1",
                    // Add the nested custom context menu items
                    Items = new List<ContextMenuItemModel>()
                    {
                      new ContextMenuItemModel(){  Text ="Red", Id="Red", Separator = true },
                      new ContextMenuItemModel(){  Text ="Yellow", Id="Yellow", Separator = true },
                      new ContextMenuItemModel(){  Text ="Green", Id="Green", IconCss = "e-save", Separator = true }
                    }
                  },
                };
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.IconCss">
            <summary>
            This property is used to include an icon to the context menu item.
            </summary>
            <remarks>
            The IconCss property defines the class/multiple classes separated by a space for the menu item that is used to include an icon. A menu item can include a font icon and sprite image.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Id">
            <summary>
            Returns the unique id of the menu item.
            </summary>
            <remarks>
            Menu item Id needs to be unique to use. When creating a menu item, the user should not provide the same id to other menu items.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Items">
            <summary>
            This property enables users to add custom context menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Separator">
            <summary>
            Defines the horizontal line used to separate the menu items. Users can enable or disable the separator to group the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Target">
            <summary>
            Defines the target to show the menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Text">
            <summary>
            This property allows the users to set the text for a menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Hidden">
            <summary>
            This property allows the users to set the text for a menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Url">
            <summary>
            Specifies URL for the menu item that creates the anchor link to navigate to the URL provided.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs">
            <summary>
            Triggers before opening the context menu.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="@DiagramConstraints">
               <DiagramEvents OnContextMenuOpen = "Open" ></ DiagramEvents >
               < DiagramContextMenuSettings Show="true" Items="@ContextMenuItemModels" ShowCustomMenuOnly="true">
               </DiagramContextMenuSettings>
            </SfDiagram>
            @code
            {
               //Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public DiagramConstraints DiagramConstraints = DiagramConstraints.Default;
               public void Open(DiagramBeforeMenuOpenEventArgs args)
               {
                   args.Cancel = true;
                   if ((args != null) && (args.Element != null) && (args.Event != null) && (args.Items != null))
                   {
                       Console.WriteLine("MenuOpen");
                   }
               }
               protected override void OnInitialized()
               {
                   //Create a node
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 100,
                       OffsetY = 100,
                       Height = 100,
                       Width = 100,
                       Id = "node1",
                       Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Ellipse },
                       Style = new NodeShapeStyle()
                       {
                           Fill = "#6BA5D7",
                           StrokeColor = "#6BA5D7",
                       },
                   };
                   //Add node into node's collection
                   NodeCollection.Add(Node);
               }
               // Add the custom context menu items
               List<ContextMenuItemModel> ContextMenuItemModels = new List<ContextMenuItemModel>()
               {
                   new ContextMenuItemModel()
                   {
                       Text ="color",
                       Id="Save",
                       Target =".e-elementcontent1",
                       // Add the nested custom context menu items
                       Items = new List<ContextMenuItemModel>()
                       {
                           new ContextMenuItemModel(){  Text ="Red", Id="Red"},
                           new ContextMenuItemModel(){  Text ="Yellow", Id="Yellow"},
                           new ContextMenuItemModel(){  Text ="Green", Id="Green" }
                       }
                   },
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Cancel">
            <summary>
            Defines whether the user can prevent the context menu opening.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Element">
            <summary>
            Returns which element has been clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Event">
            <summary>
            Returns event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.HiddenItems">
            <summary>
            Returns the array of hidden context menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Items">
            <summary>
            Return the context menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Left">
            <summary>
            Returns the left position value of the clicked menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.ParentItem">
            <summary>
            Returns the parent menu items if the sub-menu opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Top">
            <summary>
            Returns the top position value of the clicked menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs">
            <summary>
            Triggers when a context menu item clicked.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="@DiagramConstraints">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
               < DiagramEvents ContextMenuItemClicked="ItemClicked"></DiagramEvents>
               <DiagramContextMenuSettings Show = "true" Items="@ContextMenuItemModels" ShowCustomMenuOnly="true">
               </DiagramContextMenuSettings>
            </SfDiagram>
            @code
            {
               ///Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public DiagramConstraints DiagramConstraints = DiagramConstraints.Default;
               public void ItemClicked(DiagramMenuEventArgs args)
               {
                   args.Cancel = false;
                   if ((args != null) && (args.Element != null) && (args.Event != null) && (args.Item != null) && (args.Name != null))
                   {
                       Console.WriteLine("commandExecuted");
                   }
               }
               protected override void OnInitialized()
               {
                   ///Create a node
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 100,
                       OffsetY = 100,
                       Height = 100,
                       Width = 100,
                       Id = "node1",
                       Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Ellipse },
                       Style = new NodeShapeStyle()
                       {
                           Fill = "#6BA5D7",
                           StrokeColor = "#6BA5D7",
                       },
                   };
                   ///Add node into node's collection
                   NodeCollection.Add(Node);
               }
               List<ContextMenuItemModel> ContextMenuItemModels = new List<ContextMenuItemModel>()
               {
                   new ContextMenuItemModel()
                   {
                       Text ="color",
                       Id="Save",
                       Target =".e-elementcontent1",
                       /// Add the nested custom context menu items
                       Items = new List<ContextMenuItemModel>()
                       {
                           new ContextMenuItemModel(){  Text ="Red", Id="Red"},
                           new ContextMenuItemModel(){  Text ="Yellow", Id="Yellow"},
                           new ContextMenuItemModel(){  Text ="Green", Id="Green" }
                       }
                   },
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Cancel">
            <summary>
            Defines whether the user can prevent action when clicking on the menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Element">
            <summary>
            Returns the clicked menu item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Event">
            <summary>
            Returns the event when the menu item is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Item">
            <summary>
            Returns the clicked menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IExportOptions">
            <summary>
            Provides support to export the diagram content to various file format.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<input type="button" value="Export" @onclick="@OnExport" />
            <SfDiagram ID = "diagram" Height="600px" @ref="@Diagram">
            </SfDiagram>
            @code {
              SfDiagram Diagram;
              private void OnExport()
               {
                //Sets the export option for diagram
                IExportOptions Options = new IExportOptions()
                {
                  //Sets the Mode for diagram export
                  Mode = ExportModes.Data,
                  //Sets the custom bound for diagram export
                  Bounds = new exportBounds() { x = 10, y = 10, width = 100, height = 100 },
                  Format = FileFormats.SVG
                };
                Diagram.ExportDiagram(Options);
               }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Bounds">
            <summary>
            Defines the specific region to be exported from the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.FileName">
            <summary>
            Sets the name of the file to be downloaded.
            </summary>
            <remarks>
            By default, the FileName is set to Diagram.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
             {
                FileName = "format",
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Format">
            <summary>
            Sets the file format to be downloaded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Margin">
            <summary>
            Defines the amount of space that has to be left around the diagram.
            </summary>
            <remarks>
            By default, the margin is set to 0 in all the four sides.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
            {
               Margin = new Syncfusion.Blazor.Diagrams.MarginModel() { Left = 10, Right = 10, Bottom = 10, Top = 10 }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Mode">
            <summary>
            Sets export mode to diagram content either download or some data format.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
            {
              Mode = ExportModes.Download,
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.MultiplePage">
            <summary>
            Defines whether the diagram must be exported as single or multiple images.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.PageHeight">
            <summary>
            Sets the height of the page to be printed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[     IExportOptions Options = new IExportOptions()
             {
               PageHeight = 400,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.PageOrientation">
            <summary>
            Sets the orientation of the page to be printed as either landscape or portrait.
            </summary>
            <remarks>
            By default, the PageOrientation is set to Landscape.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
             {
              PageOrientation= PageOrientation.Landscape
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.PageWidth">
            <summary>
            Sets the width of the page to be printed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
            {
             PageWidth = 400,
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.PrintOptions">
            <summary>
            Sets the property of print options to be printed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Region">
            <summary>
            Defines to export any particular region of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
             {
             Region = DiagramRegions.CustomBounds,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Stretch">
            <summary>
            Sets the aspect ratio for the image.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[     IExportOptions Options = new IExportOptions()
             {
                Stretch = Stretch.None,
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IFitOptions">
            <summary>
            Represents the diagram content can be fit within the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.CanZoomIn">
            <summary>
            Allows the user to enable or disable the zooming, to insert the smaller content into the larger viewport.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.CustomBounds">
            <summary>
            Defines the custom region that can be fit into the viewport.
            </summary>
            <remarks>
            CustomBounds depends on region property of IFitOptions. It will take the bounds of the region as a customBounds.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.Margin">
            <summary>
            Defines the page to be left between the viewport and the content. By default, it will be 25 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.Mode">
            <summary>
            Defines whether the diagram is horizontally or vertically fit into the viewport.
            </summary>
            <remarks>
             The mode has the following three options. They are Page, Width, and Height. Users can customize the Mode property by choosing any one of the above options. By default, the Mode will be Page.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.Region">
            <summary>
            Defines the region that can be fit into the viewport.
            </summary>
            <remarks>
            The region has the following three options. They are PageSettings, Content, CustomBounds. By default, the region will be PageSettings.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IPrintOptions">
            <summary>
            Provides support to print the diagram content.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[@using Syncfusion.Blazor.Diagrams
            <input type = "button" value="Print" @onclick="@OnPrint" />
            <SfDiagram @ref = "@Diagram" >
            </ SfDiagram >
            @code{
             SfDiagram Diagram;
             private void OnPrint()
             {
               //Sets the print option for diagram
               IPrintOptions Options = new IPrintOptions()
               {
                 MultiplePage = true,
                 Margin = new Syncfusion.Blazor.Diagrams.MarginModel()
                 {
                    Bottom = 10,
                    Top = 10,
                    Left = 10,
                    Right = 10
                 },
                 PageOrientation = PageOrientation.Landscape,
                 //Set the Stretch to Slice here
                 Stretch = Stretch.Slice
                }
               Diagram.Print(Options);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.Margin">
            <summary>
            Sets the margin of the page to be printed.
            </summary>
            <remarks>
            By default, the margin is set to 0 in all the four sides.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.MultiplePage">
            <summary>
            Defines whether the diagram has to be exported as single or multiple images.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.PageHeight">
            <summary>
            It sets the height of the page to be printed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IPrintOptions Options = new IPrintOptions()
             {
                PageHeight = 400,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.PageOrientation">
            <summary>
            Sets the orientation of the page to be printed as Landscape or Portrait.
            </summary>
            <remarks>
            By default, PageOrientation is set to Landscape.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.PageWidth">
            <summary>
            Sets the width of the page to be printed. printed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ IPrintOptions Options = new IPrintOptions()
             {
                PageWidth = 400,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.Region">
            <summary>
            Sets any particular region of the diagram to be exported. By default, Region is set to PageSettings.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IPrintOptions Options = new IPrintOptions()
             {
                Region = DiagramRegions.PageSettings,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.Stretch">
            <summary>
            Sets the aspect ratio for the image to be printed. By default, Stretch is set to Stretch.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ZoomOptions">
            <summary>
            Represents the scaling of diagram control by the given factor.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Zoom" @onclick="@OnZoom" />
            <input type = "button" value="Zoom To" @onclick="@OnZoomRegion" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               public ObservableCollection<DiagramConnector> ConnectorCollection;
               public ObservableCollection<DiagramLayer> LayersCollection;
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node's collection.
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           Id = "Node1",
                           // Position of the node
                           OffsetX = 250, OffsetY = 250,
                           // Size of the node
                           Width = 100, Height = 100,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       }
                   };
                   ConnectorCollection = new ObservableCollection<DiagramConnector>()
                   {
                       new DiagramConnector()
                       {
                           Id = "Connector1",
                           SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 100 },
                           TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 200 },
                           Type = Segments.Orthogonal
                       }
                   };
               }
               // Zoom the diagram
               public void OnZoom()
               {
                   Diagram.Zoom(0.5);
               }
               public void OnZoomRegion()
               {
                   ZoomOptions Options = new ZoomOptions() { FocusPoint = new PointModel() { X = 100, Y = 100 }, Type = ZoomTypes.ZoomIn, ZoomFactor = 2.5 };
                   Diagram.ZoomTo(Options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ZoomOptions.FocusPoint">
            <summary>
            It allows the user to read the focus value of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ZoomOptions.Type">
            <summary>
            Defines the zoom type as zoom in or zoom out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ZoomOptions.ZoomFactor">
            <summary>
            Sets the factor by which we can zoom in or zoom out.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SelectorModel">
            <summary>
            Represents the collection of selected items in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Connectors">
            <summary>
            Get the collection of selected connector objects in the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Constraints">
            <summary>
            The constraints property is used to enable or disable certain behaviors of the Selected Items. .
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">This property controls the visibility of the selector.   </td>
            </tr>
            <tr>
            <td style = "border: none">Users can able to control the resize, user handles behaviors, etc. </td>
            </tr>
            <tr>
            <td style = "border: none"> By default, the constraints will be SelectorConstraints.All. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Height">
            <summary>
            Gets the height of the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Nodes">
            <summary>
            Gets the collection of selected node objects in the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.OffsetX">
            <summary>
            Gets the X coordinate position of the selected region.  Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.OffsetY">
            <summary>
            Gets the Y coordinate position of the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Pivot">
            <summary>
            Gets the position(X,Y) to the selector .By default, this will be (0.5,0.5) to the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.RotateAngle">
            <summary>
            Gets the rotate angle of the selection area. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.RubberBandSelectionMode">
            <summary>
            Specifies whether the diagram objects can be selected, when the selection region intersects the objects or selected only when the complete object's bounds inside the selection region.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">This property has two options. They are    </td>
            </tr>
            <tr>
            <td style = "border: none">CompleteIntersect  </td>
            </tr>
            <tr>
            <td style = "border: none"> PartialIntersect  </td>
            </tr>
            <tr>
            <td style = "border: none"> By default, this Mode will be CompleteIntersect.  </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.UserHandles">
            <summary>
            Defines the collection of UserHandle objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Width">
            <summary>
            Gets the width of the selection region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolSizeModel">
            <summary>
            Specifies the size of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
              <div style="width: 200px; float: left">
                   <SfSymbolPalette Height = "600px" @ref="@SymbolPalette" Palettes="@Palettes">
                   </SfSymbolPalette>
               </div>
               <SfDiagram ID = "diagram" @ref="@Diagram" Width="500px" Height="600px">
            </SfDiagram>
            @code{
                   SfDiagram Diagram;
               SfSymbolPalette SymbolPalette;
               public ObservableCollection<Object> Connectors { get; set; }
               public ObservableCollection<SymbolPalettePalette> Palettes;
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalettePalette>();
                   //Initializes connector symbols for the symbol palette
                   Connectors = new ObservableCollection<Object>()
                                   {
                                   new DiagramConnector()
                       {
                           Id = "Link1",
                           // Sets the preview size
                           PreviewSize = new SymbolSizeModel() { Width = 100, Height = 100 },
                           // Type of the connector segemnts
                           Type = Segments.Straight,
                           // Set the source and target point of the connector
                           SourcePoint = new ConnectorSourcePoint() { X = 0, Y = 0 },
                           TargetPoint = new ConnectorTargetPoint() { X = 60, Y = 60 }
                       },
                                   };
                   Palettes.Add(new SymbolPalettePalette() { Id = "Connectors", Expanded = true, Symbols = Connectors, Title = "Connectors" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolSizeModel.Height">
            <summary>
            Sets the height of the symbols. By default, it`s set to undefined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolSizeModel.Width">
            <summary>
            Sets the width of the symbols.  By default, it`s set to undefined.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PointModel">
            <summary>
            Represents the position of the diagram elements.
            </summary>
            <remarks>
            PointModel represents the position of the diagram elements such as label, port, etc., which is used to define properties like offset, pivot.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PointModel.X">
            <summary>
            Sets the x-coordinate of a position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PointModel.Y">
            <summary>
            Sets the y-coordinate of a position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.OverviewModel">
            <summary>
            Allows user to see a preview or an overall view of the content of a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.Created">
            <summary>
            Triggers after render the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.Height">
            <summary>
            Defines the height of the overview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.SourceID">
            <summary>
            Defines the ID of the overview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.Width">
            <summary>
            Defines the width of the overview .
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolDescription">
            <summary>
            Specifies the description of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram ID="diagram" Width="500px" Height="600px">
               <SfSymbolPalette Width = "100px" Height="600px" SymbolHeight="60" SymbolWidth="60" SymbolInfo="@SymbolInfo">
                   <SymbolPalettePalettes>
                       @* Sets the palette header property for the symbols *@
                       <SymbolPalettePalette Id = "basic" Expanded="true" Symbols="@BasicShapes" IconCss="e-ddb-icons e-flow" Title="Group Shapes">
                       </SymbolPalettePalette>
                   </SymbolPalettePalettes>
               </SfSymbolPalette>
            </SfDiagram>
            @code{
               // Defines palette's basic-shape collection
               public ObservableCollection<DiagramNode> BasicShapes { get; set; }
               public SymbolInfo SymbolInfo;
               protected override void OnInitialized()
               {
                   ///Sets the size, appearance and description of a symbol
                   SymbolInfo = new SymbolInfo()
                   {
                       Description = new SymbolDescription()
                       {
                           Text = "GroupCollection",
                           Overflow = TextOverflow.Wrap,
                           Wrap = TextWrap.Wrap
                       },
                       Height = 50,
                       Width = 50
                   };
                   //Initialize the basicshapes for the symbol palette
                   BasicShapes = new ObservableCollection<DiagramNode>();
                   DiagramNode GroupNode = createNode("groupnode", 100, 100, "GroupNode", Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle);
                   DiagramNode Node1 = createNode("node1", 100, 100, "Node1", Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle);
                   DiagramNode Node2 = createNode("node2", 150, 150, "Node2", Syncfusion.Blazor.Diagrams.BasicShapes.Ellipse);
                   //Grouping node 1 and node 2 into a single group
                   GroupNode.Children = new string[] { "Node1", "Node2" };
                   BasicShapes.Add(Node1);
                   BasicShapes.Add(Node2);
                   BasicShapes.Add(GroupNode);
               }
               public DiagramNode createNode(string id, double offx, double offy, string content, Syncfusion.Blazor.Diagrams.BasicShapes shape)
               {
                   DiagramNodeAnnotation Annotation = new DiagramNodeAnnotation()
                   {
                       Id = "annotation1",
                       Content = content,
                       Style = new AnnotationStyle() { Color = "white", Fill = "transparent", StrokeColor = "None" },
                   };
                   if (content == "GroupNode")
                   {
                       Annotation.Style.Color = "black";
                   }
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = id,
                       OffsetX = offx,
                       OffsetY = offy,
                       Height = 50,
                       Width = 50,
                       Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = shape },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { Annotation }
                   };
                   if (content != "GroupNode")
                   {
                       Node.Style = new NodeShapeStyle() { Fill = "#6BA5D7" };
                   }
                   return Node;
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDescription.Overflow">
            <summary>
            Represents how to handle the text when its size exceeds the given symbol size. By default, it's set to Ellipsis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDescription.Text">
            <summary>
            Specifies the symbol description.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDescription.Wrap">
            <summary>
            Specifies how the text should be wrapped when the text size exceeds some specific bounds. By default, it's set to wrap.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolInfo">
            <summary>
            Specifies the information of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette Height="600px" SymbolHeight="60" SymbolWidth="60" SymbolInfo="@SymbolInfo" Palettes="@Palettes">
            </SfSymbolPalette>
            @code{
               public ObservableCollection<SymbolPalettePalette> Palettes;
               // Defines palette's basic-shape collection
               public ObservableCollection<Object> BasicShapes { get; set; }
               public SymbolInfo SymbolInfo;
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalettePalette>();
                   SymbolInfo = new SymbolInfo() { Fit = true };
                   //Initialize the basicshapes for the symbol palette
                   BasicShapes = new ObservableCollection<Object>
                       ()
                   {
                   new DiagramNode()
                   {
                   Id = "Rectangle",
                   Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle }
                   }
                   };
                   Palettes.Add(new SymbolPalettePalette() { Id = "BasicShapes", Expanded = true, Symbols = BasicShapes, Title = "Basicshapes" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Description">
            <summary>
            Defines the text to be displayed and how that is to be handled. By default its empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Fit">
            <summary>
            Specifies whether the symbol has to be fit inside the size, which is defined by the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Height">
            <summary>
            Defines the height of the symbol to be drawn over the palette. By default, it's undefined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Template">
            <summary>
            Define the template of the symbol that is to be drawn over the palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Tooltip">
            <summary>
            Define the text to be displayed when mouse hover on the shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Width">
            <summary>
            Defines the width of the symbol to be drawn over the palette. By default, it's undefined.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolDragSizeModel">
            <summary>
            Specifies the drag size of the individual palette items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDragSizeModel.Height">
            <summary>
            Sets the drag height of the symbols.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDragSizeModel.Width">
            <summary>
            Sets the drag width of the symbols.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimationSettings">
            <summary>
            Animation options that are common for both open and close actions of the Tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimationSettings.Delay">
            <summary>
            It is used to denote the delay value in milliseconds and indicating the waiting time before the animation begins.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimationSettings.Duration">
            <summary>
            It is used to denote the duration of the animation that is completed per the animation cycle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimationSettings.Effect">
            <summary>
            It is used to apply the Animation effect on the Tooltip, during open and close actions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimation">
            <summary>
            Interface for a class Animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimation.CloseAnimationSettings">
            <summary>
            Animation settings to be applied to the Tooltip when it is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimation.OpenAnimationSettings">
            <summary>
            Animation settings to be applied on the Tooltip, while it is being shown over the target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.CollapseIconMargin">
            <summary>
            Represents the space around the CollapseIcon.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    Node has different kinds of states such as expand state and collapse state. When the user clicks ExpandIcon, all the children from the respective node will get expanded whereas CollapseIcon is clicked, then all children from the respective node will get collapsed. </td>
            </tr>
            <tr>
            <td style = "border: none">•    This property allows the user to set the space that the icon can be moved from its actual position. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
             protected override void OnInitialized()
             {
              // A node is created and stored in nodes collection.
              DiagramNode Node = new DiagramNode()
              {
                 // Position of the node
                 OffsetX = 250,
                 OffsetY = 250,
                 // Size of the node
                 Width = 100,
                 Height = 100,
                 Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                 CollapseIcon = new NodeCollapseIcon()
                 {
                    Width = 20,
                    Height = 20,
                    Shape = IconShapes.ArrowUp,
                    Margin = new CollapseIconMargin { Top = 10, Bottom = 10, Left = 10, Right = 10 }
                 }
               };
               NodeCollection.Add(Node);
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.CollapseIconMargin.#ctor">
            <summary>
            Represents the space around the CollapseIcon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ExpandIconMargin">
            <summary>
            Represents the space around the ExpandIcon.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    Node has different kinds of states such as expand state and collapse state. When the user clicks ExpandIcon, all the children from the respective node will get expanded whereas CollapseIcon is clicked, then all children from the respective node will get collapsed. </td>
            </tr>
            <tr>
            <td style = "border: none">•    This property allows the user to set the space that the icon can be moved from its actual position. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[    <SfDiagram Height="600px" Nodes="@NodeCollection">
              <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
               // A node is created and stored in nodes collection.
               DiagramNode Node = new DiagramNode()
               {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  ExpandIcon = new NodeExpandIcon()
                  {
                     Width = 20,
                     Height = 20,
                     Shape = IconShapes.ArrowDown,
                     //sets the margin value to an icon
                     Margin = new ExpandIconMargin { Top = 10, Bottom = 10, Left = 10, Right = 0 }
                   }
                };
                NodeCollection.Add(Node);
               }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ExpandIconMargin.#ctor">
            <summary>
            Represents the space around the ExpandIcon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FailureSubEvent">
            <summary>
            Specifies the size and position of the failure port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FailureSubEvent.#ctor">
            <summary>
            Initialize the size and position of the failure port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Annotations">
            <summary>
            Defines the collection of textual annotations of the sub events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Event">
            <summary>
            Sets the type of the BPMN Event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Height">
            <summary>
            Sets the height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.HorizontalAlignment">
            <summary>
            Sets how to horizontally align a node with respect to its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Id">
            <summary>
            Sets the id of the BPMN sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Margin">
            <summary>
            Defines the space to be left between the node and its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Offset">
            <summary>
            Defines the position of the sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Ports">
            <summary>
            Defines the collection of connection points of the sub events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Trigger">
            <summary>
            Defines the type of the trigger.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.VerticalAlignment">
            <summary>
            Sets how to vertically align a node with respect to its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Visible">
            <summary>
            Sets the visibility of the sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Width">
            <summary>
            Sets the width of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FirstVector">
            <summary>
            Represents the length and angle between the source point and the first control point of a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FirstVector.#ctor">
            <summary>
            Represents the length and angle between the source point and the first control point of a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FirstVector.Angle">
            <summary>
            Defines the angle between the connector end point and control point of the bezier segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FirstVector.Distance">
            <summary>
            Defines the distance between the connector end point and control point of the bezier segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SecondVector">
            <summary>
            Represents the length and angle between the source point and the second control point of a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SecondVector.#ctor">
            <summary>
            Represents the length and angle between the source point and the second control point of a diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IDiagram">
            <summary>
            This interface specifies the properties of the diagrams.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.AddInfo">
            <summary>
            Allows the user to save custom information/data about diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.AnnotationTemplate">
            <summary>
            Customizes the annotation template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.BackgroundColor">
            <summary>
            Defines the background color of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.BridgeDirection">
            <summary>
            Defines the direction of the bridge that is rendered when the segments are intersected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.CommandManager">
            <summary>
            Defines a set of custom commands and binds them with a set of desired key gestures.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.ConnectorDefaults">
            <summary>
            Helps to assign the default properties of connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Connectors">
            <summary>
            Defines a collection of objects, used to create link between two points, nodes or ports to represent the relationships between them.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Constraints">
            <summary>
            Constraints are used to enable/disable certain behaviors of the diagram, nodes, and connectors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.ContextMenuSettings">
            <summary>
            Defines type of menu that appears when you perform right-click operation. An object to customize the context menu of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.CustomCursor">
            <summary>
            A collection of JSON objects where each object represents a custom cursor action. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.DataSourceSettings">
            <summary>
            Configures the data source that is to be bound with diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.DiagramSettings">
            <summary>
            Defines the settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.DrawingObject">
            <summary>
            Defines the object to be drawn using drawing tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Height">
            <summary>
            Defines the height of the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.HistoryManager">
            <summary>
            Customizes the undo redo functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Layers">
            <summary>
            A collection of JSON objects where each object represents a layer. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Layout">
            <summary>
            Layout is used to auto-arrange the nodes in the Diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Mode">
            <summary>
            Defines the diagram rendering mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.NodeDefaults">
            <summary>
            Helps to assign the default properties of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.NodeTemplate">
            <summary>
            Customizes the node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Nodes">
            <summary>
            Defines the collection of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.PageSettings">
            <summary>
            Page settings enable to customize the appearance, width, and height of the Diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.RulerSettings">
            <summary>
            Defines the properties of both horizontal and vertical guides/rulers to measure the diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.ScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status and view port size of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.SelectedItems">
            <summary>
            Defines the collection of selected items, size and position of the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.SerializationSettings">
            <summary>
            Defines the serialization settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.SnapSettings">
            <summary>
            Defines the gridlines and defines how and when the objects have to be snapped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Tooltip">
            <summary>
            Defines the tooltip that should be shown when the mouse hovers over a node or connector
            An object that defines the description, appearance and alignments of tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Width">
            <summary>
            Defines the width of the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.DiagramTemplates">
            <summary>
            Represents the template’s content to the node, annotation, and user handles. The User can define any HTML content as a template.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IOverview">
            <summary>
            This interface specifies the properties of the overview of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.Height">
            <summary>
            Defines the height of the overview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.SourceID">
            <summary>
            Defines the ID of the overview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.Width">
            <summary>
            Defines the width of the overview.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ISymbolPalette">
            <summary>
            This interface specifies the properties of the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.AccessKey">
            <summary>
            Configures the key, when it pressed the symbol palette will be focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.AllowDrag">
            <summary>
            Defines whether the symbols can be dragged from palette or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.ConnectorDefaults">
            <summary>
            Helps to return the default properties of connectors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.EnableAnimation">
            <summary>
            Enables/Disables animation when the palette header is expanded/collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.EnableSearch">
            <summary>
            Enables/Disables search option in symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.ExpandMode">
            <summary>
            Defines how many palettes can be at expanded mode at a time.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.Height">
            <summary>
            Defines the height of the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.IgnoreSymbolsOnSearch">
            <summary>
            Defines the symbols to be added in search palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.NodeDefaults">
            <summary>
            Helps to return the default properties of node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.Palettes">
            <summary>
            Defines the collection of symbol groups.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolDragSize">
            <summary>
            Defines the size of a drop symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolHeight">
            <summary>
            Defines the height of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolInfo">
            <summary>
            Defines the size, appearance and description of a symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolMargin">
            <summary>
            Defines the space to be left around a symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolPreview">
            <summary>
            Defines the size and position of the symbol preview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolWidth">
            <summary>
            Defines the width of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.Width">
            <summary>
            Defines the width of the symbol palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ISymbolPalette.updateChildProperties(System.String,System.Object)">
            
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramDataSource">
            <summary>
            Acts as a repository for the collection of objects to be mapped and populated in the layout of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
              <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource" DataMapSettings="@Datamap">
                  <DiagramDataMapSettings>
                      <DiagramDataMapSetting Property = "Annotations[0].Content" Field="Name"></DiagramDataMapSetting>
                  </DiagramDataMapSettings>
              </DiagramDataSource>
            </SfDiagram>
            public class HierarchicalDetails
            {
              public string Name { get; set; }
              public string FillColor { get; set; }
              public string Category { get; set; }
              {
                List<DiagramDataMapSetting> Datamap { get; set; } = new List<DiagramDataMapSetting>()
                new DiagramDataMapSetting() { Property = "Shape.TextContent", Field = "Name" }
              };
              //Create the data source with node name and fill color values.
              public List<object> DataSource = new List<object>()
              {
               new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#916DAF"},
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.UpdateProperty``1(System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            Acts as a repository for the collection of objects to be mapped and populated in the layout of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.ConnectionDataSource">
            <summary>
            Defines the collection of connector’s data source objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.DataMapSettings">
            <summary>
            A collection of JSON objects, where each object represents the items mapped to the specific node. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.DataSource">
            <summary>
            A repository for the collection of objects to be mapped and populated in the diagram.
            </summary>
            <example>
            <code lang="Razor">  
            <![CDATA[<SfDiagram>
            //Set the DataSource in the DiagramDataSource
              <DiagramDataSource DataSource = ”@DataSource”>
             </DiagramDataSource>
            </SfDiagram>
            //Create the data source with node name and fill color values.
              public List<object> DataSource = new List<object>()
             {
                new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#916DAF"},
                new HierarchicalDetails(){ Name ="Layout", Category="Diagram",FillColor=""},
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.Id">
            <summary>
            Sets a unique Id for the data source in the diagram.
            </summary>
            <remarks>
            The Id should be unique always, else overlap over the data source might occur.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.ParentId">
            <summary>
            Defines a unique Id for all the Data source items. The ParentId clubs all the data source items as a collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.Root">
            <summary>
            The Root property is used to set the root (primary) node of the diagram populated from the data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.updateChildProperties(System.String,System.Object)">
            <returns>  Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramsGradientStop">
            <summary>
            Represents the color and a position, where the previous color transition ends, and a new color transition starts.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                 DiagramNode Node = new DiagramNode()
                 {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle()
                    {
                    Gradient = new DiagramGradient()
                    {
                      //Center point of inner circle
                      Fx = 20,
                      Fy = 20,
                      //Center point of outer circle
                      Cx = 50,
                      Cy = 50,
                      //Radius of a radial gradient
                      R = 50,
                      //Sets an array of stop objects
                      Stops = new ObservableCollection<DiagramsGradientStop>()
                      {
                        new DiagramsGradientStop(){ Color = "white", Offset = 0},
                        new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
                      },
                      Type = GradientType.Radial
                    }
                   },
                 };
                 // Add node
                 NodeCollection.Add(Node);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsGradientStop.#ctor">
            <summary>
            Represents the color and a position, where the previous color transition ends, and a new color transition starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGradientStop.Color">
            <summary>
            Gets or sets the color to be filled over the specified region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramsGradientStop._color">
            <summary>
            Defines the color to be filled over the specified region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGradientStop.Offset">
            <summary>
            Gets or sets the position where the previous color transition ends, and a new color transition starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGradientStop.Opacity">
            <summary>
            Gets or sets the transparency level of the region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator">
            <summary>
            Defines the properties and features of highlighting the connector source point.
            </summary>
            <remarks>
            A connector’s source decorator can be customized as per the user’s perspective like adding fill color, stroke color, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
              protected override void OnInitialized()
              {
               ConnectorCollection = new ObservableCollection<DiagramConnector>();
               DiagramConnector Connector = new DiagramConnector()
               {
                 SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                 TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                 SourceDecorator = new ConnectorSourceDecorator()
                 {
                    Shape = DecoratorShapes.Circle,
                    Style = new DecoratorShapeStyle() { StrokeColor = "#37909A", Fill = "#37909A", StrokeWidth = 1 },
                    Height = 40,
                    Width = 40,
                    Pivot = new DecoratorPivot()
                    {
                           X = 0.5,
                           Y = 0.5
                    }
                 },
              };
              ConnectorCollection.Add(Connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.#ctor">
            <summary>
            Defines the properties and features of highlighting the connector source point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Height">
            <summary>
            Defines the height of the source decorator. By default, the Height of source decorator is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.PathData">
            <summary>
            Gets or sets the geometry of the source decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Pivot">
            <summary>
            Gets or sets the position of the connector’s source decorator. The pivot points range from 0 to 1 for both X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Shape">
            <summary>
            Sets the shape of the source decorator.
            </summary>
            <remarks>
            The Shape can be set to Diamond, Doublearrow, OpenArrow, Circle, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[SourceDecorator = new ConnectorSourceDecorator()
            {
               Height=40,
               //Set the shape as desired
               Shape=DecoratorShapes.Diamond,
               Width=40,
               Pivot=new DecoratorPivot()
               {
                 X = 0.5,
                 Y = 0.5
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Style">
            <summary>
            Gets or sets the appearance of the source decorator.
            </summary>
            <remarks>
            The fill color, stroke width, stroke color, etc., of the source decorator, is set in Style.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[SourceDecorator = new ConnectorSourceDecorator()
            {
              Shape=DecoratorShapes.Diamond,
              //Set the style for source decorator
              Style=new DecoratorShapeStyle()
              {
                Fill = "red",
                StrokeColor = "blue"
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Width">
            <summary>
            Defines the width of the source decorator. By default, the Width of the source decorator is set to 10.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator">
            <summary>
            Defines the properties and features of highlighting the connector’s endpoint.
            </summary>
            <remarks>
            A connector’s target decorator can be customized as per the user’s perception like adding fill color, stroke color, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                 ConnectorCollection = new ObservableCollection<DiagramConnector>();
                 DiagramConnector Connector = new DiagramConnector()
                 {
                  SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                  TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                  TargetDecorator = new ConnectorTargetDecorator()
                  {
                    Shape = DecoratorShapes.Circle,
                    Style = new DecoratorShapeStyle() { StrokeColor = "#37909A", Fill = "#37909A", StrokeWidth = 1 },
                    Height = 40,
                    Width = 40,
                    Pivot = new DecoratorPivot()
                    {
                      X = 0.5,
                      Y = 0.5
                    }
                 },
               };
               ConnectorCollection.Add(Connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.#ctor">
            <summary>
            Defines the properties and features of highlighting the connector’s endpoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Height">
            <summary>
            Defines the height of the target decorator. By default, the Height is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.PathData">
            <summary>
            Gets or sets the geometry of the target decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Pivot">
            <summary>
            Gets or sets the position of the connector’s target decorator. The pivot points range from 0 to 1 for both X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Shape">
            <summary>
            Sets the shape of the target decorator.
            </summary>
            <remarks>
            The Shape can be set to Diamond, Doublearrow, OpenArrow, Circle, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[TargetDecorator = new ConnectorTargetDecorator()
             {
                 Shape = DecoratorShapes.Arrow,
             },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Style">
            <summary>
            Gets or sets the appearance of the target decorator.
            </summary>
            <remarks>
            The fill color, stroke width, stroke color, etc., of the target decorator, is set in Style.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[TargetDecorator = new ConnectorTargetDecorator()
               {
                Shape = DecoratorShapes.Arrow,
                Style = new DecoratorShapeStyle() { Fill = "red", StrokeWidth = 1 },
               },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Width">
            <summary>
            Defines the width of the target decorator. By default, the Width is set to 10.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle">
            <summary>
             Represents the appearance of the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              //Defines diagram's connector collection
              public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
              protected override void OnInitialized()
              {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                  TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                  Style = new ConnectorShapeStyle()
                  {
                    StrokeColor = "#6f409f",
                    StrokeWidth = 1,
                    Fill = "#6f409f",
                    Opacity = 1,
                    StrokeDashArray = "2,2"
                   },
                  //Specify the segments types as straight.
                  Type = Segments.Straight,
                };
                ConnectorCollection.Add(DiagramConnector);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.#ctor">
            <summary>
             Represents the appearance of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.Fill">
            <summary>
            Gets or sets the fill color of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.Opacity">
            <summary>
            Defines the transparency level of the connector. By default, it’s set to 1.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Opacity values are ranges from 0 to 1 where,</td>
            </tr>
            <tr>
            <td style = "border: none">•    0 represents completely transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    0 represents completely transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    1 represents not transparent at all. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.StrokeColor">
            <summary>
            Gets or sets the stroke color of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the width to the stroke of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeShapeStyle">
            <summary>
             Represents the appearance of the node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              //Initialize node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
              {
                //Creates a text node
                new DiagramNode()
                {
                  Id="node1",
                  // Size of the node
                  Height=100,
                  Width=100,
                  // Position of the node
                  OffsetX=100,
                  OffsetY=100,
                  //Sets type of the shape as text
                  Shape=new DiagramShape(){Type=Shapes.Text,Content="Text Node"},
                  //Set the style property to the shape
                  Style = new NodeShapeStyle() { Bold= true, Color = "red", Fill  = "#6BA5D7"  , FontSize = 15 , Italic = true, Opacity = 0.5}
                 }
               };
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeShapeStyle.#ctor">
            <summary>
             Represents the appearance of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Bold">
            <summary>
            This property allows the users to enable or disable the bold style of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Color">
            <summary>
            Gets or sets the font color of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Fill">
            <summary>
             Gets or sets the fill color of a shape/path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.FontFamily">
            <summary>
            Gets or sets the font type of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.FontSize">
            <summary>
            Gets or sets the font size of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The gradient stop’s opacity property defines the transparency level of the region. The gradient stop property defines the color and a position, where the previous color transition ends, and a new color transition starts. There are two types of gradients as follows, </td>
            </tr>
            <tr>
            <td style = "border: none">•    LinearGradient</td>
            </tr>
            <tr>
            <td style = "border: none">•    RadialGradient</td>
            </tr>
            <tr>
            <td style = "border: none">The following code demonstrates how to define the linear and radial gradient</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
             <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
             </ SfDiagram >
               @code{
                //Initialize node collection with node
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                 // . . .
                 // . . .
                 Style = new NodeShapeStyle()
                 {
                    Gradient = new DiagramGradient()
                    {
                     //Start point of linear gradient
                     X1 = 0,
                     Y1 = 0,
                     //End point of linear gradient
                     X2 = 50,
                     Y2 = 50,
                     //Sets an array of stop objects
                     Stops = new ObservableCollection<DiagramsGradientStop>()
                     {
                        new DiagramsGradientStop(){ Color = "white", Offset = 0},
                        new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
                     },
                     Type = GradientType.Linear
                    }
                 },
                 // . . .
                 // . . .
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Italic">
            <summary>
            This property allows the users to enable or disable the italic style of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Opacity">
            <summary>
            Defines the transparency level of the shape or path.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Opacity values are ranges from 0 to 1 where,</td>
            </tr>
            <tr>
            <td style = "border: none">•    0 represents completely transparent.</td>
            </tr>
            <tr>
            <td style = "border: none">•    0.5 represents Partially transparent.</td>
            </tr>
            <tr>
            <td style = "border: none">•    1 represents not transparent at all.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.StrokeColor">
            <summary>
            Gets or sets the color to the stroke of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the width to the stroke of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.TextAlign">
            <summary>
            Defines the alignment of the text inside the node bounds. By default, it’s set to center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.TextDecoration">
            <summary>
            Specifies how the text should be decorated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.TextOverflow">
            <summary>
            Specifies how to handle the text when it exceeds the given size. By default, it’s set to Wrap.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.TextWrapping">
            <summary>
            Specifies how the text should be wrapped when the text size exceeds some specific bounds. By default, it’s set to WrapWithOverflow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.WhiteSpace">
            <summary>
            Specifies how to white space and new line characters must be handled. By default, it’s set to CollapseSpace.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle">
            <summary>
            Represents the appearance of the decorator.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              //Defines diagram's connector collection
              public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
              protected override void OnInitialized()
              {
               DiagramConnector DiagramConnector = new DiagramConnector()
               {
                 SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                 TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                 TargetDecorator = new ConnectorTargetDecorator()
                 {
                    Width = 20,
                    Height = 20,
                    Shape = DecoratorShapes.Arrow,
                    //set the style property to the decorator
                    Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1, Opacity = 0.5, StrokeDashArray = "2,2" }
                  },
                  Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                  //Specify the segments types as straight.
                  Type = Segments.Straight,
                };
                ConnectorCollection.Add(DiagramConnector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.#ctor">
            <summary>
            Represents the appearance of the decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.Fill">
            <summary>
            Gets or sets the fill color of the shape or decorator. By default, it will be white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the source or target decorator.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The gradient stop’s opacity property defines the transparency level of the region. The gradient stop property defines the color and a position, where the previous color transition ends, and a new color transition starts. There are two types of gradients as follows,</td>
            </tr>
            <tr>
            <td style = "border:none">• LinearGradient</td>
            </tr>
            <tr>
            <td style = "border:none">• RadialGradient</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 , Opacity = 1, StrokeDashArray ="2,2" ,  Gradient = new DiagramGradient()
             {
               //Center point of inner circle
               Fx = 20,
               Fy = 20,
               //Center point of outer circle
               Cx = 50,
               Cy = 50,
               //Radius of a radial gradient
               R = 50,
               //Sets an array of stop objects
               Stops = new ObservableCollection<DiagramsGradientStop>()
               {
                 new DiagramsGradientStop() { Color = "white", Offset = 0},
                 new DiagramsGradientStop() { Color = "#6BA5D7", Offset = 100}
                },
                Type = GradientType.Radial
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.Opacity">
            <summary>
            Defines the transparency level of the shape or path.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Opacity values are ranges from 0 to 1 where,</td>
            </tr>
            <tr>
            <td style = "border:none">• 0 represents completely transparent</td>
            </tr>
            <tr>
            <td style = "border:none">• 0.5 represents Partially transparent</td>
            </tr>
            <tr>
            <td style = "border:none">• 1 represents not transparent at all.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.StrokeColor">
            <summary>
            Gets or sets the color to the stroke of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the width to the stroke of the shape or path.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DecoratorPivot">
            <summary>
            Represents the position (X, Y) of the decorator to the source or target point of the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              //Defines diagram's connector collection
              public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
              protected override void OnInitialized()
              {
                DiagramConnector DiagramConnector = new DiagramConnector()
                  {
                    SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                    TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                    TargetDecorator = new ConnectorTargetDecorator()
                    {
                      Shape = DecoratorShapes.Arrow,
                      Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 },
                      //set pivot value to target decorator
                      Pivot = new DecoratorPivot() { X = 0, Y = 0.5 },
                    },
                    Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                    //Specify the segments types as straight.
                    Type = Segments.Straight,
                  };
                ConnectorCollection.Add(DiagramConnector);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DecoratorPivot.#ctor">
            <summary>
            Represents the position (X, Y) of the decorator to the source or target point of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorPivot.X">
            <summary>
            Gets or sets X coordinate position of the decorator. By default, it will be 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorPivot.Y">
            <summary>
            Gets or sets Y coordinate position of the decorator. By default, it will be 0.5.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationStyle">
            <summary>
            Represents the annotation style for an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AnnotationStyle.#ctor">
            <summary>
            Represents the annotation style for an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Bold">
            <summary>
            Specifies whether a font appears in bold or not. By default, it`s false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Color">
            <summary>
            Specifies the font color of a text. By default, it`s black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Fill">
            <summary>
            Sets the fill color of a shape/path. By default, it`s transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.FontFamily">
            <summary>
            Specifies the font type of a text. By default, it`s Arial.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.FontSize">
            <summary>
            Specifies the font size of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Gradient">
            <summary>
            Specifies the gradient of shape/path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Italic">
            <summary>
            Enables/disables the italic style of text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Opacity">
            <summary>
            Sets the opacity of a shape/path. By default, it`s 1. It varies between 0 to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.StrokeColor">
            <summary>
            Sets the stroke color of a shape/path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.StrokeDashArray">
            <summary>
            Specifies the patterns of dashes and spaces to stroke the path/shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.StrokeWidth">
            <summary>
            Specifies the stroke width of the path/shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.TextAlign">
            <summary>
            Specifies how they should be aligned within its bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.TextDecoration">
            <summary>
            Specifies how the text should be decorated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.TextOverflow">
            <summary>
            Specifies how to handle the text when it exceeds the given size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.TextWrapping">
            <summary>
            Specifies how the text should be wrapped when the text size exceeds some specific bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.WhiteSpace">
            <summary>
            Specifies how to white space and new line characters must be handled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.LayoutMargin">
            <summary>
            Represents the class to define the space between the viewport and the layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.LayoutMargin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagrams.LayoutMargin"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.LayoutMargin.Bottom">
            <summary>
            Gets or sets the space to be left from the bottom side of the immediate parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.LayoutMargin.Left">
            <summary>
            Gets or sets the space to be left from the left side of the immediate parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.LayoutMargin.Right">
            <summary>
            Gets or sets the space to be left from the right side of the immediate parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.LayoutMargin.Top">
            <summary>
            Gets or sets the space to be left from the top side of the immediate parent of an element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodePortOffset">
            <summary>
            Represents the position of the port relative to the bounds of the node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
                // A node is created and stored in the node array.
                DiagramNode Node = new DiagramNode()
                {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  // Initialize port collection
                  Ports = new ObservableCollection<DiagramPort>() {
                  new DiagramPort() {
                     Id = "port1",
                     //Set offset value to the port
                     Offset = new NodePortOffset(){X= 0.5, Y= 0.5 },
                     Visibility = PortVisibility.Visible,
                     Style= new PortShapeStyle(){ Fill="gray"},
                    }},
                    };
                   NodeCollection.Add(Node);
                  }
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodePortOffset.#ctor">
            <summary>
            Represents the position of the port relative to the bounds of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodePortOffset.X">
            <summary>
            Gets or sets x coordinate position .
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodePortOffset.Y">
            <summary>
            Gets or sets Y coordinate position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnSubEventOffset">
            <summary>
            Represents the position of the sub-event.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">BpmnSubEventOffset is used to set the fraction relative to the parent that represents the position of the BpmnSubEvent. Fraction value ranges from 0 to 1. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the event will be position at the top left corner of the node.   </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the event will be position at the center of the node.   </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the event will be position at the bottom right corner of the node.   </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
              {
                Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                //Sets activity to SubProcess
                Activity=new DiagramBpmnActivity()
                {
                   Activity = BpmnActivities.SubProcess,
                   //Sets the collapsed to true and type to Event
                   SubProcess = new DiagramBpmnSubProcess()
                   {
                     Collapsed = true,
                     Type = BpmnSubProcessTypes.Event,
                     //Sets event to Start and trigger to Message
                     Events = new ObservableCollection<DiagramBpmnSubEvent>()
                     {
                        new DiagramBpmnSubEvent()
                        {
                         Event = BpmnEvents.Start, Trigger = BpmnTriggers.Message, Offset = new BpmnSubEventOffset { X= 0, Y=0}
                        }
                      }
                    }
                 }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.BpmnSubEventOffset.#ctor">
            <summary>
            Represents the position of the sub-event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UserHandleOffset">
            <summary>
            Represents the position of the fixed user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[   FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                    {
                      new DiagramNodeFixedUserHandle() {  Offset = new UserHandleOffset() { X = 1, Y = 0 },Id = "user1", Height = 20, Width = 20, Visibility = true,Margin = new UserHandleMargin() { Right = 20, Bottom = 20 },CornerRadius = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                    },
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.UserHandleOffset.#ctor">
            <summary>
            Represents the position of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.UserHandleOffset.X">
            <summary>
            Gets or sets the x coordinate position of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.UserHandleOffset.Y">
            <summary>
            Gets or sets the Y coordinate position of the fixed user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IconPadding">
            <summary>
            Represents the space inside the border of an icon.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
              @code{
                public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
                protected override void OnInitialized()
                {
                  // A node is created and stored in nodes collection.
                  DiagramNode Node = new DiagramNode()
                  {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    ExpandIcon = new NodeExpandIcon()
                    {
                      Width = 20,
                      Height = 20,
                      Shape = IconShapes.ArrowDown,
                      Fill = "red",
                      CornerRadius = 3
                      //set padding to expand icon
                      Padding = new IconPadding { Top = 0, Left = 0, Bottom = 0, Right = 0 },
                     },
                  };
                  NodeCollection.Add(Node);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.IconPadding.#ctor">
            <summary>
            Represents the space inside the border of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconPadding.Bottom">
            <summary>
            Specifies the space to be left within the icon border on the bottom. By default, it is set to 2.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconPadding.Left">
            <summary>
            Specifies the space to be left within the icon border on the left. By default, it is set to 2.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconPadding.Right">
            <summary>
            Specifies the space to be left within the icon border on the right. By default, it is set to 2.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconPadding.Top">
            <summary>
            Specifies the space to be left within the icon border on the top. By default, it is set to 2.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IconOffset">
            <summary>
            Represents the position of the icon at the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">IconOffset is used to align the icon in the node based on the fractions. Fraction values are range from 0 to 1. By default, the offset values will be X=0.5 and  Y=1.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the icon will be position at the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the icon will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the icon will be position at the bottom right corner of the node.  </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
              <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
                // A node is created and stored in nodes collection.
                DiagramNode Node = new DiagramNode()
                {
                 // Position of the node
                 OffsetX = 250,
                 OffsetY = 250,
                 // Size of the node
                 Width = 100,
                 Height = 100,
                 Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                 ExpandIcon = new NodeExpandIcon()
                 {
                   Width = 20,
                   Height = 20,
                   Shape = IconShapes.ArrowDown,
                   Fill = "red",
                   //set the offset value to the expand icon
                   Offset = new IconOffset() { X = 0, Y = 0 }
                  },
                };
                NodeCollection.Add(Node);
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.IconOffset.#ctor">
            <summary>
            Represents the position of the icon at the bounds of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconOffset.X">
            <summary>
            Gets or sets the x coordinate position of the icon. By default, it is set to 0.5.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconOffset.Y">
            <summary>
            Gets or sets the Y coordinate position of the icon. By default, it is set to 1.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeAnnotationOffset">
            <summary>
            Represents the position of the label relative to the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">NodeAnnotationOffset is used to align the annotation in the node based on the fractions. Fraction value ranges from 0 to 1. Default value for NodeAnnotationOffset is set to X=0.5 and  Y=0.5.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the label will be position at the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the label will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the label will be position at the bottom right corner of the node. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
                // A node is created and stored in the node array.
                DiagramNode Node = new DiagramNode()
                {
                 // Position of the node
                 OffsetX = 250,
                 OffsetY = 250,
                 // Size of the node
                 Width = 100,
                 Height = 100,
                 Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                 // Initialize port collection
                 Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                 {
                   // An annotation is created and stored in an Annotation collection of Node.
                   new DiagramNodeAnnotation() { Content = "Offset(0,0)",
                   //set offset value to an annotation
                   Offset = new NodeAnnotationOffset() { X = 0, Y = 0 }}
                  }
                };
                NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeAnnotationOffset.#ctor">
            <summary>
            Represents the position of the label relative to the bounds of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SelectorPivot">
            <summary>
            Represents the actual control point for the selector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SelectorPivot.#ctor">
            <summary>
            Represents the actual control point for the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorPivot.X">
            <summary>
            Gets or sets the actual control point to the horizontal in direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorPivot.Y">
            <summary>
            Gets or sets the actual control point to the vertical in direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodePivotPoint">
            <summary>
            It represents the actual control point for the nodes. In this respect, the node can be rotated.
            </summary>
            <remarks>
            Rotation of the node is controlled by using the pivot property. These values are range from 0 to 1.
             The default value for the node’s pivot point is (0.5,0.5), which means the center of the node.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
             protected override void OnInitialized()
             {
              // A node is created and stored in the node array.
              DiagramNode Node = new DiagramNode()
             {
               // Position of the node
               OffsetX = 250,
               OffsetY = 250,
               // Size of the node
               Width = 100,
               Height = 100,
               Pivot = new NodePivotPoint { X = 0, Y = 0 },
               Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
              };
              NodeCollection.Add(Node);
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodePivotPoint.#ctor">
            <summary>
            It represents the actual control point for the nodes. In this respect, the node can be rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodePivotPoint.X">
            <summary>
            Gets or sets the actual control point to the horizontal in direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodePivotPoint.Y">
            <summary>
            Gets or sets the actual control point to the vertical in direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AutoScrollMargin">
            <summary>
            Specifies the maximum distance to be left between the object and the scroll bar to trigger auto-scrolling.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            @using Syncfusion.Blazor.Diagrams
            <SfDiagram Height = "600px" >
                   @* Sets the auto scroll border for the diagram *@
                   <AutoScrollMargin Left = "50" Bottom="50" Right="50" Top="50"></AutoScrollMargin>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AutoScrollMargin.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AutoScrollMargin.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AutoScrollMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AutoScrollPadding">
            <summary>
            Specifies the maximum distance to be left between the object and edge of the page.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
                @* Sets the Padding for the diagram Scroll*@
                <AutoScrollPadding Right = "50" Bottom="50"></AutoScrollPadding>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AutoScrollPadding.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AutoScrollPadding.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns> /// <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBackground">
            <summary>
            Represents the appearance of the diagram background.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
               @* Initialize the page settings with page orientation and break lines*@
               <DiagramPageSettings Height = "300" Width="300" Orientation="PageOrientation.Landscape" ShowPageBreaks="true">
               //set image to the background
                <DiagramBackground Source = "https://www.w3schools.com/images/w3schools_green.jpg" />
                //set color to the background
                < DiagramBackground Color="lightblue"/>
               </DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.Align">
            <summary>
            Defines the alignment of background image over the diagram area.
            </summary>
            <remarks>
            Users can customize the alignment of the background image by using the Align property of the background. The Align Property contains some options such as XMinYMin, XMidYMid, XMaxYMin, and XMaxYMin, etc. Users can choose any one of the above options. By default, it will be None.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.Color">
            <summary>
            Defines the background color of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<DiagramPageSettings Height="300" Width="300" ShowPageBreaks="true">
            //set color to the background
            <DiagramBackground Color="lightblue" />
            </DiagramPageSettings>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.Scale">
            <summary>
            This property allows the user to stretch or scale the images to diagram bounds.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set to the scale property, </td>
            </tr>
            <tr>
            <td style = "border: none">1.	None - Scale value will be set as None for the image. </td>
            </tr>
            <tr>
            <td style = "border: none">2.	Meet – The entire diagram is visible within the viewport. </td>
            </tr>
            <tr>
            <td style = "border: none">3.	Slice - Entire viewport is visible within the diagram. </td>
            </tr>
            <tr>
            <td style = "border: none">By default, the scale will be None. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<DiagramPageSettings Height="300" Width="300" ShowPageBreaks="true">
            //set image to the background
            <DiagramBackground Source="https://www.w3schools.com/images/w3schools_green.jpg" Scale="@Scale" />
            </DiagramPageSettings>
            @code{
               ImageAlignment Scale = ImageAlignment.Meet;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.Source">
            <summary>
            Defines the source path to the background image.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<DiagramPageSettings Height="300" Width="300" ShowPageBreaks="true">
            //set image to the background
            <DiagramBackground Source="https://www.w3schools.com/images/w3schools_green.jpg" Scale="@Scale" />
            </DiagramPageSettings>
             @code{
             ImageAlignment Scale = ImageAlignment.Meet;
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBackground.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBackground.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBackground.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramCommand">
            <summary>
            Specifies a command and a key gesture to define when the command should be executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommand.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommand.Gesture">
            <summary>
            Specifies a combination of keys and key modifiers, on recognition of which the command will be executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommand.Name">
            <summary>
            Specifies the name of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommand.Parameter">
            <summary>
            Specifies any additional parameters that are required at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommand.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommand.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommand.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommand.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramCommandManager">
            <summary>
            Represents to map or bind command execution with the desired combination of key gestures.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">CommandManager provides support to define custom commands. The custom commands are executed when the specified key gesture is recognized.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram @ref="@Diagram" Height="600px"
               Nodes="@NodeCollection">
               @* Initializing the custom commands*@
               <DiagramCommandManager>
                   <DiagramCommands>
                       <DiagramCommand Name = "customGroup" >
                           < DiagramKeyGesture Key="Keys.G" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                       <DiagramCommand Name = "customUnGroup" >
                           < DiagramKeyGesture Key="Keys.U" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                   </DiagramCommands>
               </DiagramCommandManager>
               @* To define the custom commands execution event *@
               <DiagramEvents OnCommandExecuted="@CommandExecute"></DiagramEvents>
            </SfDiagram>
            @code
               {
                   // Reference to diagram
                   SfDiagram Diagram;
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   //Initializing the nodes collection
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode1 = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode1);
                   DiagramNode DiagramNode2 = new DiagramNode()
                   {
                       Id = "node2",
                       OffsetX = 300,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode2);
               }
               /// <summary>
               /// Custom command execution event
               /// </summary>
               public void CommandExecute(ICommandExecuteEventArgs args)
               {
                   if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.G)
                   {
                       //Custom command to group the selected nodes
                       Diagram.Group();
                   }
                   if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.U)
                   {
                       //Custom command to ungroup the selected items
                       if (Diagram.SelectedItems.Nodes.Count > 0 && Diagram.SelectedItems.Nodes[0].Children != null && Diagram.SelectedItems.Nodes[0].Children.Length > 0)
                       {
                           Diagram.UnGroup();
                       }
                   }
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommandManager.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommandManager.Commands">
            <summary>
            Stores the multiple command names with the corresponding command objects
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommandManager.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommandManager.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommandManager.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommandManager.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramCommands">
            <summary>
            Stores n number of actions to perform in the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram @ref="@Diagram" Height="600px">
               @* Initializing the custom commands*@
               <DiagramCommandManager>
                   <DiagramCommands>
                       <DiagramCommand Name = "customGroup" >
                           < DiagramKeyGesture Key="Keys.G" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                       <DiagramCommand Name = "customUnGroup" >
                           < DiagramKeyGesture Key="Keys.U" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                   </DiagramCommands>
               </DiagramCommandManager>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommands.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommands.Commands">
            <summary>
            Defines the specific action to be performed in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommands.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommands.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource">
            <summary>
            Represents the Interface for a class ConnectionDataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.DataManager">
            <summary>
            Specifies the data source either as a collection of objects or as an URL of DataManager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.Id">
            <summary>
            Specifies an Id for connector dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.SourceID">
            <summary>
            Specifies the SourceID to connect with the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.SourcePointX">
            <summary>
            Specifies the SourcePoint to render connector start point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.SourcePointY">
            <summary>
            Specifies the SourcePoint to render connector start point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.TargetID">
            <summary>
            Specifies TargetID to connect with the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.TargetPointX">
            <summary>
            Specifies TargetPoint to render the connector target point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.TargetPointY">
            <summary>
            Specifies TargetPoint to render the connector target point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting">
            <summary>
            Maps the data from the data source to the diagram layout nodes.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Based on the user-defined JSON (Local) data, the diagram is populated. This can be done only by mapping the local data to Data Source fields.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource" DataMapSettings="@Datamap">
                   <DiagramDataMapSettings>
                       <DiagramDataMapSetting Property = "Annotations[0].Content" Field="Name"></DiagramDataMapSetting>
                   </DiagramDataMapSettings>
               </DiagramDataSource>
            </SfDiagram>
            @code{
               public class HierarchicalDetails
               {
                   public string Name { get; set; }
                   public string FillColor { get; set; }
                   public string Category { get; set; }
               }
               List<DiagramDataMapSetting> Datamap { get; set; } = new List<DiagramDataMapSetting>()
               {
                   new DiagramDataMapSetting() { Property = "Shape.TextContent", Field = "Name" }
               };
               ///Create the data source with node name and fill color values.
               public List<object> DataSource = new List<object>()
               {
                   new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#916DAF"},
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.Field">
            <summary>
            Defines the Fields for the Data source item to be mapped with Node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
            <DiagramDataSource>
              <DiagramDataMapSettings>
                 //Set the field in DiagramDataMapSetting
                <DiagramDataMapSetting Field="Name"></DiagramDataMapSetting>
              </DiagramDataMapSettings>
             </DiagramDataSource>
            </SfDiagram>
            //Create the data map settings.
            new List<DiagramDataMapSetting>()
             {
               new DiagramDataMapSetting() { Field = "Name" }
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.Property">
             <summary>
             Defines the property mapped with the data source items value.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[<SfDiagram>
              <DiagramDataSource>
               <DiagramDataMapSettings>
                  //Set the property in DiagramDataMapSetting
                 <DiagramDataMapSetting Property="Annotations[0].Content"></DiagramDataMapSetting>
               </DiagramDataMapSettings>
              </DiagramDataSource>
            </SfDiagram>
             //Create the data map settings.
             new List<DiagramDataMapSetting>()
             {
                new DiagramDataMapSetting() { Property = "Shape.TextContent"}
             };
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramDataMapSettings">
            <summary>
            Specifies to Mapping the collection of local data to Data Source fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataMapSettings.DataMapSettings">
            <summary>
            Maps the data from the data source to the diagram layout nodes. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataMapSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEvents">
            <summary>
            It is used to defines the diagram events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.Clicked">
            <summary>
            Triggers when a node, connector or diagram is clicked
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnCommandExecuted">
            <summary>
            Triggers when a command executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnConnectionChange">
            <summary>
            Triggers when the connection is changed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.ContextMenuItemClicked">
            <summary>
            Triggers when a context menu item is clicked
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.FixedUserHandleClick">
            <summary>
            Triggers when a Fixed User Handle item is clicked
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnContextMenuOpen">
            <summary>
            Triggers before opening the context menu
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.Created">
            <summary>
            Triggered when the diagram is rendered completely.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.DataLoaded">
            <summary>
            Triggered when the diagram layout is rendered completely.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnDoubleClick">
            <summary>
            Triggers when a node, connector or diagram model is clicked twice
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.DragEnter">
            <summary>
            Triggers when a symbol is dragged into diagram from symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.DragLeave">
            <summary>
            Triggers when a symbol is dragged outside of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnDrop">
            <summary>
            Triggers when a symbol is dragged and dropped from symbol palette to drawing area
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.HistoryChanged">
            <summary>
            Triggers when a change is reverted or restored(undo/redo)
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.CustomHistoryChanged">
            <summary>
            Triggers when a custom entry change is reverted or restored(undo/redo)
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnKeyDown">
            <summary>
            Triggers when a user is pressing a key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnKeyUp">
            <summary>
            Triggers when a user releases a key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.MouseEnter">
            <summary>
            Triggered when mouse enters a node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.MouseLeave">
            <summary>
            Triggered when mouse leaves node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnUserHandleMouseDown">
            <summary>
            Triggers when a mouseDown on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnUserHandleMouseEnter">
            <summary>
            Triggers when a mouseEnter on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnUserHandleMouseLeave">
            <summary>
            Triggers when a mouseLeave on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnUserHandleMouseUp">
            <summary>
            Triggers when a mouseUp on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnPositionChange">
            <summary>
            Triggers while dragging the elements in diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.PropertyChanged">
            <summary>
            Triggers once the node or connector property changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnRotateChange">
            <summary>
            Triggers when the diagram elements are rotated
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.SelectionChanged">
            <summary>
            Triggers when the selection is changed in diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnSizeChange">
            <summary>
            Triggers when a node is resized
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.TextEdited">
            <summary>
            Triggers when editor got focus at the time of node’s label or text node editing.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramEvents.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramFitOptions">
            <summary>
            Represents the diagram content that can fit into the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
                <DiagramPageSettings >
                 <DiagramFitOptions CanFit = "true" Mode="FitModes.Width" CanZoomIn="true" Region="DiagramRegions.Content" ></DiagramFitOptions>
               </DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.CanFit">
            <summary>
            It allows the user to enable or disable the fit of diagram content while rendering. It'll be false by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.CanZoomIn">
            <summary>
            It allows the user to enable or disable the zooming, to insert the smaller content into the larger viewport.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.CustomBounds">
            <summary>
            Defines the custom region that can be fit into the viewport.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.Margin">
            <summary>
            Specifies the space around the diagram content. By default, it will be 25 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.Mode">
            <summary>
            Defines whether the diagram can fit within the viewport based on viewport width or viewport Height or page.
            </summary>
            <remarks>        
            <table style = "border: none"> 
            <tr>
            <td style = "border: none">The mode has the following three options. They are  </td>
            </tr>    
            <tr>
            <td style = "border: none">�	Page </td>
            </tr>    
            <tr>
            <td style = "border: none">�	Width </td>
            </tr>    
            <tr>
            <td style = "border: none">�	Height</td>
            </tr>    
            <tr>
            <td style = "border: none">By default, the Mode is set to Page.</td>
            </tr>  
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.Region">
            <summary>
            Defines the region that can be fit into the viewport.
            </summary>
            <remarks>        
            <table style = "border: none"> 
            <tr>
            <td style = "border: none">The region has the following three options. They are </td>
            </tr>    
            <tr>
            <td style = "border: none">�	PageSettings </td>
            </tr>    
            <tr>
            <td style = "border: none">�	Content </td>
            </tr>    
            <tr>
            <td style = "border: none">�	CustomBounds</td>
            </tr>    
            <tr>
            <td style = "border: none">By default, the region is set to PageSettings.</td>
            </tr>  
            </table>
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptions.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptions.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptions.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptions.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramFitOptionsMargin">
            <summary>
            Represents the space around the diagram content.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
                <DiagramPageSettings>
                    <DiagramFitOptionsMargin Left = 50 Top=50 Bottom=50 Right=50></DiagramFitOptionsMargin>
                <DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptionsMargin.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptionsMargin.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptionsMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramKeyGesture">
            <summary>
            Defines a keyboard combination that can be used to invoke a command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.Key">
            <summary>
            Each key enables users to enter data when clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.KeyModifiers">
            <summary>
            A special key commonly used to enter keyboard shortcuts.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramPageSettings">
            <summary>
            DiagramPagesetting enables to customize the appearance, width, and height of the diagram page.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
               @* Initialize the page settings with page orientation and break lines*@
               <DiagramPageSettings Height = "300" Width="300" Orientation="PageOrientation.Landscape" ShowPageBreaks="true">
                   @* Set the page margin*@
                   <PageSettingsMargin Left = "10" Top="10" Bottom="10" />
               </DiagramPageSettings>
             </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Background">
            <summary>
            Defines the appearance of the page background.
            </summary>
            <remarks>
            Users can customize the background of the diagram page by using background property. Source property of background allows the user to set the path of the image to the background whereas the Color property of background allows the user to set a color to the background of the diagram page. By default, it is set to transparent.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" id="diagram">
             @*Initialize the page settings with page orientation and break lines*@
            <DiagramPageSettings Height="300" Width="300" Orientation="PageOrientation.Landscape" ShowPageBreaks="true">
              //set image to the background
              <DiagramBackground Source="https://www.w3schools.com/images/w3schools_green.jpg" />
              //set color to the background
              <DiagramBackground Color="lightblue" />
              <PageSettingsMargin Left="10" Top="10" Bottom="10" />
            </DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.BoundaryConstraints">
            <summary>
            This property allows the user to customize the interactive region.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">�	The boundary constraints property restricts or customizes the interactive region, out of which the elements cannot be dragged, resized or rotated.</td>
            </tr>
            <tr>
            <td style = "border: none">�	The following values can be set to the boundary constraints property. They are infinity, diagram, page. By default, boundary constraints will be infinity.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.FitOptions">
            <summary>
            This property allows the user to specify the diagram content can fit within the diagram
            </summary>
            <remarks>
            Users can customize the FitOptions property when the diagram content is not fit into the diagram.
            There are some options available on the FitOptions property.They are Mode, Region, CustomBounds, Margin, CanZoomIn, and CanFit.These options have default values.Users can customize these options based on their requirements.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" id="diagram">
            <DiagramPageSettings Height="300" Width="300" Orientation="PageOrientation.Landscape" ShowPageBreaks="true">
               <DiagramFitOptions CanFit="true" Mode="FitModes.Width" CanZoomIn="true" Region=" DiagramRegion.Content"></DiagramFitOptions>
               <PageSettingsMargin Left="10" Top="10" Bottom="10" />
            </DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Height">
            <summary>
            Gets or sets the height of the diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Margin">
            <summary>
            Specifies the space around the diagram content. The default values for the margin are set to 25 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<DiagramPageSettings Height="300" Width="300" MultiplePage="true" ShowPageBreaks="true">
            <PageSettingsMargin Left="10" Top="10" Bottom="10" Right />
            </DiagramPageSettings>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.MultiplePage">
            <summary>
            This property allows users to enable or disable multiple pages.
            </summary>
            <remarks>
            When multiple pages are enabled, the size of the page dynamically increases or decreases to split the single page into multiple pages and completely fits the diagram within the page boundaries. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Orientation">
            <summary>
            Gets or sets the orientation of the page in the diagram. By default, the orientation of the page is set to landscape.
            </summary>
            <remarks>
            ShowPageBreaks property is used as a visual guide to see how pages are split into multiple pages. By default, it will be false. If it is true, then the page break lines will be visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.ShowPageBreaks">
            <summary>
            This property allows, the user to enable or disable the page break lines
            </summary>
            <remarks>
            ShowPageBreaks property is used as a visual guide to see how pages are split into multiple pages. By default, it will be false. If it is true, then the page break lines will be visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Width">
            <summary>
            Gets or sets the width of the diagram page
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPageSettings.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPageSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPageSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPageSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramRulerSettings">
            <summary>
            The diagram has vertical and horizontal rulers that show measurements at the scale objects like nodes etc.,.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The ShowRulers should be set to true in DiagramRulerSettings, to make the rulers visible</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
             <SfDiagram Nodes="@NodeCollection">
            <DiagramRulerSettings ShowRulers = true HorizontalRuler="@Horizontal"></DiagramRulerSettings>
            </SfDiagram>
            @code{
               HorizontalRuler Horizontal = new HorizontalRuler()
               {
                   SegmentWidth = 50,
                   Orientation = RulerOrientation.Horizontal,
                   Interval = 10
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.DynamicGrid">
            <summary>
            The Dynamic Grid allows user to create dynamic responsive grid lines and sets the gridlines can be relative to the ruler ticks or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.HorizontalRuler">
            <summary>
            Defines the properties of the horizontal ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.ShowRulers">
            <summary>
            A Boolean type which enables or disables ruler both horizontally and vertically. By default, ShowRulers is set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.VerticalRuler">
            <summary>
            Defines the properties of the vertical ruler.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
            <DiagramRulerSettings HorizontalRuler="@Vertical">
            </ DiagramRulerSettings>
            </SfDiagram>
             VerticalRuler Vertical = new VerticalRuler()
             {
               SegmentWidth = 50,
               Thickness = 10,
               Interval = 10
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status and viewport size of the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The diagrams can be scrolled both horizontally and vertically, over the diagram content. Even, the mouse wheel can be used to scroll</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
            //Sets the ScrollSettings for the diagram
               <DiagramScrollSettings HorizontalOffset = ”100” VerticalOffset = ”100” CurrentZoom="60" ScrollLimit="ScrollLimit.Limited">
               </DiagramScrollSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.AutoScrollBorder">
            <summary>
            Specifies the space between the object (Node/Connector) and the diagram edge such that, auto-scroll triggers.
            </summary>
            <remarks>
            By default, the value is set to 15 on all four sides (Left, Right, Bottom, Top). AutoScrollMargin should be set to the diagram to set the border.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px">
            //Sets the ScrollSettings for the diagram
            <DiagramScrollSettings HorizontalOffset="100" VerticalOffset="50">
              //Sets the Auto Scroll border for the diagram
              <AutoScrollMargin Left="15" Bottom="15" Right="15" Top="15"></AutoScrollMargin>
            </DiagramScrollSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.CanAutoScroll">
            <summary>
            A boolean which enables or disables auto-scroll in the diagram while dragging any diagram object.
            </summary>
            <remarks>
            By default, CanAutoScroll is set as false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.CurrentZoom">
            <summary>
            Gets the current zoom level. By default, CurrentZoom is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset of the scroller.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.MaxZoom">
            <summary>
            Sets maximum zoom value of the scroller. By default, MaxZoom is set to 30.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.MinZoom">
            <summary>
            Sets the minimum zoom value of the scroller. By default, MinZoom is set to 0.2.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.Padding">
            <summary>
            Defines the maximum space between the object and the diagram viewport edge.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ScrollLimit">
            <summary>
            Controls and sets the scrollable region in the diagram. Scrollable Area can be set to Diagram, Limited, or Infinity.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ScrollableArea">
            <summary>
            Scrolling beyond any rectangular area can be restricted by using the ScrollableArea property of scroll settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.VerticalOffset">
            <summary>
            Gets or sets the vertical offset of the scroller.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ViewPortHeight">
            <summary>
            Get the Viewport height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ViewPortWidth">
            <summary>
            Get the Viewport width.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings">
            <summary>
            Defines the serialization settings of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramSerializationSettings></DiagramSerializationSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.PreventDefaults">
            <summary>
            Enables or Disables serialization of default values.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
              <DiagramSerializationSettings PreventDefaults="true"></DiagramSerializationSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramSettings">
            <summary>
            Defines the settings of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSettings.InversedAlignment">
            <summary>
            Enables or Disables serialization of default values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramSnapSettings">
            <summary>
            Customizes and controls the gridlines and snap behavior of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
               // Shows horizontal gridlines
               <DiagramSnapSettings Constraints = SnapConstraints.ShowLines SnapAngle="10">
                   <HorizontalGridlines LineColor = "blue" LineDashArray="2,2">
                   </HorizontalGridlines>
                   <VerticalGridlines LineColor = "blue" LineDashArray="2,2">
                   </VerticalGridlines>
               </DiagramSnapSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.Constraints">
            <summary>
            Enables or disables features of gridlines and SnapSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.GridType">
             <summary>
            Defines the diagram Grid pattern.
             </summary>
             <remarks>
             The GridType can be set to lines or dots. By default, the GridType is set to lines.
             </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.HorizontalGridlines">
            <summary>
            Defines the pattern of horizontal gridlines
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.SnapAngle">
            <summary>
            SnapAngle defines the angle by which the object needs to be rotated. By default, 5.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.SnapObjectDistance">
             <summary>
            Defines the minimum distance between the selected object and the nearest object. By default, 5.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[<SfDiagram>
              <DiagramSnapSettings SnapObjectDistance="10">
              </DiagramSnapSettings>
             </SfDiagram>
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.VerticalGridlines">
            <summary>
            Defines the pattern of vertical gridlines.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTemplates">
            <summary>
            Represents the template’s content to the node, annotation, and user handles. The User can define any HTML content as a template.
            </summary>
            <remarks>
            Represents the template’s content to the node, annotation, and user handles. The User can define any HTML content as a template.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.NodeTemplate">
            <summary>
            Represents the template content to the node. By default, it will be undefined.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.NodeTemplateData">
            <summary>
            Sets the template data to the node.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.NodeTemplateItems">
            <summary>
            Defines the collection of node templates.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.NodeTemplateID">
            <summary>
            Sets the id to the node template.
            </summary> 
            <remarks>
             NodeTemplateID needs to be unique to use. When creating a NodeTemplate, the user should not provide the same id to other NodeTemplates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.AnnotationTemplate">
            <summary>
            Represents the template content to the annotation. By default, it will be undefined.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.AnnotationTemplateData">
            <summary>
            Sets the template data to the annotation.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.AnnotationTemplateItems">
            <summary>
            Defines the collection of annotation templates.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.AnnotationTemplateID">
            <summary>
            Sets the Id to the annotation template.
            </summary>  
            <remarks>
            AnnotationTemplateID needs to be unique to use. When creating an AnnotationTemplate, the user should not provide the same id to other AnnotationTemplates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.UserHandleTemplate">
            <summary>
            Represents the template content to the userhandle. By default, it will be undefined.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.UserHandleTemplateData">
            <summary>
            Sets the template data to the userhandle.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.UserHandleTemplateItems">
            <summary>
            Defines the collection of userhandle templates.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.UserHandleTemplateID">
            <summary>
            Sets the Id to the userhandle template.
            </summary>  
            <remarks>
            UserhandleTemplateID needs to be unique to use. When creating UserHandleTemplate, the user should not provide the same id to UserhandleTemplates.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTemplates.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTemplates.OnAfterRenderAsync(System.Boolean)">
            <returns> Returns asynchronous operation which is executed when the rendering of all the references to the component are populated </returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTooltip">
            <summary>
            Represents the textual content which appears when the mouse hovers over an element of the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The Tooltip will be displayed, when dragging, resizing, rotating a node, and when the cursor hovers over any diagram elements. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="DiagramConstraints.Default | DiagramConstraints.Tooltip" Tooltip="@Tooltip">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               //Defines diagram's node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines position of the tooltip
               public DiagramTooltip Tooltip = new DiagramTooltip()
               {
                   Content = "Nodes",
                   Position = Syncfusion.Blazor.Popups.Position.TopLeft
               };
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   //Defines nodes
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Width = 100,
                       Height = 100,
                       OffsetX = 200,
                       OffsetY = 200,
                       Style = new NodeShapeStyle() { StrokeColor = "#6BA5D7", Fill = "#6BA5D7" },
                       Constraints = NodeConstraints.Default | NodeConstraints.InheritTooltip,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTooltip.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTooltip.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HorizontalGridlines">
            <summary>
            Customizes the horizontal gridlines as per the user’s preference in the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Horizontal Gridlines provides visual guidance while dragging or arranging the objects on the diagram surface.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramSnapSettings>
                   //Shows horizontal gridlines
                   <HorizontalGridlines LineColor = "blue" LineDashArray="2,2">
                   </HorizontalGridlines>
               </DiagramSnapSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HorizontalGridlines.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.HorizontalGridlines.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.HorizontalGridlines.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HorizontalRuler">
            <summary>
            Defines the appearance and properties of Horizontal ruler.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The Horizontal Ruler appearance can be customized according to the user’s perception.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
            //Set the HorizontallRuler in DiagramRulerSettings
               <DiagramRulerSettings HorizontalRuler = "@HorizontalRulers" ></ DiagramRulerSettings >
            </ SfDiagram >
            @code
            {
               HorizontalRuler HorizontalRulers = new HorizontalRuler()
               {
                   MarkerColor = "red",
                   Orientation = RulerOrientation.Horizontal,
                   TickAlignment = TickAlignment.LeftOrTop
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HorizontalRuler.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.HorizontalRuler.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.HorizontalRuler.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.OverviewEvents">
            <summary>
            It is used to defines the overview control events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewEvents.Created">
            <summary>
            Triggers after render the diagram elements
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.OverviewEvents.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PageSettingsMargin">
            <summary>
            Represents the space around the page of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <DiagramPageSettings Height="300" Width="300" MultiplePage="true">
                <PageSettingsMargin Left = 10 Top=10 Bottom=10 Right = 10></PageSettingsMargin>
            </DiagramPageSettings>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PageSettingsMargin.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PageSettingsMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolMargin">
            <summary>
            Specifies the extra space around the outer boundaries of the symbol.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the margin is set to 0 in all the four sides.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette>
               ///Sets the margin for the symbols
               <SymbolMargin></SymbolMargin>
            </SfSymbolPalette>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolMargin.GetJSNamespace">
            <returns> Get the parent namespaces</returns>  
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UserHandleMargin">
            <summary>
            Defines the margin for symbols in symbol palette on all the four sides.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolPaletteEvents">
            <summary>
            It is used to defines the symbol palette events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteEvents.OnPaletteSelectionChange">
            <summary>
            Triggers after the selection changes in the symbol palette
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteEvents.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview">
            <summary>
            Defines the appearance of the symbols on preview(before dragging into the diagram).
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette>
               <SymbolPaletteSymbolPreview Height = "100" Width="100">
                   <SymbolPreviewOffset X = "0.5" Y="0.5"></SymbolPreviewOffset>
               </SymbolPaletteSymbolPreview>
            </SfSymbolPalette>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.Height">
            <summary>
            Defines the height of the symbols before drag. By default, the height is null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.Offset">
            <summary>
            Defines the distance between the symbol and the cursor. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.Width">
            <summary>
            Defines the width of the symbols before drag. By default, the width is null.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolPreviewOffset">
            <summary>
            Sets the offset for the symbol on the preview.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette>`
               <SymbolPaletteSymbolPreview>
                   <SymbolPreviewOffset X="0.5" Y="0.5"></SymbolPreviewOffset>
               </SymbolPaletteSymbolPreview>
            </SfSymbolPalette>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPreviewOffset.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPreviewOffset.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPreviewOffset.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.VerticalGridlines">
            <summary>
            Customizes the vertical gridlines as per the user’s preference in the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The VerticalGridlines should be set in DiagramSnapSettings.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramSnapSettings>
                   //Shows vertical gridlines
                   <VerticalGridlines LineColor = "blue" LineDashArray="2,2">
                   </VerticalGridlines>
               </DiagramSnapSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.VerticalGridlines.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.VerticalGridlines.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.VerticalRuler">
            <summary>
            Defines the appearance and properties of the vertical ruler. The Vertical Ruler appearance can be customized according to the user’s perception.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none"></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               //Set the VerticalRuler in DiagramRulerSettings
               <DiagramRulerSettings VerticalRuler = "@VerticalRulers" ></ DiagramRulerSettings >
            </ SfDiagram >
            @code
            {
               VerticalRuler VerticalRulers = new VerticalRuler()
               {
                   MarkerColor = "red",
                   Orientation = RulerOrientation.Horizontal,
                   TickAlignment = TickAlignment.LeftOrTop
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.VerticalRuler.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.VerticalRuler.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Internal.DiagramDefaultAdaptor">
            <summary>
            Provide adaptor information which sends to client side.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle">
            <summary>
            Specifies the behavior of fixedUserHandles.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.#ctor">
            <summary>
            Specifies the behavior of fixedUserHandles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Fill">
            <summary>
            Specifies the fill color of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.IconStrokeColor">
            <summary>
            Specifies the stroke color of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.IconStrokeWidth">
            <summary>
            Specifies the stroke width of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Visibility">
            <summary>
            Specifies the visibility of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Id">
            <summary>
             Specifies the unique id of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Width">
            <summary>
            Specifies the width of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Height">
            <summary>
            Specifies the height of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.HandleStrokeColor">
            <summary>
            Specifies the stroke color of the fixed user handle container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.HandleStrokeWidth">
            <summary>
            Specifies the stroke width of the fixed user handle container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.PathData">
            <summary>
            Specifies the shape information of the fixed user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[  FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                    {
                      new DiagramNodeFixedUserHandle() { Id = "user1",Height = 20, Width = 20, Visibility = true,Margin = new NodeMargin() { Right = 20, Bottom = 20 }, Offset = new IconOffset() { X = 1, Y = 0 },CornerRadius = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                    },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.CornerRadius">
            <summary>
            Specifies the cornerRadius for fixed user handle container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Padding">
            <summary>
            Specifies the space between the fixed user handle and container.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                    {
                      new DiagramNodeFixedUserHandle() { Id = "user1", Padding = new IconPadding { Top = 0 , Left = 0, Bottom = 0, Right = 0 },Height = 20, Width = 20, Visibility = true,Margin = new NodeMargin() { Right = 20, Bottom = 20 }, Offset = new IconOffset() { X = 1, Y = 0 },CornerRadius = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                    },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.isDiagramRendered">
            <summary>
            This member is used only to prevent raising JS interop call for dependent controls (i.e. overview) before rendered the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.ID">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.ModelType">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.DataManager">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.TemplateClientChanges">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.UniqueId">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.DataContainer">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.DataHashTable">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.EnableScriptIsolation">
            <summary>
            Enable Global Script to the Syncfusion Blazor components.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.OnInitRenderAsync">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.DataBind(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.Trigger(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.UpdateModel(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.DataProcess(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.SfDiagramBaseExtension.UpdateTemplate(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Internal.NonFlagStringEnumConverter">
            <summary>
            Used to convert the enum integer values into a string
            Also, ignores the string conversion of number enum.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.NonFlagStringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>true if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Internal.BlazorIdJsonConverter">
            <summary>
            Custom JSON serialization type converter for the Template DataHashTable properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.BlazorIdJsonConverter.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagrams.Internal.BlazorIdJsonConverter"/> class.
            </summary>
            <param name="values">Dictionary values for json convert.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.BlazorIdJsonConverter.HashData">
            <summary>
            Gets or sets hash data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.BlazorIdJsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.BlazorIdJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>true if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.BlazorIdJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.BlazorIdJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Internal.DiagramEventData">
            <summary>
            Represents the event argument data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SymbolPaletteContent.Items">
            <summary>
            Defines the collection of accordion item
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SfDiagram">
            <summary>
            SfDiagram renders the diagram. It contains all the properties for the diagram to be rendered.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                 // A node is created and stored in the nodes collection.
                 DiagramNode node1 = new DiagramNode()
                 {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                  };
                  // Add node
                  NodeCollection.Add(node1);
                }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.IsUpdated">
            <summary>
            SfDiagram renders the diagram. It contains all the properties for the diagram to be rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.#ctor">
            <summary>
            Initialize the diagram members.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BeginUpdate">
            <summary>
            Prevents redrawing of model on the client side.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.EndUpdate">
            <summary>
            Enable redrawing of model on the client side.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Tool">
            <summary>
            Defines the precedence of the interactive tools. They are,.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RandomString(System.Int32)">
            <summary>
            Generate random string for setting name for nodes/connectors.
            </summary>
            <param name="length"> Sets a length of the string.</param>
            <returns>returns a random string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorDiagramCollectionModel(System.String,System.String[],System.Int32[],System.String,System.Int32[],System.Int32[])">
            <summary>
            Synchronousing the properties from client.
            </summary>
            <param name="DiagramObject">Specifies the Diagram object. </param>
            <param name="ObjectType">Specifies the object type.</param>
            <param name="RemovalIndex">Specifies the removal index.</param>
            <param name="connectorObject">Specifies the connector object.</param>
            <param name="AnnotationIndex">Specifies the annotation index.</param>
            <param name="PortIndex">Specifies the port index.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorDiagramModel(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            It is used to synchronising client changes into the server changes.
            </summary>
            <param name="DiagramObject">Specifies the Diagram object. </param>
            <param name="ObjectType">Specifies the object type.</param>
            <param name="RemovalIndex">Specifies the removal index.</param>
            <param name="annotationIndex">Specifies the annotation index.</param>
            <param name="portIndex">Specifies the port index.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorDiagramModelLayers(System.String,System.Boolean)">
            <summary>
            Update layers collection changes from client to server.
            </summary>
            <param name="DiagramObject">Specifies the Diagram object. </param>
            <param name="isRemove">Specifies whether it should be removed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorDiagramObjects(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update objects collection changes from client to server.
            </summary>
            <param name="DiagramObject">Specifies the objects in the diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorProperties(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update property changes from client to server.
            </summary>
            <param name="properties">Specifies the property changes.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetEdges(System.String,System.Boolean)">
            <summary>
            Return the edges for the given node.
            </summary>
            <param name="id">Specifies the Id of the node.</param>
            <param name="outEdge">Specifies whether it has a outedge or not.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetParentId(System.String)">
            <summary>
            Returns the parent id for the node.
            </summary>
            <param name="id">Specifies the Id of the node.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddBlazorObjects(System.String,System.Boolean)">
            <summary>
            Adds the object into the diagram.
            </summary>
            <param name="DiagramObject">Specifies the diagram object.</param>
            <param name="IsConnector">Specifies whether the its connector or not.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateDiagramObjects(System.Boolean,System.Object[])">
            <summary>
            Adds the given object to diagram control.
            </summary>
            <param name="IsAdding">Specifies whether its adding or not. </param>
            <param name="methodParam">Specifies the object to be updated.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetNode(System.String)">
            <summary>
            The node can be captured from its id itself.
            </summary>
            <param name="Id">Returns the id of the node to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-the-node">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetConnector(System.String)">
            <summary>
            It is used to get the connector back.
            </summary>
            <param name="Id"> Specifies the id of the connector which has taken from the diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Paste(System.Object)">
            <summary>
            Adds the given objects/ the objects in the diagram clipboard to diagram control.
            </summary>
            <param name="obj">Defines the objects to be added to diagram.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Clear">
            <summary>
            Clears all nodes and objects in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.LoadDiagram(System.String)">
            <summary>
            Converts the given string as a Diagram Control.
            </summary>
            <param name="data">Defines the behavior of the diagram to be loaded.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnAfterRenderAsync(System.Boolean)">
            <returns> Returns asynchronous operation which is executed when the rendering of all the references to the component are populated. </returns>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.AddInfo">
            <summary>
            Allows the user to save custom information/data about diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.AnnotationTemplate">
            <summary>
            Customizes the annotation template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.BackgroundColor">
            <summary>
            Defines the background color of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.BridgeDirection">
            <summary>
            Defines the direction of the bridge that is inserted when the segments are intersected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.CommandManager">
            <summary>
            Defines a set of custom commands and binds them with a set of desired key gestures.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.ConnectorDefaults">
            <summary>
            Helps to assign the default properties of connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Connectors">
            <summary>
            Defines a collection of objects, used to create link between two points, nodes or ports to represent the relationships between them.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Constraints">
            <summary>
            Constraints are used to enable/disable certain behaviors of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.ContextMenuSettings">
            <summary>
            Defines type of menu that appears when you perform right-click operation
            An object to customize the context menu of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.CustomCursor">
            <summary>
            A collection of JSON objects where each object represents a custom cursor action. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.DataSourceSettings">
            <summary>
            Configures the data source that is to be bound with diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.DrawingObject">
            <summary>
            Defines the object to be drawn using drawing tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Height">
            <summary>
            Defines the height of the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.HistoryManager">
            <summary>
            Customizes the undo redo functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Layers">
            <summary>
            A collection of JSON objects where each object represents a layer. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Layout">
            <summary>
            Layout is used to auto-arrange the nodes in the Diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Mode">
            <summary>
            Defines the diagram rendering mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.NodeDefaults">
            <summary>
            Helps to assign the default properties of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.NodeTemplate">
            <summary>
            Customizes the node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Nodes">
            <summary>
            Defines the collection of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.PageSettings">
            <summary>
            Page settings enable to customize the appearance, width, and height of the Diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.RulerSettings">
            <summary>
            Defines the properties of both horizontal and vertical guides/rulers to measure the diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.ScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status and view port size of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.SelectedItems">
            <summary>
            Defines the collection of selected items, size and position of the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.SerializationSettings">
            <summary>
            Defines the serialization settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.DiagramSettings">
            <summary>
            Defines the settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.SnapSettings">
            <summary>
            Defines the gridlines and defines how and when the objects have to be snapped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Tooltip">
            <summary>
            Defines the tooltip that should be shown when the mouse hovers over a node or connector
            An object that defines the description, appearance and alignments of tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Width">
            <summary>
            Defines the width of the diagram model.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Add(System.Object,System.Nullable{System.Boolean})">
            <summary>
            It is used to add the nodes/connector to the diagram dynamically.
            </summary>
            <param name = "obj"> DiagramNode / DiagramConnector to be add dynamically.</param>
            <param name = "group"> Specifies whether the dynamically added was group or not.  </param>
            <remarks>
            You can refer to the code snippets from diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-node">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddChildToGroup(Syncfusion.Blazor.Diagrams.DiagramNode,System.Object)">
            <summary>
            It is used to add the node/connector to the group dynamically.
            </summary>
            <param name = "group"> The group to which the child has to be added.</param>
            <param name = "child">  The node/connector to be added to the group. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-child-to-group-node">public methods</a>.
            </remarks>
            <returns> Returns the Diagram Node/ Diagram Connector. </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddConnector(Syncfusion.Blazor.Diagrams.DiagramConnector)">
            <summary>
            Connectors can be added dynamically using the server-side method AddConnector.
            </summary>
            <param name = "obj"> Connector to be added dynamically.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-connector">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddConnectorLabels(Syncfusion.Blazor.Diagrams.DiagramConnector,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation})">
            <summary>
            It adds the label to the connector during run time dynamically.
            </summary>
            <param name = "obj"> The connector to which label should be added.</param>
            <param name = "labels"> The label to be added in runtime.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddConstraints(System.Double,System.Double)">
            <summary>
            It adds constraints at run time.
            </summary>
            <param name = "constraintsType"> Defines the type of constraint. </param>
            <param name = "constraintsValue"> Sets the value for constraint.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddCustomHistoryEntry(Syncfusion.Blazor.Diagrams.HistoryEntry)">
            <summary>
            History entry can be added during runtime using AddCustomHistoryEntry.
            </summary>
            <param name = "entry"> The history entry to be added during runtime. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-custom-history-entry">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddHistoryEntry(Syncfusion.Blazor.Diagrams.HistoryEntry)">
            <summary>
            Adds the given change in the diagram control to the track.
            </summary>
            <param name = "entry"> The history entry to be added during runtime. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/undo-redo/#track-custom-changes">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddLabels(System.Object,System.Collections.ObjectModel.ObservableCollection{System.Object})">
            <summary>
            Adds labels (annotations) to the node at runtime.
            </summary>
            <param name = "obj"> The node to which the label should be added. </param>
            <param name = "labels"> The annotation to be added during runtime. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-annotation">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddLayer(Syncfusion.Blazor.Diagrams.DiagramLayer,System.Object)">
            <summary>
            It allows the user to add layers to the diagram at runtime.
            </summary>
            <param name = "layer"> The new layer to be added at runtime. </param>
            <param name = "layerObject"> The node/connector to be added. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-layers">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemoveLayer(System.String)">
            <summary>
            Remove the layer from the diagram.
            </summary>
            <param name = "layerId"> Specifies the unique Id for the layer. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/layers/#remove-layer-at-runtime">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddNode(Syncfusion.Blazor.Diagrams.DiagramNode,System.Nullable{System.Boolean})">
            <summary>
            It adds the node to the diagram at runtime.
            </summary>
            <param name = "obj"> The node to be added to the diagram. </param>
            <param name = "group"> The group to which the node should be added. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-node">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddNodeLabels(Syncfusion.Blazor.Diagrams.DiagramNode,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation})">
            <summary>
            It adds labels to the nodes at runtime.
            </summary>
            <param name = "obj"> The node to which label(annotation) should be added. </param>
            <param name = "labels"> The label to be added in the node at runtime. </param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddPorts(Syncfusion.Blazor.Diagrams.DiagramNode,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.DiagramPort})">
            <summary>
            It is used to add the ports to the node dynamically.
            </summary>
            <param name = "obj"> DiagramNode that dynamically adds the port on. </param>
            <param name = "ports">Ports that are dynamically added to the node. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-ports">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddProcess(Syncfusion.Blazor.Diagrams.DiagramNode,System.String)">
            <summary>
            It is used to add a process shape into the BPMN subprocess shape.
            </summary>
            <param name = "process"> DiagramNode to be added dynamically. </param>
            <param name = "parentId">Specifies the node Id to add the subprocess. </param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddTextAnnotation(Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation,Syncfusion.Blazor.Diagrams.DiagramNode)">
            <summary>
            It is used to add the text annotation to the specific BPMN node.
            </summary>
            <param name = "annotation"> Defines the annotation to be added.</param>
            <param name = "node">Defines the node to which the annotation has to be added. </param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Align(Syncfusion.Blazor.Diagrams.AlignmentOptions,System.Object,System.Nullable{Syncfusion.Blazor.Diagrams.AlignmentMode})">
            <summary>
            Aligns the group of objects to with reference to the first object in the group.
            </summary>
            <param name = "objects"> Defines the object which has to align.</param>
            <param name = "option">Defines the factor, by which the objects have to be aligned. </param>
            <param name = "type">Defines the alignment mode of the object which has to align.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BringIntoView(System.Object)">
            <summary>
            It is used to show the particular bounds to the viewport.
            </summary>
            <param name = "bound">Specifies the value of the bound which has to be shown in the viewport.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#bring-to-view">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BringLayerForward(System.String)">
            <summary>
            It is used to move the layer forward.
            </summary>
            <param name = "layerName">Defines the name of the layer.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#bring-the-layer-to-forward">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BringToCenter(System.Object)">
            <summary>
            It is used to bring the specified bounds to the center of the viewport.
            </summary>
            <param name = "bound">Specifies the bouns value which has to be shown in the viewport.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#bring-to-center">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BringToFront">
            <summary>
            It is used to bring the selected node to the front.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#order-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ClearHistory">
            <summary>
            It is used to clear all nodes and objects from the diagram.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#clear">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ClearSelection">
            <summary>
            It allows the user to clear the selected nodes/connectors in the diagram.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#selection">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.CloneLayer(System.String)">
            <summary>
            It allows the user to clone the layer.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#clone-the-layer">public methods</a>.
            </remarks>
            <param name="layerName">Specifies the layer name. </param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Copy">
            <summary>
            It copies the selected nodes/connectors to the clipboard.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#clipboard-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Cut">
            <summary>
            It removes the selected nodes/connectors and moves those to the clipboard.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#clipboard-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Distribute(Syncfusion.Blazor.Diagrams.DistributeOptions,System.Object)">
            <summary>
            It arranges the group of nodes/connectors with equal intervals but within the group of nodes/connectors.
            </summary>
            <param name = "option">The type of distributing option.</param>
            <param name = "objects">The collection of nodes/connectors.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#distribution-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.DoLayout">
            <summary>
            It allows the user to refresh the layout at runtime.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#refresh-the-layout">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Drag(System.Object,System.Double,System.Double)">
            <summary>
            It drags the given object by the specified pixels.
            </summary>
            <param name = "obj">The collection of nodes/connectors to be dragged.</param>
            <param name = "tx">X-coordinate of the node/connector to be captured.</param>
            <param name = "ty">Y-coordinate of the node/connector to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#drag">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.DragSourceEnd(Syncfusion.Blazor.Diagrams.DiagramConnector,System.Double,System.Double)">
            <summary>
            It drags the source point of the connector.
            </summary>
            <param name = "obj">The connector to be dragged.</param>
            <param name = "tx">X-coordinate of the node/connector to be captured.</param>
            <param name = "ty">Y-coordinate of the node/connector to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#drag-source-end">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.DragTargetEnd(Syncfusion.Blazor.Diagrams.DiagramConnector,System.Double,System.Double)">
            <summary>
            It drags the target point of the connector.
            </summary>
            <param name = "obj">The connector to be dragged.</param>
            <param name = "tx">X-coordinate of the node/connector to be captured.</param>
            <param name = "ty">Y-coordinate of the node/connector to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#drag-target-end">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.EndGroupAction">
            <summary>
            Closes grouping the actions that will be undone/restored as a whole.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#group-action">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ExportDiagram(Syncfusion.Blazor.Diagrams.IExportOptions)">
            <summary>
            It is used to export the diagram.
            </summary>
            <param name = "options">defines how the image should be export.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#export-the-diagram">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ExportImage(System.String,Syncfusion.Blazor.Diagrams.IExportOptions)">
            <summary>
            It is used to export the diagram to various image format.
            </summary>
            <param name = "options">Defines the export image properties.</param>
            <param name = "image">Defines the type of image content to be exported.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.FitToPage(Syncfusion.Blazor.Diagrams.IFitOptions)">
            <summary>
            It is used to fit the diagram to the page with respect to mode and region.
            </summary>
            <param name = "options">Defines the fit options properties.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#fit-to-page">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetActiveLayer">
            <summary>
            It is used to get the active layer back.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-the-active-layer">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetConnectorObject(System.String)">
            <summary>
            It is used to get the connector object for the given node Id.
            </summary>
            <param name = "id">Specifies the id of the connector which has taken from the diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetCursor(System.String,System.Boolean)">
            <summary>
            It is used to define the cursor that corresponds to the given action.
            </summary>
            <param name = "action">Defines the action that is going to be performed.</param>
            <param name = "active">Specifies whether the cursor has to be activated or not.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetDiagramBounds">
            <summary>
            It allows the user to capture the diagram bounds.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-diagram-bounds">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetDiagramContent(System.Object)">
            <summary>
            It allows the user to get the HTML content.
            </summary>
            <param name = "styleSheets">Defines the collection of style files to be considered while exporting.</param>
            <returns> Returns the HTML content.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetHistoryStack(System.Boolean)">
            <summary>
            The number of undo or redo actions can be stored on the history list.
            </summary>
            <param name = "isUndoStack">Returns the history stack values.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-history-stack">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetModuleName">
            <summary>
            It returns the module name of the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetNodeObject(System.String)">
            <summary>
            The node can be captured from its id itself.
            </summary>
            <param name = "id">Returns the id of the node to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-the-node">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetPersistData">
            <summary>
            Get the properties to be maintained in the persisted state.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Group">
            <summary>
            Group the selected nodes and connectors in diagram.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#grouping-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.HideTooltip(System.Object)">
            <summary>
            It is used to hide the tooltip for the corresponding diagram object.
            </summary>
            <param name = "obj">Defines the object, which tooltip has to be hidden.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#tool-tip">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.MoveForward">
            <summary>
            It is used to send the selected nodes or connectors to forward.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#order-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.MoveObjects(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            It is used to move the objects from one layer to another layer in the diagram.
            </summary>
            <param name = "objects">Defines the object id of the string array.</param>
            <param name = "targetLayer">Specifies the target layer to which the object has to be moved.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#move-object-from-one-to-another-layer">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Nudge(Syncfusion.Blazor.Diagrams.NudgeDirection,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            It is used to move the selected objects towards the given direction.
            </summary>
            <param name = "direction">Defines the object id of the string array.</param>
            <param name = "x">Defines the distance by which the selected objects have to be moved horizontally.</param>
            <param name = "y">Defines the distance by which the selected objects have to be moved vertically.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#nudge">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Pan(System.Double,System.Double,Syncfusion.Blazor.Diagrams.PointModel)">
            <summary>
            It is used to pan the diagram control to the horizontal and vertical offsets.
            </summary>
            <param name = "horizontalOffset">Defines the horizontal distance to which the diagram has to be scrolled.</param>
            <param name = "verticalOffset">Defines the vertical distance to which the diagram has to be scrolled.</param>
            <param name = "focusedPoint">Defines the point at which the diagram to be focused.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#pan">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Print(Syncfusion.Blazor.Diagrams.IPrintOptions)">
            <summary>
            It is used to print the diagram.
            </summary>
            <param name = "options">Defines how the image to be printed.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#print-and-exporting">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.PrintImage(System.String,Syncfusion.Blazor.Diagrams.IExportOptions)">
            <summary>
            It is used to print the native/html nodes of the diagram.
            </summary>
            <param name = "image">Defines the image content.</param>
            <param name = "options">Defines the properties of the image.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Redo">
            <summary>
            It is used to restore the last undo action.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#redo">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Remove(System.Object)">
            <summary>
            It is used to remove the given object from the diagram.
            </summary>
            <param name="obj">Specifies the object in the diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemoveConstraints(System.Double,System.Double)">
            <summary>
            Remove constraints at run time.
            </summary>
            <param name = "constraintsType">Specifies the type of constraints.</param>
            <param name = "constraintsValue">Specifies the constraints which have to be removed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemoveLabels(System.Object,System.Collections.ObjectModel.ObservableCollection{System.Object})">
            <summary>
            Remove Labels at the run time.
            </summary>
            <param name = "obj">The node to which the label should be removed.</param>
            <param name = "labels">The annotation to be removed during runtime.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemovePorts(Syncfusion.Blazor.Diagrams.DiagramNode,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.DiagramPort})">
            <summary>
            Remove Ports at the run time.
            </summary>
            <param name = "obj">Specifies the ports to be removed at runtime.</param>
            <param name = "ports">Specifies the ports.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#remove-the-ports">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemoveProcess(System.String)">
            <summary>
            Remove a process from the sub-process.
            </summary>
            <param name = "id">Specifies the Id of the subprocess.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Render">
            <summary>
            Renders the diagram control with nodes and connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Reset">
            <summary>
            Resets the zoom and scroller offsets to default values.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#reset-the-segments">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ResetSegments">
            <summary>
            Resets the segments of the connectors.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#reset-the-segments">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Rotate(System.Object,System.Double,Syncfusion.Blazor.Diagrams.PointModel)">
            <summary>
            Rotates the given nodes/connectors by the given angle.
            </summary>
            <param name = "obj">Specifies the nodes/connector to be rotated.</param>
            <param name = "angle">Specifies the angle to be rotated.</param>
            <param name = "pivot">Specifies the point of rotation.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/interaction/#rotate">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SameSize(Syncfusion.Blazor.Diagrams.SizingOptions,System.Object)">
            <summary>
            Scales the given objects to the size of the first object in the group.
            </summary>
            <param name = "option">Specifies the sizing options of the selected items.</param>
            <param name = "objects">Specifies the selected items.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/commands/">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SaveDiagram">
            <summary>
            Serializes the diagram control as a string.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#save-and-load-the-diagram">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Scale(System.Object,System.Double,System.Double,Syncfusion.Blazor.Diagrams.PointModel)">
            <summary>
            Scales the given objects by the given ratio.
            </summary>
            <param name = "obj">The object to which the scaling should beapplied.</param>
            <param name = "sx">Specifies the value of X.</param>
            <param name = "sy">Specifies the value of Y.</param>
            <param name = "pivot">Specifies the point where the object to be placed.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/interaction/">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Select(System.Object,System.Nullable{System.Boolean})">
            <summary>
            Selects the given collection of objects.
            </summary>
            <param name = "objects">Specifies the selected nodes/connectors.</param>
            <param name = "multipleSelection">specifies the selection of one or more nodes/connectors.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/tools/">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SelectAll">
            <summary>
            Selects the all the objects.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SendBackward">
            <summary>
            send the selected nodes or connectors back.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/commands/#sendbackward-command">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SendLayerBackward(System.String)">
            <summary>
            move the layer backward.
            </summary>
            <param name = "layerName">Represents the layer name which is to be moved backward.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/layers/#sendlayerbackward">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SendToBack">
            <summary>
            send the selected nodes or connectors back.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/commands/#sendtoback-command">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SetActiveLayer(System.String)">
            <summary>
            set the active layer.
            </summary>
            <param name = "layerName">defines the name of the layer which is to be active layer.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/layers/#setactivelayer">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SetStackLimit(System.Double)">
            <summary>
            To limit the history entry of the diagram.
            </summary>
            <param name = "stackLimit">Specifies the restriction of undo and redo action to a certain limit.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#set-stack-limit">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ShowTooltip(System.Object)">
            <summary>
            Shows tooltip for corresponding diagram object.
            </summary>
            <param name = "obj">Specifies the object to show tooltip.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#tool-tip">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.StartGroupAction">
            <summary>
            Starts grouping the actions that will be undone/restored as a whole.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#group-action">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.StartTextEdit(System.Object,System.String)">
            <summary>
            Edits the annotation of node/connector.
            </summary>
            <param name = "node">The node in which annotation should be edited.</param>
            <param name = "id">The id of the annotation.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UnGroup">
            <summary>
            UnGroup the selected nodes and connectors in diagram.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#undo">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UnSelect(System.Object)">
            <summary>
            Removes the given object from selection list.
            </summary>
            <param name = "obj">The object to be removed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Undo">
            <summary>
            Restores the last action that is performed.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#undo">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateViewPort">
            <summary>
            Update the diagram clipboard dimension.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#update-view-port">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Zoom(System.Double,Syncfusion.Blazor.Diagrams.PointModel)">
            <summary>
            Allows the user to zoom in or zoom out.
            </summary>
            <param name = "factor">Defines the factor by which the diagram is to be zoomed.</param>
            <param name = "focusedPoint">Defines the point with respect to which diagram has to be zoomed.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#zoom">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ZoomTo(Syncfusion.Blazor.Diagrams.ZoomOptions)">
            <summary>
            Zooms to the specific point.
            </summary>
            <param name = "options">The options for zoom point.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#zoom">public methods</a>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnFocus">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnClick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMousemove">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMouseover">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMouseout">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMousedown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMouseup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnDblclick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnKeydown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnKeyup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnDrop">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnHybridParametersSet">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnHybridAfterRender(System.Boolean)">
            <returns> Returns asynchronous operation which is executed when the rendering of all the references to the component are populated. </returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SfDiagramBase">
            <summary>
            Represents to sync the client side diagram object properties with server side objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagramBase.UpdateCollection(System.Collections.IList,System.Boolean)">
            <summary>
            Update collection changes to client from server.
            </summary>
            <param name="obj">Current list.</param>
            <param name="isRemoved">If true, the object removed from collection; false to add the object to collection.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagramBase.RandomString(System.Int32)">
            <summary>
            Generate random string for setting name for nodes/connectors.
            </summary>
            <param name="length"> Sets a length of the string.</param>
            <returns>Returns the random string.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SfOverview">
            <summary>
            It allows the user to see a preview or an overall view of the entire content of a diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Nodes="@NodeCollection" Constraints="@DiagramConstraints" id="diagram" Height="600px">
             <DiagramScrollSettings ScrollLimit = "@ScrollLimit.Infinity" />
             < DiagramSnapSettings Constraints="@SnapConstraints.None"/>
             <DiagramRulerSettings ShowRulers = "true" />
            </ SfDiagram >
            < SfOverview Width="100%" Height="150px" SourceID="diagram" />
            @Code
            {
              //Defines diagram's nodes collection
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
              public DiagramConstraints DiagramConstraints = DiagramConstraints.Default;
              protected override void OnInitialized()
              {
              DiagramNode Node = new DiagramNode()
              {
                Id = "group",
                OffsetX = 200,
                OffsetY = 200,
                Width = 100,
                 Height = 100,
                Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                {
                 new DiagramNodeAnnotation()
                 {
                   Content = "Node1",
                   Style = new AnnotationStyle()
                   {
                     Color = "white",
                   }
                  }
                 },
                Style = new NodeShapeStyle() { Fill = "cornflowerblue", StrokeColor = "white" }
               };
               NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.updateChildProperties(System.String,System.Object)">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.Height">
            <summary>
            Defines the height of the overview
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.SourceID">
            <summary>
            Defines the ID of the overview
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.Width">
            <summary>
            Defines the width of the overview
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.GetPersistData">
            <summary>
            Get the properties to be maintained in the persisted state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnFocus">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnClick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMousemove">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMouseover">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMouseout">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMousedown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMouseup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnDblclick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnKeydown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnKeyup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnDrop">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SfSymbolPalette">
            <summary>
            The SymbolPalette represents to displays a collection of palettes. The palette shows a set of nodes and connectors. It allows to drag and drop the nodes and connectors into the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfSymbolPalette Height="600px" SymbolHeight="60" SymbolWidth="60" SymbolInfo="@SymbolInfo">
             <SymbolPalettePalettes>
               @* Sets the palette header property for the symbols *@
               <SymbolPalettePalette Id = "basic" Expanded="true" Symbols="@BasicShapes" IconCss="e-ddb-icons e-flow" Title="Basic Shapes">
               </SymbolPalettePalette>
             </SymbolPalettePalettes>
            </SfSymbolPalette>
            @Code{
              // Defines palette's basic-shape collection
              public ObservableCollection<DiagramNode> BasicShapes { get; set; }
              public SymbolInfo SymbolInfo;
              protected override void OnInitialized()
              {
               // Enables to fit the content into the specified palette item size. When it is set as false, the element is rendered with actual node size
               SymbolInfo = new SymbolInfo() { Fit = true };
               //Initialize the basicshapes for the symbol palette
               BasicShapes = new ObservableCollection<DiagramNode>()
               {
                 new DiagramNode()
                 {
                   Id = "Rectangle",
                   Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle }
                 }
               };
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.IsUpdated">
            <summary>
            Represents all the properties for the diagram to be rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.RandomString(System.Int32)">
            <summary>
            Generate random string for setting name for nodes/connectors.
            </summary>
            <param name="length"> Sets a length of the string.</param>
            <returns>Returns random string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.AddBlazorObjects(System.String,System.Object)">
            <summary>
            Adds the object into the symbol palette.
            </summary>
            <param name="SymbolPaletteObject">Specifies the symbol palette object.</param>
            <param name="paletteName">Specifies the palette name.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.RemoveBlazorObjects(System.String,System.Object)">
            <summary>
            Removes the object in the symbol palette.
            </summary>
            <param name="SymbolPaletteObject">Specifies the symbol palette object.</param>
            <param name="paletteName">Specifies the palette name.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.AddPalettes(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.SymbolPalettePalette})">
            <summary>
            Add particular palettes to symbol palette at runtime.
            </summary>
            <param name="palettes">Specifies the palette details.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.RemovePalettes(System.String[])">
            <summary>
            Add particular palettes to symbol palette at runtime.
            </summary>
            <param name="palettes">Specifies the palette to be removed.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.AccessKey">
            <summary>
            Configures the key, when it pressed the symbol palette will be focused
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.AllowDrag">
            <summary>
            Defines whether the symbols can be dragged from palette or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.ConnectorDefaults">
            <summary>
            Helps to return the default properties of connectors
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.EnableAnimation">
            <summary>
            Enables/Disables animation when the palette header is expanded/collapsed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.EnableSearch">
            <summary>
            Enables/Disables search option in symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.ExpandMode">
            <summary>
            Defines how many palettes can be at expanded mode at a time
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Height">
            <summary>
            Defines the height of the symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.IgnoreSymbolsOnSearch">
            <summary>
            Defines the symbols to be added in search palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.NodeDefaults">
            <summary>
            Helps to return the default properties of node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Palettes">
            <summary>
            Defines the collection of symbol groups
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolDragSize">
            <summary>
            Defines the size of a drop symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolHeight">
            <summary>
            Defines the height of the symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolInfo">
            <summary>
            Defines the size, appearance and description of a symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolMargin">
            <summary>
            Defines the space to be left around a symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolPreview">
            <summary>
            Defines the size and position of the symbol preview
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolWidth">
            <summary>
            Defines the width of the symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Width">
            <summary>
            Defines the width of the symbol palette
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.AddPaletteItem(System.String,System.Object)">
            <summary>
            Used to add the palette item as nodes or connectors in palettes
            </summary>
            <param name="paletteName">Specifies the name of the palette to be added</param>
            <param name="paletteSymbol">Specifies the symbol to be added</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.GetModuleName">
            <summary>
            To get Module name
             @private
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.GetPersistData">
            <summary>
            Get the properties to be maintained in the persisted state.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.RemovePaletteItem(System.String,System.String)">
            <summary>
            Used to remove the palette item as nodes or connectors in palettes
            </summary>
            <param name="paletteName">Specifies the palette name</param>
            <param name="symbolId">Specifies the ID in which it should be removed from the specified palette</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Render">
            <summary>
            Renders nodes and connectors in the symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnFocus">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnClick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMousemove">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMouseover">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMouseout">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMousedown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMouseup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnDblclick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnKeydown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnKeyup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnDrop">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Margin">
            <summary>
            Represents the margin for the diagram, nodes, connectors, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Margin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Margin.Left">
            <summary>
            It sets the space to be left from the left side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Margin.Right">
            <summary>
            It sets the space to be left from the right side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Margin.Top">
            <summary>
            It sets the space to be left from the top side of the parent of an element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Margin.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Margin.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeCollapseIcon">
            <summary>
            Represents the collapsed state of the node.
            </summary>
            <remarks>
            Node has different kinds of states such as Expand and Collapse state. When the user clicks ExpandIcon, all the children from the respective node will get expanded whereas CollapseIcon is clicked, then all children from the respective node will get collapsed.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
             protected override void OnInitialized()
             {
              // A node is created and stored in nodes collection.
              DiagramNode Node = new DiagramNode()
                {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  CollapseIcon = new NodeCollapseIcon()
                  {
                     Width = 70,
                     Height = 20,
                     Shape = IconShapes.ArrowUp,
                     Fill = "red",
                     BorderColor = "black",
                     BorderWidth = 2,
                     CornerRadius = 5
                   },
                };
                NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.#ctor">
            <summary>
            Represents the collapsed state of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.BorderColor">
            <summary>
            Gets or sets the border color of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.BorderWidth">
            <summary>
            Gets or sets the border width of an icon. By default, it is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Content">
            <summary>
            Gets or sets the custom content of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.CornerRadius">
            <summary>
            Gets or sets the corner radius of an icon border.
            </summary>
            <remarks>
            CornerRadius property is used to provide a rounded border instead of a sharp one. By default, it is set to 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Fill">
            <summary>
            Gets or sets the fill color of an Icon. By default, it will be white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Height">
            <summary>
            Gets or sets the height of an Icon. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.HorizontalAlignment">
            <summary>
            Describes how an Icon element is horizontally positioned or stretched in the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options  is used to defining the Horizontal Alignment of an icon </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Margin">
            <summary>
            Sets the space around the collapse icon. By default, it is set to 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[CollapseIcon = new NodeCollapseIcon() {
               Margin = new CollapseIconMargin { Top = 10 , Left = 10, Bottom = 10, Right = 10 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Offset">
            <summary>
            Specifies the position of an icon relative to the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1. By default, the offset values are set to X= 0.5 and Y=1. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the icon will be position at the top left corner of the node.   </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the icon will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.    When x= 1 and y = 1, then the icon will be position at the bottom right corner of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Padding">
            <summary>
            Specifies the space inside the border of an icon.
            </summary>
            <remarks>
            By default, the padding will be 2 from all sides. The following code shows how to define the padding property of a NodeCollapseIcon.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[CollapseIcon = new NodeCollapseIcon() {
              Padding = new IconPadding { Top = 0 , Left = 0, Bottom = 0, Right = 0 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.PathData">
            <summary>
            Defines the geometry of a path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Shape">
            <summary>
            Defines the shape information of the icon.
            </summary>
            <remarks>
            There are several shapes in the shape category of an icon such as Minus, Plus, ArrowUp, Arrow down, etc., By default, it will be None.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.VerticalAlignment">
            <summary>
            Describes how an Icon element is vertically positioned or stretched in the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the vertical Alignment of an icon. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Width">
            <summary>
            Gets or sets the width of an icon. By default, it is set to 10.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeExpandIcon">
            <summary>
            Represents the expanded state of the node.
            </summary>
            <remarks>
            Node has different kinds of states such as Expand and Collapse state. When the user clicks ExpandIcon, all the children from the respective node will get expanded whereas CollapseIcon is clicked, then all children from the respective node will get collapsed.  The following code shows, how to define NodeExpandIcon and its properties.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
               {
               // A node is created and stored in nodes collection.
               DiagramNode Node = new DiagramNode()
               {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  ExpandIcon = new NodeExpandIcon()
                  {
                    Width = 70,
                    Height = 20,
                    Shape = IconShapes.ArrowDown,
                    Fill = "red",
                    BorderColor = "black",
                    BorderWidth = 2,
                    CornerRadius = 5
                  },
               };
               NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeExpandIcon.#ctor">
            <summary>
            Represents the expanded state of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.BorderColor">
            <summary>
            Gets or sets the border color of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.BorderWidth">
            <summary>
            Gets or sets the border width of an icon. By default, it is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Content">
            <summary>
            Gets or sets the custom content of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.CornerRadius">
            <summary>
            Gets or sets the corner radius of an icon border.
            </summary>
            <remarks>
            CornerRadius property is used to provide a rounded border instead of a sharp one. By default, it set to 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Fill">
            <summary>
            Gets or sets the fill color of an Icon. By default, it is set to white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Height">
            <summary>
            Gets or sets the height of an Icon. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.HorizontalAlignment">
            <summary>
            Describes how an Icon element is horizontally positioned or stretched in the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options  is used to defining the Horizontal Alignment of an icon </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Margin">
            <summary>
            Sets the space around the expand icon. By default, it is set to 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[         ExpandIcon = new NodeExpandIcon() {
             Margin = new ExpandIconMargin { Top = 0 , Left = 0, Bottom = 0, Right = 0 } ,
             },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Offset">
            <summary>
            Specifies the position of an icon relative to the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1. By default, the offset values are set to X= 0.5 and Y=1. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the icon will be position at the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the icon will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the icon will be position at the bottom right corner of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Padding">
            <summary>
            Specifies the space inside the border of an icon. By default, it is set 2 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ExpandIcon = new NodeExpandIcon() {
              Padding = new IconPadding { Top = 0 , Left = 0, Bottom = 0, Right = 0 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.PathData">
            <summary>
            Defines the geometry of a path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Shape">
            <summary>
            Defines the shape information of the icon.
            </summary>
            <remarks>
            There are several shapes in the shape category of an icon such as Minus, Plus, ArrowUp, Arrow down, etc., By default, it will be None.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.VerticalAlignment">
            <summary>
            Describes how an Icon element is vertically positioned or stretched in the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the vertical Alignment of an icon. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Width">
            <summary>
            Gets or sets the width of an icon. By default, it is set to 10.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramHyperlink">
            <summary>
            It lets users navigate from one page to another.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramHyperlink.#ctor">
            <summary>
            It lets users navigate from one page to another.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramHyperlink.Color">
            <summary>
            Sets fill color to the hyperlink.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramHyperlink.Content">
            <summary>
            The hyperlink can be defined using text. This definition can be set in content.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramNodeAnnotation() {
             Hyperlink = new NodeHyperlink()
              {
               Link = https://www.google.com,Content=” Google”}
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramHyperlink.Link">
            <summary>
            It is a reference for a page to be navigated.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramNodeAnnotation() {
             Hyperlink = new NodeHyperlink()
              {
               Link = https://www.google.com }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramHyperlink.TextDecoration">
            <summary>
            Decorates the content of the hyperlink as per the user’s preference.
            </summary>
            <remarks>
            The content can be decorated using underline, overline, or line through.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramNodeAnnotation() {
              Hyperlink = new NodeHyperlink()
              {
               Link = https://www.google.com,Content=”Google”,TextDecoration=TextDecoration.Underline}
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeHyperlink">
            <summary>
            It allows users to navigate from one page to another. Hyperlink need not be a text (annotation).
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                  NodeCollection = new ObservableCollection<DiagramNode>();
                  DiagramNode node = new DiagramNode()
                  {
                     Width = 100,
                     Height = 100,
                     Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                     new DiagramNodeAnnotation() {  Hyperlink = new NodeHyperlink()
                     { Link = https://www.google.com,
                       Color =’red’
                      }
                  }
               },
              };
              NodeCollection.Add(node);
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeHyperlink.#ctor">
            <summary>
            It allows users to navigate from one page to another. Hyperlink need not be a text (annotation).
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorHyperlink">
            <summary>
            Defines the appearance and properties of the hyperlinks in the connector label.
            </summary>
            <remarks>
            The hyperlink can be customized by adding text, color. The Hyperlink can be set to the DiagramConnectorAnnotations of the connector.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorsCollection">
            </SfDiagram>
            @code
            {
              public ObservableCollection<DiagramConnector> ConnectorsCollection { get; set; }
              protected override void OnInitialized()
              {
               ConnectorsCollection = new ObservableCollection<DiagramConnector>();
               DiagramConnector Connector = new DiagramConnector()
               {
                 Width = 100,
                 Height = 100,
                 Annotations = new ObservableCollection<DiagramConnectorAnnotation>() {
                 new DiagramConnectorAnnotation() {
                 Hyperlink = new ConnectorHyperlink()
                 {
                    Link = "https://www.google.com",
                    Color=”red”,
                    Content=”Google”}
                  }
                 },
               };
               ConnectorsCollection.Add(Connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorHyperlink.#ctor">
            <summary>
            Defines the appearance and properties of the hyperlinks in the connector label.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeTooltip">
            <summary>
            Represents the textual content that appears while the mouse is hovering over a node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px"
                  Constraints="DiagramConstraints.Default | DiagramConstraints.Tooltip" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                NodeCollection = new ObservableCollection<DiagramNode>();
                //Defines nodes
                DiagramNode Node = new DiagramNode()
                 {
                    Id = "node1",
                    Width = 100,
                    Height = 100,
                    OffsetX = 200,
                    OffsetY = 200,
                    Style = new NodeShapeStyle() { StrokeColor = "#6BA5D7", Fill = "#6BA5D7" },
                    Constraints = NodeConstraints.Default | NodeConstraints.Tooltip,
                    //Defines mouse over tooltip for a node
                    Tooltip = new NodeTooltip()
                    {
                      Content = "Node1",
                      //Sets to show tooltip at mouse position
                      RelativeMode = TooltipRelativeMode.Mouse
                    }
                 };
                 NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeTooltip.#ctor">
            <summary>
            Represents the textual content that appears while the mouse is hovering over a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Animation">
            <summary>
            This property allows the user to enable the animation to the tooltip.
            </summary>
            <remarks>
            To animate the tooltip specific animation effects are available and it can be controlled by Animation property. This property allows the user to set some animation effects such as display, duration, ZoomIn, ZoomOut,etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Animation = new Syncfusion.Blazor.Popups.AnimationModel()
            {
              //Animation settings to be applied on the tooltip, while it is being shown over the target.
              Open = new Syncfusion.Blazor.Popups.TooltipAnimationSettings()
              {
                //Animation effect on the tooltip is applied during open and close actions.
                Effect = Syncfusion.Blazor.Popups.Effect.ZoomIn,
                //Duration of the animation that is completed per animation cycle.
                Duration = 1000,
                //Indicating the waiting time before the animation begins.
                Delay = 0
              },
              //Animation settings to be applied on the tooltip, when it is closed.
              Close = new Syncfusion.Blazor.Popups.TooltipAnimationSettings()
              {
                Effect = Syncfusion.Blazor.Popups.Effect.ZoomOut,
                Duration = 500,
                Delay = 0
              }
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Content">
            <summary>
            Defines the textual content of the tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Height">
            <summary>
            Gets or sets the height of the tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.OpenOn">
            <summary>
            Specifies whether the tooltip can be open automatically or open manually using public API. By default, its set to Auto.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Position">
            <summary>
            Defines the position of the Tooltip.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    Tooltip can be aligned by using the NodeTooltip property.  </td>
            </tr>
            <tr>
            <td style = "border: none">•    There are applicable positions such as TopLeft,  TopRight, BottomLeft, BottomRight, etc., where the tooltip can be displayed over the specific target elements. </td>
            </tr>
            <tr>
            <td style = "border: none">•    By default, the position of the tooltip will be TopLeft.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.RelativeMode">
            <summary>
            This property defines whether the tooltip has to displayed around the object or at the mouse position. By default, it will be Mouse.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.ShowTipPointer">
            <summary>
            Defines the tooltip has tip pointer or not. By default, it will be true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Width">
            <summary>
            Gets or sets the width of the tooltip.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorTooltip">
            <summary>
            Represents the textual content that appears while the mouse is hovering over a connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                  TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                  //Specify the segments types as straight.
                  Type = Segments.Straight,
                  Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
                  //Defines mouse over tooltip for a connector
                  Tooltip = new ConnectorTooltip()
                  {
                    //Sets the content of the tooltip
                    Content = "Connector1",
                    //Sets the position of the tooltip
                    Position = Syncfusion.Blazor.Popups.Position.BottomRight,
                    //Sets the tooltip position relative to the connector
                    RelativeMode = TooltipRelativeMode.Object
                  }
                };
               ConnectorCollection.Add(DiagramConnector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorTooltip.#ctor">
            <summary>
            Represents the textual content that appears while the mouse is hovering over a connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortShapeStyle">
            <summary>
            Represents the appearance of the port.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
             @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                // A node is created and stored in nodes collection.
                DiagramNode Node = new DiagramNode()
                {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    // Initialize port collection
                    Ports = new ObservableCollection<DiagramPort>() {
                    new DiagramPort() {
                       Id = "port1",
                       Offset = new NodePortOffset(){X= 0.5, Y= 0.5 }, Visibility = PortVisibility.Visible,
                       //Set the style for the port
                       Style=new PortShapeStyle(){ Fill="red" , Opacity = 1,
                       StrokeColor= "black", StrokeWidth= 1, StrokeDashArray= "2,2"},
                     }
                    },
                  };
                  NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PortShapeStyle.#ctor">
            <summary>
            Represents the appearance of the port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.Fill">
            <summary>
            Gets or sets the fill color of the shape or path. By default, it’s set to white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the port.h.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The gradient stop’s opacity property defines the transparency level of the region. The gradient stop property defines the color and a position, where the previous color transition ends, and a new color transition starts. There are two types of gradients as follows, </td>
            </tr>
            <tr>
            <td style = "border: none">•    LinearGradient </td>
            </tr>
            <tr>
            <td style = "border: none">•    RadialGradient </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[ Style = new PortShapeStyle() {
              Gradient = new DiagramGradient()
              {
               //Start point of linear gradient
               X1 = 0, Y1 = 0,
               //End point of linear gradient
               X2 = 50, Y2 = 50,
               //Sets an array of stop objects
               Stops = new ObservableCollection<DiagramsGradientStop>()
               {
                 new DiagramsGradientStop(){ Color = "white", Offset = 0},
                 new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
               },
               Type = GradientType.Linear
              }
            },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.Opacity">
            <summary>
            Defines the transparency level of the shape or path.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none"> Opacity values are ranges from 0 to 1 where,</td>
            </tr>
            <tr>
            <td style = "border: none"> •   0 represents completely transparent</td>
            </tr>
            <tr>
            <td style = "border: none">•    0.5 represents Partially transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    1 represents not transparent at all. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.StrokeColor">
            <summary>
            Gets or sets the color to the stroke of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the width to the stroke of the shape or path.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PreviewMargin">
            <summary>
            Defines the space around the symbol preview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.mainParent">
            <summary>
            Defines the space around the symbol preview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.Bottom">
            <summary>
            It sets the space left at the bottom of a symbol preview. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.Left">
            <summary>
            It sets the space left at the left of a symbol preview. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.Right">
            <summary>
            It sets the space left at the right of a symbol preview. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.Top">
            <summary>
            It sets the space left at the top of a symbol preview. By default, it is set to 0.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewMargin.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewMargin.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PreviewOffset">
            <summary>
            Represents the distance to be left between the cursor and the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewOffset._jsNamespace">
            <summary>
            Represents the distance to be left between the cursor and the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewOffset.X">
            <summary>
            Sets the x-coordinate position for the symbol. By default, X is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewOffset.Y">
            <summary>
            Sets the y-coordinate position for the symbol. By default, Y is set to 0.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewOffset.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewOffset.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewOffset.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel">
            <summary>
            Specifies the source label to the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram  Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               ///Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       Id = "Connector1",
                       Type = Segments.Straight,
                       Shape = new DiagramConnectorShape()
                       {
                           Type = ConnectionShapes.UmlClassifier,
                           //Set an relationship for connector
                           Relationship = ClassifierShape.Dependency,
                           Multiplicity = new DiagramClassifierMultiplicity()
                           {
                               //Set multiplicity type
                               Type = Multiplicity.OneToMany,
                               //Set source label to connector
                               Source = new SourceMultiplicityLabel()
                               {
                                   Optional = true,
                                   LowerBounds = "89",
                                   UpperBounds = "67"
                               },
                               //Set target label to a connector
                               Target = new TargetMultiplicityLabel()
                               {
                                   Optional = true,
                                   LowerBounds = "78",
                                   UpperBounds = "90"
                               }
                           }
                       },
                       //Define connector start and endpoints
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 }
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel.#ctor">
            <summary>
            Specifies the source label to the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel.LowerBounds">
            <summary>
            Defines the minimum bounds of the Classifier Multiplicity. Lower bounds should be lesser than upper bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel.Optional">
            <summary>
            Defines the optionality for the connector source label. By default, It`s set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel.UpperBounds">
            <summary>
            Defines the maximum bounds of the Classifier Multiplicity. Upper bounds should be greater than or equal to Lower bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TargetMultiplicityLabel">
            <summary>
            Specifies the target label to the UML type connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            //Set target label to connector
            Target = new TargetMultiplicityLabel()
            {
               Optional = true,
               LowerBounds = "78",
               UpperBounds = "90"
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.TargetMultiplicityLabel.#ctor">
            <summary>
            Specifies the target label to the UML type connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SuccessSubEvent">
            <summary>
            Represents the event within another subprocess.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       // Position of the node
                       OffsetX = 100, OffsetY = 100,
                       // Size of the node
                       Width = 100, Height = 100,
                       // Unique id of the node
                       Id = "node1",
                       //Defines the type to BPMN and shape to activity
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.Activity,
                           //Sets the activity to subprocess
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.SubProcess,
                               //Sets collapsed to true and type to Transaction
                               SubProcess = new DiagramBpmnSubProcess()
                               {
                                   Collapsed = true,
                                   Type = BpmnSubProcessTypes.Transaction,
                                   //Sets offset and visible for cancel and offset for failure
                                   Transaction = new DiagramBpmnTransactionSubProcess()
                                   {
                                       Success = new SuccessSubEvent(){ Visible = true, Offset = new BpmnSubEventOffset(){ X = 0.25, Y = 1}},
                                   }
                               },
                           }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SuccessSubEvent.#ctor">
            <summary>
            Represents the event within another subprocess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Annotations">
            <summary>
            Represents an annotation element connected to the SubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Event">
            <summary>
            Gets or sets the type of BpmnEvent. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Height">
            <summary>
            Gets or sets the height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.HorizontalAlignment">
            <summary>
            Represents how to horizontally align a node concerning its parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Id">
            <summary>
            Specifies the Id of the BpmnSubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Margin">
            <summary>
            Specifies the space to be left between the node and its immediate parent. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Offset">
            <summary>
            Specifies the position of the sub-event. By default, it is set to 0.5 in X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Ports">
            <summary>
            Specifies the collection of connection points of the sub-events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Trigger">
            <summary>
            Specifies the type of event trigger. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.VerticalAlignment">
            <summary>
            Represents how to vertically align a node concerning its immediate parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Visible">
            <summary>
            Specifies the visibility of the sub-event. By default, it is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Width">
            <summary>
            Gets or sets the width of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolPalettePalette">
            <summary>
            Defines the appearance and behavior of the symbol group in the symbol palette.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfSymbolPalette Height="600px" SymbolHeight="60" SymbolWidth="60" Palettes="@Palettes">
                   @* Sets the margin for the symbols *@
               @code{
                   public ObservableCollection<SymbolPalettePalette> Palettes;
               // Defines palette's basic-shape collection
               public ObservableCollection<Object> BasicShapes { get; set; }
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalette()
                   {
                        new DiagramNode()
                   {
                   Id = "Rectangle",
                   Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle }},};
                   Palettes.Add(new SymbolPalettePalette() { Id = "BasicShapes", Expanded = true, Symbols = BasicShapes, Title = "Basicshapes" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.#ctor">
            <summary>
            Initialize the appearance and behavior of the symbol group in the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Expanded">
            <summary>
            Sets whether the symbol palette items should be expanded or not. By default, Expanded is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Height">
            <summary>
            Specifies the height of the symbol group. By default, Height is undefined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.IconCss">
            <summary>
            Defines the content of the symbol group. By default, it is set to empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Id">
            <summary>
            Sets a unique id for the symbol group. By default, Id is set to empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Symbols">
            <summary>
            Defines the group of predefined symbols.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette Height="600px" SymbolHeight="60" SymbolWidth="60" Palettes="@Palettes">
            </SfSymbolPalette>
            @code{
               public List<SymbolPalettePalette> Palettes;
               // Defines palette's basic-shape collection
               public ObservableCollection<object> BasicShapes { get; set; }
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalettePalette>();
                   BasicShapes = new ObservableCollection<object>
                   ()
               {
               new DiagramNode()
               {
                    Id="Ellipse",
                    Shape = new DiagramShape(){ Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Ellipse  }
               },
               };
                   Palettes.Add(new SymbolPalettePalette() { Id = "BasicShapes", Expanded = true, Symbols = BasicShapes, Title = "Basicshapes" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Title">
            <summary>
            Displays a title for the symbol group in the symbol palette. By default, the Title is set to empty string.
            </summary>
        </member>
    </members>
</doc>
