@using Blazored.Modal
@using Blazored.Modal.Services
@using Ticketing.Models.Centers.Dto
@using Ticketing.Models.Centers.Repository
@using Ticketing.Models.Persons.Command
@using Ticketing.Models.Persons.Dto
@using Ticketing.Models.Persons.Repository
@using TicketingUI.Shared.Component

@inject IPersonRepository personRepository
@inject ICenterRepository centerRepository


<table dir="rtl" class="input-group">
    <tr>
        <td>نام و نام خانوادگی</td>
        <td>کد پرسنلی</td>
        <td>مرکز</td>
        <td>واحد</td>
    </tr>
    <tr>
        <td>
            <input @bind=personDto.PersonName @oninput="@((e) => { personDto.PersonName=(string)e.Value.ToString(); })" />
        </td>
        <td>
            <input type="number" @bind=personDto.PersonID @oninput="@((e) => { personDto.PersonID=Convert.ToInt32(e.Value.ToString()); })" />
        </td>
        <td>
            <select dir="rtl"
                    @oninput="@((e)=>{selectedCenterId=e.Value.ToString();SetpartInfo();})"
                    @onselectionchange="@((e)=>{selectedCenterId=e.ToString();SetpartInfo();})"
                    class="form-text"
                    @bind="SelectedCenterId">

                @foreach(var center in centerDtos)
                {
                    <option value="@center.Id"> @center.CenterName </option>
                }

            </select>

            <select class="form-select"
                    @oninput="@((e)=>selectedPartId=e.Value.ToString())"
                    @onselectionchange="@((e)=>selectedPartId=e.ToString())"
                    @onselect="@((e)=>selectedPartId=e.ToString())"
                    @bind="SelectedPartId">
                @*@if(selectedCenterId is null) { selectedCenterId = new Guid().ToString(); }*@

                @foreach(var part in partDto)
                {
                    <option value="@part.Id"> @part.PartName </option>
                }
                }
            </select>
        </td>
    </tr>
</table>
<button class="btn-success" @onclick="(()=>SaveInfo())">ذخیره</button>
@code {
    [Parameter]
    public PersonDto personDto { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] public BlazoredModalInstance blazoredModalInstance { get; set; }
    public ModalParameters Keys = new ModalParameters();
    [Parameter] public bool isNewMode { get; set; }
    private List<CenterDto> centerDtos = new List<CenterDto>();
    private List<PartDto> partDto = new List<PartDto>();

    string selectedCenterId;

    string SelectedCenterId
    {
        get => selectedCenterId;
        set
        {
            selectedCenterId = value;
        }
    }
    string selectedPartId;

    string SelectedPartId
    {
        get => selectedPartId;
        set
        {
            selectedPartId = value;

        }
    }
    protected override async Task OnInitializedAsync()
    {
        await GetCentersList();
        selectedPartId = personDto.PartId.ToString();
        Guid partid = new Guid(selectedPartId);
        if(isNewMode)
        {
            selectedCenterId = centerDtos.FirstOrDefault().Id.ToString();
            partDto = centerDtos.Where(n => n.Id.Equals(new Guid(SelectedCenterId))).Select(n => n.parts).First().ToList();
            selectedPartId = centerDtos.Where(n => n.Id.Equals(new Guid(SelectedCenterId))).FirstOrDefault().parts.FirstOrDefault().Id.ToString();

        }
        else
        {
            selectedCenterId = centerDtos.Where(n => n.parts.Any(m => m.Id.Equals(partid))).Select(n => n.Id).FirstOrDefault().ToString();
        await SetpartInfo();
        selectedPartId = personDto.PartId.ToString();
        }

    }
    private async void SaveInfo()
    {
        if(isNewMode)
            CreateNewPerson();
        else
            EditPersonInfo();
    }
    private async void CreateNewPerson()
    {
        string resultMessage = "";
        try
        {
            CreatePersonCommand createPersonCommand = new CreatePersonCommand()
                {
                    PartId = new Guid(SelectedPartId),//personDto.PartId,
                    Name = personDto.PersonName,
                    PersonID = personDto.PersonID
                };
            await personRepository.CreatePerson(createPersonCommand);
            resultMessage = "پرسنل مورد نظر با موفقیت ثبت شد";
            blazoredModalInstance.CloseAsync(ModalResult.Ok());
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message;
        }
        finally
        {
            Keys.Add("Message", resultMessage);
            Keys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", Keys);
        }
    }

    private async void EditPersonInfo()
    {
        // TODO: Add center and ParId
        string resultMessage = "";
        try
        {
            UpdatePersonCommand updatePersonCommand = new UpdatePersonCommand()
                {
                    Id = personDto.Id,
                    PartId = new Guid(SelectedPartId),
                    Name = personDto.PersonName
                };
            await personRepository.UpdatePerson(updatePersonCommand);
            await blazoredModalInstance.CloseAsync(ModalResult.Ok());
            resultMessage = "پرسنل مورد نظر با وفقیت ثبت شد";

        }
        catch(Exception ex)
        {
            resultMessage = ex.Message;
        }
        finally
        {
            Keys.Add("Message", resultMessage);
            Keys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", Keys);
        }
    }

    private async Task GetCentersList()
    {
        centerDtos = await centerRepository.GetAllCenters();
    }

    private async Task SetpartInfo()
    {
        partDto = new List<PartDto>();
        selectedPartId = "";
        @if(centerDtos.Any(n => n.Id.Equals(new Guid(selectedCenterId)) && n.parts.Count() != 0))
        {
            partDto = centerDtos.Where(n => n.Id.Equals(new Guid(selectedCenterId))).Select(n => n.parts.ToList()).FirstOrDefault();
            selectedPartId = partDto.Select(n => n.Id.ToString()).FirstOrDefault();
        }
    }

}
