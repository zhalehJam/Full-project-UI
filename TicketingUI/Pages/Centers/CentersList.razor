@page "/CentersList"
@using Ticketing.Models.Centers.Dto
@using Ticketing.Models.Centers.Repository
@using Ticketing.Repository.Centers
@using TicketingUI.Shared.Component
@inject ICenterRepository CenterRepository
@inject IHttpClientFactory ClientFactory

<PageTitle>Centers</PageTitle>
<h3>Centers</h3>
<button class="btn btn-primary" @onclick="setlist">GetAllCenters</button>
@*<p role="status">
    <table class="table">
        <thead>
            <tr>
                <th>CenterName</th>
                <th>CenterID</th>
                <th>
                    Parts
                </th>
            </tr>
            <tr>
                <td>
                    <input @bind="@centerNamefilter" @oninput="@((e) => { centerNamefilter=(string)e.Value.ToString(); GetcenterByFilters();})" />
                </td>
                <td>
                    <input @bind="@centerIDfilter" @oninput="@((e) => { centerIDfilter=Convert.ToString(e.Value); GetcenterByFilters();})" />
                </td>
                <td>
                    <table>
                        <thead>
                            <tr>
                                <td>
                                    <input @bind="@partNamefilter" @oninput="@((e) => { partNamefilter=(string)e.Value.ToString(); GetcenterByFilters();})" />
                                </td>
                                <td>
                                    <input @bind="@partIDfilter" @oninput="@((e) => { partIDfilter=Convert.ToString(e.Value.ToString()); GetcenterByFilters();})" />
                                </td>
                            </tr>
                        </thead>
                    </table>
                </td>

            </tr>
        </thead>
        <tbody>

            @if(centerbyfilters.Count() != 0)
            {
                @foreach(var center in centerbyfilters)
                {
                    <tr>
                        <td>@center.CenterName</td>
                        <td>@center.CenterID</td>
                        <td>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>PartName</th>
                                        <th>PartID</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var part in center.parts)
                                    {
                                        <tr>
                                            <td>@part.PartName</td>
                                            <td>@part.PartID</td>
                                        </tr>
                                    }
                                </tbody>

                            </table>
                        </td>

                    </tr>
                }
            }
        </tbody>
    </table>
</p>
*@
<TableLayout Items="@centerbyfilters" Context="centeritem">
    <TableHeader>
        @*<tr>*@
        <th hidden>Id </th>
        <th>Center Name</th>
        <th>CenterID</th>
        <th>Parts</th>
        @*</tr>*@
    </TableHeader>

    <TableFilter>

        <td hidden></td>
        <td>
            <input @bind="@centerNamefilter" @oninput="@((e) => { centerNamefilter=(string)e.Value.ToString(); GetcenterByFilters();})" />
        </td>
        <td>
            <input @bind="@centerIDfilter" @oninput="@((e) => { centerIDfilter=Convert.ToString(e.Value); GetcenterByFilters();})" />
        </td>
        <td> 
            <table class="input-group">
                <tr>
                    <td>
                        <input @bind="@partNamefilter" @oninput="@((e) => { partNamefilter=(string)e.Value.ToString(); GetcenterByFilters();})" />
                    </td>
                    <td>
                        <input @bind="@partIDfilter" @oninput="@((e) => { partIDfilter=Convert.ToString(e.Value.ToString()); GetcenterByFilters();})" />

                    </td>
                </tr>
            </table>
        </td>

    </TableFilter>
    <RowTemplate>
        <td hidden>@centeritem.Center</td>
        <td>@centeritem.CenterName</td>
        <td>@centeritem.CenterID</td>
        <td>

            <TableLayout Items="@centeritem.parts.ToList()" Context="centeritempart">
                <TableHeader>
                    <th>PartName </th>
                    <th>PartID</th>
                </TableHeader>
                <RowTemplate>
                    @if(centeritem.parts.Count() != 0)
                    {
                        <td>@centeritempart.PartName</td>
                        <td>@centeritempart.PartID</td>
                    }
                </RowTemplate>
            </TableLayout>

        </td>
    </RowTemplate>
</TableLayout>


@code {
    private List<CenterDto> centerDtos = new List<CenterDto>();
    List<CenterDto> centerbyfilters = new List<CenterDto>();
    private bool showtable = false;
    private string centerNamefilter = "";
    private string centerIDfilter = "";
    private string partNamefilter = "";
    private string partIDfilter = "";



    private async Task<List<CenterDto>> setlist()
    {
        centerDtos = await CenterRepository.GetAllCenters();//GetCenterByFilters(centerNamefilter, centerIDfilter, partNamefilter, partIDfilter);
        centerbyfilters = centerDtos;
        return centerDtos;
    }
    private async Task<List<CenterDto>> GetcenterByFilters()//string centerNamefilter, int centerIDfilter, string partNamefilter, int partIDfilter)
    {
        centerbyfilters = centerDtos;


        if(!string.IsNullOrWhiteSpace(centerNamefilter))
            centerbyfilters = centerbyfilters.Where(n => n.CenterName.Contains(centerNamefilter)).ToList();
        if(!string.IsNullOrWhiteSpace(centerIDfilter))
            centerbyfilters = centerbyfilters.Where(n => n.CenterID.ToString().Contains(centerIDfilter.ToString())).ToList();
        if(!string.IsNullOrWhiteSpace(partNamefilter))
            centerbyfilters = centerbyfilters.Where(c => c.parts.Where(p => p.PartName.Contains(partNamefilter)).ToList().Count() != 0).ToList().Select(n => new CenterDto()
                {
                    CenterName = n.CenterName,
                    CenterID = n.CenterID,
                    parts = n.parts.Where(q => q.PartName.Contains(partNamefilter)).ToList()
                })
                    .ToList();
        if(!string.IsNullOrWhiteSpace(partIDfilter))
            centerbyfilters = centerbyfilters.Where(c => c.parts.Where(p => p.PartID.ToString()
                                                                                    .Contains(partIDfilter))
                                                                .ToList().Count() != 0)
                                             .ToList()
                                             .Select(n => new CenterDto()
                                                 {
                                                     CenterName = n.CenterName,
                                                     CenterID = n.CenterID,
                                                     parts = n.parts.Where(q => q.PartID.ToString().Contains(partIDfilter)).ToList()
                                                 }).ToList();


        return centerbyfilters;
    }
}
