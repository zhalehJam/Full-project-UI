@using Blazored.Modal
@using Blazored.Modal.Services
@using Ticketing.Cilient.Contracts.Ticket
@using Ticketing.Models.Tickets.Command
@using Ticketing.Models.Tickets.Dto
@using Ticketing.Models.Tickets.Repository
@using TicketingUI.Shared.Component

@inject IJSRuntime JsRuntime
@inject ITicketRepository ticketRepository
<div dir="rtl">
    @*<button class="btn btn-primary" @onclick="@ModalShow">Show Dialog!</button>*@
    @if(showModal)
    {

        <table class="d-xxl-table-cell">
            <th align="center">
                برنامه: @TicketDtos.ProgramName
            </th>
            <tbody>
                <tr>
                    <td>اطلاعات تماس گیرنده:</td>
                    <td>
                        <b>کدپرسنلی : </b>
                        <br />
                        <input @bind="@TicketDtos.PersonID" @oninput="((e)=>TicketDtos.PersonID=Convert.ToInt32(e.Value))" />
                    </td>
                    <td>
                        <b>نام: </b>
                        <br />
                        <input @bind="@TicketDtos.PersonName" @oninput="((e)=>TicketDtos.PersonName=Convert.ToString(e.Value))" />

                    </td>
                </tr>

                <tr>
                    <td></td>
                    <td>
                        <b>واحد: </b>
                        <br />
                        <input @bind="@TicketDtos.PersonPartName" @oninput="((e)=>TicketDtos.PersonPartName=Convert.ToString(e.Value))" />

                    </td>
                    <td>
                        <b>مرکز: </b>
                        <br />
                        <input @bind="@TicketDtos.PersonCenterName" @oninput="((e)=>TicketDtos.PersonCenterName=Convert.ToString(e.Value))" />

                    </td>
                </tr>
                <tr>
                    <td>اطلاعات خطا و راه کار :</td>
                    <td>
                        <b>نوع خطا: </b>
                        <br />
                        @*<input @bind="@TicketDtos.ErrorTypeName" @oninput="((e)=>TicketDtos.ErrorTypeName=Convert.ToString(e.Value))" />*@
                        <select class="form-select"
                           
                            @oninput="@((m)=>{
                                TicketDtos.ErrorTypeName=m.Value.ToString();TicketDtos.ErrorTypeid=Convert.ToInt16( m.Value);})" 
                            @bind="TicketDtos.ErrorTypeid">
                            @*@if(selectedCenterId is null) { selectedCenterId = new Guid().ToString(); }*@

                            @foreach(var item in errorTypelist)
                            {
                                <option value="@Convert.ToInt16(item)"> @item.ToString() </option>
                            }
                            
                        </select>
                    </td>

                </tr>
                <tr>
                    <td></td>
                    <td>
                        <b>شرح خطا: </b>
                        <br />
                        <input @bind="@TicketDtos.ErrorDescription" @oninput="((e)=>TicketDtos.ErrorDescription=Convert.ToString(e.Value))" />

                    </td>
                    <td>
                        <b>شرح راهکار: </b>
                        <br />
                        <input @bind="@TicketDtos.SolutionDescription" @oninput="((e)=>TicketDtos.SolutionDescription=Convert.ToString(e.Value))" />

                    </td>
                </tr>
                <tr>
                    <td>اطلاعات تیکت:</td>
                    <td>
                        <b>نوع تیکت: </b>
                        <br />
                        <input @bind="@TicketDtos.TicketTypeName" @oninput="((e)=>TicketDtos.TicketTypeName=Convert.ToString(e.Value))" />
                         
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <b>زمان ثبت: </b>
                        <br />
                        <input type="datetime-local" @bind="@TicketDtos.TicketTime" @oninput="((e)=>TicketDtos.TicketTime=Convert.ToDateTime(e.Value))" />

                    </td>
                    <td>
                        <b>وضعیت:</b>
                        <br />
                        @*<input type="" @bind="@TicketDtos.TicketConditionTypeName" @oninput="((e)=>TicketDtos.TicketConditionTypeName=Convert.ToString(e.Value))" />*@
                        <select class="form-select"
                            
                            @oninput="@((e)=>{ TicketDtos.TicketConditionid=Convert.ToInt16(e.Value);})"
                           
                            @bind="TicketDtos.TicketConditionid">
                            @*@if(selectedCenterId is null) { selectedCenterId = new Guid().ToString(); }*@

                            @foreach(var item in ticketConditions)
                            {
                                <option value="@Convert.ToInt16(item)"> @item.ToString() </option>
                            }
                            
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>اطلاعات پشتیبان پاسخگو:</td>
                    <td>
                        <b>نام پشتیبان:</b>
                        <br />
                        <input @bind="@TicketDtos.SupporterPersonName" @oninput="((e)=>TicketDtos.SupporterPersonName=Convert.ToString(e.Value))" />

                    </td>
                    <td>
                        <b>کدپرسنلی:</b>
                        <br />
                        <input @bind="@TicketDtos.SupporterPersonID" @oninput="((e)=>TicketDtos.SupporterPersonID=Convert.ToInt32(e.Value))" />

                    </td>
                </tr>
            </tbody>
        </table>
        @* </div>

    <!-- Modal footer -->
    <div class="modal-footer">*@
        <button class=" btn btn-success" @onclick="(()=>SaveInfo()

    )">
            ذخیره
        </button>
        @*<button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
    <button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>
    </div>

    </div>
    </div>
    </div>*@
    }
    <hr />
</div>
@code {
    [Parameter]
    public TicketDto TicketDtos { get; set; }
    [Parameter]
    public string mode { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public bool show { get; set; }
    private bool CanEdit = true;
    [Parameter]
    public bool showModal { get; set; }
    [CascadingParameter] public BlazoredModalInstance blazoredModalInstance { get; set; }
    public ModalParameters Keys = new ModalParameters();
    private List<TicketCondition> ticketConditions = new List<TicketCondition>().ToList();
    private List<ErrorType> errorTypelist = new List<ErrorType>();
    public TicketDetail()
    {
        showModal = true;
        mode = "Create";
    }
    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }

    protected override Task OnInitializedAsync()
    {
        ticketConditions.Add(TicketCondition.OnGoing);
        ticketConditions.Add(TicketCondition.Finish);
        errorTypelist.Add(ErrorType.UserError);
        errorTypelist.Add(ErrorType.SystemError);
        //ticketConditions.IndexOf(TicketCondition.Finish);
        
        return base.OnInitializedAsync();
    }
    private async void SaveInfo()
    {
        if(mode == "Create")
            CreateNewTicket();
        else if(mode == "Edit")
            Editicket();
        await blazoredModalInstance.CloseAsync(ModalResult.Ok(""));
    }
    private async void CreateNewTicket()
    {
        string resultMessage = "";
        try
        {
            CreateTicketCommand createTicketCommand = new CreateTicketCommand()
                {
                    TicketTime = TicketDtos.TicketTime,
                    TicketCondition = (TicketCondition)TicketDtos.TicketConditionid,
                    ErrorDiscription = TicketDtos.ErrorDescription,
                    ErrorType = (ErrorType)TicketDtos.ErrorTypeid,
                    SolutionDiscription = TicketDtos.SolutionDescription,
                    SupporterPersonID = TicketDtos.SupporterPersonID,
                    ProgramId = TicketDtos.ProgramId,
                    PersonID = TicketDtos.PersonID,
                    Type = (TicketType)TicketDtos.Typeid
                };
            await ticketRepository.CreateNewTicket(createTicketCommand);
            resultMessage = "تیکت مورد نظر با موفقیت ثبت شد";
            StateHasChanged();
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message.ToString();
        }
        finally
        {
            Keys.Add("Message", resultMessage);
            Keys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", Keys);
        }
    }
    private async void Editicket()
    {
        string resultMessage = "";
        try
        {
            UpdateTicketCommand updateTicketCommand = new UpdateTicketCommand()
                {
                    Id = TicketDtos.Id,
                    TicketTime = TicketDtos.TicketTime,
                    TicketCondition = (TicketCondition)TicketDtos.TicketConditionid,
                    ErrorDiscription = TicketDtos.ErrorDescription,
                    ErrorType = (ErrorType)TicketDtos.ErrorTypeid,
                    SolutionDiscription = TicketDtos.SolutionDescription,
                    ProgramId = TicketDtos.ProgramId,
                    PersonID = TicketDtos.PersonID,
                    Type = (TicketType)TicketDtos.Typeid,
                    EditorPersonID = 970086
                };
            await ticketRepository.UpdateTicket(updateTicketCommand);

            resultMessage = "تیکت مورد نظر با موفقیت ویرایش شد";
            StateHasChanged();
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message.ToString();
        }
        finally
        {
            Keys.Add("Message", resultMessage);
            Keys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", Keys);
        }
    }
}