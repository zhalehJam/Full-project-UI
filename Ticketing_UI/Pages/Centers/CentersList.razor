@page "/CentersList"
@using Blazored.Modal
@using Blazored.Modal.Services
@using PagedList
@using Ticketing.Models.Centers.Command
@using Ticketing.Models.Centers.Dto
@using Ticketing.Models.Centers.Repository
@using Ticketing.Repository.Centers
@using Ticketing_UI.Shared.Component;
@inject ICenterRepository CenterRepository
@inject IHttpClientFactory ClientFactory

<PageTitle>Centers</PageTitle>
<h3>لیست مراکز</h3>
<button class="btn btn-success" @onclick="@(() =>
{
CreateNewCenter();
    GetcenterByFilters();
    setlist();})">
    افزودن
</button>

جستجو:
<input @bind="@centerNamefilter" @oninput="@((e) => { centerNamefilter=(string)e.Value.ToString(); GetcenterByFilters();})" />

<p>
    <TableLayout Items="@centerbyfilters" Context="centeritem">
        <TableHeader>

            <th hidden>Id </th>
            <th>نام مرکز</th>
            <th>کد مرکز</th>
            <th>واحدها</th>

        </TableHeader>
        @*
        <TableFilter>*@

        @* <td hidden></td>
        <td>
        <input @bind="@centerNamefilter" @oninput="@((e) => { centerNamefilter=(string)e.Value.ToString(); GetcenterByFilters();})" />
        </td>
        <td>
        <input @bind="@centerIDfilter" @oninput="@((e) => { centerIDfilter=Convert.ToString(e.Value); GetcenterByFilters();})" />
        </td>
        <td>
        if(showModal)
        {

        <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
        <div class="modal-content">
        <!-- Modal Header -->
        <div class="modal-header">
        <h4 class="modal-title">Confirm action</h4>
        <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
        </div>

        <!-- Modal body -->
        <div class="modal-body">
        <table class="input-group">
        <tr>
        <td>
        <input @bind="@partNamefilter" @oninput="@((e) => { partNamefilter=(string)e.Value.ToString(); GetcenterByFilters();})" />
        </td>
        <td>
        <input @bind="@partIDfilter" @oninput="@((e) => { partIDfilter=Convert.ToString(e.Value.ToString()); GetcenterByFilters();})" />

        </td>
        </tr>
        </table>
        </div>

        <!-- Modal footer -->
        <div class="modal-footer">
        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
        <button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>
        </div>

        </div>
        </div>
        </div>
        }
        </td>

        </TableFilter>*@
        <RowTemplate>
            <td>@centeritem.CenterName</td>
            <td>@centeritem.CenterID</td>
            <td>
                <button class="btn btn-outline-success" @onclick="@((e) =>{ EditCenter(centeritem);setlist();})"> واحدها</button>
                <button class="btn btn-danger" @onclick="@((e) =>{ DeleteCenter(centeritem);setlist();})"> حذف</button>

                @*<div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
                <div class="modal-dialog">
                <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                <h4 class="modal-title">Confirm action</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">*@
                @*<TableLayout Items="@centeritem.parts.ToList()" Context="centeritempart">
                <TableHeader>
                <th>PartName </th>
                <th>PartID</th>
                </TableHeader>
                <RowTemplate>
                @if(centeritem.parts.Count() != 0)
                {
                <td>@centeritempart.PartName</td>
                <td>@centeritempart.PartID</td>
                }
                </RowTemplate>
                </TableLayout>*@
                @*</div>

                <!-- Modal footer -->
                <div class="modal-footer">
                <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>
                </div>

                </div>
                </div>
                </div>*@

            </td>
        </RowTemplate>
    </TableLayout>
</p>
<footer>
    Page number:
    <input @bind="@pageNumber" @oninput="((e)=>{pageNumber=e.Value.ToString(); GetcenterByFilters();})" size="3p" />
    Page size
    <input @bind="@pageSize" @oninput="((e)=>{pageSize=e.Value.ToString();GetcenterByFilters();})" size="3p" />
</footer>

@code {
    private List<CenterDto> centerDtos = new List<CenterDto>();
    private PagedList<CenterDto> pagedcenterDtos;
    List<CenterDto> centerbyfilters = new List<CenterDto>();
    [CascadingParameter] public IModalService Modal { get; set; }
    public ModalParameters Keys = new ModalParameters();
    public ModalParameters MessageBoxKeys = new ModalParameters();



    private string centerNamefilter = "";
    private string centerIDfilter = "";
    private string partNamefilter = "";
    private string partIDfilter = "";
    private string pageNumber = "1";
    private string pageSize = "10";
    private string mode = "Create";

    public bool showModal { get; set; }

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await setlist();
    }

    private async void CreateNewCenter()
    {
        string ResultMessage = "";
        try
        {
            Keys.Add("centerInfo", new CenterDto() { parts = new List<PartDto>() });
            Keys.Add("Mode", "Create");

            await Modal.Show<CenterDetail>("جزئیات مرکز", Keys, new ModalOptions() { Size = ModalSize.Large }).Result;
            await setlist();
            StateHasChanged();
        }
        catch(Exception)
        {
            throw;
        }
    }
    private async void EditCenter(CenterDto centerDto)
    {
        CenterDto center = centerDto;
        Keys.Add("centerInfo", center);
        Keys.Add("Mode", "Edit");
        await Modal.Show<CenterDetail>("جزئیات مرکز", Keys).Result;
        await setlist();
        StateHasChanged();
    }

    private async Task<List<CenterDto>> setlist()
    {
        centerNamefilter = "";
        centerIDfilter = "";
        partNamefilter = "";
        partIDfilter = "";
        pageNumber = "1";
        pageSize = "10";
        centerbyfilters = await CenterRepository.GetAllCenersByPage(pageNumber, pageSize);
        return centerbyfilters;
    }
    private async Task<List<CenterDto>> GetcenterByFilters()
    {
        centerbyfilters = await CenterRepository.GetAllCenersByPage(pageNumber, pageSize);


        if(!string.IsNullOrWhiteSpace(centerNamefilter))
            centerbyfilters = centerbyfilters.Where(n => n.CenterName.Contains(centerNamefilter) ||
            n.CenterID.ToString().Contains(centerNamefilter.ToString()) ||
             (n.parts.Where(p => p.PartName.Contains(centerNamefilter)).ToList().Count() != 0) ||
             (n.parts.Where(p => p.PartID.ToString().Contains(centerNamefilter))
                                                                .ToList().Count() != 0)
            ).ToList();
        return centerbyfilters;
    }
    private async void DeleteCenter(CenterDto centerDto)
    {
        string resultMessage = "";
        try
        {
            // TODO: Add Center Edit and Delete
            DeleteCenterCommand deleteCenterCommand = new DeleteCenterCommand()
                {
                    Id = centerDto.Id
                };
            await CenterRepository.DeleteCenter(deleteCenterCommand);
            await setlist();
            resultMessage = "مرکز مورد نظر با موفقیت حذف شد";
            StateHasChanged();
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message.ToString();
        }
        finally
        {
            MessageBoxKeys.Add("Message", resultMessage);
            MessageBoxKeys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", MessageBoxKeys);
        }
    }
}
