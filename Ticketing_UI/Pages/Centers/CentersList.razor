@page "/CentersList"

@using PagedList
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Ticketing.Models.Centers.Command
@using Ticketing.Models.Centers.Dto
@using Ticketing.Models.Centers.Repository
@using Ticketing.Repository.Centers
@using Ticketing_UI.Shared.Component;
@inject ICenterRepository CenterRepository
@inject IHttpClientFactory ClientFactory

<PageTitle>Centers</PageTitle>
<h3>لیست مراکز</h3>

<div dir="rtl" class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="Grid" AllowGrouping="true" DataSource="@centerDtos" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="@(new string[]{"Add", "Edit" ,"Delete" ,"Search" })" style="width:auto;padding-right: 1px;padding-left: 1px;">
                <GridPageSettings @ref="GridPage" PageSize="10"></GridPageSettings>
                <GridEvents TValue="CenterDto" OnActionBegin="ActionBeginHandler"></GridEvents>
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams" ShowConfirmDialog="true">
                    <HeaderTemplate>
                        اطلاعات
                    </HeaderTemplate>
                </GridEditSettings>
                <GridTemplates>
                    <DetailTemplate>
                        @{
                            var centerdtos = (context as CenterDto) ?? new CenterDto();
                            partDtos = centerdtos.parts ?? new List<PartDto>();
                            string gid = centerdtos.Id.ToString();
                        }

                        <div class="content-wrapper">
                            <SfGrid @ref="ChildGrid" DataSource="@partDtos" AllowSorting="true" Toolbar="@(new string[]{"Add"})">
                                <GridEvents TValue="PartDto" OnActionBegin="@((e)=>ChildGridActionHandler(e,centerdtos.Id))"></GridEvents>
                                <GridEditSettings AllowAdding="true" AllowDeleting="true" Mode="@EditMode.Dialog" Dialog="DialogParams" ShowConfirmDialog="true"></GridEditSettings>
                                <template>
                                    <div class="col-md-2" style="display:inline-block!important">
                                        <SfTextBox ID="ProgramId" Enabled="false" @bind-Value="@(gid)" FloatLabelType="FloatLabelType.Auto" Placeholder="برنامه"></SfTextBox>
                                    </div>
                                </template>
                                <GridColumns>
                                    <GridColumn Field=@nameof(PartDto.Id) Visible=false HeaderText="Id" TextAlign="TextAlign.Right" Width="110"> </GridColumn>
                                    <GridColumn Field=@nameof(PartDto.PartName) HeaderText="نام واحد" TextAlign="TextAlign.Right" Width="110"> </GridColumn>
                                    <GridColumn Field=@nameof(PartDto.PartID) HeaderText="کد واحد" TextAlign="TextAlign.Right" Width="110"> </GridColumn>
                                    <GridColumn HeaderText="عملیات" Width="150">
                                        <GridCommandColumns>
                                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat"} )"></GridCommandColumn>
                                        </GridCommandColumns>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>

                    </DetailTemplate>
                </GridTemplates>
                <GridColumns>
                    <GridColumn Field=@nameof(CenterDto.Id) Visible=false></GridColumn>
                    <GridColumn Field=@nameof(CenterDto.CenterName) HeaderText="نام مرکز"></GridColumn>
                    <GridColumn Field=@nameof(CenterDto.CenterID) HeaderText="کد مرکز"></GridColumn>
                    <GridColumn HeaderText="عملیات" Width="150">
                        <GridCommandColumns>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat"} )"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>

    <SfDialog @bind-Visible="messageVisiable" Target="#target" Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@messageVisiable" style="align-self: center;">
        <DialogTemplates>
            <Header>
                پیغام
            </Header>
            <Content>
                @resultMessage
            </Content>
        </DialogTemplates>
        @if(confrimButtonsVisiable == true)
        {
            <DialogButtons>
                <DialogButton Content="تایید" IsPrimary="true" OnClick="ClickSaveButton"></DialogButton>
                <DialogButton Content="لغو" IsPrimary="true" OnClick="ClickCancelButton"></DialogButton>
            </DialogButtons>
        }

    </SfDialog>
</div>

@code {
    private List<CenterDto> centerDtos = new List<CenterDto>();
    private List<PartDto> partDtos = new List<PartDto>();

    private SfGrid<CenterDto> Grid { get; set; }
    private SfGrid<PartDto> ChildGrid { get; set; }
    private GridPageSettings GridPage { get; set; }
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "350px", Width = "350px" };
    private string resultMessage = "";
    private bool flag = false;
    private Boolean Check = false;
    private bool messageVisiable = false;
    public bool showModal { get; set; }
    private string commandType = "";
    private bool confrimButtonsVisiable = false;
    private PartDto selectedpartDto = new PartDto();
    private CenterDto selectCentertDto = new CenterDto();
    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCenterslist();
    }

    public async Task ActionBeginHandler(ActionEventArgs<CenterDto> args)
    {
        string rType = args.RequestType.ToString();
        if(flag)
        {
            args.Cancel = true;
            flag = false;
        }
        else
        {
            if(rType == "Save")
            {
                try
                {
                    switch(args.Action)
                    {
                        case "Add":
                            await CreateNewCenter(args.Data);
                            break;

                        case "Edit":
                            await EditCenter(args.Data);
                            break;
                    }
                }
                catch(Exception ex)
                {
                    resultMessage = ex.Message.ToString();
                    args.Cancel = true;
                }
                finally
                {
                    args.Cancel = true;
                    centerDtos = await GetCenterslist();

                }
            }
            else if(rType == "Delete")
            {
                resultMessage = "از حذف اطاعات فوق مطمئن هستید؟";
                confrimButtonsVisiable = true;
                commandType = "DeleteCenter";
                selectCentertDto = args.Data;
                messageVisiable = true;
                args.Cancel = true;

            }
            else if(rType == "Refresh")
            {
                Grid.PreventRender(false);
            }
            else if(rType == "Add")
            {
                Check = true;
            }

        }
    }

    private async Task ChildGridActionHandler(ActionEventArgs<PartDto> args, Guid centerId)
    {
        var rType = args.RequestType.ToString();
        args.Data.Center = centerId;
        if(rType == "Save")
        {
            if(args.Action == "Add")
            {
                try
                {
                    await AddPart(args.Data);
                    await GetCenterslist();

                    StateHasChanged();

                }
                catch(Exception ex)
                {
                    resultMessage = ex.Message.ToString();
                }
                finally
                {
                    await GetCenterslist();
                    messageVisiable = true;
                }
                args.Cancel = true;
            }
        }
        else if(rType == "Delete")
        {
            confrimButtonsVisiable = true;
            selectedpartDto = args.Data;
            resultMessage = "از حذف اطاعات فوق مطمئن هستید؟";
            commandType = "DeletePart";
            messageVisiable = true;
            args.Cancel = true;
        }
    }

    private async Task ClickSaveButton()
    {
        if(commandType == "DeletePart")
        {
            try
            {
                confrimButtonsVisiable = false;

                await DeletePart(selectedpartDto);
                resultMessage = "واحد مورد نظر حذف شد";
                StateHasChanged();
            }
            catch(Exception ex)
            {
                resultMessage = ex.Message.ToString();
            }
            finally
            {
                await GetCenterslist();
                messageVisiable = true;
            }
        }
        else if(commandType == "DeleteCenter")
        {
            try
            {
                confrimButtonsVisiable = false;

                resultMessage = "مرکز مورد نظر حذف شد";

                await DeleteCenter(selectCentertDto);
                StateHasChanged();
                Grid.PreventRender(false);
            }
            catch(Exception ex)
            {
                resultMessage = ex.Message.ToString();
            }
            finally
            {

                await GetCenterslist();
                StateHasChanged();
            }
        }
    }

    private void ClickCancelButton()
    {
        commandType = "";
        selectCentertDto = new CenterDto();
        selectedpartDto = new PartDto();
        messageVisiable = false;
    }

    private async Task CreateNewCenter(CenterDto centerDto)
    {
        string ResultMessage = "";
        try
        {
            CreateCenterCommand createCenterCommand = new CreateCenterCommand()
                {
                    CenterName = centerDto.CenterName,
                    CenterID = centerDto.CenterID
                };
            await CenterRepository.CreateCenter(createCenterCommand);
            resultMessage = "مرکز مورد نظر با موفقیت ثبت شد";
            await GetCenterslist();
            StateHasChanged();
        }
        catch(Exception)
        {
            throw;
        }
    }

    private async Task EditCenter(CenterDto centerDto)
    {
        EditCenterCommand editCenterCommand = new EditCenterCommand()
            {
                Name = centerDto.CenterName
            };
        await CenterRepository.EditCenter(editCenterCommand);
        await GetCenterslist();
        resultMessage = "تغییرات مورد نظر با موفقیت ثبت شد";

        StateHasChanged();
    }

    private async Task<List<CenterDto>> GetCenterslist()
    {
        centerDtos = await CenterRepository.GetAllCenersByPage("1", "10");
        return centerDtos;
    }

    private async Task DeleteCenter(CenterDto centerDto)
    {
        string resultMessage = "";
        try
        {
            DeleteCenterCommand deleteCenterCommand = new DeleteCenterCommand()
                {
                    Id = centerDto.Id
                };
            await CenterRepository.DeleteCenter(deleteCenterCommand);
            await GetCenterslist();
            resultMessage = "مرکز مورد نظر حذف شد";
            StateHasChanged();
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message.ToString();
        }
        finally
        {

        }
    }

    private async Task AddPart(PartDto partDto)
    {
        AddPartCommand addPartCommand = new AddPartCommand()
            {
                CenterId = partDto.Center,
                PartName = partDto.PartName,
                PartID = partDto.PartID

            };
        await CenterRepository.AddPart(addPartCommand);
        resultMessage = "واحد مورد نظر با موفقیت ثبت شد";

    }

    private async Task DeletePart(PartDto partDto)
    {
        DeletePartCommand deletePartCommand = new DeletePartCommand()
            {
                CenterId = partDto.Center,
                PartID = partDto.PartID
            };
        await CenterRepository.DeletePart(deletePartCommand);
        resultMessage = "واحد مورد نظر حذف شد";

    }
}
