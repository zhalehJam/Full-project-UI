@using Blazored.Modal
@using Blazored.Modal.Services
@using Ticketing.Models.Centers.Command
@using Ticketing.Models.Centers.Dto
@using Ticketing.Models.Centers.Repository
@using Ticketing_UI.Shared.Component

@inject ICenterRepository CenterRepository

<div dir="rtl">
    <table>
        <tbody>
            <tr>
                <td>
                    کد کارگزینی مرکز:
                </td>
                <td>
                    <input disabled="@disable" type="number" @bind="@centerInfo.CenterID" @oninput="((e)=>centerInfo.CenterID=Convert.ToInt16(e.Value))" size="7" />
                </td>

                <td>
                    نام مرکز:
                </td>
                <td>
                    <input @bind="@centerInfo.CenterName" @oninput="((e)=>centerInfo.CenterName=Convert.ToString(e.Value))" size="10" />
                </td>
                <td></td>
                <td>
                    <button class="btn btn-success" @onclick="@(()=>Save())">ذخیره</button>
                </td>
            </tr>
        </tbody>
    </table>
    <div>

        <TableLayout Items="centerInfo.parts.ToList()" Context="partsiterm">
            <TableHeader>
                <th>نام واحد</th>
                <th>کد واحد</th>
                <th></th>
            </TableHeader>
            <TableFilter>
                <td>
                    <input @oninput="((e)=>partDtos.PartName=Convert.ToString(e.Value))" size="10" />

                </td>
                <td>
                    <input type="number" @oninput="((e)=>partDtos.PartID=Convert.ToInt16(e.Value))" size="10" />

                </td>
                <td>
                    <button class="btn btn-success" @onclick="@(()=>AddPart())">ذخیره واحد</button>
                </td>
            </TableFilter>
            <RowTemplate>
                @if(centerInfo.parts.Count() != 0)
                {
                    <td>@partsiterm.PartName</td>
                    <td>@partsiterm.PartID</td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(()=>DeletePart(partsiterm.PartID))">حذف واحد</button>
                    </td>
                }
            </RowTemplate>
        </TableLayout>

    </div>
</div>

@code {
    [Parameter]
    public CenterDto centerInfo { get; set; }

    public PartDto partDtos = new PartDto();
    [Parameter]
    public string Mode { get; set; }
    public bool disable { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] public BlazoredModalInstance blazoredModalInstance { get; set; }
    public ModalParameters Keys = new ModalParameters();

    public CenterDetail()
    {

    }
    protected override void OnInitialized()
    {

        if(Mode == "Create")
        {
            disable = false;
        }
        else if(Mode == "Edit")
            disable = true;
    }


    private async void Save()
    {
        if(Mode == "Create")
        {
            CreateCenter();
        }
        else if(Mode == "Edit")
        { 
            EditCenterName();
        }
        blazoredModalInstance.CloseAsync(ModalResult.Ok());
    }

    private async void CreateCenter()
    {
        string resultMessage = "";
        try
        {
            CreateCenterCommand createCenterCommand = new CreateCenterCommand()
                {
                    CenterID = centerInfo.CenterID,
                    CenterName = centerInfo.CenterName

                };
            await CenterRepository.CreateCenter(createCenterCommand);
            resultMessage = "مرکز مورد نظر با موفقیت ثبت شد";
            StateHasChanged();
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message.ToString();
        }
        finally
        {
            Keys.Add("Message", resultMessage);
            Keys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", Keys);
        }
    }
    private async void EditCenterName()
    {
        // TODO
        string resultMessage = "";
        try
        {
            EditCenterCommand editCenterCommand = new EditCenterCommand()
                {
                    Id = centerInfo.Id,
                    Name = centerInfo.CenterName
                };
            await CenterRepository.EditCenter(editCenterCommand);
            resultMessage = "مرکز مورد نظر با موفقیت ویرایش شد";
            StateHasChanged();
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message.ToString();
        }
        finally
        {
            Keys.Add("Message", resultMessage);
            Keys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", Keys);
        }
    }
    private async void AddPart()
    {
        string resultMessage = "";
        try
        {
            AddPartCommand addPartCommand = new AddPartCommand()
                {
                    CenterId = centerInfo.Id,
                    PartID = partDtos.PartID,
                    PartName = partDtos.PartName
                };
            await CenterRepository.AddPart(addPartCommand);
            centerInfo.parts.Add(partDtos);
            StateHasChanged();
            resultMessage = "پارت مورد نظر با موفقیت ثبت شد";

        }
        catch(Exception ex)
        {
            resultMessage = ex.Message;
        }
        finally
        {
            Keys.Add("Message", resultMessage);
            Keys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", Keys);
        }
    }
    private async void DeletePart(int partID)
    {
        string resultMessage = "";
        try
        {
            DeletePartCommand deletePartCommand = new DeletePartCommand()
                {
                    CenterId = centerInfo.Id,
                    PartID = partID
                };
            await CenterRepository.DeletePart(deletePartCommand);
            partDtos = centerInfo.parts.Where(n => n.PartID.Equals(partID)).FirstOrDefault();
            centerInfo.parts.Remove(partDtos);
            StateHasChanged();
            resultMessage = "پارت مورد نظر با موفقیت حذف شد";

        }
        catch(Exception ex)
        {
            resultMessage = ex.Message;
        }
        finally
        {
            Keys.Add("Message", resultMessage);
            Keys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", Keys);
        }
    }
}
