<<<<<<< Updated upstream
﻿@page "/PersonsList"
@using Blazored.Modal
@using Blazored.Modal.Services
=======
﻿@attribute [Authorize]

@page "/PersonsList"
@using Microsoft.AspNetCore.Authorization;
>>>>>>> Stashed changes
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Data;
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Ticketing.Models.Centers.Dto;
@using Ticketing.Models.Centers.Repository;
@using Ticketing.Models.Persons.Command
@using Ticketing.Models.Persons.Dto
@using Ticketing.Models.Persons.Repository
@using Ticketing_UI.Shared.Component

@inject IPersonRepository personRepository
@inject ICenterRepository centerRepository
@inject IHttpClientFactory ClientFactory
<div class="col-lg-3 col-md-3 col-sm-4" style=" padding: 10px; display:inline-block!important">لیست پرسنل</div>
<SfButton CssClass=".property-panel-section .property-panel-content col-lg-3 col-md-3 col-sm-4 display:inline-block!important " @onclick="@(async e => {NewPerson(); })">افزودن</SfButton>

<hr />
<div class="content-wrapper">
    <div class="row">
        <div class="control-section col-lg-12 card-control-section tile_layout">
            <div class="e-card-layout" style="display:inline-block!important ">

                @if(this.personDtos.Count == 0)
                {
                    <div class="e-error">
                        <div class="e-error-content">No results found. Please try a different search.</div>
                    </div>
                }
                else
                {
                    @foreach(PersonDto persondto in personDtos)
                    {
                        <div class="col-lg-3 col-md-3 col-sm-4" style=" padding: 10px; display:inline-block!important ">
                            <div id="card_sample_1" class="card_sample">
                                <SfCard>
                                    @{
                                        string contentText = persondto.PartName + "\n" + persondto.CenterName;
                                    }
                                    @*<CardImage Image="@persondto.ImageUrl" />*@
                                    <CardHeader Title="@persondto.PersonName" SubTitle="@persondto.PersonID.ToString()" />
                                    <CardContent Content="@contentText" />

                                    <CardFooter>
                                        <CardFooterContent>
                                            <SfButton CssClass="e-btn e-outline e-primary col-lg-5" @onclick="@(async e => {
                                                await EditButtonClick(persondto);  })">ویرایش</SfButton>
                                            <SfButton CssClass="e-btn e-outline e-primary col-lg-5">حذف</SfButton>

                                        </CardFooterContent>
                                    </CardFooter>
                                </SfCard>

                            </div>
                        </div>

                    }
                    <SfDialog @bind-Visible="dialogVisible" Width="250px" IsModal="true">
                        <DialogTemplates>
                            <Header>
                                Syncfusion Components inside Dialog
                            </Header>
                            <Content>
                                <SfTextBox @bind-Value="@selectedPerson.PersonName" Placeholder="نام"></SfTextBox>
                                <SfNumericTextBox Enabled="isNew" @bind-Value="@selectedPerson.PersonID" Placeholder="کد پرسنلی"></SfNumericTextBox>

                                <SfDropDownList Enabled="true" TValue="Guid" TItem="CenterDto" @bind-Value="@selectedCenterDto.Id" Placeholder="انتخاب دفتر" PopupHeight="auto" DataSource="@centerDtos">
                                    <DropDownListEvents TItem="CenterDto" TValue="Guid" ValueChange="ChangeCenter"></DropDownListEvents>
                                    <DropDownListFieldSettings Text="CenterName" Value="Id"></DropDownListFieldSettings>
                                </SfDropDownList>

                                <SfDropDownList Enabled="true" TValue="Guid " TItem="PartDto" @bind-Value="@selectedPartdto.Id" Placeholder="انتخاب واحد" PopupHeight="auto" DataSource="@partDtos">
                                    <DropDownListFieldSettings Text="PartName" Value="Id"></DropDownListFieldSettings>
                                </SfDropDownList>

                            </Content>
                        </DialogTemplates>
                        <DialogAnimationSettings Effect="animationEffect"></DialogAnimationSettings>
                        <DialogEvents Opened="OnOpen" Closed="OnClose"></DialogEvents>

                        <DialogButtons>
                            <DialogButton Content="OK" IsPrimary="true" OnClick="@(async e=> await SaveButtonClick(selectedPerson))"></DialogButton>
                            <DialogButton Content="Cancel" IsPrimary="true" OnClick="OnClose"></DialogButton>
                        </DialogButtons>
                    </SfDialog>
                }

            </div>
        </div>
    </div>
</div>

<style>
    .property-panel-section .property-panel-content td {
        padding: 0 0 15px 0;
    }

    .tile_layout.card-control-section .e-error {
        height: 100px;
        width: 100%;
    }

        .tile_layout.card-control-section .e-error .e-error-content {
            color: red;
            line-height: 100px;
            text-align: center;
        }

    .tile_layout.card-control-section .e-card .e-card-image {
        height: 180px;
        width: inherit;
    }

    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-header-title {
        font-size: 20px;
        font-family: Helvetica, 'Segoe UI';
        font-weight: bold;
    }

    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-sub-title {
        padding-top: 5px;
    }

    .tile_layout.card-control-section .e-card .e-card-content {
        padding-top: 10px;
        height: 50px;
    }

    #source_link {
        float: right;
        margin-right: 10px;
    }
</style>


@code {
    private List<PersonDto> personDtos = new List<PersonDto>();
    private PersonDto personDto = new PersonDto();
    private List<CenterDto> centerDtos = new List<CenterDto>();
    private List<PartDto> partDtos = new List<PartDto>();
    private CenterDto selectedCenterDto = new CenterDto();
    private PartDto selectedPartdto = new PartDto();
    [Inject] public NavigationManager NavigationManager { get; set; }
    [Inject] public IJSRuntime JsRuntime { get; set; }
    public string SearchValue { get; set; }
    public string SortingValue { get; set; }
    public string[] FilteringValue { get; set; }
    public List<string> SortingType = new List<string>() { "Ascending", "Descending" };
    public List<string> FilteringType = new List<string>() { "Client-side", "Server-side", "Front-end" };
    private PersonDto selectedPerson = new PersonDto();
    bool dialogVisible { get; set; } = false;
    private bool isNew = true;
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "450px", Width = "750px" };


    DialogEffect animationEffect = DialogEffect.None;
    public async Task OnReset()
    {
        this.SearchValue = null;
        this.SortingValue = null;
        this.FilteringValue = null;
        this.personDtos = await GetAllPersons();
    }

    protected override async Task OnInitializedAsync()
    {
        centerDtos = await centerRepository.GetAllCenters();
        await GetAllPersons();
    }

    private void OnOpen()
    {
        dialogVisible = true;
    }

    private void OnClose()
    {
        dialogVisible = false;
    }

    public void ChangeCenter(Syncfusion.Blazor.DropDowns.ChangeEventArgs<Guid, CenterDto> args)
    {
        partDtos = args.ItemData.parts;
    }

    private async Task<List<PersonDto>> GetAllPersons()
    {
        personDtos = await personRepository.GetAllPersons("1", "10");
        return personDtos;
    }

    private void NewPerson()
    {
        selectedPerson = new PersonDto();
        this.dialogVisible = true;
        isNew = true;

    }

    private async Task EditButtonClick(PersonDto personDto)
    {
        centerDtos = await centerRepository.GetAllCenters();
        selectedPerson = personDto;
        partDtos = centerDtos.Single(c => c.parts.Any(p => p.Id == selectedPerson.PartId)).parts;
        selectedPartdto = partDtos.Single(p => p.Id == selectedPerson.PartId);
        selectedCenterDto = centerDtos.Single(c => c.Id == selectedPartdto.Center);

        this.dialogVisible = true;
        isNew = false;
    }

    private async Task SaveButtonClick(PersonDto personDto)
    {
        try
        {
            if(isNew)
            {
                CreatePersonCommand createPersonCommand = new CreatePersonCommand()
                    {
                        Name = personDto.PersonName,
                        PartId = selectedPartdto.Id,
                        PersonID = personDto.PersonID
                    };
                await personRepository.CreatePerson(createPersonCommand);
            }
            else
            {
                UpdatePersonCommand updatePersonCommand = new UpdatePersonCommand()
                    {
                        Id = personDto.Id,
                        PartId = selectedPartdto.Id,
                        Name = personDto.PersonName
                    };
                await personRepository.UpdatePerson(updatePersonCommand);
            }
            MessageBoxKeys.Add("Message", "اطلاعات پرسنل مورد نظر ثبت شد");
            MessageBoxKeys.Add("MessageType", "Alert");
        }
        catch(Exception ex)
        {
            MessageBoxKeys.Add("Message", ex.Message.ToString());
            MessageBoxKeys.Add("MessageType", "Alert");
        }
        finally
        {

            OnClose();
            selectedPartdto = new PartDto();
            await GetAllPersons();
            StateHasChanged();
        }
    }
    private async void DeletePerson()
    {
        string resultMessage = "";
        try
        {
            DeletePersonCommand deletePersonCommand = new DeletePersonCommand()
                {
                    Id = personDto.Id
                };
            await personRepository.DeletePerson(deletePersonCommand);
            resultMessage = "پرسنل مورد نظر با موفقیت حذف شد";
            await GetAllPersons();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message.ToString();
        }
        finally
        {
            MessageBoxKeys.Add("Message", resultMessage);
            MessageBoxKeys.Add("MessageType", "Alert");
        }
    }


}
