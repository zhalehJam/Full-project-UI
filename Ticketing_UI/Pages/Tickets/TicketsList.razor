@page "/ticketsList"

@using Blazored.Modal
@using Blazored.Modal.Services
@using Ticketing.Models.Tickets.Command
@using Ticketing.Models.Tickets.Dto
@using Ticketing.Models.Tickets.Repository
@using Ticketing_UI.Shared.Component

@inject ITicketRepository ticketRepository
<div dir="rtl">
    <h3>تیکت ها</h3>
    <button class="btn btn-success" @onclick="@(() =>
{CreateTicket();GetTicketsByFilters();})">
        افزودن
    </button>

    <br />
    <br />
    جستجو:
    <input size="70" @bind="@Filter_PersonName" @oninput="@((e) => { Filter_PersonName=(string)e.Value.ToString(); GetTicketsByFilters();})" />

    <TableLayout Items="@ticketsByFilters" Context="ticketitems">
        <TableHeader>

            <th>نام شخص</th>
            <th>مرکز </th>
            <th>واحد </th>
            <th>نوع خطا </th>
            <th>نوع تیکت </th>
            <th>وضعیت تیکت</th>
            <th>جزئیات</th>
        </TableHeader>
        <RowTemplate>
            <td>@ticketitems.PersonName</td>
            <td>@ticketitems.PersonCenterName</td>
            <td>@ticketitems.ProgramName</td>
            <td>@ticketitems.ErrorTypeName</td>
            <td>@ticketitems.TicketTypeName</td>
            <td>@ticketitems.TicketConditionTypeName</td>
            <button class="btn btn-info" @onclick="@(() => {EditTicket(ticketitems);GetTicketsByFilters();})">جزئیات</button>
            <button class="btn-danger" @onclick="@(() => {;DeleteTicket(ticketitems);GetTicketsByFilters();})">حذف</button>

        </RowTemplate>

    </TableLayout>
    Page Number
    <input @bind="@PageNumber" @oninput="@((e)=>{PageNumber=e.Value.ToString();GetTicketsByFilters();})" size="5p" />
    Page Size
    <input @bind="@PageSize" @oninput="@((e)=>{PageSize=e.Value.ToString();GetTicketsByFilters();})" size="5p" />
</div>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    public ModalParameters Keys = new ModalParameters();
    public ModalParameters MessageBoxKeys = new ModalParameters();

    private List<TicketDto> ticketDtos = new List<TicketDto>();
    private List<TicketDto> ticketsByFilters = new List<TicketDto>();
    private string Filter_PersonName = "";

    private string PageSize = "10";
    private string PageNumber = "1";
    private TicketDetail ticketDetail = new TicketDetail();
    private TicketDto ticketDto = new TicketDto() { SupporterPersonID = 970086 };
    private string message = "";//=new string[1] ;

    protected override async Task OnInitializedAsync()
    {
        await GetAllTickets();

    }

    private async Task<List<TicketDto>> GetAllTickets()
    {
        Filter_PersonName = "";

        PageSize = "10";
        PageNumber = "1";
        ticketDtos = await ticketRepository.GetAllTickets(PageNumber, PageSize);//GetAllTickets();
        ticketsByFilters = ticketDtos;
        return ticketDtos;
    }
    private async Task<List<TicketDto>> GetTicketsByFilters()
    {
        ticketsByFilters = await ticketRepository.GetAllTickets(PageNumber, PageSize);
        if(!string.IsNullOrWhiteSpace(Filter_PersonName))
        {
            ticketsByFilters = ticketsByFilters.Where(n => (n.PersonID.ToString() + " "
            + n.PersonName + " " + n.PersonCenterName + " " + n.PersonPartName + " " + n.ProgramName + " "
            + n.ErrorTypeName + " " + n.ErrorDescription + " " + n.SolutionDescription + " "
            + n.TicketConditionTypeName + " " + n.TicketTime.ToString() + " " + n.TicketTypeName + " "
            + n.SupporterPersonID.ToString() + " " + n.SupporterPersonName
            ).Contains(Filter_PersonName)).ToList();
        }
        return ticketsByFilters;
    }
    private async void CreateTicket()
    {
        Keys.Add("mode", "Create");
        Keys.Add("TicketDtos", new TicketDto(){TicketTime=DateTime.Now});
        var modalresult = Modal.Show<TicketDetail>("تیکت جدید", Keys, new ModalOptions() { Size = ModalSize.Large }).Result;
        await GetAllTickets();
        StateHasChanged();
    }
    private async void EditTicket(TicketDto seletedticket)
    {
        Keys.Add("mode", "Edit");
        Keys.Add("TicketDtos", seletedticket);
        var modalresult = Modal.Show<TicketDetail>("ویرایش تیکت", Keys, new ModalOptions() { Size = ModalSize.Large }).Result;
        await GetAllTickets();
        StateHasChanged();
    }
    private async void DeleteTicket(TicketDto ticketDto)
    {
        string resultMessage = "";
        try
        {
            DeleteTicketCommand deleteTicketCommand = new DeleteTicketCommand();
            deleteTicketCommand.SupporterUser = 970086;
            deleteTicketCommand.Id = ticketDto.Id;

            await ticketRepository.DeleteTicket(deleteTicketCommand);
            resultMessage = "تیکت مورد نظر با موفقیت حذف شد";
            await GetAllTickets();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message.ToString();
        }
        finally
        {
            MessageBoxKeys.Add("Message", resultMessage);
            MessageBoxKeys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", MessageBoxKeys);
        }
    }

}
