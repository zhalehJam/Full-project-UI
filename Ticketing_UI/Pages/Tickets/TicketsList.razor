@attribute [Authorize]

@page "/ticketsList"
<<<<<<< Updated upstream

@using Blazored.Modal
@using Blazored.Modal.Services
@using Framework.Pagination;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using Newtonsoft.Json;
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Action = Syncfusion.Blazor.Grids.Action
@using Syncfusion.Blazor.Popups
@using Ticketing.Cilient.Contracts.Ticket;
@using Ticketing.Client.Contracts.Persons;
@using Ticketing.Models.Persons.Dto;
@using Ticketing.Models.Persons.Repository;
@using Ticketing.Models.Programs.Dto;
@using Ticketing.Models.Programs.Repository;
@using Ticketing.Models.Tickets.Command
@using Ticketing.Models.Tickets.Dto
@using Ticketing.Models.Tickets.Query;
@using Ticketing.Models.Tickets.Repository
@using Ticketing_UI.Shared.Component
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject ITicketRepository ticketRepository
@inject IPersonRepository personRepository
@inject IProgramRepository programRepository
@inject AuthenticationStateProvider authenticationStateProvider

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="e-panel-header row col-lg-3 col-md-3 col-sm-3" style="margin-right:1px">
            <SfDateRangePicker TValue="DateTime" Placeholder="Choose a range" @bind-StartDate="@fromDate" @bind-EndDate="@toDate" ShowClearButton="true">
                <DateRangePickerEvents TValue="DateTime" ValueChange="ValueChangeHandler"></DateRangePickerEvents>
            </SfDateRangePicker>
        </div>
        <div class="row">
            <EditForm Model="@ticketDtos">
                <DataAnnotationsValidator />
                <SfGrid @ref="Grid" AllowGrouping="true" DataSource="@ticketDtos" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="@(new string[]{"Add", "Edit" ,"Delete" ,"Search" })" style="width:auto;padding-right: 1px;padding-left: 1px;">
                    <GridPageSettings PageSize="10">
                        <Template Context="PagerTemp">
                            <div class="PagerTemplate">

                                <div class="@($"e-next e-icons e-icon-next   align-icons")" hidden="@DisableBackIcon" @onclick="ShowPreviousPage" title="Go to previous page"></div>
                                <div>
                                    <div id="totalpages" class="textbox" @oncuechange="@(()=>ValidateFirst())">صفحه @pageNo2 از @metaData.TotalPages</div>
                                </div>
                                <div class="@($"e-prev e-icons e-icon-prev  align-icons")" hidden="@DisableForwardIcon" @onclick="ShowNextPage" title="Go to next page"></div>
                            </div>
                        </Template>
                    </GridPageSettings>
                    <GridEvents TValue="TicketDto" OnActionBegin="ActionBeginHandler" OnActionFailure="ActionFailureHandler"></GridEvents>
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams" ShowConfirmDialog="true">
                        <HeaderTemplate Context="another_name3">
                            @{
                                var text = "اطلاعات تیکت";
                                <span>@text</span>
                            }
                        </HeaderTemplate>
                        <Template Context="another_name">
                            @{
                                var ticket = (another_name as TicketDto);
                                if(ticket?.SupporterPersonID == 0)
                                {
                                    ticket.SupporterPersonID = supporterInfo.PersonID;
                                    ticket.SupporterPersonName = supporterInfo.PersonName ?? "";
                                }
                            }

                            <div class="row col-md-12">
                                <div class="row col-md-5" style="display:inline-block!important;margin-right:2px">
                                    <SfTextBox ID="SupporterPersonName" @onkeypress="@((e)=>Setkeyboardkeyevent(e))" @bind-Value="@(ticket.SupporterPersonName)" Enabled="false" FloatLabelType="FloatLabelType.Auto" Placeholder="نام پشتیبان"></SfTextBox>
                                </div>
                                <div class="row col-md-5" style="display:inline-block!important;margin-right:2px">
                                    <SfDropDownList ID="ProgramName"
                                                    TItem="ProgramDto"
                                                    @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                                    @bind-Value="@(ticket.ProgramId)"
                                                    Enabled="@Check"
                                                    IndexChanged="((e)=>{ ticket.ProgramName=programDtos.Single(t=>t.Id==ticket.ProgramId).ProgamName; Grid.PreventRender(false);})"
                                                    TValue="Guid"
                                                    DataSource="@programDtos"
                                                    FloatLabelType="FloatLabelType.Auto"
                                                    PopupHeight="230px"
                                                    Placeholder="نام برنامه">
                                        <DropDownListFieldSettings Value="Id" Text="ProgamName">
                                        </DropDownListFieldSettings>
                                    </SfDropDownList>

                                    <ValidationMessage For="@(() => ticket.ProgramName)" />
                                </div>
                            </div>
                            <hr />
                            <div class="col-md-12">
                                <div class="col-md-5" style="display:inline-block!important">
                                    <SfNumericTextBox @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                                      OnChange="@(async(e)=>{var t = await SetpersonInfo2(e);
                                                                         ticket.PersonName = t.PersonName??"";
                                                                         ticket.PersonCenterName= t.CenterName??"";
                                                                         ticket.PersonPartId=t.PartId;
                                                                         ticket.PersonPartName=t.PartName??"";
                                                                         })"
                                                      @bind-Value="@ticket.PersonID"
                                                      Placeholder="کد پرسنلی تماس گیرنده "
                                                      Decimals="0"
                                                      FloatLabelType="FloatLabelType.Auto"
                                                      CssClass="e-corner"></SfNumericTextBox>
                                    <ValidationMessage For="@(() => ticket.PersonID)" />
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="col-md-5" style="display:inline-block!important">
                                    <SfTextBox ID="ticketpersonName" @onkeypress="@((e)=>Setkeyboardkeyevent(e))" Enabled="false" @bind-Value="@ticket.PersonName" FloatLabelType="FloatLabelType.Auto" Placeholder="نام"></SfTextBox>
                                </div>

                                <div class="col-md-2" style="display:inline-block!important">
                                    <SfTextBox ID="PersonCenterName" @onkeypress="@((e)=>Setkeyboardkeyevent(e))" Enabled="false" @bind-Value="@(ticket.PersonCenterName)" FloatLabelType="FloatLabelType.Auto" Placeholder="دفتر"></SfTextBox>
                                </div>
                                <div class="col-md-2" style="display:inline-block!important">
                                    <SfTextBox ID="PersonPartName" @onkeypress="@((e)=>Setkeyboardkeyevent(e))" Enabled="false" @bind-Value="@(ticket.PersonPartName)" FloatLabelType="FloatLabelType.Auto" Placeholder="واحد"></SfTextBox>
                                </div>

                            </div>
                            <hr />
                            <div class="col-md-12">
                                <div class="col-md-5" style="display:inline-block!important">
                                    <SfDropDownList ID="ErrorTypeName"
                                                    @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                                    TItem="KeyValuePair<int,string>"
                                                    IndexChanged="((e)=>{ ticket.ErrorTypeName=errorTypes.Single(t=>t.Key==ticket.ErrorTypeid).Value; Grid.PreventRender(false);})"
                                                    @bind-Value="@(ticket.ErrorTypeid)"
                                                    TValue="int"
                                                    DataSource="@errorTypes"
                                                    FloatLabelType="FloatLabelType.Auto"
                                                    PopupHeight="230px"
                                                    Placeholder="نوع خطا">
                                        <DropDownListFieldSettings Value="Key" Text="Value"></DropDownListFieldSettings>
                                    </SfDropDownList>

                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="col-md-5" style="display:inline-block!important">
                                    <SfTextBox ID="ErrorDescription" @onkeypress="@((e)=>Setkeyboardkeyevent(e))" @bind-Value="@(ticket.ErrorDescription)" FloatLabelType="FloatLabelType.Auto" Format="0" Placeholder="شرح خطا"></SfTextBox>
                                </div>
                                <div class="col-md-5" style="display:inline-block!important">
                                    <SfTextBox ID="SolutionDescription" @onkeypress="@((e)=>Setkeyboardkeyevent(e))" @bind-Value="@(ticket.SolutionDescription)" FloatLabelType="FloatLabelType.Auto" Placeholder="شرح راهکار"></SfTextBox>
                                </div>
                            </div>
                            <hr />

                            <div>
                                <div class="col-md-5" style="display:inline-block!important">
                                    <SfDropDownList ID="TicketTypeName"
                                                    @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                                    TItem="KeyValuePair<int,string>"
                                                    IndexChanged="((e)=>{ ticket.TicketTypeName=TicketTypes.Single(t=>t.Key==ticket.Typeid).Value; Grid.PreventRender(false);})"
                                                    @bind-Value="@(ticket.Typeid)"
                                                    TValue="int"
                                                    DataSource="@TicketTypes"
                                                    FloatLabelType="FloatLabelType.Auto"
                                                    PopupHeight="230px"
                                                    Placeholder="نوع تیکت">
                                        <DropDownListFieldSettings Value="Key" Text="Value">
                                        </DropDownListFieldSettings>
                                    </SfDropDownList>

                                </div>
                            </div>
                            <div>
                                <div class="col-md-5" style="display:inline-block!important">
                                    <SfDatePicker TValue="DateTime" @onkeypress="@((e)=>Setkeyboardkeyevent(e))" @bind-Value="@(ticket.TicketTime)" FloatLabelType="FloatLabelType.Auto" Placeholder="روز"></SfDatePicker>
                                </div>
                                <div class="col-md-5" style="display:inline-block!important">
                                    <SfTimePicker TValue="DateTime" @onkeypress="@((e)=>Setkeyboardkeyevent(e))" @bind-Value="@(ticket.TicketTime)" Step=5 ShowClearButton="true" FloatLabelType="FloatLabelType.Auto" Placeholder="ساعت"></SfTimePicker>
                                </div>

                            </div>
                            <div>
                                <div class="col-md-5" style="display:inline-block!important">
                                    <SfDropDownList ID="TicketConditionTypeName"
                                                    @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                                    TItem="KeyValuePair<int,string>"
                                                    IndexChanged="((e)=>{ ticket.TicketConditionTypeName=TicketConditions.Single(t=>t.Key==ticket.TicketConditionid).Value; Grid.PreventRender(false);})"
                                                    @bind-Value="@(ticket.TicketConditionid)"
                                                    TValue="int"
                                                    DataSource="@TicketConditions"
                                                    PopupHeight="230px"
                                                    FloatLabelType="FloatLabelType.Auto" Placeholder="وضعیت">
                                        <DropDownListFieldSettings Value="Key" Text="Value">
                                        </DropDownListFieldSettings>
                                    </SfDropDownList>

                                </div>
                            </div>
                        </Template>

                    </GridEditSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(TicketDto.Id) Visible=false HeaderText="ID" IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="140"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.PersonCenterName) HeaderText="مرکز" TextAlign="TextAlign.Right" Width="140"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.PersonPartName) HeaderText="واحد" TextAlign="TextAlign.Right" Width="140"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.SupporterPersonName) HeaderText="پشتیبان" Visible="@(UserIsAdmin)" ValidationRules="@(new ValidationRules{ Required=true})" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.ProgramName) HeaderText="برنامه" ValidationRules="@(new ValidationRules{ Required=true})" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.ErrorTypeName) HeaderText="نوع خطا" EditType="EditType.DropDownEdit" TextAlign="TextAlign.Right" Width="160"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.TicketTypeName) HeaderText="نوع تیکت" EditType="EditType.DropDownEdit" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.TicketConditionTypeName) HeaderText="وضعیت" EditType="EditType.DropDownEdit" Width="160">
                            <Template Context="another_name2">
                                @{
                                    var catagory = (another_name2 as TicketDto);
                                    @if(catagory.TicketConditionTypeName == "OnGoing")
                                    {
                                        <div class="title-temp2 inprogress">
                                            <span class="inprogress-font">@catagory.TicketConditionTypeName</span>
                                        </div>
                                    }
                                    @if(catagory.TicketConditionTypeName == "Finish")
                                    {
                                        <div class="title-temp2 completed">
                                            <span class="completed-font">@catagory.TicketConditionTypeName</span>
                                        </div>
                                    }
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn HeaderText="عملیات" Width="150">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat"} )"></GridCommandColumn>

                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>

            </EditForm>

        </div>
    </div>

    <SfDialog @bind-Visible="warningMessageVisiable" Width="20%">
        <DialogTemplates>
            <Header>
                حذف
            </Header>
            <Content>
                <div class="content-wrapper">
                    <div class="row">
                        از حذف این اطلاعات مطمئن هستید؟
                    </div>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" OnClick="@(async e=> await DeleteTicket(supporterInfo.PersonID,selectedTicketDto.Id))"></DialogButton>
            <DialogButton Content="Cancel" IsPrimary="true" OnClick="OnClose"></DialogButton>
        </DialogButtons>
    </SfDialog>

    <div class="col-lg-4 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="right" Y="Bottom"></ToastPosition>
        </SfToast>
    </div>

</div>
<style>
    .PagerTemplate {
        width: 1000px;
        height: 64px;
        left: 183px;
        top: 615px;
        border-radius: 0px;
    }

    .textbox {
        margin-top: 9px;
        margin-bottom: 9px;
        margin-right: 2px;
        text-align: center;
    }

    .textboxfontcolor {
        color: #000000;
    }

    .add-border {
        border: #ddd 1px solid;
    }

    .textAlign .e-numerictextbox {
        text-align: center;
    }

    .align-icons {
        margin-top: 9px;
        margin-bottom: 9px;
        margin-right: 16px;
        cursor: pointer;
    }

    .e-firstpage {
        margin-left: 6px;
    }

    .e-next {
        margin-left: 16px;
    }

    .disableFirst, .disableLast, .disableFront, .disableBack {
        pointer-events: none;
        opacity: 0.3;
    }
</style>
<style type="text/css" class="cssStyles">
    .title-temp1, .title-temp2 {
        border-radius: 2px;
        padding: 2px 0px 3px 0px;
        margin: 10px 0px;
    }

    .col-md-6 {
        width: 50% !important;
    }

    .title-temp1 {
        width: 64px;
        text-align: left;
    }

    .title-temp2 {
        width: 95px;
        text-align: center;
    }

    .font {
        font-size: 11px;
        font-weight: 400;
        font-style: normal;
        height: 9px;
    }

    .priority {
        height: 16px;
        width: 16px;
    }

    .inprogress {
        background: #7fddeb9e;
    }

    .inprogress-font {
        color: #03659C;
    }

    .completed {
        background: #fee07f;
    }

    .completed-font {
        color: #067939;
    }

    .blocked {
        background: #FFF1F1;
    }

    .blocked-font {
        color: #B40000;
    }

    .wontfix {
        background: #FFEFE9;
    }

    .wontfix-font {
        color: #993105;
    }

    .notreproduced {
        background: #FFF8E1;
    }

    .notreproduced-font {
        color: #926A04;
    }

    .bydesign {
        background: #ECFEFF;
    }

    .bydesign-font {
        color: #027C85;
    }
</style>

@code {

    private List<TicketDto>? ticketDtos { get; set; } = new List<TicketDto>();
    private List<ProgramDto> programDtos { get; set; } = new List<ProgramDto>();
    private TicketDto selectedTicketDto { get; set; } = new TicketDto();

    private DialogSettings DialogParams = new DialogSettings { MinHeight = "450px", Width = "750px" };
    private PersonDto supporterInfo = new PersonDto();

    private SfGrid<TicketDto> Grid { get; set; }
    private GridPageSettings GridPage { get; set; } = new GridPageSettings();
    private int pageNo = 1;
    private int pageNo2 = 1;

    public int totalPages { get; set; }
    public int previouspageNo { get; set; }
    public bool DisableBackIcon = false;
    public bool DisableForwardIcon = false;
    public bool DisableFirstIcon = false;
    public bool DisableLastIcon = false;

    private bool messageVisiable = false;
    private bool Check = false;
    private bool flag = false;
    private bool alertVisible = false;
    private bool warningMessageVisiable = false;
    private SfToast ToastObj;
    private ToastModel toastModel = new ToastModel();
    private bool UserIsAdmin = false;

    private TicketQueryParameters parameters { get; set; } = new TicketQueryParameters();
    private MetaData metaData { get; set; } = new MetaData();
    public DateTime fromDate { get; set; } = DateTime.Now.AddMonths(-1);
    public DateTime toDate { get; set; } = DateTime.Now;

    private List<KeyValuePair<int, string>> errorTypes { get; set; } = Enum.GetValues(typeof(ErrorType)).Cast<ErrorType>().ToList()
                                                                           .Select(s => new { Key = (int)s, Value = s.ToString() })
                                                                           .ToDictionary(d => d.Key, d => d.Value).ToList();
    private List<KeyValuePair<int, string>> TicketTypes { get; set; } = Enum.GetValues(typeof(TicketType)).Cast<TicketType>().ToList()
                                                                            .Select(s => new { Key = (int)s, Value = s.ToString() })
                                                                            .ToDictionary(d => d.Key, d => d.Value).ToList();
    private List<KeyValuePair<int, string>> TicketConditions { get; set; } = Enum.GetValues(typeof(TicketCondition)).Cast<TicketCondition>().ToList()
                                                                           .Select(s => new { Key = (int)s, Value = s.ToString() })
                                                                           .ToDictionary(d => d.Key, d => d.Value).ToList();


    protected override async Task OnInitializedAsync()
    {
        pageNo = 1;
        pageNo2 = 1;
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        supporterInfo = await GetPersonInfo(Convert.ToInt32(user.Identity?.Name));
        programDtos = await programRepository.GetSupporterProgramsList(supporterInfo.PersonID);
        if(supporterInfo.PersonRole == RoleType.Admin)
        {
            UserIsAdmin = true;
        }
        await GetAllTickets();
    }

    public async Task ValueChangeHandler(RangePickerEventArgs<DateTime> args)
    {
        fromDate = args.StartDate;
        toDate = args.EndDate;
        await GetAllTickets();
    }

    public string ValidateFirst()
    {
        if(DisableFirstIcon)
        {
            return "disableFirst";
        }
        return "";
    }
    public string ValidateLast()
    {
        if(DisableLastIcon)
        {
            return "disableLast";
        }
        return "";
    }
    public string ValidateForward()
    {
        if(DisableForwardIcon)
        {
            return "disableFront";
        }
        return "";
    }
    public string ValidateBack()
    {
        if(DisableBackIcon)
        {
            return "disableBack";
        }
        return "";
    }
    public async Task ShowNextPage()
    {
        ++pageNo2;
        await GetAllTickets();
    }
    public async Task ShowPreviousPage()
    {
        --pageNo2;
        await GetAllTickets();
    }
    public async Task ShowFirstPage()
    {
        await Grid.GoToPageAsync(1);
    }
    public async Task ShowLastPage()
    {
        await Grid.GoToPageAsync(totalPages);
    }

    public void ActionFailureHandler(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {
        var s = JsonConvert.DeserializeObject<Dictionary<string, object>>(JsonConvert.SerializeObject(args.Error));
    }

    private async Task<PersonDto> GetPersonInfo(int personCode)
    {
        return await personRepository.GetPersonInfoByPersonelCode(personCode);
    }

    public async Task ActionBeginHandler(ActionEventArgs<TicketDto> Args)
    {
        string rType = Args.RequestType.ToString();
        if(flag)
        {
            Args.Cancel = true;
            flag = false;
        }
        else
        {
            if(rType == "Save")
            {
                try
                {
                    switch(Args.Action)
                    {
                        case "Add":
                            await CreateTicket(Args.Data);
                            break;

                        case "Edit":
                            await EditTicket(Args.Data);
                            break;
                    }
                }
                catch(Exception ex)
                {
                    toastModel = new ToastModel { Title = "Error!", Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
                    Args.Cancel = true;

                }
                finally
                {
                    Args.Cancel = true;
                    ticketDtos = await GetAllTickets();
                    await this.ToastObj.ShowAsync(toastModel);

                }
            }
            else if(rType == "Delete")
            {
                try
                {
                    ClickDeleteButton(Args.RowData);

                }
                catch(Exception ex)
                {
                    var t = new ToastModel { Title = "خطا!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
                    await this.ToastObj.ShowAsync(t);
                    Args.Cancel = true;
                }
                finally
                {
                    await GetAllTickets();
                    StateHasChanged();
                }

            }
            else if(rType == "Refresh")
            {
                Grid.PreventRender(false);
            }
            else if(rType == "Add")
            {
                Check = true;
            }

        }
    }

    private async Task<List<TicketDto>> GetAllTickets()
    {
        parameters.fromDate = fromDate;
        parameters.toDate = toDate;
        parameters.PageNumber = pageNo2;
        GridPage.CurrentPage = pageNo2;
        var response = await ticketRepository.GetUserTicketsByDateRage(parameters);
        ticketDtos = response.Items;
        metaData = response.MetaData;

        DisableBackIcon = false;
        DisableForwardIcon = false;

        if(pageNo2 <= 1)
            DisableBackIcon = true;
        if(pageNo2 >= metaData.TotalPages)
            DisableForwardIcon = true;


        StateHasChanged();
        return ticketDtos;
    }

    private void ClickDeleteButton(TicketDto ticketDto)
    {
        selectedTicketDto = ticketDto;
        warningMessageVisiable = true;
    }

    private void Setkeyboardkeyevent(KeyboardEventArgs args)
    {
        if(args.Key == "Enter")
            flag = true;
    }

    private async Task<PersonDto> SetpersonInfo2(ChangeEventArgs args)
    {
        var personInfos = new PersonDto();
        try
        {
            personInfos = await personRepository.GetPersonInfoByPersonelCode(Convert.ToInt32(args.Value));
            Grid.PreventRender(false);
            return personInfos;
        }
        catch(Exception ex)
        {
            toastModel = new ToastModel { Title = "Error!", Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" };

        }
        return personInfos;
    }

    private async Task CreateTicket(TicketDto ticketDto)
    {
        CreateTicketCommand createTicketCommand = new CreateTicketCommand()
            {
                TicketTime = ticketDto.TicketTime,
                TicketCondition = (TicketCondition)ticketDto.TicketConditionid,
                ErrorDiscription = ticketDto.ErrorDescription ?? "",
                ErrorType = (ErrorType)ticketDto.ErrorTypeid,
                SolutionDiscription = ticketDto.SolutionDescription ?? "",
                SupporterPersonID = ticketDto.SupporterPersonID,
                ProgramId = ticketDto.ProgramId,
                PersonID = ticketDto.PersonID,
                Type = (TicketType)ticketDto.Typeid
            };
        await ticketRepository.CreateNewTicket(createTicketCommand);
        toastModel = new ToastModel { Title = "Success!", Content = "تیکت مورد نظر ثبت شد", CssClass = "e-toast-success", Icon = "e-success toast-icons" };

    }

    private async Task EditTicket(TicketDto seletedticket)
    {

        UpdateTicketCommand updateTicketCommand = new UpdateTicketCommand()
            {
                Id = seletedticket.Id,
                TicketTime = seletedticket.TicketTime,
                TicketCondition = (TicketCondition)seletedticket.TicketConditionid,
                ErrorDiscription = seletedticket.ErrorDescription ?? "",
                ErrorType = (ErrorType)errorTypes.Where(b => b.Value == seletedticket.ErrorTypeName).Select(t => t.Key).First(),
                SolutionDiscription = seletedticket.SolutionDescription ?? "",
                ProgramId = seletedticket.ProgramId,
                PersonID = seletedticket.PersonID,
                Type = (TicketType)seletedticket.Typeid,
                EditorPersonID = supporterInfo.PersonID
            };
        await ticketRepository.UpdateTicket(updateTicketCommand);

        toastModel = new ToastModel { Title = "Success!", Content = "تیکت مورد نظر با موفقیت ویرایش شد", CssClass = "e-toast-success", Icon = "e-success toast-icons" };

        await GetAllTickets();
    }

    private async Task DeleteTicket(int userId, Guid Id)
    {

        try
        {
            DeleteTicketCommand deleteTicketCommand = new DeleteTicketCommand();
            deleteTicketCommand.SupporterUser = userId;
            deleteTicketCommand.Id = Id;
            await ticketRepository.DeleteTicket(deleteTicketCommand);
            toastModel = new ToastModel { Title = "Success!", Content = " تیکت مورد نظر حذف شد", CssClass = "e-toast-success", Icon = "e-success toast-icons" };
        }
        catch(Exception ex)
        {
            toastModel = new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
        }
        finally
        {
            await this.ToastObj.ShowAsync(toastModel);
            warningMessageVisiable = false;
            await GetAllTickets();
            StateHasChanged();
            Grid.PreventRender(false);
            await Grid.Refresh();
        }
    }
    private void OnClose()
    {
        warningMessageVisiable = false;
    }
} 