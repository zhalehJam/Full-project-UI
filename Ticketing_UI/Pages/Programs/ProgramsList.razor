@page "/programsList"
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Popups;
@using Ticketing.Models.Programs.Command
@using Ticketing.Models.Programs.Dto
@using Ticketing.Models.Programs.Repository
@using Ticketing_UI.Shared.Component

@inject SfDialogService DialogService

@inject IProgramRepository programRepository
@inject IHttpClientFactory ClientFactory
@*@inject IModalService modal*@

<style>
    .e-card {
        margin-bottom: 10px !important;
    }

    #predefinedDialogDefault {
        margin: 25px 0 0 15px;
    }

        #predefinedDialogDefault .e-btn {
            margin-right: 5px;
        }

        #predefinedDialogDefault .status {
            margin-top: 20px;
            font-size: 16px;
            display: block;
        }
</style>


<h3>لیست برنامه ها</h3>


<div class="control-section">
    <div class="row col-lg-12">

        @foreach(var programcard in programDtos)
        {
            <div class="col-lg-4 d-inline-block">
                <SfCard>
                    <CardContent>
                        <div class="row col-md-12 mb-2">

                            <div class="e-text-wrap col-md-4 d-inline-block">@(programcard.ProgamName)</div>
                            @if(string.IsNullOrWhiteSpace(programcard.ProgramLink))
                            {
                                programcard.ProgramLink = ".....";
                            }
                            <div class="e-text-wrap col-md-4 d-inline-block" style="text-align:center !important">@(programcard.ProgramLink)</div>

                            <div id="predefinedDialogDefault" class="col-md-2 d-inline-block"  style="align-self:end !important">
                                <SfButton CssClass="e-primary e-outline e-primary d-inline-block align=left" @onclick="@PromptBtn">افزودن</SfButton>
                                <span class="status">
                                    @DialogStatus
                                </span>
                            </div>
                        </div>
                        @if(programcard.Supporters.Count == 0)
                        {
                            programcard.Supporters = new List<ProgramSupporterDto>();
                        }

                        <SfListView Id="List" DataSource="@programcard.Supporters" CssClass="e-list-template" SortOrder="Syncfusion.Blazor.Lists.SortOrder.Ascending">
                            <ListViewFieldSettings TValue="ProgramSupporterDto" Id="Id" Text="ProgramName"></ListViewFieldSettings>
                            <ListViewTemplates TValue="ProgramSupporterDto">
                                <Template>
                                    <div class="e-list-wrapper col-md-12  d-inline-block  e-list-multi-line e-list-avatar">

                                        <div class="e-list-content col-md-4  d-inline-block  e-card-online">
                                            @((context as ProgramSupporterDto).SupporterName)
                                        </div>
                                        <div class=" col-md-4  d-inline-block align-self-left !important">
                                            <SfButton CssClass="e-btn e-outline col-md-4  e-primary d-inline-block align=left">حذف</SfButton>

                                        </div>
                                    </div>
                                </Template>
                            </ListViewTemplates>
                        </SfListView>


                    </CardContent>
                </SfCard>
            </div>
        }

    </div>
</div>



@code {
    [CascadingParameter] public IModalService Modal { get; set; }


    public ModalParameters Keys = new ModalParameters();
    public ModalParameters MessageBoxKeys = new ModalParameters();

    private List<ProgramDto> programDtos = new List<ProgramDto>();
    private ProgramDto programDto = new ProgramDto();
    private int showdetail = 0;
    private List<ProgramSupporterDto> programSupporterDtos = new List<ProgramSupporterDto>();

    private SfGrid<ProgramDto> Grid { get; set; }
    private SfGrid<ProgramSupporterDto> ChildGrid { get; set; }
    private GridPageSettings GridPage { get; set; }
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "450px", Width = "750px" };
    private string resultMessage = "";
    private bool flag = false;
    private Boolean Check = false;

    protected async override Task OnInitializedAsync()
    {
        await GetAllPrograms();
    }

    private async Task<List<ProgramDto>> GetAllPrograms()
    {
        programDtos = await programRepository.GetAllProgram();
        return programDtos; 
    }

    private async Task<List<ProgramSupporterDto>> GetSupporters()
    {
        programSupporterDtos = programDtos.Select(n => n.Supporters.ToList()).FirstOrDefault();
        ModalParameters parameters = new ModalParameters();
        parameters.Add("supporters", programSupporterDtos);
        FechSupporterInfo fechSupporterInfo = new FechSupporterInfo();
        return programSupporterDtos;

    }

    private async Task DeleteProgram(Guid Id)
    {
        string resultMessage = "";
        try
        {
            DeleteProgramCommand deleteProgramCommand = new DeleteProgramCommand()
                {
                    Id = Id
                };
            await programRepository.DeleteProgram(deleteProgramCommand);
            await GetAllPrograms();
            resultMessage = "برنامه مورد نظر با موفقیت حذف شد";
            StateHasChanged();
        }
        catch(Exception ex)
        {
            resultMessage = ex.Message.ToString();
        }
        finally
        {
            MessageBoxKeys.Add("Message", resultMessage);
            MessageBoxKeys.Add("MessageType", "Alert");
            Modal.Show<MessageBox>("", MessageBoxKeys);
        }
    }

    public async Task ActionBeginHandler(ActionEventArgs<ProgramSupporterDto> Args)
    {
        string rType = Args.RequestType.ToString();
        if(flag)
        {
            Args.Cancel = true;
            flag = false;
        }
        else
        {
            if(rType == "Save")
            {
                try
                {
                    switch(Args.Action)
                    {
                        case "Add":
                            //await CreateTicket(Args.Data);
                            break;

                        case "Edit":
                            await GetSupporters();
                            break;
                    }
                }
                catch(Exception ex)
                {
                    resultMessage = ex.Message.ToString();
                    Args.Cancel = true;
                }
                finally
                {
                    Args.Cancel = true;
                    //Grid.PreventRender(true);
                    programDtos = await GetAllPrograms();
                    MessageBoxKeys.Add("Message", resultMessage);
                    MessageBoxKeys.Add("MessageType", "Alert");
                    Modal.Show<MessageBox>("", MessageBoxKeys);
                }
            }
            else if(rType == "Delete")
            {
                try
                {
                    await DeleteProgram(Args.RowData.Id);
                    StateHasChanged();
                    Grid.PreventRender(false);
                }
                catch(Exception ex)
                {
                    resultMessage = ex.Message.ToString();
                    Args.Cancel = true;
                }
                finally
                {
                    MessageBoxKeys.Add("Message", resultMessage);
                    MessageBoxKeys.Add("MessageType", "Alert");
                    Modal.Show<MessageBox>("", MessageBoxKeys);
                    await GetAllPrograms();
                    StateHasChanged();
                    //Grid.PreventRender(false);
                    //await Grid.Refresh();
                }

            }
            else if(rType == "Refresh")
            {
                Grid.PreventRender(false);
            }
            else if(rType == "Add")
            {
                Check = true;
            }

        }
    }


    private string DialogStatus { get; set; }
    private async Task PromptBtn()
    {
        this.DialogStatus = " ";
        string promptText = await DialogService.PromptAsync("Enter your name:", "Join Chat Group");
        if(promptText == null)
        {
            this.DialogStatus = "The user the canceled dialog box.";
        }
        else
        {
            this.DialogStatus = $"The user's input is returned as \"{promptText}\".";
        }
    }

    private void Setkeyboardkeyevent(KeyboardEventArgs args)
    {
        if(args.Key == "Enter")
            flag = true;
    }
}
