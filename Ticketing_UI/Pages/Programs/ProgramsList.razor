@page "/programsList"
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Ticketing.Models.Persons.Dto;
@using Ticketing.Models.Persons.Repository;
@using Ticketing.Models.Programs.Command
@using Ticketing.Models.Programs.Dto
@using Ticketing.Models.Programs.Repository
@using Ticketing_UI.Shared.Component

@inject IPersonRepository personRepository

@inject IProgramRepository programRepository
@inject IHttpClientFactory ClientFactory
@*@inject IModalService modal*@

<div  class="col-lg-12 control-section">
    <HeadContent> پرسنل</HeadContent>
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="Grid" AllowGrouping="true" DataSource="@programDtos" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="@(new string[]{"Add", "Edit" ,"Delete" ,"Search" })" style="width:auto;padding-right: 1px;padding-left: 1px;">
                <GridPageSettings @ref="GridPage" PageSize="10"></GridPageSettings>
                <GridEvents TValue="ProgramDto" OnActionBegin="ActionBeginHandler"></GridEvents>
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams" ShowConfirmDialog="true">
                    <HeaderTemplate>
                        <span> اطلاعات</span>
                    </HeaderTemplate>
                </GridEditSettings>
                <GridTemplates>
                    <DetailTemplate>
                        @{
                            var programdto = (context as ProgramDto) ?? new ProgramDto();
                            programSupporterDtos = programdto?.Supporters;
                            string gid = programdto.Id.ToString();
                        }
                        <div class="content-wrapper">

                            <SfGrid @ref="ChildGrid" DataSource="@programSupporterDtos" AllowSorting="true" Toolbar="@(new string[]{"Add"})">
                                <GridEvents TValue="ProgramSupporterDto" OnActionBegin="@((e)=>ChildGridActionHandler(e,programdto.Id))"></GridEvents>
                                <GridEditSettings AllowAdding="true" AllowDeleting="true" Mode="@EditMode.Dialog" Dialog="DialogParams" ShowConfirmDialog="true">


                                    <Template Context="ChildName">
                                        <SfTextBox ID="ProgramId" Enabled="false" @bind-Value="@(gid)" FloatLabelType="FloatLabelType.Auto" Placeholder="برنامه"></SfTextBox>
                                        <SfNumericTextBox ID="SupporterpersonID"
                                                          @bind-Value="@sellectedSupporterDto.SupporterpersonID"
                                                          Placeholder="کد پرسنلی پشتیبان"
                                                          @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                                          FloatLabelType="FloatLabelType.Auto"
                                                          OnChange="@(async(e)=>{var personinfo = await SetpersonInfo(e);
                                                                                     sellectedSupporterDto.SupporterName = personinfo.PersonName??"";} )"></SfNumericTextBox>


                                        <SfTextBox ID="SupporterName"
                                                   @bind-Value="@sellectedSupporterDto.SupporterName"
                                                   Placeholder="نام پشتیبان"
                                                   FloatLabelType="FloatLabelType.Auto"
                                                   Enabled="false">
                                        </SfTextBox>
                                    </Template>
                                </GridEditSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(ProgramSupporterDto.Id) Visible=false HeaderText="Id" TextAlign="TextAlign.Right" Width="110"> </GridColumn>
                                    <GridColumn Field=@nameof(ProgramSupporterDto.ProgramId) HeaderText="ProgramId" Visible=false TextAlign="TextAlign.Right" Width="110"> </GridColumn>
                                    <GridColumn Field=@nameof(ProgramSupporterDto.SupporterpersonID) HeaderText="کدپرسنلی" TextAlign="TextAlign.Right" Width="110"> </GridColumn>
                                    <GridColumn Field=@nameof(ProgramSupporterDto.SupporterName) HeaderText="نام پشتیبان" Width="110"></GridColumn>
                                    <GridColumn HeaderText="عملیات" Width="150">
                                        <GridCommandColumns>
                                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat"} )"></GridCommandColumn>
                                        </GridCommandColumns>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>

                    </DetailTemplate>
                </GridTemplates>
                <GridColumns>
                    <GridColumn Field=@nameof(ProgramDto.Id) Visible=false></GridColumn>
                    <GridColumn Field=@nameof(ProgramDto.ProgamName) HeaderText="برنامه"></GridColumn>
                    <GridColumn Field=@nameof(ProgramDto.ProgramLink) HeaderText="لینک"></GridColumn>
                    <GridColumn HeaderText="عملیات" Width="150">
                        <GridCommandColumns>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat"} )"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>


<style>
    .e-card {
        margin-bottom: 10px !important;
    }

    #predefinedDialogDefault {
        margin: 25px 0 0 15px;
    }

        #predefinedDialogDefault .e-btn {
            margin-right: 5px;
        }

        #predefinedDialogDefault .status {
            margin-top: 20px;
            font-size: 16px;
            display: block;
        }
</style>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }


    public ModalParameters Keys = new ModalParameters();
    public ModalParameters MessageBoxKeys = new ModalParameters();

    private List<ProgramDto> programDtos = new List<ProgramDto>();
    private int showdetail = 0;
    private List<ProgramSupporterDto> programSupporterDtos = new List<ProgramSupporterDto>();
    private ProgramSupporterDto sellectedSupporterDto = new ProgramSupporterDto();

    private SfGrid<ProgramDto> Grid { get; set; }
    private SfGrid<ProgramSupporterDto> ChildGrid { get; set; }
    private GridPageSettings GridPage { get; set; }
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "450px", Width = "750px" };
    private string resultMessage = "";
    private bool flag = false;
    private Boolean Check = false;

    private async Task<PersonDto> SetpersonInfo(ChangeEventArgs args)
    {
        var personInfos = await personRepository.GetPersonInfoByPersonelCode(Convert.ToInt32(args.Value));
        Grid.PreventRender(false);
        return personInfos;
    }

    protected async override Task OnInitializedAsync()
    {
        await GetAllPrograms();
    }


    private async Task<List<ProgramDto>> GetAllPrograms()
    {
        programDtos = await programRepository.GetAllProgram();
        return programDtos;
    }

    private async Task<List<ProgramSupporterDto>> GetSupporters()
    {
        return programSupporterDtos;
    }

    private async Task DeleteProgram(Guid Id)
    {
        DeleteProgramCommand deleteProgramCommand = new DeleteProgramCommand()
            {
                Id = Id
            };
        await programRepository.DeleteProgram(deleteProgramCommand);
        await GetAllPrograms();
        resultMessage = "برنامه مورد نظر با موفقیت حذف شد";
        StateHasChanged();
    }

    public async Task ActionBeginHandler(ActionEventArgs<ProgramDto> Args)
    {
        string rType = Args.RequestType.ToString();
        if(flag)
        {
            Args.Cancel = true;
            flag = false;
        }
        else
        {
            if(rType == "Save")
            {
                try
                {
                    switch(Args.Action)
                    {
                        case "Add":
                            await CreateNewProgram(Args.Data);
                            break;

                        case "Edit":
                            await GetSupporters();
                            break;
                    }
                }
                catch(Exception ex)
                {
                    resultMessage = ex.Message.ToString();
                    Args.Cancel = true;
                }
                finally
                {
                    Args.Cancel = true;
                    //Grid.PreventRender(true);
                    programDtos = await GetAllPrograms();
                    MessageBoxKeys.Add("Message", resultMessage);
                    MessageBoxKeys.Add("MessageType", "Alert");
                    Modal.Show<MessageBox>("", MessageBoxKeys);
                }
            }
            else if(rType == "Delete")
            {
                try
                {
                    await DeleteProgram(Args.RowData.Id);
                    StateHasChanged();
                    Grid.PreventRender(false);
                }
                catch(Exception ex)
                {
                    resultMessage = ex.Message.ToString();
                    Args.Cancel = true;
                }
                finally
                {
                    MessageBoxKeys.Add("Message", resultMessage);
                    MessageBoxKeys.Add("MessageType", "Alert");
                    Modal.Show<MessageBox>("", MessageBoxKeys);
                    await GetAllPrograms();
                    StateHasChanged();
                    //Grid.PreventRender(false);
                    //await Grid.Refresh();
                }

            }
            else if(rType == "Refresh")
            {
                Grid.PreventRender(false);
            }
            else if(rType == "Add")
            {
                Check = true;
            }

        }
    }

    private async Task ChildGridActionHandler(ActionEventArgs<ProgramSupporterDto> args, Guid programId)
    {
        var rType = args.RequestType.ToString();
        args.Data.ProgramId = programId;
        if(flag)
        {
            args.Cancel = true;
            flag = false;
        }
        else
        {
            if(rType == "Save")
            {
                if(args.Action == "Add")
                {
                    try
                    {
                        await AddSupporter(args.Data);
                        await GetAllPrograms();
                        StateHasChanged();
                        args.Cancel = true;
                    }
                    catch(Exception ex)
                    {
                        resultMessage = ex.Message.ToString();
                        args.Cancel = true;
                    }
                    finally
                    {
                        args.Cancel = true;
                        //Grid.PreventRender(true);
                        programSupporterDtos = await GetSupporters();
                        MessageBoxKeys.Add("Message", resultMessage);
                        MessageBoxKeys.Add("MessageType", "Alert");
                        Modal.Show<MessageBox>("", MessageBoxKeys);
                    }
                }
            }
            else if(rType == "Delete")
            {
                try
                {
                    await RemoveSupporter(args.Data);
                    await GetAllPrograms();
                    StateHasChanged();
                    args.Cancel = true;
                }
                catch(Exception ex)
                {
                    resultMessage = ex.Message.ToString();
                    args.Cancel = true;
                }
                finally
                {
                    args.Cancel = true;
                    //Grid.PreventRender(true);
                    programSupporterDtos = await GetSupporters();
                    MessageBoxKeys.Add("Message", resultMessage);
                    MessageBoxKeys.Add("MessageType", "Alert");
                    Modal.Show<MessageBox>("", MessageBoxKeys);
                }
            }
            else
            {
                sellectedSupporterDto = args.Data;
            }
        }
    }


    private async Task<ProgramSupporterDto> SetpersonInfo2(ChangeEventArgs args)
    {
        var personInfos = await personRepository.GetPersonInfoByPersonelCode(Convert.ToInt32(args.Value));
        Grid.PreventRender(false);
        return new ProgramSupporterDto() { Id = personInfos.Id, SupporterpersonID = personInfos.PersonID, SupporterName = personInfos.PersonName ?? "" };
    }

    private async Task CreateNewProgram(ProgramDto programDto)
    {
        CreateProgramCommand createProgramCommand = new CreateProgramCommand()
            {
                ProgramLink = programDto.ProgramLink,
                ProgramName = programDto.ProgamName
            };
        await programRepository.CreateProgram(createProgramCommand);
        resultMessage = "برنامه مورد نظر با موفقیت ثبت شد";
        StateHasChanged();
    }

    private async Task AddSupporter(ProgramSupporterDto programSupporterDto)
    {
        AddProgramSupporterCommand addProgramSupporterCommand = new AddProgramSupporterCommand()
            {
                ProgramId = programSupporterDto.ProgramId,
                SupporterID = programSupporterDto.SupporterpersonID
            };
        await programRepository.AddProgramSupporter(addProgramSupporterCommand);
        programDtos.Single(pd => pd.Id == programSupporterDto.ProgramId).Supporters.Add(programSupporterDto);
        programSupporterDto = new ProgramSupporterDto();
        StateHasChanged();
        resultMessage = "پشتیبان مورد نظر با موفقیت ثبت شد";
    }
    private async Task RemoveSupporter(ProgramSupporterDto programSupporterDto)
    {
        DeleteProgramSupporterCommand deleteProgramSupporterCommand = new DeleteProgramSupporterCommand()
            {
                ProgramId = programSupporterDto.ProgramId,
                SupporterID = programSupporterDto.SupporterpersonID
            };
        await programRepository.DeletePorogramSupporter(deleteProgramSupporterCommand);
        programDtos.Single(pd => pd.Id == programSupporterDto.ProgramId).Supporters.Remove(programSupporterDto);
        programSupporterDto = new ProgramSupporterDto();
        resultMessage = "پشتیبان مورد نظر با موفقیت حذف شد";
        StateHasChanged();
    }

    private void Setkeyboardkeyevent(KeyboardEventArgs args)
    {
        if(args.Key == "Enter")
            flag = true;
    }
}
