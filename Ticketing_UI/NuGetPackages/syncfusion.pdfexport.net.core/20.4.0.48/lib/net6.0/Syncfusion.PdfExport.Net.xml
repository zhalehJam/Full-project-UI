<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.PdfExport.Net</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.PdfExport.PdfAction">
            <summary>
            Represents base class for all action types.
            </summary>
            <seealso cref="T:Syncfusion.PdfExport.IPdfWrapper"/> Interface
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAction.m_action">
            <summary>
            Next action to perform.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAction.m_dictionary">
            <summary>
            Internal variable to store dictionary;
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAction"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAction.Next">
             <summary>
             Gets or sets the next action to be performed after the action represented by this instance.
             </summary>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Creates a new page and adds it as the last page of the document.
             PdfPage page = document.Pages.Add();
             //Create a new sound action.
             PdfSoundAction soundAction = new PdfSoundAction(@"startup.wav");
             soundAction.Sound.Bits = 16;
             soundAction.Sound.Channels = PdfSoundChannels.Stereo;
             soundAction.Sound.Encoding = PdfSoundEncoding.Signed;
             soundAction.Volume = 0.9f;
             soundAction.Mix = true;
             //Create a new PdfUriAction.
             PdfUriAction uriAction = new PdfUriAction("http://www.google.com");
             //Set the next action to the soundAction.
             soundAction.Next = uriAction;
             //Set the action.
             document.Actions.AfterOpen = soundAction;
             //Save document to disk.
             document.Save("output.pdf");
             //close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new sound action.
            Dim soundAction As New PdfSoundAction("startup.wav")
            soundAction.Sound.Bits = 16
            soundAction.Sound.Channels = PdfSoundChannels.Stereo
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed
            soundAction.Volume = 0.9F
            soundAction.Mix = True
            'Create a new PdfUriAction.
            Dim uriAction As New PdfUriAction("http://www.google.com")
            'Set the next action to the soundAction.
            soundAction.[Next] = uriAction
            'Set the action.
            document.Actions.AfterOpen = soundAction
            'Save document to disk.
            document.Save("output.pdf")
            'close the document.
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfUriAction"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAction.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAction.Initialize">
            <summary>
            Initializes an instance.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAction.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfUriAction">
             <summary>
             Represents an action which resolves unique resource identifier.
             </summary>
            <example>
             <code lang="CS">
             //Create a new document with PDF/A standard.
             PdfDocument document = new PdfDocument();
             //Create a Uri action
             PdfUriAction uriAction = new PdfUriAction("http://www.google.com");
             //Add the action to the document
             document.Actions.AfterOpen = uriAction;
             //Save and close the PDF document
             document.Save("Output.pdf");
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document with PDF/A standard.
            Dim document As New PdfDocument()
            'Create a Uri action
            Dim uriAction As New PdfUriAction("http://www.google.com")
            'Add the action to the document
            document.Actions.AfterOpen = uriAction
            'Save and close the PDF document
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfUriAction.m_uri">
            <summary>
            Internal variable to store unique resource identifier.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUriAction.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfUriAction"/> class.
             </summary>
            <example>
             <code lang="CS">
             //Create a new document with PDF/A standard.
             PdfDocument document = new PdfDocument();
             //Create a Uri action
             PdfUriAction uriAction = new PdfUriAction();
             //Add the action to the document
             document.Actions.AfterOpen = uriAction;
             //Save and close the PDF document
             document.Save("Output.pdf");
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document with PDF/A standard.
            Dim document As New PdfDocument()
            'Create a Uri action
            Dim uriAction As New PdfUriAction()
            'Add the action to the document
            document.Actions.AfterOpen = uriAction
            'Save and close the PDF document
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUriAction.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfUriAction"/> class.
             </summary>
             <param name="action">The unique resource identifier.</param>
            <example>
             <code lang="CS">
             //Create a new document with PDF/A standard.
             PdfDocument document = new PdfDocument();
             //Create a Uri action
             PdfUriAction uriAction = new PdfUriAction("http://www.google.com");
             //Add the action to the document
             document.Actions.AfterOpen = uriAction;
             //Save and close the PDF document
             document.Save("Output.pdf");
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document with PDF/A standard.
            Dim document As New PdfDocument()
            'Create a Uri action
            Dim uriAction As New PdfUriAction("http://www.google.com")
            'Add the action to the document
            document.Actions.AfterOpen = uriAction
            'Save and close the PDF document
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfUriAction.Uri">
             <summary>
             Gets or sets the unique resource identifier.
             </summary>
             <value>The unique resource identifier.</value>
            <example>
             <code lang="CS">
             //Create a new document with PDF/A standard.
             PdfDocument document = new PdfDocument();
             //Create a Uri action
             PdfUriAction uriAction = new PdfUriAction();
             uriAction.Uri="http://www.google.com";
             //Add the action to the document
             document.Actions.AfterOpen = uriAction;
             //Save and close the PDF document
             document.Save("Output.pdf");
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document with PDF/A standard.
            Dim document As New PdfDocument()
            'Create a Uri action
            Dim uriAction As New PdfUriAction()
            uriAction.Uri="http://www.google.com";
            'Add the action to the document
            document.Actions.AfterOpen = uriAction
            'Save and close the PDF document
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUriAction.Initialize">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfActionAnnotation">
            <summary>
            Represents the annotation with associated action.
            </summary>
            <seealso cref="T:Syncfusion.PdfExport.PdfActionLinkAnnotation"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfActionAnnotation.#ctor(System.Drawing.RectangleF,Syncfusion.PdfExport.PdfAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfActionAnnotation"/> class with specified bounds and action.
            </summary>
            <param name="rectangle">The bounds of the annotation.</param>
            <param name="action">The PDF action that can be triggered with different actions. </param>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new rectangle.
            RectangleF actionAnnotationBounds = new RectangleF(10, 40, 100, 30);
            //Set the go to action
            PdfGoToAction gotoAction = new PdfGoToAction(page);
            //Set destination location.
            gotoAction.Destination = new PdfDestination(page, new PointF(0, 100));
            //Create Action annotation.
            PdfActionAnnotation actionAnnotation = new PdfActionAnnotation(actionAnnotationBounds, gotoAction);
            //Set the text and font.
            actionAnnotation.Color = new PdfColor(Color.Red);
            //Add this annotation to a new page.
            page.Annotations.Add(actionAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document.
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle.
            Dim actionAnnotationBounds As New RectangleF(10, 40, 100, 30)
            'Set the go to action.
            Dim gotoAction As New PdfGoToAction(page)
            'Set destination location
            gotoAction.Destination = New PdfDestination(page, New PointF(0, 100))
            'Create Action annotation.
            Dim actionAnnotation As New PdfActionAnnotation(actionAnnotationBounds, gotoAction)
            'Set the text and font.
            actionAnnotation.Color = New PdfColor(Color.Red)
            'Add this annotation to a new page.
            page.Annotations.Add(actionAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document.
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfActionAnnotation.Save">
            <summary>
            Saves annotation object.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfActionLinkAnnotation">
            <summary>
            Represents base class for link annotations with associated action.
            </summary>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle, @"Input.png");
            //Set a action to file link annotation.
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            fileLinkAnnotation.Action = javaAction;
            //Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new file link annotation.
            Dim fileLinkAnnotation As New PdfFileLinkAnnotation(rectangle, "Input.png")
            'Set a action to file link annotation.
            Dim javaAction As New PdfJavaScriptAction("app.alert(""You are looking at Java script action of PDF "")")
            fileLinkAnnotation.Action = javaAction
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfActionLinkAnnotation.m_action">
            <summary>
            Internal variable to store annotation's action.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfActionLinkAnnotation.Action">
            <summary>
            Gets or sets the action for the link annotation.
            </summary>
            <value>The action to be executed when the link is activated.</value>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle, @"Input.png");
            //Set a action to file link annotation.
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            fileLinkAnnotation.Action = javaAction;
            //Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);        
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new file link annotation.
            Dim fileLinkAnnotation As New PdfFileLinkAnnotation(rectangle, "Input.png")
            'Set a action to file link annotation.
            Dim javaAction As New PdfJavaScriptAction("app.alert(""You are looking at Java script action of PDF "")")
            fileLinkAnnotation.Action = javaAction
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfActionLinkAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfActionLinkAnnotation"/> class with specified bounds.
            </summary>
            <param name="rectangle">The bounds of the annotation.</param>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(rectangle,  "input.png");
            //Set a action to file link annotation.
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            fileLinkAnnotation.Action = javaAction;
            //Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new file link annotation.
            Dim fileLinkAnnotation As New PdfFileLinkAnnotation(rectangle,  "input.png")
            'Set a action to file link annotation.
            Dim javaAction As New PdfJavaScriptAction("app.alert(""You are looking at Java script action of PDF "")")
            fileLinkAnnotation.Action = javaAction
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfActionLinkAnnotation.#ctor(System.Drawing.RectangleF,Syncfusion.PdfExport.PdfAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfActionLinkAnnotation"/> class with specified bounds and action to be performed.
            </summary>
            <param name="rectangle">The bounds specifies the location of the drawn text.</param>
            <param name="action">The <see cref="T:Syncfusion.PdfExport.PdfAction"/> specifies an action to be executed when the link is activated.</param>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF bounds = new RectangleF(10, 40, 30, 30);
            //Create a new file link annotation.
            PdfFileLinkAnnotation fileLinkAnnotation = new PdfFileLinkAnnotation(bounds, "Input.png");
            //Set a action to file link annotation.
            PdfJavaScriptAction javaAction = new PdfJavaScriptAction("app.alert(\"You are looking at Java script action of PDF \")");
            fileLinkAnnotation.Action = javaAction;
            //Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new file link annotation.
            Dim fileLinkAnnotation As New PdfFileLinkAnnotation(rectangle, "Input.png")
            'Set a action to file link annotation.
            Dim javaAction As New PdfJavaScriptAction("app.alert(""You are looking at Java script action of PDF "")")
            fileLinkAnnotation.Action = javaAction
            'Add this annotation to a new page.
            page.Annotations.Add(fileLinkAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfAnnotation">
            <summary>
            Represents the base class for annotation objects.
            </summary>
            <seealso cref="T:Syncfusion.PdfExport.PdfUriAnnotation"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfTextWebLink"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfDocumentLinkAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_color">
            <summary>
            Color of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_rectangle">
            <summary>
            Bounds of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_page">
            <summary>
            Parent page of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_text">
            <summary>
            Text of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_author">
            <summary>
            Author of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_subject">
            <summary>
            Subject of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_modifiedDate">
            <summary>
            ModifiedDate of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_innerColor">
            <summary>
            To specifying the Inner color with which to fill the annotation
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_opacity">
            <summary>
            Opacity of the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_flatten">
            <summary>
            Indicates annotation is flatten or not.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_flattenPopUps">
            <summary>
            Indicate popups annotation is flatten or not.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.m_setAppearanceDictionary">
            <summary>
            Internal field to check whether any annotation is modified.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.rotationModified">
            <summary>
            Indicates rotation is modified
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotation.TopCaption">
            <summary>
            Indicates Caption name
            </summary>        
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Color">
            <summary>
            Gets or sets the annotation color.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfColor"/> which draws the outline of the annotation.</value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page 
            PdfPage page = document.Pages.Add();
            //Create a new rectangle.
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"input.wav");
            //Set the color.
            soundAnnotation.Color = new PdfColor(Color.Red);
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a a new rectangle.
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30);
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "input.wav")
            'Set the color.
            soundAnnotation.Color = New PdfColor(Color.Red)
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Opacity">
            <summary>
            Gets or Sets the Opacity of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.InnerColor">
            <summary>
            Get or set the inner color of the annotation. Default color is transparent
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Bounds">
            <summary>
            Gets or sets annotation's bounds in the PDF page.
            </summary>
            <Value> The bounds of the annotation.</Value>
            <remarks> If this property is not set, the bounds are calculated automatically
            based on <see cref="P:Syncfusion.PdfExport.PdfAnnotation.Location">Location</see> property and content of annotation.</remarks>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle.
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"input.wav");
            //Assign the bounds to sound annotation.
            soundAnnotation.Bounds=new RectangleF(50, 100, 30, 30);
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
             'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle.
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "input.wav")
            'Assign the bounds to sound annotation.
            soundAnnotation.Bounds=New RectangleF(50, 100, 30, 30)
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Location">
            <summary>
            Gets or sets the location of the annotation.
            </summary>
            <Value>  The position of the annotation.</Value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"input.wav");
            //Assign the location to sound annotation.
            soundAnnotation.Location=new PointF(50, 100);
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "input.wav")
            'Assign the location to sound annotation.
            soundAnnotation.Location=New PointF(50, 100)
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Size">
            <summary>
            Gets or sets the size of the annotation.
            </summary>
            <Value>  The size of the annotation.</Value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"input.wav");
            //Assign the size to sound annotation.
            soundAnnotation.Size=new SizeF(50, 50);
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Create a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "input.wav")
            'Assign the size to sound annotation.
            soundAnnotation.Size=New SizeF(50, 50)
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Page">
            <summary>
            Gets a page of the annotation. Read-Only.
            </summary>
            <Value>The <see cref="T:Syncfusion.PdfExport.PdfPage"/> where the annotation is to be added. </Value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"input.wav");
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Gets the page.
            PdfPage pdfPage=soundAnnotation.Page;
            //Save the  document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
             'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "input.wav")
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Gets the page.
            Dim pdfPage As PdfPage =soundAnnotation.Page
            'Save the  document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Text">
            <summary>
            Gets or sets content of the annotation.
            </summary>
            <Value>The string value specifies the text of the annotation. </Value>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"input.wav");
            //Set the text to sound annotation.
            soundAnnotation.Text="Sound Annotation";
            //Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation);
            //Save the  document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
             'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            Dim rectangle As RectangleF  = New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As PdfSoundAnnotation = New PdfSoundAnnotation(rectangle, "input.wav")
            'Set the text to sound annotation.
            soundAnnotation.Text="Sound Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(soundAnnotation)
            'Save the  document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Author">
            <summary>
            Gets or Sets the Author of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Subject">
            <summary>
            Gets or Sets the Subject of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.ModifiedDate">
            <summary>
            Gets or Sets the ModifiedDate of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Flatten">
             <summary>
            Gets or sets the boolean flag to flatten the annotations.
             </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.FlattenPopUps">
            <summary>
            Get or set flatten the Popups annotations
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.SetAppearanceDictionary">
            <summary>
            Specifies if any annotation is changed since loading that would affect the appearance. 
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.SetAppearance(System.Boolean)">
            <summary>
            Specifies whether to set the default appearance for the annotation or not.
            </summary>
            <param name="appearance"></param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.#ctor">
            <summary>
            Creates the Constructors.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates new annotation object with the specified bounds.
            </summary>
            <param name="bounds">Bounds of the annotation.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.SetPage(Syncfusion.PdfExport.PdfPageBase)">
            <summary>
            Sets related page of the annotation.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.Dictionary_BeginSave(System.Object,Syncfusion.PdfExport.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The <see cref="T:Syncfusion.PdfExport.SavePdfPrimitiveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.Save">
            <summary>
            Saves an annotation.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.SetValues(System.String,System.String)">
            <summary>
            Set the values associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //To specify the line end points
            int[] points = new int[] { 80, 420, 150, 420 };
            //Create a new line annotation and set properties.
            PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(points);
            lineAnnotation.Text = "Line Annotation";
            //Create pdf line border
            LineBorder lineBorder = new LineBorder();
            lineBorder.BorderStyle = PdfBorderStyle.Solid;
            lineBorder.BorderWidth = 1;
            lineAnnotation.lineBorder = lineBorder;
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension;
            lineAnnotation.Author = "LineAnnotaion";
            lineAnnotation.ModifiedDate = DateTime.Now;
            lineAnnotation.Subject = "LineAnnoataion";
            lineAnnotation.SetValues("State", "CustomState");
            lineAnnotation.SetValues("StateModel", "CustomStateModel");
            page.Annotations.Add(lineAnnotation);
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang ="VB.NET">
            Dim document As PdfDocument = New PdfDocument
            Dim page As PdfPage = document.Pages.Add
            Dim points() As Integer = New Integer() { 80, 420, 150, 420}
            Dim lineAnnotation As PdfLineAnnotation = New PdfLineAnnotation(points)
            lineAnnotation.Text = "Line Annotation"
            Dim lineBorder As LineBorder = New LineBorder
            lineBorder.BorderStyle = PdfBorderStyle.Solid
            lineBorder.BorderWidth = 1
            lineAnnotation.lineBorder = lineBorder
            lineAnnotation.LineIntent = PdfLineIntent.LineDimension
            lineAnnotation.Author = "LineAnnotaion"
            lineAnnotation.ModifiedDate = DateTime.Now
            lineAnnotation.Subject = "LineAnnoataion"
            lineAnnotation.SetValues("State", "CustomState")
            lineAnnotation.SetValues("StateModel", "CustomStateModel")
            page.Annotations.Add(lineAnnotation)
            document.Save("Output.pdf")
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotation.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.ObtainNativeRectangle">
            <summary>
            Obtain the native rectangle for annotation 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.IsContainsAnnotation">
            <summary>
            Identify the annotation present in collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotation.GetCropOrMediaBox(Syncfusion.PdfExport.PdfPageBase,Syncfusion.PdfExport.PdfArray)">
            <summary>
            Obtain crop or media box values from page
            </summary>
            <param name="page"></param>
            <param name="cropOrMediaBox"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfAnnotationCollection">
            <summary>
            Represents the collection of <see cref="T:Syncfusion.PdfExport.PdfAnnotation"/> objects.
            </summary>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = page.Annotations;
            annotationCollection.Add(soundAnnotation);
            PdfAnnotation annotation = annotationCollection[0] as PdfAnnotation;
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection = page.Annotations
            annotationCollection.Add(soundAnnotation)
            Dim annotation As PdfAnnotation = TryCast(annotationCollection(0), PdfAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
            <seealso cref="T:Syncfusion.PdfExport.PdfAnnotation"/> Class.
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotationCollection.m_page">
            <summary>
            Parent page of the collection.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotationCollection.m_annotations">
            <summary>
            Array of the annotations.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAnnotationCollection.m_savePopup">
            <summary>
            boolean variable indicates whether popup annotation added or not
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotationCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.PdfAnnotation"/> object at the specified index. Read-Only.
            </summary>
            <value> The <see cref="T:Syncfusion.PdfExport.PdfAnnotation"/> specifies the attachment at the specified position. </value>
            <param name="index">The index value of the annotation in the collection. </param>
            <returns>The annotation object at the specified position.</returns>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = page.Annotations;
            annotationCollection.Add(soundAnnotation);
            PdfAnnotation annotation = annotationCollection[0] as PdfAnnotation;
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection = page.Annotations
            annotationCollection.Add(soundAnnotation)
            Dim annotation As PdfAnnotation = TryCast(annotationCollection(0), PdfAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
            <seealso cref="T:Syncfusion.PdfExport.PdfAnnotation"/> Class.
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotationCollection.Annotations">
            <summary>
            Gets the annotations array.
            </summary>
            <value>The annotations.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAnnotationCollection"/> class.
            </summary>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = new PdfAnnotationCollection();
            annotationCollection = page.Annotations;
            annotationCollection.Add(soundAnnotation);
            PdfAnnotation annotation = annotationCollection[0] as PdfAnnotation;
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection()
             annotationCollection = page.Annotations
            annotationCollection.Add(soundAnnotation)
            Dim annotation As PdfAnnotation = TryCast(annotationCollection(0), PdfAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
            <seealso cref="T:Syncfusion.PdfExport.PdfAnnotation"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.#ctor(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Initializes a new instance of the PdfAnnotationCollection class with the specified page.
            </summary>
            <param name="page">Page which collection is created for.</param>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = new PdfAnnotationCollection(page);
            annotationCollection.Add(soundAnnotation);
            PdfAnnotation annotation = annotationCollection[0] as PdfAnnotation;
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection(page)
            annotationCollection.Add(soundAnnotation)
            Dim annotation As PdfAnnotation = TryCast(annotationCollection(0), PdfAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
            <seealso cref="T:Syncfusion.PdfExport.PdfAnnotation"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.Add(Syncfusion.PdfExport.PdfAnnotation)">
            <summary>
            Adds a new annotation to the collection. 
            </summary>
            <param name="annotation">The new annotation to be added to the collection.</param>
            <returns>The position of the annotation in the collection.</returns>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new rectangle.
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = page.Annotations;
            annotationCollection.Add(soundAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle.
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection = page.Annotations
            annotationCollection.Add(soundAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.Clear">
            <summary>
            Removes all the annotations from the collection.
            </summary>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = page.Annotations;
            annotationCollection.Add(soundAnnotation);
            //Clear the annotation collection.
            annotationCollection.Clear();
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection = page.Annotations
            annotationCollection.Add(soundAnnotation)
            'Clear the annotation collection.
            annotationCollection.Clear()
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.Contains(Syncfusion.PdfExport.PdfAnnotation)">
            <summary>
            Determines whether a specified annotation is in the annotation collection. 
            </summary>
            <param name="annotation">The annotation to search for.</param>
            <returns>True, if annotation is contained in collection. Otherwise - false.</returns>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = page.Annotations;
            //Add the sound annotation to annotation collection.
            annotationCollection.Add(soundAnnotation);
            bool exist = annotationCollection.Contains(soundAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection = page.Annotations
            'Add the sound annotation to annotation collection.
            annotationCollection.Add(soundAnnotation)
            Dim exist As Boolean = annotationCollection.Contains(soundAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.IndexOf(Syncfusion.PdfExport.PdfAnnotation)">
            <summary>
            Searches the index of the specified annotation from the collection. 
            </summary>
            <param name="annotation">The annotation to be searched.</param>
            <returns>Index of the element in the collection, if exists, or -1 if the element does not exist in the collection.</returns>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = page.Annotations;
            annotationCollection.Add(soundAnnotation);
            //Get the index
            int index = annotationCollection.IndexOf(soundAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection = page.Annotations
            annotationCollection.Add(soundAnnotation)
            'Get the index
            Dim index As Integer = annotationCollection.IndexOf(soundAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.Insert(System.Int32,Syncfusion.PdfExport.PdfAnnotation)">
            <summary>
            Inserts an annotation to the collection at the specified index.
            </summary>
            <param name="index">The index where to insert the element.</param>
            <param name="annotation">The annotation to be inserted in the collection.</param>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = page.Annotations;
            annotationCollection.Insert(0, soundAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection = page.Annotations
            annotationCollection.Insert(0, soundAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the annotation at the specified index.
            </summary>
            <param name="index">The index of the element to be removed.</param>
            <example>
            <code lang="CS">
            //Create a new PDF Document.
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle.
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new sound annotation.
            PdfSoundAnnotation soundAnnotation = new PdfSoundAnnotation(rectangle, @"Input.wav");
            //Add this annotation to a new page.
            PdfAnnotationCollection annotationCollection = page.Annotations;
            annotationCollection.Add(soundAnnotation);
            //Removes a sound annotation at specified index.
            annotationCollection.RemoveAt(0);
            //Save the document to disk.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF Document.
            Dim document As New PdfDocument()
            'Create a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle.
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new sound annotation.
            Dim soundAnnotation As New PdfSoundAnnotation(rectangle, "Input.wav")
            'Add this annotation to a new page.
            Dim annotationCollection As PdfAnnotationCollection = page.Annotations
            annotationCollection.Add(soundAnnotation)
            'Removes a sound annotation at specified index.
            annotationCollection.RemoveAt(0)
            'Save the document to disk.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.RemoveAnnotationAt(System.Int32)">
            <summary>
            Removes item from collection at the specified index.
            </summary>
            <param name="index">Index of element to be removed.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.DoAdd(Syncfusion.PdfExport.PdfAnnotation)">
            <summary>
            Adds a Annotation to collection.
            </summary>
            <param name="annot">The Annotation.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.DoInsert(System.Int32,Syncfusion.PdfExport.PdfAnnotation)">
            <summary>
            Inserts a annotation into collection.
            </summary>
            <param name="index">The index.</param>
            <param name="annot">The annotation.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAnnotationCollection.DoRemoveAt(System.Int32)">
            <summary>
            Removes the annotation at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAnnotationCollection.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets PDF primitive representing this object.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDocumentLinkAnnotation">
            <summary>
            Represents an annotation object with holds link on another location within a document.
            </summary>
            <example>
            <code lang="CS">
            //Create the PDF Document
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF docLinkAnnotationRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new document link annotation.
            PdfDocumentLinkAnnotation documentAnnotation = new PdfDocumentLinkAnnotation(docLinkAnnotationRectangle);
            //Create a new page .
            PdfPage page2 = document.Pages.Add();
            //Set the pdf destination.
            documentAnnotation.Destination = new PdfDestination(page2);
            //Set the pdf destination location.
            documentAnnotation.Destination.Location = new Point(10, 0);
            //Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create the PDF Document
            Dim document As New PdfDocument()
            'Create a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim docLinkAnnotationRectangle As New RectangleF(10, 40, 30, 30)
            'Create a new document link annotation.
            Dim documentAnnotation As New PdfDocumentLinkAnnotation(docLinkAnnotationRectangle)
            'Create a new page .
            Dim page2 As PdfPage = document.Pages.Add()
            'Set the pdf destination.
            documentAnnotation.Destination = New PdfDestination(page2)
            'Set the pdf destination location.
            documentAnnotation.Destination.Location = New Point(10, 0)
            'Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class   
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentLinkAnnotation.m_destination">
            <summary>
            Destination of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentLinkAnnotation.Destination">
            <summary>
            Gets or sets the destination of the annotation.
            </summary>
            <value>
            The <see cref="T:Syncfusion.PdfExport.PdfDestination" /> object specifies which page to be navigated.
            </value>
            <example>
            <code lang="CS">
            //Create the PDF Document
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF docLinkAnnotationRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new document link annotation.
            PdfDocumentLinkAnnotation documentAnnotation = new PdfDocumentLinkAnnotation(docLinkAnnotationRectangle);
            //Create a new page .
            PdfPage page2 = document.Pages.Add();
            //Set the pdf destination.
            documentAnnotation.Destination = new PdfDestination(page2);
            //Set the pdf destination location.
            documentAnnotation.Destination.Location = new Point(10, 0);
            //Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create the PDF Document
            Dim document As New PdfDocument()
            'Create a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim docLinkAnnotationRectangle As New RectangleF(10, 40, 30, 30)
            'Create a new document link annotation.
            Dim documentAnnotation As New PdfDocumentLinkAnnotation(docLinkAnnotationRectangle)
            'Create a new page .
            Dim page2 As PdfPage = document.Pages.Add()
            'Set the pdf destination.
            documentAnnotation.Destination = New PdfDestination(page2)
            'Set the pdf destination location.
            documentAnnotation.Destination.Location = New Point(10, 0)
            'Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class   
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentLinkAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new <see cref="T:Syncfusion.PdfExport.PdfDocumentLinkAnnotation"/> instance with specified bounds.
            </summary>
            <param name="rectangle">The bounds of the annotation.</param>
            <example>
            <code lang="CS">
            //Create the PDF document
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF docLinkAnnotationRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new document link annotation.
            PdfDocumentLinkAnnotation documentAnnotation = new PdfDocumentLinkAnnotation(docLinkAnnotationRectangle);
            //Create a new page .
            PdfPage page2 = document.Pages.Add();
            //Set the pdf destination.
            documentAnnotation.Destination = new PdfDestination(page2);
            //Set the pdf destination location.
            documentAnnotation.Destination.Location = new Point(10, 0);
            //Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create the PDF document
            Dim document As New PdfDocument()
            'Create a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim docLinkAnnotationRectangle As New RectangleF(10, 40, 30, 30)
            'Create a new document link annotation.
            Dim documentAnnotation As New PdfDocumentLinkAnnotation(docLinkAnnotationRectangle)
            'Create a new page .
            Dim page2 As PdfPage = document.Pages.Add()
            'Set the pdf destination.
            documentAnnotation.Destination = New PdfDestination(page2)
            'Set the pdf destination location.
            documentAnnotation.Destination.Location = New Point(10, 0)
            'Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class   
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentLinkAnnotation.#ctor(System.Drawing.RectangleF,Syncfusion.PdfExport.PdfDestination)">
            <summary>
            Initializes new <see cref="T:Syncfusion.PdfExport.PdfDocumentLinkAnnotation"/> instance with specified bounds and destination.
            </summary>
            <param name="rectangle">The bounds of the annotation.</param>
            <param name="destination">The destination of the annotation.</param>
            <example>
            <code lang="CS">
            //Create the PDF document
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF docLinkAnnotationRectangle = new RectangleF(10, 40, 30, 30);
            //Create a new page .
            PdfPage page2 = document.Pages.Add();
            //Create a new pdf destination.
            PdfDestination destination = new PdfDestination(page2);
            //Create a new document link annotation.
            PdfDocumentLinkAnnotation documentAnnotation = new PdfDocumentLinkAnnotation(docLinkAnnotationRectangle, destination);
            //Set the annotation text.
            documentAnnotation.Text = "Document link annotation";
            //Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document.
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create the PDF document
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim docLinkAnnotationRectangle As New RectangleF(10, 40, 30, 30)
            'Create a new page .
            Dim page2 As PdfPage = document.Pages.Add()
            'Create a new pdf destination.
            Dim destination As New PdfDestination(page2)
            'Create a new document link annotation.
            Dim documentAnnotation As New PdfDocumentLinkAnnotation(docLinkAnnotationRectangle, destination)
            'Set the annotation text.
            documentAnnotation.Text = "Document link annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(documentAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class   
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class   
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentLinkAnnotation.Save">
            <summary>
            Saves annotation object.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLinkAnnotation">
            <summary>
            Represents the base class for the link annotations.
            </summary>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocumentLinkAnnotation"/> Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLinkAnnotation.m_highlightMode">
            <summary>
            Highlight Mode of the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLinkAnnotation.HighlightMode">
            <summary>
            Gets or sets the highlight mode of the link annotation.
            </summary>
            <value> The <see cref="T:Syncfusion.PdfExport.PdfHighlightMode"/> enumeration value which sets the highlight mode.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLinkAnnotation.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.PdfExport.PdfLinkAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLinkAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of <see cref="T:Syncfusion.PdfExport.PdfLinkAnnotation"/> class with specified bounds.
            </summary>
            <param name="rectangle">The bounds of the annotation.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLinkAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLinkAnnotation.GetHighlightMode(Syncfusion.PdfExport.PdfHighlightMode)">
            <summary>
            Gets Hightlight Mode of the annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTextWebLink">
            <summary>
            Represents the class for text web link annotation.
            </summary>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Set the font
            float fontSize = 10f;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);
            //Create a text web link annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.Text = "Yahoo Mail";
            webLinkAnnotation.Brush = brush;
            webLinkAnnotation.Font = font;
            webLinkAnnotation.Pen = PdfPens.Brown;
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40));
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40));
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new solid brush
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            'Set the font
            Dim fontSize As Single = 10f
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Create a text web link annotation
            Dim webLinkAnnotation As New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.Text = "Yahoo Mail"
            webLinkAnnotation.Brush = brush
            webLinkAnnotation.Font = font
            webLinkAnnotation.Pen = PdfPens.Brown
            webLinkAnnotation.DrawTextWebLink(page, New PointF(50, 40))
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, New PointF(110, 40))
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class  
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextWebLink.m_url">
            <summary>
            Internal variable to store Url.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextWebLink.m_uriAnnotation">
            <summary>
            Internal variable to store Uri Annotation object. 
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTextWebLink.Url">
            <summary>
            Gets or sets the Uri address.
            </summary>
            <value> The string value which contains the Uri address.</value>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Set the font
            float fontSize = 10f;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);
            //Create a text web link annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.Text = "Yahoo Mail";
            webLinkAnnotation.Brush = brush;
            webLinkAnnotation.Font = font;
            webLinkAnnotation.Pen = PdfPens.Brown;
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40));
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40));
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new solid brush
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            'Set the font
            Dim fontSize As Single = 10f
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Create a text weblink annotation
            Dim webLinkAnnotation As New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.Text = "Yagoo Mail"
            webLinkAnnotation.Brush = brush
            webLinkAnnotation.Font = font
            webLinkAnnotation.Pen = PdfPens.Brown
            webLinkAnnotation.DrawTextWebLink(page, New PointF(50, 40))
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, New PointF(110, 40))
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class  
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextWebLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTextWebLink"/> class.
            </summary>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Set the font
            float fontSize = 10f;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);
            //Create a text web link annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.Text = "Yahoo Mail";
            webLinkAnnotation.Brush = brush;
            webLinkAnnotation.Font = font;
            webLinkAnnotation.Pen = PdfPens.Brown;
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40));
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40));
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new solid brush
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            'Set the font
            Dim fontSize As Single = 10f
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Create a text web link annotation
            Dim webLinkAnnotation As New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.Text = "Yahoo Mail"
            webLinkAnnotation.Brush = brush
            webLinkAnnotation.Font = font
            webLinkAnnotation.Pen = PdfPens.Brown
            webLinkAnnotation.DrawTextWebLink(page, New PointF(50, 40))
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, New PointF(110, 40))
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class  
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextWebLink.DrawTextWebLink(Syncfusion.PdfExport.PdfPage,System.Drawing.PointF)">
            <summary>
            Draws a Text Web Link on the Page
            </summary>
            <param name="page">The page where the annotation should be placed.</param>
            <param name="location">The location of the annotation.</param>
            <returns>Pdf Layout result</returns>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Set the font
            float fontSize = 10f;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);
            //Create a text weblink annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.Text = "Yagoo Mail";
            webLinkAnnotation.Brush = brush;
            webLinkAnnotation.Font = font;
            webLinkAnnotation.Pen = PdfPens.Brown;
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40));
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40));
            //Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation);
            //Save the document to disk.
            document.Save("TextWebLink(.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
             'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new solid brush
            Dim brush As PdfBrush  = New PdfSolidBrush(Color.Black)
            'Set the font
            Dim fontSize As Single  = 10f
            Dim font As PdfFont  = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Create a text weblink annotation
            Dim webLinkAnnotation As PdfTextWebLink  = New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.Text = "Yagoo Mail"
            webLinkAnnotation.Brush = brush
            webLinkAnnotation.Font = font
            webLinkAnnotation.Pen = PdfPens.Brown
            webLinkAnnotation.DrawTextWebLink(page, new PointF(50, 40))
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40))
            'Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation)
            'Save the document to disk.
            document.Save("TextWebLink(.pdf")
            </code>
            </example> 
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class  
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextWebLink.DrawTextWebLink(Syncfusion.PdfExport.PdfGraphics,System.Drawing.PointF)">
            <summary>
            Draw a Text Web Link on the Graphics
            </summary>
            <param name="graphics">The <see cref="T:Syncfusion.PdfExport.PdfGraphics"/> object specifies where annotation should be placed..</param>
            <param name="location">The location of the annotation.</param>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page .
            PdfPage page = document.Pages.Add();
            //Create a new solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Set the font
            float fontSize = 10f;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);
            //Create a text weblink annotation
            PdfTextWebLink webLinkAnnotation = new PdfTextWebLink();
            webLinkAnnotation.Url = "http://www.yahoo.com";
            webLinkAnnotation.Text = "Yagoo Mail";
            webLinkAnnotation.Brush = brush;
            webLinkAnnotation.Font = font;
            webLinkAnnotation.Pen = PdfPens.Brown;
            webLinkAnnotation.DrawTextWebLink(page.Graphics, new PointF(50, 40));
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40));
            //Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation);
            //Save the document to disk.
            document.Save("TextWebLink(.pdf");
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
             'Create a new page .
            Dim page As PdfPage = document.Pages.Add()
            'Create a new solid brush
            Dim brush As PdfBrush  = New PdfSolidBrush(Color.Black)
            'Set the font
            Dim fontSize As Single  = 10f
            Dim font As PdfFont  = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Create a text weblink annotation
            Dim webLinkAnnotation As PdfTextWebLink  = New PdfTextWebLink()
            webLinkAnnotation.Url = "http://www.yahoo.com"
            webLinkAnnotation.Text = "Yagoo Mail"
            webLinkAnnotation.Brush = brush
            webLinkAnnotation.Font = font
            webLinkAnnotation.Pen = PdfPens.Brown
            webLinkAnnotation.DrawTextWebLink(page.Graphics, new PointF(50, 40))
            page.Graphics.DrawString("Go to Yahoo Web Site", font, brush, new PointF(110, 40))
            'Add this annotation to a new page.
            page.Annotations.Add(webLinkAnnotation)
            'Save the document to disk.
            document.Save("TextWebLink(.pdf")
            </code>
            </example> 
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class  
        </member>
        <member name="T:Syncfusion.PdfExport.PdfUriAnnotation">
            <summary>
            Represents the Uri annotation.
            </summary>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page 
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle, "http://www.google.com");
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new Uri Annotation.
            Dim uriAnnotation As New PdfUriAnnotation(rectangle, "http://www.google.com")
            'Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
        </member>
        <member name="F:Syncfusion.PdfExport.PdfUriAnnotation.m_uriAction">
            <summary>
            Internal variable to store acton for the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfUriAnnotation.Uri">
            <summary>
            Gets or sets the Uri address.
            </summary>
            <Value>The string value which contains Uri address.</Value>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page 
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle);
            // Set Uri to uriAnnotation
            uriAnnotation.Uri = "http://www.google.com";
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new Uri Annotation.
            Dim uriAnnotation As New PdfUriAnnotation(rectangle)
            'Set Uri to uriAnnotation
            uriAnnotation.Uri = "http://www.google.com"
            'Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
        </member>
        <member name="P:Syncfusion.PdfExport.PdfUriAnnotation.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfAction"/> object specifies the action of the annotation.</value>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create a new page 
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle);
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            // Set Uri to uriAnnotation
            uriAnnotation.Uri = "http://www.google.com";
            //Creates a new Sound action
            PdfSoundAction soundAction = new PdfSoundAction(@"Input.wav");
            soundAction.Sound.Bits = 16;
            soundAction.Sound.Channels = PdfSoundChannels.Stereo;
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed;
            soundAction.Volume = 0.9f;
            uriAnnotation.Action = soundAction;
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Create a new page 
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new Uri Annotation.
            Dim uriAnnotation As New PdfUriAnnotation(rectangle)
            'Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            ' Set Uri to uriAnnotation
            uriAnnotation.Uri = "http://www.google.com"
            'Creates a new Sound action
            Dim soundAction As New PdfSoundAction("Input.wav")
            soundAction.Sound.Bits = 16
            soundAction.Sound.Channels = PdfSoundChannels.Stereo
            soundAction.Sound.Encoding = PdfSoundEncoding.Signed
            soundAction.Volume = 0.9f
            uriAnnotation.Action = soundAction
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUriAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfUriAnnotation"/> class with specified bounds.
            </summary>   
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle);
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            // Set Uri to uriAnnotation
            uriAnnotation.Uri = "http://www.google.com";
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new Uri Annotation.
            Dim uriAnnotation As New PdfUriAnnotation(rectangle)
            'Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            ' Set Uri to uriAnnotation
            uriAnnotation.Uri = "http://www.google.com"
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUriAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfUriAnnotation"/> class with specified bounds and Uri.
            </summary>
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <param name="identifier">unique resource identifier path.</param>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page 
            PdfPage page = document.Pages.Add();
            //Create a new rectangle
            RectangleF rectangle = new RectangleF(10, 40, 30, 30);
            //Create a new Uri Annotation.
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(rectangle, "http://www.google.com");
            //Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation";
            //Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation);
            //Save the document to disk.
            document.Save("Output.pdf");
            //close the document
            document.Close(true);   
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Creates a new page
            Dim page As PdfPage = document.Pages.Add()
            'Create a new rectangle
            Dim rectangle As New RectangleF(10, 40, 30, 30)
            'Create a new Uri Annotation.
            Dim uriAnnotation As New PdfUriAnnotation(rectangle, "http://www.google.com")
            'Set Text to uriAnnotation.
            uriAnnotation.Text = "Uri Annotation"
            'Add this annotation to a new page.
            page.Annotations.Add(uriAnnotation)
            'Save the document to disk.
            document.Save("Output.pdf")
            'close the document
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class  
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUriAnnotation.Initialize">
            <summary>
            Initializes annotation object.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfHighlightMode">
            <summary>
            Specifies the highlight mode for a field.
            </summary>
            <example>
            <code lang="C#">
            // Create a new PDf document
            PdfDocument document = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create the signature field
            PdfSignatureField sign = new PdfSignatureField(page, "sign1");
            sign.Bounds = new RectangleF(100, 420, 100, 50);
            // Set the high light mode for a signature field
            sign.HighlightMode = PdfHighlightMode.Push;
            document.Form.Fields.Add(sign);
            document.Save("Form.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            ' Create a new PDf document
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create the signature field
            Dim sign As PdfSignatureField = New PdfSignatureField(page, "sign1")
            sign.Bounds = New RectangleF(100, 420, 100, 50)
            ' Set the high light mode for a signature field
            sign.HighlightMode = PdfHighlightMode.Push
            document.Form.Fields.Add(sign)
            document.Save("Form.pdf")
            document.Close(True)
            </code>
            </example>
            <remarks>Default value is Invert.</remarks>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfHighlightMode.NoHighlighting">
            <summary>
            No highlighting.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfHighlightMode.Invert">
            <summary>
            Invert the contents of the field rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfHighlightMode.Outline">
            <summary>
            Invert the field's border.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfHighlightMode.Push">
            <summary>
            Pushed highlighting.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Utils.DEF_REVERSE_BITS">
            <summary>
            Bit-indexes for reversing.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Utils.DEF_HUFFMAN_DYNTREE_CODELENGTHS_ORDER">
            <summary>
            Code lengths for the code length alphabet.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.Utils.BitReverse(System.Int32)">
            <summary>
            Reverses bit.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.PdfExport.CompressionLevel">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressionLevel.NoCompression">
            <summary>
            Pack without compression
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressionLevel.BestSpeed">
            <summary>
            Use high speed compression, reduce of data size is low
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressionLevel.BelowNormal">
            <summary>
            Something middle between normal and BestSpeed compressions
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressionLevel.Normal">
            <summary>
            Use normal compression, middle between speed and size
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressionLevel.AboveNormal">
            <summary>
            Pack better but require a little more time
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressionLevel.Best">
            <summary>
            Use best compression, slow enough
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.CompressedStreamWriter">
            <summary>
            Represents the compressed stream writer
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.CompressedStreamWriter.BlockType">
            <summary>
            Type of the block.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.BlockType.Stored">
            <summary>
            Data simply stored as is
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.BlockType.FixedHuffmanCodes">
            <summary>
            An option to use Fixed Huffman tree codes
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.BlockType.DynamicHuffmanCodes">
            <summary>
            An option to use Dynamically built Huffman codes
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.DEF_ZLIB_HEADER_TEMPLATE">
            <summary>
            Start template of the zlib header.
            </summary>                               
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.DEFAULT_MEM_LEVEL">
            <summary>
            Memory usage level.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.DEF_PENDING_BUFFER_SIZE">
            <summary>
            Size of the pending buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.DEF_HUFFMAN_BUFFER_SIZE">
            <summary>
            Size of the buffer for the huffman encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.DEF_HUFFMAN_LITERAL_ALPHABET_LENGTH">
            <summary>
            Length of the literal alphabet(literal+lengths).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.DEF_HUFFMAN_DISTANCES_ALPHABET_LENGTH">
            <summary>
            Distances alphabet length.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.DEF_HUFFMAN_BITLEN_TREE_LENGTH">
            <summary>
            Length of the code-lengths tree.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.DEF_HUFFMAN_ENDBLOCK_SYMBOL">
            <summary>
            Code of the symbol, than means the end of the block.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.WSIZE">
            <summary>
            Maximum window size.
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_stream">
            <summary>
            Output stream.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_PendingBuffer">
            <summary>
            Pending buffer for writing.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_PendingBufferLength">
            <summary>
            Length of the unflushed data.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_PendingBufferBitsCache">
            <summary>
            Bits cache for pending buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_PendingBufferBitsInCache">
            <summary>
            Count of bits in pending buffer cache.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_bNoWrap">
            <summary>
            If true, no zlib header will be written to the stream.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_CheckSum">
            <summary>
            Current checksum.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_Level">
            <summary>
            Current compression level.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_treeLiteral">
            <summary>
            Current tree for literals.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_treeDistances">
            <summary>
            Current tree for distances.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_treeCodeLengths">
            <summary>
            Current tree for code lengths.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_iBufferPosition">
            <summary>
            Current position in literals and distances buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_arrLiteralsBuffer">
            <summary>
            Recorded literals buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_arrDistancesBuffer">
            <summary>
            Recorded distances buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_iExtraBits">
            <summary>
            Count of the extra bits.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_arrLiteralCodes">
            <summary>
            Static array of the literal codes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_arrLiteralLengths">
            <summary>
            Static array of the lengths of the literal codes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_arrDistanceCodes">
            <summary>
            Static array of the distance codes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_arrDistanceLengths">
            <summary>
            Static array of the lengths of the distance codes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_bStreamClosed">
            <summary>
            If true, no futher writings can be performed.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_CurrentHash">
            <summary>
            Current hash.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_HashHead">
            <summary>
            Hash m_HashHead.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_HashPrevious">
            <summary>
            Previous hashes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_MatchStart">
            <summary>
            Start of the matched part.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_MatchLength">
            <summary>
            Length of the matched part.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_MatchPreviousAvailable">
            <summary>
            Previous match available.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_BlockStart">
            <summary>
            Start of the data window.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_StringStart">
            <summary>
            String start in data window.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_LookAhead">
            <summary>
            Lookahead.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_DataWindow">
            <summary>
            Data window.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_MaximumChainLength">
            <summary>
            Maximum chain length.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_MaximumLazySearch">
            <summary>
            Maximum distance of the search with "lazy" algotithm.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_NiceLength">
            <summary>
            Nice length of the block.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_GoodLength">
            <summary>
            Good length of the block.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_CompressionFunction">
            <summary>
            Current compression function.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_InputBuffer">
            <summary>
            Current block of the data to be compressed.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_TotalBytesIn">
            <summary>
            Total count of bytes, that were compressed.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_InputOffset">
            <summary>
            Offset in the input buffer, where input starts.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_InputEnd">
            <summary>
            Offset in the input buffer, where input ends.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressedStreamWriter.m_bCloseStream">
            <summary>
            If true, stream will be closed after the last block.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.#cctor">
            <summary>
            Initializes statical data for huffman compression.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.#ctor(System.IO.Stream,System.Boolean,Syncfusion.PdfExport.CompressionLevel,System.Boolean)">
            <summary>
            Initializes compressor and writes ZLib header if needed.
            </summary>
            <param name="outputStream">Output stream.</param>
            <param name="bNoWrap">If true, ZLib header and checksum will not be written.</param>
            <param name="level">Compression level.</param>
            <param name="bCloseStream">If true, output stream will be closed after the last block has been written.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes compressor and writes ZLib header if needed.
            Compression level is set to normal.
            </summary>
            <param name="outputStream">Output stream.</param>
            <param name="bNoWrap">If true, ZLib header and checksum will not be written.</param>
            <param name="bCloseStream">If true, output stream will be closed after the last block has been written.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.#ctor(System.IO.Stream,Syncfusion.PdfExport.CompressionLevel,System.Boolean)">
            <summary>
            Initializes compressor and writes ZLib header.
            </summary>
            <param name="outputStream">Output stream.</param>
            <param name="level">Compression level.</param>
            <param name="bCloseStream">If true, output stream will be closed after the last block has been written.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes compressor and writes ZLib header.
            </summary>
            <param name="outputStream">Output stream.</param>
            <param name="bCloseStream">If true, output stream will be closed after the last block has been written.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Compresses data and writes it to the stream.
            </summary>
            <param name="data">Data to compress</param>
            <param name="offset">offset in data array</param>
            <param name="length">length of data to compress</param>
            <param name="bCloseAfterWrite">True - write last compress block in stream, 
            otherwise False</param>
        </member>
        <member name="P:Syncfusion.PdfExport.CompressedStreamWriter.TotalIn">
            <summary>
            Total data processed.
            </summary>		
        </member>
        <member name="P:Syncfusion.PdfExport.CompressedStreamWriter.NeedsInput">
            <summary>
            Return true if input is needed
            </summary>		
        </member>
        <member name="P:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanIsFull">
            <summary>
            Checks, wheather huffman compression buffer is full.
            </summary>
            <returns>True if buffer is full.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.WriteZLIBHeader">
            <summary>
            Writes ZLib header to stream.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.SlideWindow">
            <summary>
            Slides current window, and data, associated with it.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.UpdateHash">
            <summary>
            Updates hash.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.InsertString">
            <summary>
            Inserts string to the hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.FindLongestMatch(System.Int32)">
            <summary>
            Searches for the longest match.
            </summary>
            <param name="curMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.SaveStored(System.Boolean,System.Boolean)">
            <summary>
            Store data without compression.
            </summary>
            <param name="flush"></param>
            <param name="finish"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.CompressFast(System.Boolean,System.Boolean)">
            <summary>
            Compress with a maximum speed.
            </summary>
            <param name="flush"></param>
            <param name="finish"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.CompressSlow(System.Boolean,System.Boolean)">
            <summary>
            Compress, using maximum compression level.
            </summary>
            <param name="flush"></param>
            <param name="finish"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.CompressData(System.Boolean)">
            <summary>
            CompressData drives actual compression of data
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanReset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanLengthCode(System.Int32)">
            <summary>
            Calculates length code from length.
            </summary>
            <param name="len">Length.</param>
            <returns>Length code.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanDistanceCode(System.Int32)">
            <summary>
            Calculates distance code from distance.
            </summary>
            <param name="distance">Distance.</param>
            <returns>Distance code.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanSendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanCompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanFlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanFlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanTallyLit(System.Int32)">
            <summary>
            Add literal to buffer.
            </summary>
            <param name="literal"></param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.HuffmanTallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.PendingBufferWriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="s">
            value to write
            </param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.PendingBufferWriteByteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="data">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.PendingBufferAlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.PendingBufferWriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.PendingBufferWriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="P:Syncfusion.PdfExport.CompressedStreamWriter.PendingBufferIsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.PendingBufferFlush">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressedStreamWriter.PendingBufferFlushBits">
            <summary>
            Flushes fully recorded bytes to buffer array.
            </summary>
            <returns>Count of bytes, added to buffer.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.CompressorHuffmanTree">
            <summary>
            Represents the Huffman Tree.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressorHuffmanTree.m_CodeFrequences">
            <summary>
            Frequences of the codes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressorHuffmanTree.m_Codes">
            <summary>
            Codes itself.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressorHuffmanTree.m_CodeLengths">
            <summary>
            Bit counts, needed to encode different codes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressorHuffmanTree.m_LengthCounts">
            <summary>
            Count of codes with some lengths.
            Index - length, value - count.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressorHuffmanTree.m_CodeMinimumCount">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressorHuffmanTree.m_CodeCount">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressorHuffmanTree.m_MaximumLength">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompressorHuffmanTree.m_Writer">
            <summary>
            Data compressor.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.#ctor(Syncfusion.PdfExport.CompressedStreamWriter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new Huffman tree
            </summary>
            <param name="writer"/>
            <param name="iElementsCount"/>
            <param name="iMinimumCodes"/>
            <param name="iMaximumLength"/>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.Reset">
            <summary>
            Resets all code data in tree.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.WriteCodeToStream(System.Int32)">
            <summary>
            Writes code to the compressor output stream.
            </summary>
            <param name="code">Code to be written.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Specifies new arrays of codes and their lengths.
            </summary>
            <param name="codes">Array of codes.</param>
            <param name="lengths">Array of code lengths.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.BuildCodes">
            <summary>
            Calculates codes from their frequences.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.BuildLength(System.Int32[])">
            <summary>
            Build tree with lengths.
            </summary>
            <param name="childs"></param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.BuildTree">
            <summary>
            Builds tree.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.GetEncodedLength">
            <summary>
            Calculates length of the compressed data.
            </summary>
            <returns>Count of bits, the data will occupy.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.CalcBLFreq(Syncfusion.PdfExport.CompressorHuffmanTree)">
            <summary>
            Calculates code frequences.
            </summary>
            <param name="blTree">Tree.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CompressorHuffmanTree.WriteTree(Syncfusion.PdfExport.CompressorHuffmanTree)">
            <summary>
            Writes tree to output stream.
            </summary>
            <param name="blTree">Tree to be written.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.CompressorHuffmanTree.TreeLength">
            <summary>
            Length of the tree.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CompressorHuffmanTree.CodeLengths">
            <summary>
            Lengths of codes in tree.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CompressorHuffmanTree.CodeFrequences">
            <summary>
            Code frequences.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCompressionLevel">
            <summary>
            Defines data compression level.
            </summary>
            <remarks>Default value is Normal.</remarks>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            //Set document compression level
            doc.Compression = PdfCompressionLevel.BestSpeed;
            //Obtain PdfGraphics object.
            PdfGraphics g = page.Graphics;
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold);
            //Create pen with green color.
            PdfPen pen = new PdfPen(System.Drawing.Color.Green);
            //Create brush with black color.
            PdfBrush brush = new PdfSolidBrush(System.Drawing.Color.Black);
            RectangleF rect = new RectangleF(100, 100, 200, 100);
            //Draw text in the new page.
            g.DrawString("Simple Rectangle", font, PdfBrushes.DarkBlue, new PointF(310, 255));
            //Draw rectangle in the new page.
            g.DrawRectangle(pen, brush, rect);
            //Save the document.
            doc.Save("CompressionLevel.pdf");
            //Close the document.
            doc.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As PdfDocument = New PdfDocument()
            'Creates a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Set document compression level.
            doc.Compression = PdfCompressionLevel.BestSpeed
            'Obtain PdfGraphics object.
            Dim g As PdfGraphics = page.Graphics
            'Create font with Bold font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14, PdfFontStyle.Bold)
            'Create pen with green color.
            Dim pen As PdfPen = New PdfPen(System.Drawing.Color.Green)
            'Create brush with black color.
            Dim brush As PdfBrush = New PdfSolidBrush(System.Drawing.Color.Black)
            Dim rect As RectangleF = New RectangleF(100, 100, 200, 100)
            'Draw text in the new page.
            g.DrawString("Simple Rectangle", font, PdfBrushes.DarkBlue, New PointF(310, 255))
            'Draw rectangle in the new page.
            g.DrawRectangle(pen, brush, rect)
            'Save document to disk.
            doc.Save("CompressionLevel.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCompressionLevel.None">
            <property name="flag" value="Finished" />
            <summary>
            Pack without compression.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCompressionLevel.BestSpeed">
            <property name="flag" value="Finished" />
            <summary>
            Use high speed compression, reduce of data size is low.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCompressionLevel.BelowNormal">
            <property name="flag" value="Finished" />
            <summary>
            Something middle between normal and BestSpeed compressions.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCompressionLevel.Normal">
            <property name="flag" value="Finished" />
            <summary>
            Use normal compression, middle between speed and size.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCompressionLevel.AboveNormal">
            <property name="flag" value="Finished" />
            <summary>
            Pack better but require a little more time.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCompressionLevel.Best">
            <property name="flag" value="Finished" />
            <summary>
            Use best compression, slow enough.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfAutomaticField">
            <summary>
            Represents a fields which is calculated before the document saves.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Create new instance of PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            //Create new instance of PDF brush.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Blue);
            //Creates page number field.
            PdfPageNumberField pageNumber = new PdfPageNumberField(font);
            //Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric;
            //Create automatic field.
            PdfAutomaticField field = pageNumber;
            //Set font for automatic field.
            field.Font = font;
            //Set brush for automatic field.
            field.Brush = brush;
            //Set size for automatic field.
            field.Size = new SizeF(100, 50);
            //Set location for automatic field.
            field.Location = new PointF(50, 50);
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = document.Pages.Add();
            field.Draw(page.Graphics);
            }
            //Save and close the document.
            document.Save("AutomaticField.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim document As PdfDocument = New PdfDocument()
            'Create new instance of PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12.0F)
            'Create new instance of PDF brush.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Blue)
            'Creates page number field.
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField()
            'Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric
            'Create automatic field.
            Dim field As PdfAutomaticField = pageNumber
            'Set font for automatic field.
            field.Font = font
            'Set brush for automatic field.
            field.Brush = brush
            'Set size for automatic field.
            field.Size = New SizeF(100, 50)
            'Set location for automatic field.
            field.Location = New PointF(50, 50)
            Dim i As Integer
            While i &lt;&gt; 2
            Dim page As PdfPage = document.Pages.Add()
            field.Draw(page.Graphics)
            i += 1
            End While
            'Save and close the document.
            document.Save("AutomaticField.pdf")
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticField.m_bounds">
            <summary>
            Internal variable to store field's bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticField.m_font">
            <summary>
            Internal variable to store font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticField.m_brush">
            <summary>
            Internal variable to store brush.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticField.m_pen">
            <summary>
            Internal variable to store pen.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticField.m_stringFormat">
            <summary>
            Internal variable to store string format.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticField.m_templateSize">
            <summary>
            Internal variable to store template size.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAutomaticField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.#ctor(Syncfusion.PdfExport.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAutomaticField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>
            </summary>
            <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> represents the format of the text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAutomaticField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>.
            </summary>
            <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> represents the format of the text.</param>
            <param name="brush">The <see cref="T:Syncfusion.PdfExport.PdfBrush"/> provides color and texture to the text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.#ctor(Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAutomaticField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and bounds.
            </summary>
            <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> represents the format of the text.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticField.Bounds">
            <summary>
            Gets or sets the bounds of the field.
            </summary>
            <value>The bounds value.</value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Create new instance of PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            //Create new instance of PDF brush.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Blue);
            //Creates page number field.
            PdfPageNumberField pageNumber = new PdfPageNumberField(font);
            //Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric;
            //Create automatic field.
            PdfAutomaticField field = pageNumber;
            //Set font for automatic field.
            field.Font = font;
            //Set brush for automatic field.
            field.Brush = brush;
            //Set location and size for the automatic field.
            field.Bounds = new RectangleF(50, 50, 100, 100);
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = document.Pages.Add();
            field.Draw(page.Graphics);
            }
            //Save and close the document.
            document.Save("AutomaticField.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim document As PdfDocument = New PdfDocument()
            'Create new instance of PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12.0F)
            'Create new instance of PDF brush.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Blue)
            'Creates page number field.
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField()
            'Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric
            'Create automatic field.
            Dim field As PdfAutomaticField = pageNumber
            'Set font for automatic field.
            field.Font = font
            'Set brush for automatic field.
            field.Brush = brush
            'Set location and size for the automatic field.
            field.Bounds = New RectangleF(50, 50, 100, 50)
            Dim i As Integer
            While i &lt;&gt; 2
            Dim page As PdfPage = document.Pages.Add()
            field.Draw(page.Graphics)
            i += 1
            End While
            'Save and close the document.
            document.Save("AutomaticField.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticField.Size">
            <summary>
            Gets or sets the size of the field.
            </summary>
            <value>The size of the field.</value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Create new instance of PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            //Create new instance of PDF brush.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Blue);
            //Creates page number field.
            PdfPageNumberField pageNumber = new PdfPageNumberField(font);
            //Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric;
            //Create automatic field.
            PdfAutomaticField field = pageNumber;
            //Set font for automatic field.
            field.Font = font;
            //Set brush for automatic field.
            field.Brush = brush;
            //Set size for automatic field.
            field.Size = new SizeF(100, 50);
            //Set location for automatic field.
            field.Location = new PointF(50, 50);
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = document.Pages.Add();
            field.Draw(page.Graphics);
            }
            //Save and close the document.
            document.Save("AutomaticField.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim document As PdfDocument = New PdfDocument()
            'Create new instance of PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12.0F)
            'Create new instance of PDF brush.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Blue)
            'Creates page number field.
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField()
            'Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric
            'Create automatic field.
            Dim field As PdfAutomaticField = pageNumber
            'Set font for automatic field.
            field.Font = font
            'Set brush for automatic field.
            field.Brush = brush
            'Set size for automatic field.
            field.Size = New SizeF(100, 50)
            'Set location for automatic field.
            field.Location = New PointF(50, 50)
            Dim i As Integer
            While i &lt;&gt; 2
            Dim page As PdfPage = document.Pages.Add()
            field.Draw(page.Graphics)
            i += 1
            End While
            'Save and close the document.
            document.Save("AutomaticField.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticField.Location">
            <summary>
            Gets or sets the location of the field.
            </summary>
            <value>The location.</value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Create new instance of PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            //Create new instance of PDF brush.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Blue);
            //Creates page number field.
            PdfPageNumberField pageNumber = new PdfPageNumberField(font);
            //Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric;
            //Create automatic field.
            PdfAutomaticField field = pageNumber;
            //Set font for automatic field.
            field.Font = font;
            //Set brush for automatic field.
            field.Brush = brush;
            //Set size for automatic field.
            field.Size = new SizeF(100, 50);
            //Set location for automatic field.
            field.Location = new PointF(50, 50);
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = document.Pages.Add();
            field.Draw(page.Graphics);
            }
            //Save and close the document.
            document.Save("AutomaticField.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim document As PdfDocument = New PdfDocument()
            'Create new instance of PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12.0F)
            'Create new instance of PDF brush.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Blue)
            'Creates page number field.
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField()
            'Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric
            'Create automatic field.
            Dim field As PdfAutomaticField = pageNumber
            'Set font for automatic field.
            field.Font = font
            'Set brush for automatic field.
            field.Brush = brush
            'Set size for automatic field.
            field.Size = New SizeF(100, 50)
            'Set location for automatic field.
            field.Location = New PointF(50, 50)
            Dim i As Integer
            While i &lt;&gt; 2
            Dim page As PdfPage = document.Pages.Add()
            field.Draw(page.Graphics)
            i += 1
            End While
            'Save and close the document.
            document.Save("AutomaticField.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticField.Font">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.PdfExport.PdfFont"/> of the field.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfFont"/> represents the format of the text.</value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Create new instance of PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            //Create new instance of PDF brush.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Blue);
            //Creates page number field.
            PdfPageNumberField pageNumber = new PdfPageNumberField(font);
            //Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric;
            //Create automatic field.
            PdfAutomaticField field = pageNumber;
            //Set font for automatic field.
            field.Font = font;
            //Set brush for automatic field.
            field.Brush = brush;
            //Set size for automatic field.
            field.Size = new SizeF(100, 50);
            //Set location for automatic field.
            field.Location = new PointF(50, 50);
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = document.Pages.Add();
            field.Draw(page.Graphics);
            }
            //Save and close the document.
            document.Save("AutomaticField.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim document As PdfDocument = New PdfDocument()
            'Create new instance of PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12.0F)
            'Create new instance of PDF brush.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Blue)
            'Creates page number field.
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField()
            'Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric
            'Create automatic field.
            Dim field As PdfAutomaticField = pageNumber
            'Set font for automatic field.
            field.Font = font
            'Set brush for automatic field.
            field.Brush = brush
            'Set size for automatic field.
            field.Size = New SizeF(100, 50)
            'Set location for automatic field.
            field.Location = New PointF(50, 50)
            Dim i As Integer
            While i &lt;&gt; 2
            Dim page As PdfPage = document.Pages.Add()
            field.Draw(page.Graphics)
            i += 1
            End While
            'Save and close the document.
            document.Save("AutomaticField.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticField.Brush">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.PdfExport.PdfBrush"/> of the field
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfBrush"/> provides color and texture to the text.</value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Create new instance of PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            //Create new instance of PDF brush.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Blue);
            //Creates page number field.
            PdfPageNumberField pageNumber = new PdfPageNumberField(font);
            //Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric;
            //Create automatic field.
            PdfAutomaticField field = pageNumber;
            //Set font for automatic field.
            field.Font = font;
            //Set brush for automatic field.
            field.Brush = brush;
            //Set size for automatic field.
            field.Size = new SizeF(100, 50);
            //Set location for automatic field.
            field.Location = new PointF(50, 50);
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = document.Pages.Add();
            field.Draw(page.Graphics);
            }
            //Save and close the document.
            document.Save("AutomaticField.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim document As PdfDocument = New PdfDocument()
            'Create new instance of PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12.0F)
            'Create new instance of PDF brush.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Blue)
            'Creates page number field.
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField()
            'Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric
            'Create automatic field.
            Dim field As PdfAutomaticField = pageNumber
            'Set font for automatic field.
            field.Font = font
            'Set brush for automatic field.
            field.Brush = brush
            'Set size for automatic field.
            field.Size = New SizeF(100, 50)
            'Set location for automatic field.
            field.Location = New PointF(50, 50)
            Dim i As Integer
            While i &lt;&gt; 2
            Dim page As PdfPage = document.Pages.Add()
            field.Draw(page.Graphics)
            i += 1
            End While
            'Save and close the document.
            document.Save("AutomaticField.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticField.Pen">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.PdfExport.PdfPen"/> of the field.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPen"/> that determines the color, width, and style of the text.</value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Create new instance of PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            //Create new instance of PDF brush.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Blue);
            //Creates page number field.
            PdfPageNumberField pageNumber = new PdfPageNumberField(font);
            //Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric;
            //Create automatic field.
            PdfAutomaticField field = pageNumber;
            //Set font for automatic field.
            field.Font = font;
            //Set brush for automatic field.
            field.Brush = brush;
            //Set size for automatic field.
            field.Size = new SizeF(100, 50);
            //Set location for automatic field.
            field.Location = new PointF(50, 50);
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = document.Pages.Add();
            field.Draw(page.Graphics);
            }
            //Save and close the document.
            document.Save("AutomaticField.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim document As PdfDocument = New PdfDocument()
            'Create new instance of PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12.0F)
            'Create new instance of PDF brush.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Blue)
            'Creates page number field.
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField()
            'Set number style for page number field.
            pageNumber.NumberStyle = PdfNumberStyle.Numeric
            'Create automatic field.
            Dim field As PdfAutomaticField = pageNumber
            'Set font for automatic field.
            field.Font = font
            'Set brush for automatic field.
            field.Brush = brush
            'Set size for automatic field.
            field.Size = New SizeF(100, 50)
            'Set location for automatic field.
            field.Location = New PointF(50, 50)
            Dim i As Integer
            While i &lt;&gt; 2
            Dim page As PdfPage = document.Pages.Add()
            field.Draw(page.Graphics)
            i += 1
            End While
            'Save and close the document.
            document.Save("AutomaticField.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticField.StringFormat">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.PdfExport.PdfStringFormat"/> of the field.
            </summary>
            <value>
            The <see cref="T:Syncfusion.PdfExport.PdfStringFormat"/> determines text layout information on PDF
            </value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.Draw(Syncfusion.PdfExport.PdfGraphics,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.GetValue(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.PerformDraw(Syncfusion.PdfExport.PdfGraphics,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Performs draw.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.ObtainSize">
            <summary>
            Gets the template size.
            </summary>
            <returns>The template size.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.ObtainBrush">
            <summary>
            Gets the brush. If brush is undefined default black brush will be used.
            </summary>
            <returns>The brush </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticField.ObtainFont">
            <summary>
            Gets the font. If font is undefined default font will be used.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfAutomaticFieldInfo">
            <summary>
            Represents information about the automatic field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticFieldInfo.m_location">
            <summary>
            Internal variable to store location of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticFieldInfo.m_field">
            <summary>
            Internal variable to store field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticFieldInfo.m_scalingX">
            <summary>
            Internal variable to store x scaling factor.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfAutomaticFieldInfo.m_scalingY">
            <summary>
            Internal variable to store y scaling factor.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticFieldInfo.#ctor(Syncfusion.PdfExport.PdfAutomaticField,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAutomaticFieldInfo"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticFieldInfo.#ctor(Syncfusion.PdfExport.PdfAutomaticField,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAutomaticFieldInfo"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticFieldInfo.#ctor(Syncfusion.PdfExport.PdfAutomaticFieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAutomaticFieldInfo"/> class.
            </summary>
            <param name="fieldInfo">The field info.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticFieldInfo.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticFieldInfo.Field">
            <summary>
            Gets or sets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticFieldInfo.ScalingX">
            <summary>
            Gets or sets the scaling X factor.
            </summary>
            <value>The scaling X factor.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfAutomaticFieldInfo.ScalingY">
            <summary>
            Gets or sets the scaling Y factor.
            </summary>
            <value>The scaling Y factor.</value>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfAutomaticFieldInfoCollection">
            <summary>
            Represent a collection of automatic fields information.
            </summary>
            <seealso cref="T:Syncfusion.PdfExport.PdfCollection"/> Class    
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticFieldInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfAutomaticFieldInfoCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfAutomaticFieldInfoCollection.Add(Syncfusion.PdfExport.PdfAutomaticFieldInfo)">
            <summary>
            Adds the specified field info.
            </summary>
            <param name="fieldInfo">The field info.</param>
            <returns>field Info</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCompositeField">
             <summary>
             Represents class which can concatenate multiple automatic fields into single string.
             </summary>
             <example>
             <code lang="CS">
             //Creates a new document
             PdfDocument doc = new PdfDocument();
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
             PdfBrush brush = PdfBrushes.Black;
             //Create a composite field
             PdfCompositeField compositeField = new PdfCompositeField(font, brush);
             compositeField.Text = "AutomaticFields";
             for (int i = 0; i != 3; i++)
             {
             //Creates a new page
             PdfPage page = doc.Pages.Add();
             compositeField.Draw(page.Graphics);
             }
             //Save and close the document
             doc.Save("AutomaticField.pdf");
             doc.Close(true);
             </code>
             <code lang="VB.NET">
             'Creates a new document
             Dim doc As New PdfDocument()
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F)
             Dim brush As PdfBrush = PdfBrushes.Black
            'Create a composite field
             Dim compositeField As New PdfCompositeField(font, brush)
             compositeField.Text = "AutomaticFields"
             Dim i As Integer = 0
             While i &lt;&gt; 3
            	'Creates a new page
            	Dim page As PdfPage = doc.Pages.Add()
            	compositeField.Draw(page.Graphics)
            	i += 1
             End While
            'Save and close the document
             doc.Save("AutomaticField.pdf")
             doc.Close(True)
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCompositeField.m_automaticFields">
            <summary>
            Internal variable to store list of automatic fields.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCompositeField.m_text">
            <summary>
            Internal variable to store value.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCompositeField.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCompositeField"/> class.
             </summary>  
             <example>
             <code lang="CS">
             //Creates a new document.
             PdfDocument doc = new PdfDocument();
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
             PdfBrush brush = PdfBrushes.Black;
             //Create a composite field.
             PdfCompositeField compositeField = new PdfCompositeField();
             compositeField.Text = "AutomaticFields";
             for (int i = 0; i != 3; i++)
             {
             //Creates a new page.
             PdfPage page = doc.Pages.Add();
             compositeField.Draw(page.Graphics);
             }
             //Save and close the document.
             doc.Save("AutomaticField.pdf");
             doc.Close(true);
             </code>
             <code lang="VB.NET">
             'Creates a new document.
             Dim doc As New PdfDocument()
             'Create a composite field.
             Dim compositeField As New PdfCompositeField()
             compositeField.Text = "AutomaticFields"
             Dim i As Integer = 0
             While i &lt;&gt; 3
            'Creates a new page.
            	Dim page As PdfPage = doc.Pages.Add()
            	compositeField.Draw(page.Graphics)
            	i += 1
             End While
             'Save and close the document.
             doc.Save("AutomaticField.pdf")
             doc.Close(True)
             </code>
             </example>
             <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
             <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
             <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
             <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCompositeField.#ctor(Syncfusion.PdfExport.PdfFont)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCompositeField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>
             </summary>
             <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/>object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <example>
             <code lang="CS">
             // Creates a new document
             PdfDocument doc = new PdfDocument();
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
             //Create a composite field
             PdfCompositeField compositeField = new PdfCompositeField(font);
             compositeField.Text = "AutomaticFields";
             for (int i = 0; i != 3; i++)
             {
             //Creates a new page
             PdfPage page = doc.Pages.Add();
             compositeField.Draw(page.Graphics);
             }
             //Save and close the document
             doc.Save("AutomaticField.pdf");
             doc.Close(true);
             </code>
             <code lang="VB.NET">
             'Creates a new document.
             Dim doc As New PdfDocument()
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F)
             'Create a composite field.
             Dim compositeField As New PdfCompositeField(font)
             compositeField.Text = "AutomaticFields"
             Dim i As Integer = 0
             While i &lt;&gt; 3
            	'Creates a new page.
            	Dim page As PdfPage = doc.Pages.Add()
            	compositeField.Draw(page.Graphics)
            	i += 1
             End While
             'Save and close the document.
             doc.Save("AutomaticField.pdf")
             doc.Close(True)
             </code>
             </example>
             <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
             <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCompositeField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCompositeField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>
             </summary>
             <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/>object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
             <param name="brush">The <see cref="T:Syncfusion.PdfExport.PdfBrush"/> specifies the color and texture to the text.</param>
             <example>
             <code lang="CS">
             //Creates a new document.
             PdfDocument doc = new PdfDocument();
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
             PdfBrush brush = PdfBrushes.Black;
             //Create a composite field.
             PdfCompositeField compositeField = new PdfCompositeField(font, brush);
             compositeField.Text = "AutomaticFields";
             for (int i = 0; i != 3; i++)
             {
             //Creates a new page.
             PdfPage page = doc.Pages.Add();
             compositeField.Draw(page.Graphics);
             }
             //Save and close the document.
             doc.Save("AutomaticField.pdf");
             doc.Close(true); 
             </code>
             <code lang="VB.NET">
             'Creates a new document.
             Dim doc As New PdfDocument()
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F)
             Dim brush As PdfBrush = PdfBrushes.Black
             'Create a composite field.
             Dim compositeField As New PdfCompositeField(font, brush)
             compositeField.Text = "AutomaticFields"
             Dim i As Integer = 0
             While i &lt;&gt; 3
            	'Creates a new page
            	Dim page As PdfPage = doc.Pages.Add()
            	compositeField.Draw(page.Graphics)
            	i += 1
             End While
             'Save and close the document.
             doc.Save("AutomaticField.pdf")
             doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
             <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCompositeField.#ctor(Syncfusion.PdfExport.PdfFont,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCompositeField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and text
             </summary>
             <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
             <param name="text">The wide-character string to be drawn.</param>
            <example>
             <code lang="CS">
             //Creates a new document.
             PdfDocument doc = new PdfDocument();
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
             //Create a composite field.
             PdfCompositeField compositeField = new PdfCompositeField(font,"AutomaticField");
             compositeField.Text = "AutomaticFields";
             for (int i = 0; i != 3; i++)
             {
             //Creates a new page.
             PdfPage page = doc.Pages.Add();
             compositeField.Draw(page.Graphics);
             }
             //Save and close the document.
             doc.Save("AutomaticField.pdf");
             doc.Close(true);
             </code>
             <code lang="VB.NET">
             'Creates a new document.
             Dim doc As New PdfDocument()
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F)
             'Create a composite field.
             Dim compositeField As New PdfCompositeField(font,"AutomaticField")
             compositeField.Text = "AutomaticFields"
             Dim i As Integer = 0
             While i &lt;&gt; 3
            	'Creates a new page.
            	Dim page As PdfPage = doc.Pages.Add()
            	compositeField.Draw(page.Graphics)
            	i += 1
             End While
             'Save and close the document.
             doc.Save("AutomaticField.pdf")
             doc.Close(True)
             </code>
             </example>
             <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
             <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCompositeField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCompositeField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>,<see cref="T:Syncfusion.PdfExport.PdfBrush"/> and text.
             </summary>
             <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
             <param name="text">The wide-character string to be drawn.</param>
             <param name="brush">A <see cref="T:Syncfusion.PdfExport.PdfBrush"/> object that is used to fill the string. </param> 
             <example>
             <code lang="CS">
             // Creates a new document
             PdfDocument doc = new PdfDocument();
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
             PdfBrush brush = PdfBrushes.Black;
             //Create a composite field
             PdfCompositeField compositeField = new PdfCompositeField(font,brush,"AutomaticField");
             compositeField.Text = "AutomaticFields";
             for (int i = 0; i != 3; i++)
             {
             //Creates a new page
             PdfPage page = doc.Pages.Add();
             compositeField.Draw(page.Graphics);
             }
             //Save and close the document
             doc.Save("AutomaticField.pdf");
             doc.Close(true);
             </code>
             <code lang="VB.NET">
             'Creates a new document.
             Dim doc As New PdfDocument()
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F)
             Dim brush As PdfBrush = PdfBrushes.Black
             'Create a composite field.
             Dim compositeField As New PdfCompositeField(font,brush,"AutomaticField")
             compositeField.Text = "AutomaticFields"
             Dim i As Integer = 0
             While i &lt;&gt; 3
            	'Creates a new page.
            	Dim page As PdfPage = doc.Pages.Add()
            	compositeField.Draw(page.Graphics)
            	i += 1
             End While
            'Save and close the document.
             doc.Save("AutomaticField.pdf")
             doc.Close(True)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCompositeField.#ctor(System.String,Syncfusion.PdfExport.PdfAutomaticField[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCompositeField"/> class with text and list of automatic fields
            </summary>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="list">The list of <see cref="T:Syncfusion.PdfExport.PdfAutomaticField"/> objects.</param>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage mainPage = document.Pages.Add();
            //Create the PDF font instance.
            PdfTrueTypeFont font = new PdfTrueTypeFont(new Font("Times New Roman", 12f));
            //Create the PDF brsh instance.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Green);
            //Create page count field.
            PdfPageCountField pageCount = new PdfPageCountField();
            pageCount.Bounds = new RectangleF(0, 0, 150, 150);
            pageCount.Font = font;
            pageCount.Brush = brush;
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            //Create date time field.
            PdfDateTimeField dateField = new PdfDateTimeField();
            dateField.Font = font;
            dateField.DateFormatString = "MM'/'ddd'/'yyyy";
            dateField.Brush = brush;
            //Set value for automatic field.
            PdfAutomaticField[] auto = { pageCount, dateField };
            //Create composite field.
            PdfCompositeField comp = new PdfCompositeField("page {0}, date {1} ", auto);
            comp.Brush = brush;
            comp.Location = new PointF(100, 100);
            comp.Draw(mainPage.Graphics);
            comp.Size = new SizeF(300, 300);
            comp.Font = font;
            //Save and close the document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document
            Dim document As PdfDocument = New PdfDocument()
            'Create a new page.
            Dim mainPage As PdfPage = document.Pages.Add()
            'Create the PDF font instance.
            Dim font As PdfTrueTypeFont = New PdfTrueTypeFont(New Font("Times New Roman", 12.0F))
            'Create the PDF font instance.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Green)
            'Create page count field.
            Dim pageCount As PdfPageCountField = New PdfPageCountField()
            pageCount.Bounds = New RectangleF(0, 0, 150, 150)
            pageCount.Font = font
            pageCount.Brush = brush
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            'Create date time field.
            Dim dateField As PdfDateTimeField = New PdfDateTimeField()
            dateField.Font = font
            dateField.DateFormatString = "MM'/'ddd'/'yyyy"
            dateField.Brush = brush
            'Set value for automatic field.
            Dim auto As PdfAutomaticField() = {pageCount, dateField }
            'Create composite field.
            Dim comp As PdfCompositeField = New PdfCompositeField("page {0}, date {1} ", auto)
            comp.Brush = brush
            comp.Location = New PointF(100, 100)
            comp.Draw(mainPage.Graphics)
            comp.Size = New SizeF(300, 300)
            comp.Font = font
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageCountField"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfDateTimeField"/> Class 
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCompositeField.#ctor(Syncfusion.PdfExport.PdfFont,System.String,Syncfusion.PdfExport.PdfAutomaticField[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCompositeField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>,text and list of automatic fields
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="list">The list of <see cref="T:Syncfusion.PdfExport.PdfAutomaticField"/> objects.</param>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage mainPage = document.Pages.Add();
            //Create the PDF font instance.
            PdfTrueTypeFont font = new PdfTrueTypeFont(new Font("Times New Roman", 12f));
            //Create the PDF brsh instance.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Green);
            //Create page count field.
            PdfPageCountField pageCount = new PdfPageCountField();
            pageCount.Bounds = new RectangleF(0, 0, 150, 150);
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            //Create date time field.
            PdfDateTimeField dateField = new PdfDateTimeField();
            dateField.DateFormatString = "MM'/'ddd'/'yyyy";
            //Set value for automatic field.
            PdfAutomaticField[] auto = { pageCount, dateField };
            //Create composite field.
            PdfCompositeField comp = new PdfCompositeField(font, "page {0}, date {1} ", auto);
            comp.Brush = brush;
            comp.Location = new PointF(100, 100);
            comp.Draw(mainPage.Graphics);
            comp.Size = new SizeF(300, 300);
            comp.Font = font;
            //Save and close the document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document
            Dim document As PdfDocument = New PdfDocument()
            'Create a new page.
            Dim mainPage As PdfPage = document.Pages.Add()
            'Create the PDF font instance.
            Dim font As PdfTrueTypeFont = New PdfTrueTypeFont(New Font("Times New Roman", 12.0F))
            'Create the PDF font instance.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Green)
            'Create page count field.
            Dim pageCount As PdfPageCountField = New PdfPageCountField()
            pageCount.Bounds = New RectangleF(0, 0, 150, 150)
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            'Create date time field.
            Dim dateField As PdfDateTimeField = New PdfDateTimeField()
            dateField.DateFormatString = "MM'/'ddd'/'yyyy"
            'Set value for automatic field.
            Dim auto As PdfAutomaticField() = {pageCount, dateField }
            'Create composite field.
            Dim comp As PdfCompositeField = New PdfCompositeField(font, "page {0}, date {1} ", auto)
            comp.Brush = brush
            comp.Location = New PointF(100, 100)
            comp.Draw(mainPage.Graphics)
            comp.Size = New SizeF(300, 300)
            comp.Font = font
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageCountField"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfDateTimeField"/> Class 
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCompositeField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush,System.String,Syncfusion.PdfExport.PdfAutomaticField[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCompositeField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>,<see cref="T:Syncfusion.PdfExport.PdfBrush"/>,text and list of automatic fields.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="brush">A <see cref="T:Syncfusion.PdfExport.PdfBrush"/> object that is used to fill the string. </param>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="list">The list of <see cref="T:Syncfusion.PdfExport.PdfAutomaticField"/> objects.</param>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage mainPage = document.Pages.Add();
            //Create the PDF font instance.
            PdfTrueTypeFont font = new PdfTrueTypeFont(new Font("Times New Roman", 12f));
            //Create the PDF brsh instance.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Green);
            //Create page count field.
            PdfPageCountField pageCount = new PdfPageCountField();
            pageCount.Bounds = new RectangleF(0, 0, 150, 150);
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            //Create date time field.
            PdfDateTimeField dateField = new PdfDateTimeField();
            dateField.DateFormatString = "MM'/'ddd'/'yyyy";
            //Set value for automatic field.
            PdfAutomaticField[] auto = { pageCount, dateField };
            //Create composite field.
            PdfCompositeField comp = new PdfCompositeField(font, brush, "page {0}, date {1} ", auto);
            comp.Location = new PointF(100, 100);
            comp.Draw(mainPage.Graphics);
            comp.Size = new SizeF(300, 300);
            comp.Font = font;
            //Save and close the document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document
            Dim document As PdfDocument = New PdfDocument()
            'Create a new page.
            Dim mainPage As PdfPage = document.Pages.Add()
            'Create the PDF font instance.
            Dim font As PdfTrueTypeFont = New PdfTrueTypeFont(New Font("Times New Roman", 12.0F))
            'Create the PDF font instance.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Green)
            'Create page count field.
            Dim pageCount As PdfPageCountField = New PdfPageCountField()
            pageCount.Bounds = New RectangleF(0, 0, 150, 150)
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            'Create date time field.
            Dim dateField As PdfDateTimeField = New PdfDateTimeField()
            dateField.DateFormatString = "MM'/'ddd'/'yyyy"
            'Set value for automatic field.
            Dim auto As PdfAutomaticField() = {pageCount, dateField }
            'Create composite field.
            Dim comp As PdfCompositeField = New PdfCompositeField(font, brush, "page {0}, date {1} ", auto)
            comp.Location = New PointF(100, 100)
            comp.Draw(mainPage.Graphics)
            comp.Size = New SizeF(300, 300)
            comp.Font = font
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageCountField"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfDateTimeField"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCompositeField.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The wide-character string to be drawn.</value>
            <example>
            <code lang="CS">
            //Creates a new document
            PdfDocument doc = new PdfDocument();
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            PdfBrush brush = PdfBrushes.Black;
            //Create a composite field
            PdfCompositeField compositeField = new PdfCompositeField(font, brush);
            compositeField.Text = "AutomaticFields";
            for (int i = 0; i != 3; i++)
            {
            //Creates a new page
            PdfPage page = doc.Pages.Add();
            compositeField.Draw(page.Graphics);
            }
            //Save and close the document
            doc.Save("AutomaticField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Creates a new document
            Dim doc As New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F)
            Dim brush As PdfBrush = PdfBrushes.Black
            'Create a composite field
            Dim compositeField As New PdfCompositeField(font, brush)
            compositeField.Text = "AutomaticFields"
            Dim i As Integer = 0
            While i &lt;&gt; 3
            'Creates a new page
            Dim page As PdfPage = doc.Pages.Add()
            compositeField.Draw(page.Graphics)
            i += 1
            End While
            'Save and close the document
            doc.Save("AutomaticField.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCompositeField.AutomaticFields">
            <summary>
            Gets or sets the automatic fields.
            </summary>
            <value>The array of automatic fields <see cref="T:Syncfusion.PdfExport.PdfAutomaticField"/>.</value>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage mainPage = document.Pages.Add();
            //Create the PDF font instance.
            PdfTrueTypeFont font = new PdfTrueTypeFont(new Font("Times New Roman", 12f));
            //Create the PDF brsh instance.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Green);
            //Create page count field.
            PdfPageCountField pageCount = new PdfPageCountField();
            pageCount.Bounds = new RectangleF(0, 0, 150, 150);
            pageCount.Font = font;
            pageCount.Brush = brush;
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            //Create date time field.
            PdfDateTimeField dateField = new PdfDateTimeField();
            dateField.Font = font;
            dateField.DateFormatString = "MM'/'ddd'/'yyyy";
            dateField.Brush = brush;
            //Set value for automatic field.
            PdfAutomaticField[] auto = { pageCount, dateField };
            //Create composite field.
            PdfCompositeField comp = new PdfCompositeField();
            comp.Text = "page {0}, date {1}";
            comp.AutomaticFields = auto;
            comp.Brush = brush;
            comp.Location = new PointF(100, 100);
            comp.Draw(mainPage.Graphics);
            comp.Size = new SizeF(300, 300);
            comp.Font = font;
            //Save and close the document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document
            Dim document As PdfDocument = New PdfDocument()
            'Create a new page.
            Dim mainPage As PdfPage = document.Pages.Add()
            'Create the PDF font instance.
            Dim font As PdfTrueTypeFont = New PdfTrueTypeFont(New Font("Times New Roman", 12.0F))
            'Create the PDF font instance.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Green)
            'Create page count field.
            Dim pageCount As PdfPageCountField = New PdfPageCountField()
            pageCount.Bounds = New RectangleF(0, 0, 150, 150)
            pageCount.Font = font
            pageCount.Brush = brush
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            'Create date time field.
            Dim dateField As PdfDateTimeField = New PdfDateTimeField()
            dateField.Font = font
            dateField.DateFormatString = "MM'/'ddd'/'yyyy"
            dateField.Brush = brush
            'Set value for automatic field.
            Dim auto As PdfAutomaticField() = {pageCount, dateField }
            'Create composite field.
            Dim comp As PdfCompositeField = New PdfCompositeField()
            comp.Text = "page {0}, date {1}"
            comp.AutomaticFields = auto
            comp.Brush = brush
            comp.Location = New PointF(100, 100)
            comp.Draw(mainPage.Graphics)
            comp.Size = New SizeF(300, 300)
            comp.Font = font
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageCountField"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfDateTimeField"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCompositeField.GetValue(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDateTimeField">
            <summary>
            Represents date and time automated field.
            </summary>
            <example>
            <code lang="C#">
            //Creates a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();           
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);    
            //Creates DateTime field.
            PdfDateTimeField dateTimeField = new PdfDateTimeField(font);
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy";
            for (int i = 0; i !=3; i++)
            {
             page = doc.Pages.Add();
             dateTimeField.Draw(page.Graphics);
            }
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            <code lang="VB">
            'Creates a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page.
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            'Creates DateTime field.
            Dim dateTimeField As PdfDateTimeField = New PdfDateTimeField(font)
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy"
            For i As Integer = 0 To 2
             page = doc.Pages.Add()
             dateTimeField.Draw(page.Graphics)
            Next i
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfStaticField"/> Class    
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDateTimeField.m_date">
            <summary>
            Internal variable to store date value of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDateTimeField.m_formatString">
            <summary>
            Internal variable to store format of the date.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDateTimeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDateTimeField"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Creates a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();                
            //Creates DateTime field.
            PdfDateTimeField dateTimeField = new PdfDateTimeField();
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy";
            for (int i = 0; i!=3; i++)
            {
             page = doc.Pages.Add();
             dateTimeField.Draw(page.Graphics);
            }
            //Save and close the document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            <code lang="VB">
            'Creates a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page.
            Dim page As PdfPage = doc.Pages.Add()        
            'Creates DateTime field.
            Dim dateTimeField As PdfDateTimeField = New PdfDateTimeField()
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy"
            For i As Integer = 0 To 2
             page = doc.Pages.Add()
             dateTimeField.Draw(page.Graphics)
            Next i
            'Save and close the document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDateTimeField.#ctor(Syncfusion.PdfExport.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDateTimeField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <example>
            <code lang="C#">
            //Creates a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();           
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);    
            //Creates DateTime field.
            PdfDateTimeField dateTimeField = new PdfDateTimeField(font);
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy";
            for (int i = 0; i !=3; i++)
            {
             page = doc.Pages.Add();
             dateTimeField.Draw(page.Graphics);
            }
            //Save and close the document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            <code lang="VB">
            'Creates a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page.
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            'Creates DateTime field.
            Dim dateTimeField As PdfDateTimeField = New PdfDateTimeField(font)
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy"
            For i As Integer = 0 To 2
             page = doc.Pages.Add()
             dateTimeField.Draw(page.Graphics)
            Next i
            'Save and close the document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDateTimeField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDateTimeField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <param name="brush">A <see cref="T:Syncfusion.PdfExport.PdfBrush"/> object that is used to fill the string. </param>
            <example>
            <code lang="C#">
            //Creates a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();           
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);    
            //Creates DateTime field.
            PdfDateTimeField dateTimeField = new PdfDateTimeField(font, PdfBrushes.Aquamarine);
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy";
            for (int i = 0; i!=3; i++)
            {
             page = doc.Pages.Add();
             dateTimeField.Draw(page.Graphics);
            }
            //Save and close the document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            <code lang="VB">
            'Creates a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page.
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            'Creates DateTime field.
            Dim dateTimeField As PdfDateTimeField = New PdfDateTimeField(font, PdfBrushes.Aquamarine)
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy"
            For i As Integer = 0 To 2
             page = doc.Pages.Add()
             dateTimeField.Draw(page.Graphics)
            Next i
            'Save and clos ethe document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDateTimeField.#ctor(Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDateTimeField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and rectangle bounds
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <param name="bounds">Specifies the location and size of the field.</param>
            <example>
            <code lang="C#">
            //Creates a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();           
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);    
            //Creates DateTime field.
            PdfDateTimeField dateTimeField = new PdfDateTimeField(font, new RectangleF(new PointF(10,10), new SizeF(100,200)));
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy";
            for (int i = 0; i!=3; i++)
            {
             page = doc.Pages.Add();
             dateTimeField.Draw(page.Graphics);
            }
            //Save and close the document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            <code lang="VB">
            'Creates a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page.
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            'Creates DateTime field.
            Dim dateTimeField As PdfDateTimeField = New PdfDateTimeField(font, New RectangleF(New PointF(10,10), New SizeF(100,200)))
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy"
            For i As Integer = 0 To 2
             page = doc.Pages.Add()
             dateTimeField.Draw(page.Graphics)
            Next i
            'Save and close the document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDateTimeField.DateFormatString">
            <summary>
            Gets or sets the date format string.
            </summary>
            <value>The format string.</value>
            <example>
            <code lang="C#">
            //Creates a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = doc.Pages.Add();           
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);    
            //Creates DateTime field.
            PdfDateTimeField dateTimeField = new PdfDateTimeField(font, new RectangleF(new PointF(10,10), new SizeF(100,200)));
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy";
            for (int i = 0; i!=3; i++)
            {
             page = doc.Pages.Add();
             dateTimeField.Draw(page.Graphics);
            }
            //Save and close the document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            <code lang="VB">
            'Creates a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page.
            Dim page As PdfPage = doc.Pages.Add()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            'Creates DateTime field.
            Dim dateTimeField As PdfDateTimeField = New PdfDateTimeField(font, New RectangleF(New PointF(10,10), New SizeF(100,200)))
            dateTimeField.DateFormatString = "dd'/'MMMM'/'yyyy"
            For i As Integer = 0 To 2
             page = doc.Pages.Add()
             dateTimeField.Draw(page.Graphics)
            Next i
            'Save and clos ethe document.
            doc.Save("DateTimeField.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDateTimeField.GetValue(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Get the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>value</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDynamicField">
            <summary>
            Represents automatic field which value is dynamically evaluated.
            </summary>
            <seealso cref="T:Syncfusion.PdfExport.PdfAutomaticField"/> Class  
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDynamicField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDynamicField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDynamicField.#ctor(Syncfusion.PdfExport.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDynamicField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDynamicField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDynamicField"/> class <see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="brush">.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDynamicField.#ctor(Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDynamicField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and bounds
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="bounds">The Rectangle bounds.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDynamicField.GetPageFromGraphics(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Gets the page from a graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>The proper PdfPage instance.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfMultipleValueField">
            <summary>
            Represents automatic field which has the same value within the <see cref="T:Syncfusion.PdfExport.PdfGraphics"/>
            </summary>
            <seealso cref="T:Syncfusion.PdfExport.PdfDynamicField"/> Class  
        </member>
        <member name="F:Syncfusion.PdfExport.PdfMultipleValueField.m_list">
            <summary>
            Internal variable to store templates associated with the graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMultipleValueField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfMultipleValueField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMultipleValueField.#ctor(Syncfusion.PdfExport.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfMultipleValueField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/>object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMultipleValueField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfMultipleValueField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/>object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="brush">The <see cref="T:Syncfusion.PdfExport.PdfBrush"/> specifies the color and texture to the text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMultipleValueField.#ctor(Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfMultipleValueField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and rectangle bounds.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/>object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="bounds">The rectangle bounds.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMultipleValueField.PerformDraw(Syncfusion.PdfExport.PdfGraphics,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Performs draw.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfNumbersConvertor">
            <summary>
            Utility class for number conversion.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfNumbersConvertor.LetterLimit">
            <summary>
            Limit number of converting arabic to \"A\" format.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfNumbersConvertor.AcsiiStartIndex">
            <summary>
            Index of A char in the ASCII table.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfNumbersConvertor.Convert(System.Int32,Syncfusion.PdfExport.PdfNumberStyle)">
            <summary>
            Converts the specified number to numberStyle format.
            </summary>
            <param name="intArabic">The arabic value.</param>
            <param name="numberStyle">The number style.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfNumbersConvertor.ArabicToRoman(System.Int32)">
            <summary>
            Converts arabic number to roman.
            </summary>
            <param name="intArabic">Number in arabic format.</param>
            <returns>Number in Roman format.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfNumbersConvertor.ArabicToLetter(System.Int32)">
            <summary>
            Converts arabic number to \"A\" format.
            </summary>
            <param name="arabic">Number in arabic format.</param>
            <returns>Number in \"A\" format.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfNumbersConvertor.GenerateNumber(System.Int32@,System.Int32,System.String)">
            <summary>
            Utility metnod for converting arabic number to roman format.
            </summary>
            <param name="value">Current number value.</param>
            <param name="magnitude">Max current number.</param>
            <param name="letter">Roman equivalent.</param>
            <returns>Roman equivalent.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfNumbersConvertor.ConvertToLetter(System.Single)">
            <summary>
            Utility metnod. Helps to convert arabic number to \"A\" format.
            </summary>
            <param name="arabic">Arabic number.</param>
            <returns>Sequence of number.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfNumbersConvertor.AppendChar(System.Text.StringBuilder,System.Int32)">
            <summary>
            Adds letter instead of number.
            </summary>
            <param name="builder">String builder object.</param>
            <param name="number">Number to be converted to letter.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPageCountField">
            <summary>
            Represents total PDF document page count automatic field.
            </summary>
            <example>
            <code lang="C#">
            // Create a new document
            PdfDocument doc = new PdfDocument();         
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            PdfBrush brush = PdfBrushes.Black;
            // Creates page count field
            PdfPageCountField pageCount = new PdfPageCountField(font);
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            for (int i = 0; i != 2; i++)
            {
             PdfPage page = doc.Pages.Add();
             pageCount.Draw(page.Graphics);
            }
            doc.Save("PageCountField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            ' Creates page count field
            Dim pageCount As PdfPageCountField = New PdfPageCountField(font)
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            For i As Integer = 0 To 1
             Dim page As PdfPage = doc.Pages.Add()
             pageCount.Draw(page.Graphics)
            Next i
            doc.Save("PageCountField.pdf")
            doc.Close(True);
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfSingleValueField"/> Class    
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageCountField.m_numberStyle">
            <summary>
            Internal variable to store numbering style.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageCountField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageCountField"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Create a new page.
            PdfPage page = document.Pages.Add();
            //Create new instance of PDF font.
            PdfTrueTypeFont font = new PdfTrueTypeFont(new Font("Tahoma", 10f), true);
            //Create new instance of PDF brush.
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            SizeF bounds = page.GetClientSize();
            //Create new instance of page count field.
            PdfPageCountField pageCount = new PdfPageCountField();
            //Set font for page count field.
            pageCount.Font = font;
            //Set brush for page count field.
            pageCount.Brush = brush;
            //Set size for page count field.
            pageCount.Size = new SizeF(100, 50);
            //Set location for page count field.
            pageCount.Location = new PointF(110, 20);
            //Set number style for page count field.
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            for (int i = 0; i != 100; i++)
            {
            //Draw the text.
            page.Graphics.DrawString("Total page count :", font, PdfBrushes.Blue, new PointF(20, 20));
            //Draw the page count field.
            pageCount.Draw(page.Graphics);
            //Add new page to DPF document.
            page = document.Pages.Add();
            }
            //Save and close the document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim document As PdfDocument = New PdfDocument()
            'Create a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new instance of PDF font.
            Dim font As PdfTrueTypeFont = New PdfTrueTypeFont(New Font("Tahoma", 10.0F), True)
            'Create new instance of PDF brush.
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Black)
            Dim bounds As SizeF = page.GetClientSize()
            'Create new instance of page count field.
            Dim pageCount As PdfPageCountField = New PdfPageCountField()
            'Set font for page count field.
            pageCount.Font = font
            'Set brush for page count field.
            pageCount.Brush = brush
            'Set size for page count field.
            pageCount.Size = New SizeF(100, 50)
            'Set location for page count field.
            pageCount.Location = New PointF(110, 20)
            'Set number style for page count field.
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            Dim i As Integer
            While i &lt;&gt; 100
            'Draw the text.
            page.Graphics.DrawString("Total page count :", font, PdfBrushes.Blue, New PointF(20, 20))
            'Draw the page count field.
            pageCount.Draw(page.Graphics)
            'Add new page to DPF document.
            page = document.Pages.Add()
            i += 1
            End While
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageCountField.#ctor(Syncfusion.PdfExport.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageCountField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();         
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            // Creates page count field
            PdfPageCountField pageCount = new PdfPageCountField(font);
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            for (int i = 0; i != 2; i++)
            {
             PdfPage page = doc.Pages.Add();
             pageCount.Draw(page.Graphics);
            }
            doc.Save("PageCountField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            ' Creates page count field
            Dim pageCount As PdfPageCountField = New PdfPageCountField(font)
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            For i As Integer = 0 To 1
             Dim page As PdfPage = doc.Pages.Add()
             pageCount.Draw(page.Graphics)
            Next i
            doc.Save("PageCountField.pdf")
            doc.Close(True);
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageCountField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageCountField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="brush">A <see cref="T:Syncfusion.PdfExport.PdfBrush"/> object that is used to fill the string.</param>
            <example>
            <code lang="C#">
            //Creates a new document.
            PdfDocument doc = new PdfDocument();         
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            PdfBrush brush = PdfBrushes.Black;
            //Creates page count field.
            PdfPageCountField pageCount = new PdfPageCountField(font,brush);
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            for (int i = 0; i != 2; i++)
            {
             PdfPage page = doc.Pages.Add();
             pageCount.Draw(page.Graphics);
            }
            //Save and close the document.
            doc.Save("PageCountField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a new document.
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            'Creates page count field.
            Dim pageCount As PdfPageCountField = New PdfPageCountField(font)
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            For i As Integer = 0 To 1
             Dim page As PdfPage = doc.Pages.Add()
             pageCount.Draw(page.Graphics)
            Next i
            'Save and close the document.
            doc.Save("PageCountField.pdf")
            doc.Close(True);
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageCountField.#ctor(Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageCountField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and rectangle bounds
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="bounds">The rectangle bounds of the field.</param>
            <example>
            <code lang="C#">
            //Creates a new document.
            PdfDocument doc = new PdfDocument();         
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            RectangleF rect = new RectangleF(10, 10, 50, 30);
            //Creates page count field.
            PdfPageCountField pageCount = new PdfPageCountField(font,rect);
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            for (int i = 0; i != 2; i++)
            {
             PdfPage page = doc.Pages.Add();
             pageCount.Draw(page.Graphics);
            }
            //Save and close the document.
            doc.Save("PageCountField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a new document.
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            Dim rect As RectangleF = New RectangleF(10, 10, 50, 30)
            'Creates page count field.
            Dim pageCount As PdfPageCountField = New PdfPageCountField(font)
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            For i As Integer = 0 To 1
             Dim page As PdfPage = doc.Pages.Add()
             pageCount.Draw(page.Graphics)
            Next i
            'Save and close the document.
            doc.Save("PageCountField.pdf")
            doc.Close(True);
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageCountField.NumberStyle">
            <summary>
            Gets or sets the number style.
            </summary>
            <value>The number style.</value>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();         
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            PdfBrush brush = PdfBrushes.Black;
            // Creates page count field
            PdfPageCountField pageCount = new PdfPageCountField(font);
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            for (int i = 0; i != 2; i++)
            {
             PdfPage page = doc.Pages.Add();
             pageCount.Draw(page.Graphics);
            }
            doc.Save("PageCountField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            ' Creates page count field
            Dim pageCount As PdfPageCountField = New PdfPageCountField(font)
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            For i As Integer = 0 To 1
             Dim page As PdfPage = doc.Pages.Add()
             pageCount.Draw(page.Graphics)
            Next i
            doc.Save("PageCountField.pdf")
            doc.Close(True);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageCountField.GetValue(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>result</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPageNumberField">
            <summary>
            Represents PDF document page number field.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument doc = new PdfDocument();         
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);            
            //Creates page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font);
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin;
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = doc.Pages.Add();
            pageNumber.Draw(page.Graphics);
            }
            doc.Save("PageNumberField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            'Creates page number field
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField(font)
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin
            For i As Integer = 0 To 1
              Dim page As PdfPage = doc.Pages.Add()
              pageNumber.Draw(page.Graphics)
            Next i
            doc.Save("PageNumberField.pdf")
            doc.Close(True)
            </code>
            </example> 
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageNumberField.m_numberStyle">
            <summary>
            Internal variable to store numbering style.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageNumberField.NumberStyle">
            <summary>
            Gets or sets the specific number style.
            </summary>
            <value>The<see cref="T:Syncfusion.PdfExport.PdfNumberStyle"/> provides specific number style.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageNumberField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageNumberField"/> class.
            </summary>
            <example>
            <code lang="C#">
            // Create a new document
            PdfDocument doc = new PdfDocument();                  
            // Creates page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField();
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin;
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = doc.Pages.Add();
            pageNumber.Draw(page.Graphics);
            }
            doc.Save("PageNumberField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            ' Create a new document
            Dim doc As PdfDocument = New PdfDocument()
            ' Creates page number field
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField()
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin
            For i As Integer = 0 To 1
              Dim page As PdfPage = doc.Pages.Add()
              pageNumber.Draw(page.Graphics)
            Next i
            doc.Save("PageNumberField.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageNumberField.#ctor(Syncfusion.PdfExport.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageNumberField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();         
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);            
            // Creates page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font);
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin;
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = doc.Pages.Add();
            pageNumber.Draw(page.Graphics);
            }
            doc.Save("PageNumberField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            ' Creates page number field
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField(font)
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin
            For i As Integer = 0 To 1
              Dim page As PdfPage = doc.Pages.Add()
              pageNumber.Draw(page.Graphics)
            Next i
            doc.Save("PageNumberField.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageNumberField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageNumberField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="brush">A <see cref="T:Syncfusion.PdfExport.PdfBrush"/> object that is used to fill the string.</param>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();         
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);            
            // Creates page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font, PdfBrushes.Beige);
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin;
            for (int i = 0; i!=2; i++)
            {
            PdfPage page = doc.Pages.Add();
            pageNumber.Draw(page.Graphics);
            }
            doc.Save("PageNumberField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            ' Creates page number field
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField(font, PdfBrushes.Beige)
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin
            For i As Integer = 0 To 1
              Dim page As PdfPage = doc.Pages.Add()
              pageNumber.Draw(page.Graphics)
            Next i
            doc.Save("PageNumberField.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageNumberField.#ctor(Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageNumberField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and rectangle bounds.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.s</param>
            <param name="bounds">The bounds.</param>
            <example>
            <code lang="C#">
            // Creates a new document
            PdfDocument doc = new PdfDocument();         
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);            
            // Creates page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font, new RectangleF(10, 10, 100, 200));
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin;
            for (int i = 0; i != 2; i++)
            {
            PdfPage page = doc.Pages.Add();
            pageNumber.Draw(page.Graphics);
            }
            doc.Save("PageNumberField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            ' Creates a new document
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            ' Creates page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font, new RectangleF(10, 10, 100, 200));
            pageNumber.NumberStyle = PdfNumberStyle.UpperLatin
            For i As Integer = 0 To 1
              Dim page As PdfPage = doc.Pages.Add()
              pageNumber.Draw(page.Graphics)
            Next i
            doc.Save("PageNumberField.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageNumberField.GetValue(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Gets the value of the field at the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>result</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageNumberField.InternalGetValue(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Internal method to get value of the field.
            </summary>
            <param name="page">The page.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfSingleValueField">
            <summary>
            Represents automatic field which has the same value in the whole document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument(); 
            //Create new PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f);
            //Create new PDF brush.
            PdfBrush brush = PdfBrushes.Black;
            //Creates page count field.
            PdfPageCountField pageCount = new PdfPageCountField(font);
            pageCount.NumberStyle = PdfNumberStyle.Numeric;
            for (int i = 0; i != 2; i++)
            {
             PdfPage page = doc.Pages.Add();
             pageCount.Draw(page.Graphics);
            }
            //Save and close the document.
            doc.Save("PageCountField.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f)
            Dim brush As PdfBrush = PdfBrushes.Black
            'Creates page count field.
            Dim pageCount As PdfPageCountField = New PdfPageCountField(font)
            pageCount.NumberStyle = PdfNumberStyle.Numeric
            For i As Integer = 0 To 1
             Dim page As PdfPage = doc.Pages.Add()
             pageCount.Draw(page.Graphics)
            Next i
            'Save and close the document.
            doc.Save("PageCountField.pdf")
            doc.Close(True);
            </code>
            </example> 
            <seealso cref="T:Syncfusion.PdfExport.PdfDynamicField"/> Class    
        </member>
        <member name="F:Syncfusion.PdfExport.PdfSingleValueField.m_list">
            <summary>
            Internal variable to store templates associated with the document.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfSingleValueField.m_painterGraphics">
            <summary>
            Internal variable to array of graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSingleValueField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfSingleValueField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSingleValueField.#ctor(Syncfusion.PdfExport.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfSingleValueField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSingleValueField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfSingleValueField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>.
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="brush">A <see cref="T:Syncfusion.PdfExport.PdfBrush"/> object that is used to fill the string.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSingleValueField.#ctor(Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfSingleValueField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and rectangle bounds of the field
            </summary>
            <param name="font">A <see cref="T:Syncfusion.PdfExport.PdfFont"/> object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSingleValueField.PerformDraw(Syncfusion.PdfExport.PdfGraphics,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Performs draw.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfStaticField">
            <summary>
            Represents automatic field which value can be evaluated in the moment of creation.
            </summary>
            <seealso cref="T:Syncfusion.PdfExport.PdfAutomaticField"/> Class    
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStaticField.m_template">
            <summary>
            Internal variable to store template of the field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStaticField.m_graphicsList">
            <summary>
            Internal variable to store list of graphics
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStaticField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStaticField"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStaticField.#ctor(Syncfusion.PdfExport.PdfFont)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStaticField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/>
            </summary>
            <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> represents the format of the text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStaticField.#ctor(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStaticField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>
            </summary>
            <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> represents the format of the text.</param>
            <param name="brush">The <see cref="T:Syncfusion.PdfExport.PdfBrush"/> provides color and texture to the text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStaticField.#ctor(Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStaticField"/> class with <see cref="T:Syncfusion.PdfExport.PdfFont"/> and bounds
            </summary>
            <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> represents the format of the text.</param>
            <param name="bounds">The Rectangle bounds.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStaticField.PerformDraw(Syncfusion.PdfExport.PdfGraphics,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Performs draw.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="scalingX">The scaling X.</param>
            <param name="scalingY">The scaling Y.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTemplateValuePair">
            <summary>
            Represent class to store information about template and value pairs 
            used in automatic fields.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTemplateValuePair.m_template">
            <summary>
            Internal variable to store template.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTemplateValuePair.m_value">
            <summary>
            Intenal variable to store value.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplateValuePair.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTemplateValuePair"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplateValuePair.#ctor(Syncfusion.PdfExport.PdfTemplate,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTemplateValuePair"/> class.
            </summary>
            <param name="template">The template.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTemplateValuePair.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTemplateValuePair.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCatalog">
            <summary>
            Represents internal catalog of the Pdf document.
            </summary>
            <seealso cref="T:Syncfusion.PdfExport.PdfDictionary"/> Class    
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCatalog.m_sections">
            <summary>
            Internal variable to store collection of sections.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCatalog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCatalog"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCatalog.Pages">
            <summary>
            Gets or sets the sections, which contain pages.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCatalog.Clear">
            <summary>
            Clear PdfCatalog
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDocument">
            <summary>
            Represents a PDF document and can be used to create a new PDF document from the scratch
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page.
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            //Save the document.
            document.Save("Document.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            'Save the document.
            document.Save("Document.pdf");
            'Close the document.
            document.Close(True)
            </code>
            </example>    
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfDocumentBase"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfGraphics"/> Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.DefaultMargin">
            <summary>
            Default margin value.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.s_defaultFont">
            <summary>
            Font used in complex objects to draw strings and text when it is not defined explicitly.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.s_cacheLock">
            <summary>
            Helps to lock s_cache to avoid race conditions.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.m_pageTemplate">
            <summary>
            Internal variable to store template which is applied to each page of the document.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.m_pages">
            <summary>
            Internal variable to store document's collection of pages.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.m_sections">
            <summary>
            Internal variable to store document's collection of sections.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.m_settings">
            <summary>
            Default page settings.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.m_bPageLabels">
            <summary>
            Indicates if the page labels were set.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.m_colorSpace">
            <summary>
            Defines the color space of the document
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocument.m_isDisposed">
            <summary>
            Indicates whether the object was disposed.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDocument"/> class.
            </summary>
            <example>
            <code lang = "C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Creates a new page.
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold) ;
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            //Save the document.
            document.Save("Document.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            ' Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Creates a new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            'Save the document.
            document.Save("Document.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>    
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class    
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class                   
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.Finalize">
            <summary>
            Dispose a instance of the <see cref="T:Syncfusion.PdfExport.PdfDocument"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocument.Template">
            <summary>
            Gets and sets the PDF doucment template.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocument.Pages">
            <summary>
            Gets the collection of pages in the document.
            </summary>
            <value>A <see cref="T:Syncfusion.PdfExport.PdfDocumentPageCollection"/> object containing the list of document's pages. </value>
            <example>
            <code lang="C#">
            //Creates a new document.
            PdfDocument doc = new PdfDocument(); 
            //Creates a new page.
            PdfPage page = doc.Pages.Add();
            //Page collection.
            PdfDocumentPageCollection pageCollection = doc.Pages;
            PdfFont standardFont = new PdfStandardFont(PdfFontFamily.TimesRoman,10);  
            //Drawing string on first page.
            pageCollection[0].Graphics.DrawString("FirstPage", standardFont, PdfBrushes.Black, new PointF(10, 10));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Creates a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Page collection.
            Dim pageCollection As PdfDocumentPageCollection = doc.Pages
            Dim standardFont As PdfFont = New PdfStandardFont(PdfFontFamily.TimesRoman,10)
            'Drawing string on the page.
            pageCollection(0).Graphics.DrawString("FirstPage", standardFont, PdfBrushes.Black, New PointF(10, 10))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>        
            <see cref="T:Syncfusion.PdfExport.PdfDocumentPageCollection"/> Class
            <see cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <see cref="T:Syncfusion.PdfExport.PdfPageBase"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocument.Sections">
            <summary>Gets the collection of the sections in the document.</summary>
            <value>A <see cref="T:Syncfusion.PdfExport.PdfSectionCollection"/> object containing the list of document's sections.</value>
            <remarks>
            To know more about refer this <see href="https://help.syncfusion.com/file-formats/pdf/working-with-document#creating-sections-in-a-pdf">link </see>.
            </remarks>
            <example>
            <code lang="C#">
            //Create a PDF document
            PdfDocument doc = new PdfDocument();
            // Create a new section
            PdfSection mySection = doc.Sections.Add();
            //Creates a new page
            mySection.Pages.Add();
            // Gets the section collection
            PdfSectionCollection sectionCollection = doc.Sections;
            // Gets the first page from first section
            PdfPage page = sectionCollection[0].Pages[0];
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            // Draw the string in first page of the section
            page.Graphics.DrawString("Hello World", font, PdfBrushes.Black, new Point(100, 100));
            doc.Save("Sections.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            ' Create a new section
            Dim mySection As PdfSection = doc.Sections.Add()
            'Creates a new page
            mySection.Pages.Add()
            ' Gets the section collection
            Dim sectionCollection As PdfSectionCollection = doc.Sections
            ' Gets the first page from first section
            Dim page As PdfPage = sectionCollection(0).Pages(0)
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            ' Draw the string in first page of the section
            page.Graphics.DrawString("Hello World", font, PdfBrushes.Black, New Point(100, 100))
            doc.Save("Sections.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>      
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocument.PageSettings">
            <summary>
            Gets or sets the document's page setting.
            </summary>
            <example>
            <value>A <see cref="T:Syncfusion.PdfExport.PdfPageSettings"/> object containing the setting for a document`s pages.</value>
            <code lang="C#">
            //Create a new document class object.
            PdfDocument doc = new PdfDocument();
            //Creates a new page.
            PdfPage page = doc.Pages.Add();
            //Set page size.
            doc.PageSettings.Size = PdfPageSize.A6;
            //Set page orientation.
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape;
            doc.Save("PageSettings.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document class object.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Set page size.
            doc.PageSettings.Size = PdfPageSize.A6
            'Set page orientation.
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape
            doc.Save("PageSettings.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocument.ColorSpace">
            <summary>
            Gets or sets the color space of the document. This property can be used to create PDF document in RGB, Grayscale or CMYK color spaces.
            By default the document uses RGB color space.
            </summary>
            <remarks>This property has impact on the new created pages only.</remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page 
            PdfPage page = doc.Pages.Add();
            //  Set the document`s color spaces as GrayScale 
            doc.ColorSpace = PdfColorSpace.GrayScale;
            doc.Save("ColorSpace.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s color spaces as GrayScale 
            doc.ColorSpace = PdfColorSpace.GrayScale
            doc.Save("ColorSpace.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfColorSpace"/> of the document.</value>
            <see cref="T:Syncfusion.PdfExport.PdfColorSpace"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocument.DefaultFont">
            <summary>
            Gets the default font. It is used for complex objects when font is 
            not explicitly defined.
            </summary>
            <value>The default font.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocument.PageCount">
            <summary>
            Gets the number of pages.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified output stream.
            </summary>
            <param name="stream">The stream object where PDF document will be saved.</param>    
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image            
            PdfImage pdfImg = new PdfBitmap(Image.FromFile("Logo.png")); 
            //Draw the image
            g.DrawImage(pdfImg, 20, 20, 100, 200);
            // Save the document as a stream
            MemoryStream stream = new MemoryStream();
            doc.Save(stream);
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image            
            Dim pdfImg As PdfImage = New PdfBitmap(Image.FromFile("Logo.png"))
            'Draw the image
            g.DrawImage(pdfImg, 20, 20, 100, 200)
            ' Save the document as a stream
            Dim stream As MemoryStream = New MemoryStream()
            doc.Save(stream)
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.Close(System.Boolean)">
            <summary>
            Close the document completely. 
            </summary>
            <param name="completely">if set to <c>true</c> the document should be disposed completely.</param>
            <remarks>
            The document cannot be saved if Close method was invoked.
            To know more about refer this <see href="https://help.syncfusion.com/file-formats/pdf/loading-and-saving-document#closing-a-document">link </see>.
            </remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();           
            //Creates a new page
            PdfPage page = doc.Pages.Add();            
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;                        
            //Create a solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);          
            float fontSize = 20f;
            //Set the font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);            
            //Draw the text
            g.DrawString("Hello world!", font, brush,new PointF(20,20));           
            doc.Save("Sample.pdf");
            // Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            'Create a solid brush
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            Dim fontSize As Single = 20f
            'Set the font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Draw the text
            g.DrawString("Hello world!", font, brush,New PointF(20,20))
            doc.Save("Sample.pdf")
            ' Closes the document.
            doc.Close(True)
            </code>
            </example>                
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.Dispose">
            <summary>
            Releases all the resources used by document instances.
            </summary>
            <remarks>
            The document cannot be saved if Dispose method was invoked.
            </remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();               
            //Creates a new page
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            //Loads an Image
            Image img = Image.FromFile("input.png");
            PdfImage pdfImg = new PdfBitmap(img);
            //Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200);   
            //Save the document.
            doc.Save("DisposeOnClose.pdf");        
            //Dispose the document
            doc.Dispose();
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            'Loads an Image
            Dim img As Image = Image.FromFile("Logo.png")
            Dim pdfImg As PdfImage = New PdfBitmap(img)
            'Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200)
            'Save the document.
            doc.Save("Dispose.pdf")
            'Dispose the document
            doc.Dispose()
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.Dispose(System.Boolean)">
            <summary>
            Releases all the resources used by document instances.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <value>A new object that is a copy of this instance.</value>        
            <remarks>The resulting clone must be of the same type as or a compatible type to the original instance.</remarks>
            <example>
            <returns>A new object that is a copy of this instance.</returns>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();           
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();            
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;                        
            //Create a solid brush
            PdfBrush brush = new PdfSolidBrush(Color.Black);          
            float fontSize = 20f;
            //Set the font
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, fontSize);            
            //Draw the text
            g.DrawString("Hello world!", font, brush,new PointF(20,20));           
            // Cloning the document
            PdfDocument cloneDoc = doc.Clone() as PdfDocument;
            cloneDoc.Save("Clone.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            'Create a solid brush
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            Dim fontSize As Single = 20f
            'Set the font
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, fontSize)
            'Draw the text
            g.DrawString("Hello world!", font, brush,New PointF(20,20))
            ' Cloning the document
            Dim cloneDoc As PdfDocument = TryCast(doc.Clone(), PdfDocument)
            cloneDoc.Save("Clone.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.PageLabelsSet">
            <summary>
            Informs the document that the page labels were set.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.CheckPagesPresence">
            <summary>
            Checks the pages presence.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocument.ProcessPageLabels">
            <summary>
            Processes the page labels.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.ProgressEventArgs">
            <summary>
            Shows the saving progress of the PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ProgressEventArgs.m_total">
            <summary>
            The Total
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ProgressEventArgs.m_current">
            <summary>
            The Current object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.ProgressEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.ProgressEventArgs"/> class.
            </summary>
            <param name="current">The current index.</param>
            <param name="total">The total number.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.ProgressEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.ProgressEventArgs"/> class.
            </summary>
            <param name="current">The current index.</param>
            <param name="total">The total number.</param>
            <param name="processed">The total number of pages progressed.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.ProgressEventArgs.Total">
            <summary>
            Gets the total number of the elements (pages) that need to be saved.
            </summary>     
        </member>
        <member name="P:Syncfusion.PdfExport.ProgressEventArgs.Current">
            <summary>
            Gets the current element (page) index that just was saved.
            </summary>
            <remarks>The index value increases constantly from 0 to Total.</remarks>
        </member>
        <member name="P:Syncfusion.PdfExport.ProgressEventArgs.Progress">
            <summary>
            Gets the progress.
            </summary>
            <remarks>Progress constantly increases from 0.0 to 1.0.
            1.0 value means that entire document has been saved.</remarks>
        </member>
        <member name="T:Syncfusion.PdfExport.DocumentSavedEventArgs">
            <summary>
            Arguments for event raised after document saving.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.DocumentSavedEventArgs.m_writer">
            <summary>
            Document's destination stream.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.DocumentSavedEventArgs.#ctor(Syncfusion.PdfExport.PdfWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.DocumentSavedEventArgs"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.DocumentSavedEventArgs.Writer">
            <summary>
            Gets document's destination stream.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDocumentBase">
            <summary>
            Represent common properties of PdfDocument classes.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Set the document`s viewer preference
            doc.ViewerPreferences.PageLayout = PdfPageLayout.TwoPageLeft;
            doc.ViewerPreferences.PageScaling = PageScalingMode.AppDefault;
            doc.ViewerPreferences.PageMode = PdfPageMode.FullScreen;
            doc.Save("ViewerPreferences.pdf");
            //Close the document
            doc.Close(true);            
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Set the document`s viewer preference
            doc.ViewerPreferences.PageLayout = PdfPageLayout.TwoPageLeft
            doc.ViewerPreferences.PageScaling = PageScalingMode.AppDefault
            doc.ViewerPreferences.PageMode = PdfPageMode.FullScreen
            doc.Save("ViewerPreferences.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_objects">
            <summary>
            Collection of the main objects.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_lock">
            <summary>
            internal variable to store locked array
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_currentSavingObj">
            <summary>
            Object that is saving currently.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_catalog">
            <summary>
            Document catlog.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_crossTable">
            <summary>
            Cross table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_compression">
            <summary>
            Desired level of the new stream compression.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_fileStructure">
            <summary>
            Specifies file structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_disposeObjects">
            <summary>
            A list of the objects that have to be disposed after document closing.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_enableMemoryOptimization">
            <summary>
            Internal variable to store if memory optimization should be done.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.primitive">
            <summary>
            Internal variable to store OCG groups.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_positon">
            <summary>
            Internal variable to store position.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_orderposition">
            <summary>
            Internal variable to store order position.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_onpositon">
            <summary>
            Internal variable to store  on position.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_offpositon">
            <summary>
            Internal variable to store  off position.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_order">
            <summary>
            Internal variable to store layer order.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_on">
            <summary>
            Internal variable to store visible layers.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_off">
            <summary>
            Internal variable to store invisible layers.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_sublayer">
            <summary>
            Internal variable to store Sub Layers.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_sublayerposition">
            <summary>
            Internal variable to store Sub Layers Position.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_printLayer">
            <summary>
            Stores the array of Print layer references
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.isCompressed">
            <summary>
            Specifies the document should be compressed in best.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.progressDelegate">
            <summary>
            The delegade of the progress event handler.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_addedField">
            <summary>
            Variable used to maintain fields are added in Form Field collection in imported PDF
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.m_resourceCollection">
            <summary>
            The variable used to store the Optimized dictionary collection 
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentBase.documentLayerCollection">
            <summary>
            variable used to maintain layers in document
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDocumentBase.DocumentSavedEventHandler">
            <summary>
            Delegate. Is used for raising events after document saving.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDocumentBase.ProgressEventHandler">
            <summary>
            Delegate for the <see cref="T:Syncfusion.PdfExport.PdfDocumentBase.ProgressEventHandler"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="arguments">The arguments.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add new pages to the document.
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            document.SaveProgress += new PdfDocument.ProgressEventHandler(document_SaveProgress);
            //Saves the document
            document.Save("Document.pdf");
            Close the document
            document.Close(true);
            //  Handles the event
            void document_SaveProgress(object sender, ProgressEventArgs arguments)
            {
              MessageBox.Show(String.Format("Current: {0}, Progress: {1}, Total {2}", arguments.Current, arguments.Progress, arguments.Total));
            }
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Private document As PdfDocument = New PdfDocument()
            'Add new pages to the document.
            Private page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Private font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            AddHandler document.SaveProgress, AddressOf document_SaveProgress
            'Saves the document
            document.Save("Document.pdf")
            'Close the document
            document.Close(True)
            '  Handles the event
            Private Sub document_SaveProgress(ByVal sender As Object, ByVal arguments As ProgressEventArgs)
             MessageBox.Show(String.Format("Current: {0}, Progress: {1}, Total {2}", arguments.Current, arguments.Progress, arguments.Total))
            End Sub
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.PdfExport.PdfDocumentBase.DocumentSaved">
            <property name="flag" value="Finished" />
            <summary>
            Event. Rises when the document has been saved.
            </summary>
        </member>
        <member name="E:Syncfusion.PdfExport.PdfDocumentBase.SaveProgress">
            <summary>
            Occurs when the document is being saved.
            </summary>
            <remarks>
            This event raised on saving the document. It will keep track of the save progress of the document.
            </remarks> 
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add new pages to the document.
            PdfPage page = document.Pages.Add();
            //Create font and font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            document.SaveProgress += new PdfDocument.ProgressEventHandler(document_SaveProgress);
            //Saves the document
            document.Save("Document.pdf");
            //Close the document
            document.Close(true);
            // Event handler for PageAdded event
            void document_SaveProgress(object sender, ProgressEventArgs arguments)
            {
              MessageBox.Show(String.Format("Current: {0}, Progress: {1}, Total {2}", arguments.Current, arguments.Progress, arguments.Total));
            }
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Private document As PdfDocument = New PdfDocument()
            'Add new pages to the document.
            Private page As PdfPage = document.Pages.Add()
            'Create font and font style.
            Private font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            AddHandler document.SaveProgress, AddressOf document_SaveProgress
            'Saves the document
            document.Save("Document.pdf")
            'Close the document
            document.Close(True)
            ' Event handler for PageAdded event
            Private Sub document_SaveProgress(ByVal sender As Object, ByVal arguments As ProgressEventArgs)
             MessageBox.Show(String.Format("Current: {0}, Progress: {1}, Total {2}", arguments.Current, arguments.Progress, arguments.Total))
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocumentBase.ProgressEventHandler"/> Delegate
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.Compression">
            <summary>
            Gets or  sets the PDF document compression level. By default the compression level is None
            </summary>
            <remarks>
            To know more about refer this <see href="https://help.syncfusion.com/file-formats/pdf/working-with-compression#compressing-the-pdf-content">link </see>.
            </remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Set the document`s compression level.
            doc.Compression = PdfCompressionLevel.Best;
            //Creates a new page
            PdfPage page = doc.Pages.Add();
            doc.Save("Compression.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Set the document`s compression level.
            doc.Compression = PdfCompressionLevel.Best
            'Create a page.
            Dim page As PdfPage = doc.Pages.Add()
            doc.Save("Compression.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.FileStructure">
            <summary>
            Gets or sets the internal structure of the PDF document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            // Set the document`s cross reference Type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;
            // Set the pdf version
            doc.FileStructure.Version = PdfVersion.Version1_6;
            // Save the document
            doc.Save("FileStructure.pdf");
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            '  Set the document`s cross reference Type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream
            ' set the pdf version
            doc.FileStructure.Version = PdfVersion.Version1_6
            ' Save the document
            doc.Save("FileStructure.pdf")
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class  
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.PdfObjects">
            <summary>
            Gets the PDF objects collection, which stores all objects and references to it..
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.CurrentSavingObj">
            <summary>
            Gets or sets the current saving object number.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.CrossTable">
            <summary>
            Gets the cross-reference table.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.Catalog">
            <summary>
            Gets the PDF document catalog.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.DisposeObjects">
            <summary>
            Gets a list of the objects that have to be disposed after document closing.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.PageCount">
            <summary>
            Gets the number of pages.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.EnableMemoryOptimization">
            <summary>
            Gets or sets whether to optimize memory.
            </summary>
            <remarks>Optimization will be effective only with merge, append and import functions. 
            Only memory will be optimized, different in time occur based on the document size.
            </remarks>
            <example>
            <code lang="C#">
            //Create a new instance of PdfDocument class.
            PdfDocument document = new PdfDocument();
            //Enable memory optimization.
            document.EnableMemoryOptimization = true;
            //Merge source document
            PdfDocument.Merge(document, "Source.pdf");
            //Save and close the pdf document.
            document.Save("Output.pdf");
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Enable memory optimization.
            document.EnableMemoryOptimization = True
            'Merge source document.
            PdfDocument.Merge(document, "Source.pdf")
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentBase.ResourceCollection">
            <summary>
            Gets the Optimized dictionary collection
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.DisposeOnClose(System.IDisposable)">
            <summary>
            Adds an object to a collection of the objects that will be disposed during document closing.
            </summary>
            <param name="disposable">The object that will be disposed during document closing.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();               
            //Creates a new page
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image
            Image img = Image.FromFile("input.png");
            PdfImage pdfImg = new PdfBitmap(img);
            //Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200);            
            doc.Save("DisposeOnClose.pdf");        
            // Dispose the Img object along with the document.
            doc.DisposeOnClose(img);
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image
            Dim img As Image = Image.FromFile("Logo.png")
            Dim pdfImg As PdfImage = New PdfBitmap(img)
            'Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200)
            doc.Save("DisposeOnClose.pdf")
            ' Dispose the Img object along with the document.
            doc.DisposeOnClose(img)
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.Close">
            <summary>
            Closes the document. Releases all common resources.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();               
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image            
            PdfImage pdfImg = new PdfBitmap(Image.FromFile("Logo.png"));
            //Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200);
            //Save the document
            doc.Save("Close.pdf");
            //Close the document
            doc.Close();
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image            
            Dim pdfImg As PdfImage = New PdfBitmap(Image.FromFile("Logo.png"))   
            'Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200)
            'Save the document
            doc.Save("Close.pdf")
            ' Closes the document
            doc.Close()
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class 
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.Close(System.Boolean)">
            <summary> 
            Closes the document.
            </summary>
            <param name="completely">if set to <c>true</c> the document should close its stream as well.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();               
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image            
            PdfImage pdfImg = new PdfBitmap(Image.FromFile("Logo.png")); 
            //Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200);
            //Save the document
            doc.Save("Close.pdf");
            // Closes the document completely.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image            
            Dim pdfImg As PdfImage = New PdfBitmap(Image.FromFile("Logo.png")) 
            'Draw the image
            g.DrawImage(pdfImg,20, 20, 100,200)
            'Save the document
            doc.Save("Close.pdf")
            ' Closes the document completely.
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class 
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified output stream.
            </summary>
            <param name="stream">The stream object where PDF document will be saved.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            //Create Pdf graphics for the page
            PdfGraphics g = page.Graphics;
            // Loads an Image            
            PdfImage pdfImg = new PdfBitmap(Image.FromFile("Logo.png")); 
            //Draw the image
            g.DrawImage(pdfImg, 20, 20, 100, 200);
            // Save the document as a stream
            MemoryStream stream = new MemoryStream();
            doc.Save(stream);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            'Create Pdf graphics for the page
            Dim g As PdfGraphics = page.Graphics
            ' Loads an Image            
            Dim pdfImg As PdfImage = New PdfBitmap(Image.FromFile("Logo.png"))
            'Draw the image
            g.DrawImage(pdfImg, 20, 20, 100, 200)
            ' Save the document as a stream
            Dim stream As MemoryStream = New MemoryStream()
            doc.Save(stream)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.OnPageSave">
            <summary>
            Called when a page is saved.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.OnSaveProgress(Syncfusion.PdfExport.ProgressEventArgs)">
            <summary>
            Raises the Progress event.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.SetMainObjectCollection(Syncfusion.PdfExport.PdfMainObjectCollection)">
            <summary>
            Sets the main object collection.
            </summary>
            <param name="moc">The main object collection.</param>
            <remarks>Allows to use null values as the parameter,
            which causes assigning null value to the variable. That's used for clearing.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.SetCrossTable(Syncfusion.PdfExport.PdfCrossTable)">
            <summary>
            Sets the cross table.
            </summary>
            <param name="cTable">The cross table.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.SetCatalog(Syncfusion.PdfExport.PdfCatalog)">
            <summary>
            Sets the catalog.
            </summary>
            <param name="catalog">The catalog.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentBase.OnDocumentSaved(Syncfusion.PdfExport.DocumentSavedEventArgs)">
            <property name="flag" value="Finished" />
            <summary>
            Raises DocumentSaved event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfFileStructure">
            <summary>
            This class represents a set of the properties that define the internal structure of PDF file.
            </summary>
            <example>
            <code lang="CS">
            //Create a new document
            PdfDocument doc = new PdfDocument();
            //Create a new page
            PdfPage page = doc.Pages.Add();
            //Create new instance for PDF file structure.
            PdfFileStructure structure = new PdfFileStructure();
            //Set the file structure cross reference type.
            structure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;
            //Set the document`s file structure.
            doc.FileStructure = structure;
            // Save the document
            doc.Save("FileStructure.pdf");
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document
            Dim doc As New PdfDocument()
            'Create a new page
            Dim page As PdfPage = doc.Pages.Add()
            'Create new instance for PDF file structure.
            Dim pdfstructure As PdfFileStructure = New PdfFileStructure()
            'Set the file structure cross reference type
            pdfstructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream
            'Set the document`s file structure
            doc.FileStructure = pdfstructure
            'Save the document
            doc.Save("FileStructure.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFileStructure.m_version">
            <summary>
            the version of the file.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFileStructure.m_crossReferenceType">
            <summary>
            The type of the cross-reference.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFileStructure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfFileStructure"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            PdfFileStructure structure = new PdfFileStructure();
            //Set the document`s cross reference type
            structure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;
            //Set the PDF version.
            doc.FileStructure = structure;
            //Draw the text.
            page.Graphics.DrawString("File structure", new PdfStandardFont(PdfFontFamily.Courier, 12), PdfBrushes.Green, new PointF(10, 10));
            //Save and close the document.
            doc.Save("FileStructure.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Add new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new instance for PDF file structure.
            Dim pdfstructure As PdfFileStructure = New PdfFileStructure()
            'Set the document`s cross reference type
            pdfstructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream
            'Set the PDF version.
            doc.FileStructure = pdfstructure
            'Draw the text.
            page.Graphics.DrawString("File structure", New PdfStandardFont(PdfFontFamily.Courier, 12), PdfBrushes.Green, New PointF(10, 10))
            'Save and close the document.
            doc.Save("FileStructure.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfVersion"/> enum.
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFileStructure.Version">
             <summary>
             Gets or sets the version of the PDF document.
             </summary>
             <value>The document version.</value>
             <example>
             <code lang="CS">
             //Create a new document
             PdfDocument doc = new PdfDocument();
             //Create a new page
             PdfPage page = doc.Pages.Add();
             // Set the document`s cross reference type
             doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;
             // Set the PDF version
             doc.FileStructure.Version = PdfVersion.Version1_6;
             // Save the document
             doc.Save("FileStructure.pdf");
             doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document
            Dim doc As New PdfDocument()
            'Create a new page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s cross reference type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream
            ' Set the PDF version
            doc.FileStructure.Version = PdfVersion.Version1_6
            ' Save the document
            doc.Save("FileStructure.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFileStructure.CrossReferenceType">
             <summary>
             Gets or sets the type of PDF cross-reference.
             </summary>
             <remarks>Please see the description of <see cref="T:Syncfusion.PdfExport.PdfCrossReferenceType"/> for more details.</remarks>
             <example>
             <code lang="CS">
             //Create a new document
             PdfDocument doc = new PdfDocument();
             //Create a new page
             PdfPage page = doc.Pages.Add();
             // Set the document`s cross reference type
             doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;
             // Set the PDF version
             doc.FileStructure.Version = PdfVersion.Version1_6;
             // Save the document
             doc.Save("FileStructure.pdf");
             doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document
            Dim doc As New PdfDocument()
            'Create a new page
            Dim page As PdfPage = doc.Pages.Add()
            ' Set the document`s cross reference type
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream
            ' Set the PDF version
            doc.FileStructure.Version = PdfVersion.Version1_6
            ' Save the document
            doc.Save("FileStructure.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfVersion">
            <summary>
            Specifies the available PDF versions to save the PDF document.
            </summary>
            <example>
            <remarks>Default Value is Version1_5</remarks>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Add a page in the PDF document.
            PdfPage page = doc.Pages.Add();    
            //Set the pdf version as Version1_7.
            doc.FileStructure.Version = PdfVersion.Version1_7;
            //Save the PDF document to disk.
            doc.Save("FileStructure.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Add a page in the PDF document.
            Dim page As PdfPage = doc.Pages.Add()
            'Set the  pdf version as Version1_7.
            doc.FileStructure.Version = PdfVersion.Version1_7
            'Save the PDF document to disk.
            doc.Save("FileStructure.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>    
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVersion.Version1_0">
            <summary>
            PDF version 1.0.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVersion.Version1_1">
            <summary>
            PDF version 1.1.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVersion.Version1_2">
            <summary>
            PDF version 1.2.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVersion.Version1_3">
            <summary>
            PDF version 1.3. Adobe Acrobat 4.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVersion.Version1_4">
            <summary>
            PDF version 1.4. Adobe Acrobat 5.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVersion.Version1_5">
            <summary>
            PDF version 1.5. Adobe Acrobat 6.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVersion.Version1_6">
            <summary>
            PDF version 1.6. Adobe Acrobat 7.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVersion.Version1_7">
            <summary>
            PDF version 1.7. Adobe Acrobat 8.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVersion.Version2_0">
            <summary>
            PDF version 2.0.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCrossReferenceType">
            <summary>
            Specifies the type of the PDF cross-reference.
            </summary>
            <remarks>Default value is CrossReferenceStream</remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Add a page in the PDF document.
            PdfPage page = doc.Pages.Add();
            //Set the CrossReferenceType as CrossReferenceStream.
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream;  
            //Save the PDF document to disk.
            doc.Save("FileStructure.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Add a page in the PDF document.
            Dim page As PdfPage = doc.Pages.Add()
            'Set the CrossReferenceType as CrossReferenceStream.
            doc.FileStructure.CrossReferenceType = PdfCrossReferenceType.CrossReferenceStream    
            'Save the PDF document to disk.
            doc.Save("FileStructure.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFileStructure"/> Class    
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossReferenceType.CrossReferenceTable">
            <summary>
            The cross-reference table contains information that permits random access to indirect objects within the file so that the entire file need not be read to locate any particular object. The structure is useful for incremental updates, since it allows a new cross-reference section to be added to the PDF file, containing entries only for objects that have been added or deleted. Cross-reference is represented by cross-reference table. The cross-reference table is the traditional way of representing reference type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossReferenceType.CrossReferenceStream">
            <summary>
            Cross-reference is represented by cross-reference stream. Cross-reference streams are stream objects, and contain a dictionary and a data stream.
            This leads to more compact representation of the file data especially along with the compression enabled.
            This format is supported by PDF 1.5 version and higher only.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.Matrix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.Matrix"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])">
            New Constructor
        </member>
        <member name="M:Syncfusion.PdfExport.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.Matrix"/> class.
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.Matrix"/> class.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.Matrix.Elements">
            <summary>
            Gets the elements.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.Matrix.OffsetX">
            <summary>
            Gets the off set X.
            </summary>
            <value>The off set X.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.Matrix.OffsetY">
            <summary>
            Gets the off set Y.
            </summary>
            <value>The off set Y.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.Matrix.Translate(System.Single,System.Single)">
            <summary>
            Translates the specified offset X.
            </summary>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.Matrix.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCollection">
            <summary>
            The class used to handle the collection of PDF objects.
            </summary>
            <example>
            <code lang="C#">
            //Create new document.
            PdfDocument document = new PdfDocument();
            //Add new page.
            PdfPage page = document.Pages.Add();
            //Add the first layer.
            PdfPageLayer layer = page.Layers.Add("Layer1");
            //Get layer graphics.
            PdfGraphics graphics = layer.Graphics;
            graphics.TranslateTransform(100, 60);
            //Create new instance of PDF pen.
            PdfPen pen = new PdfPen(System.Drawing.Color.Red, 50);
            RectangleF bounds = new RectangleF(0, 0, 50, 50);
            //Draw arc.
            graphics.DrawArc(pen, bounds, 360, 360);
            //Add another layer on the page.
            PdfPageLayer layer2 = page.Layers.Add("Layer2");
            graphics = layer2.Graphics;
            graphics.TranslateTransform(100, 180);
            //Draw ellipse.
            graphics.DrawEllipse(pen, bounds);
            //Get layer collection from page.
            PdfCollection collection = page.Layers;
            //Get the total count of layers.
            int count = collection.Count;
            //Save and close the document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document.
            Dim document As PdfDocument = New PdfDocument()
            'Add new page.
            Dim page As PdfPage = document.Pages.Add()
            'Add the first layer.
            Dim layer As PdfPageLayer = page.Layers.Add("Layer1")
            'Get layer graphics.
            Dim graphics As PdfGraphics = layer.Graphics
            graphics.TranslateTransform(100, 60)
            'Create new instance of PDF pen.
            Dim pen As PdfPen = New PdfPen(System.Drawing.Color.Red, 50)
            Dim bounds As RectangleF = New RectangleF(0, 0, 50, 50)
            'Draw arc.
            graphics.DrawArc(pen, bounds, 360, 360)
            'Add another layer on the page.
            Dim layer2 As PdfPageLayer = page.Layers.Add("Layer2")
            graphics = layer2.Graphics
            graphics.TranslateTransform(100, 180)
            'Draw ellipse.
            graphics.DrawEllipse(pen, bounds)
            'Get layer collection from page.
            Dim collection As PdfCollection = page.Layers
            'Get the total count of layers.
            Dim count As Integer = collection.Count
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageLayer"/> Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCollection.m_list">
            <summary>
            List of the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCollection"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create new document.
            PdfDocument document = new PdfDocument();
            //Add new page.
            PdfPage page = document.Pages.Add();
            //Add the first layer.
            PdfPageLayer layer = page.Layers.Add("Layer1");
            //Get layer graphics.
            PdfGraphics graphics = layer.Graphics;
            graphics.TranslateTransform(100, 60);
            //Create new instance of PDF pen.
            PdfPen pen = new PdfPen(System.Drawing.Color.Red, 50);
            RectangleF bounds = new RectangleF(0, 0, 50, 50);
            //Draw arc.
            graphics.DrawArc(pen, bounds, 360, 360);
            //Add another layer on the page.
            PdfPageLayer layer2 = page.Layers.Add("Layer2");
            graphics = layer2.Graphics;
            graphics.TranslateTransform(100, 180);
            //Draw ellipse.
            graphics.DrawEllipse(pen, bounds);
            //Initialize new instance of PDF collection.
            PdfCollection collection = new PdfCollection();
            //Get layer collection from the page.
            collection = page.Layers;
            //Get the total count of layers.
            int count = collection.Count;
            //Save and close the document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document.
            Dim document As PdfDocument = New PdfDocument()
            'Add new page.
            Dim page As PdfPage = document.Pages.Add()
            'Add the first layer.
            Dim layer As PdfPageLayer = page.Layers.Add("Layer1")
            'Get layer graphics.
            Dim graphics As PdfGraphics = layer.Graphics
            graphics.TranslateTransform(100, 60)
            'Create new instance of PDF pen.
            Dim pen As PdfPen = New PdfPen(System.Drawing.Color.Red, 50)
            Dim bounds As RectangleF = New RectangleF(0, 0, 50, 50)
            'Draw arc.
            graphics.DrawArc(pen, bounds, 360, 360)
            'Add another layer on the page.
            Dim layer2 As PdfPageLayer = page.Layers.Add("Layer2")
            graphics = layer2.Graphics
            graphics.TranslateTransform(100, 180)
            'Draw ellipse.
            graphics.DrawEllipse(pen, bounds)
            'Initialize new instance of PDF collection.
            Dim collection As PdfCollection = New PdfCollection()
            'Get layer collection from the page.
            collection = page.Layers
            'Get the total count of layers.
            Dim count As Integer = collection.Count
            'Get the total count of layers.
            Dim count As Integer = collection.Count
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageLayer"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCollection.Count">
            <summary>
            Gets number of the elements in the collection.
            </summary>
            <value>The total number of elements in the collection.</value>
            <example>
            <code lang="C#">
            //Create new document.
            PdfDocument document = new PdfDocument();
            //Add new page.
            PdfPage page = document.Pages.Add();
            //Add the first layer.
            PdfPageLayer layer = page.Layers.Add("Layer1");
            //Get layer graphics.
            PdfGraphics graphics = layer.Graphics;
            graphics.TranslateTransform(100, 60);
            //Create new instance of PDF pen.
            PdfPen pen = new PdfPen(System.Drawing.Color.Red, 50);
            RectangleF bounds = new RectangleF(0, 0, 50, 50);
            //Draw arc.
            graphics.DrawArc(pen, bounds, 360, 360);
            //Add another layer on the page.
            PdfPageLayer layer2 = page.Layers.Add("Layer2");
            graphics = layer2.Graphics;
            graphics.TranslateTransform(100, 180);
            //Draw ellipse.
            graphics.DrawEllipse(pen, bounds);
            //Get layer collection from page.
            PdfCollection collection = page.Layers;
            //Get the total count of layers.
            int count = collection.Count;
            //Save and close the document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document.
            Dim document As PdfDocument = New PdfDocument()
            'Add new page.
            Dim page As PdfPage = document.Pages.Add()
            'Add the first layer.
            Dim layer As PdfPageLayer = page.Layers.Add("Layer1")
            'Get layer graphics.
            Dim graphics As PdfGraphics = layer.Graphics
            graphics.TranslateTransform(100, 60)
            'Create new instance of PDF pen.
            Dim pen As PdfPen = New PdfPen(System.Drawing.Color.Red, 50)
            Dim bounds As RectangleF = New RectangleF(0, 0, 50, 50)
            'Draw arc.
            graphics.DrawArc(pen, bounds, 360, 360)
            'Add another layer on the page.
            Dim layer2 As PdfPageLayer = page.Layers.Add("Layer2")
            graphics = layer2.Graphics
            graphics.TranslateTransform(100, 180)
            'Draw ellipse.
            graphics.DrawEllipse(pen, bounds)
            'Get layer collection from page.
            Dim collection As PdfCollection = page.Layers
            'Get the total count of layers.
            Dim count As Integer = collection.Count
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageLayer"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCollection.List">
            <summary>
            Gets internal list of the collection.
            </summary>      
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCollection.DoClear">
            <summary>
            Clearing the Collection.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDestination">
            <summary>
            Represents an anchor in the document where bookmarks or annotations can direct when clicked.
            </summary>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Add a page.
            PdfPage page = document.Pages.Add();
            //Create document bookmarks.
            PdfBookmark bookmark = document.Bookmarks.Add("Page 1");
            //Create the destination.
            PdfDestination destination = new PdfDestination(page);
            //Set the destination page.
            bookmark.Destination = destination;
            //Set the destination location.
            bookmark.Destination.Location = new PointF(20, 20);
            //Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold;
            bookmark.Color = Color.Red;
            //Save and close the PDF document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document.
            Dim document As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = document.Pages.Add()
            'Create document bookmarks.
            Dim bookmark As PdfBookmark = document.Bookmarks.Add("Page 1")
            'Create the destination.
            Dim destination As PdfDestination = New PdfDestination(page)
            'Set the destination location.
            destination.Location = New PointF(20, 20)
            'Set the destination page.
            bookmark.Destination = destination
            'Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold
            bookmark.Color = Color.Red
            'Save and close the PDF document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example> 
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDestination.m_destinationMode">
            <summary>
            Type of the destination.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDestination.m_zoom">
            <summary>
            Zoom factor.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDestination.m_location">
            <summary>
            Location of the destination.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDestination.m_page">
            <summary>
            Parent page reference.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDestination.m_array">
            <summary>
            Pdf primitive representing this object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDestination.#ctor(Syncfusion.PdfExport.PdfPageBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDestination"/> class with specified page.
            </summary>
            <param name="page">The page where the destination should be placed.</param>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Add a page.
            PdfPage page = document.Pages.Add();
            //Create document bookmarks.
            PdfBookmark bookmark = document.Bookmarks.Add("Page 1");
            //Create the destination
            PdfDestination destination = new PdfDestination(page);
            //Set the destination page.
            bookmark.Destination = destination;
            //Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold;
            bookmark.Color = Color.Red;
            //Save and close the PDF document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document.
            Dim document As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = document.Pages.Add()
            'Create document bookmarks.
            Dim bookmark As PdfBookmark = document.Bookmarks.Add("Page 1")
            'Create the destination
            Dim destination As PdfDestination = New PdfDestination(page)
            'Set the destination page.
            bookmark.Destination = destination
            'Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold
            bookmark.Color = Color.Red
            'Save and close the PDF document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example> 
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDestination.#ctor(Syncfusion.PdfExport.PdfPageBase,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDestination"/> class with specified page base and location.
            </summary>
            <param name="page">The page where the destination should be placed.</param>
            <param name="location">The location of the page.</param>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Add a page.
            PdfPage page = document.Pages.Add();
            //Create document bookmarks.
            PdfBookmark bookmark = document.Bookmarks.Add("Page 1");
            //Create the destination.
            PdfDestination destination = new PdfDestination(page,new PointF(0, 100));
            //Set the destination page.
            bookmark.Destination = destination;
            //Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold;
            bookmark.Color = Color.Red;
            //Save and close the PDF document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document.
            Dim document As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = document.Pages.Add()
            'Create document bookmarks.
            Dim bookmark As PdfBookmark = document.Bookmarks.Add("Page 1")
            'Create the destination
            Dim destination As PdfDestination = New PdfDestination(page,new PointF(0, 100))
            'Set the destination page.
            bookmark.Destination = destination
            'Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold
            bookmark.Color = Color.Red
            'Save and close the PDF document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example> 
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDestination.Zoom">
            <summary>
            Gets or sets zoom factor.
            </summary>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Add a page.
            PdfPage page = document.Pages.Add();
            //Create document bookmarks.
            PdfBookmark bookmark = document.Bookmarks.Add("Page 1");
            //Create the destination.
            PdfDestination destination = new PdfDestination(page,new PointF(0, 100));
            //Set the zoom factor.
            destination.Zoom = 100;
            //Set the destination page.
            bookmark.Destination = destination;
            //Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold;
            bookmark.Color = Color.Red;
            //Save and close the PDF document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document.
            Dim document As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = document.Pages.Add()
            'Create document bookmarks.
            Dim bookmark As PdfBookmark = document.Bookmarks.Add("Page 1")
            'Create the destination
            Dim destination As PdfDestination = New PdfDestination(page,new PointF(0, 100))
            'Set the zoom factor.
            destination.Zoom = 100
            'Set the destination page.
            bookmark.Destination = destination
            'Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold
            bookmark.Color = Color.Red
            'Save and close the PDF document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example> 
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDestination.Page">
            <summary>
            Gets or sets a page where the destination is situated.
            </summary>
            
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDestination.Mode">
            <summary>
            Gets or sets mode of the destination.
            </summary>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Add a page.
            PdfPage page = document.Pages.Add();
            //Create document bookmarks.
            PdfBookmark bookmark = document.Bookmarks.Add("Page 1");
            //Create the destination.
            PdfDestination destination = new PdfDestination(page,new PointF(0, 100));
            //Set the destination mode.
            destination.Mode = PdfDestinationMode.FitToPage;
            //Set the destination page.
            bookmark.Destination = destination;
            //Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold;
            bookmark.Color = Color.Red;
            //Save and close the PDF document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document.
            Dim document As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = document.Pages.Add()
            'Create document bookmarks.
            Dim bookmark As PdfBookmark = document.Bookmarks.Add("Page 1")
            'Create the destination.
            Dim destination As PdfDestination = New PdfDestination(page,new PointF(0, 100))
            'Set the destination mode.
            destination.Mode = PdfDestinationMode.FitToPage
            'Set the destination page.
            bookmark.Destination = destination
            'Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold
            bookmark.Color = Color.Red
            'Save and close the PDF document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example> 
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDestination.Location">
            <summary>
            Gets or sets a location of the destination.
            </summary>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument document = new PdfDocument();
            //Add a page.
            PdfPage page = document.Pages.Add();
            //Create document bookmarks.
            PdfBookmark bookmark = document.Bookmarks.Add("Page 1");
            //Create the destination
            PdfDestination destination = new PdfDestination(page);
            //Set the location of the destination.
            destination.Location = new PointF(20, 20);
            //Set the destination page.
            bookmark.Destination = destination;
            //Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold;
            bookmark.Color = Color.Red;
            //Save and close the PDF document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document.
            Dim document As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = document.Pages.Add()
            'Create document bookmarks.
            Dim bookmark As PdfBookmark = document.Bookmarks.Add("Page 1")
            'Create the destination
            Dim destination As PdfDestination = New PdfDestination(page)
            'Set the location of the destinatioin.
            destination.Location = new PointF(20, 20)
            'Set the destination page.
            bookmark.Destination = destination
            'Set the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold
            bookmark.Color = Color.Red
            'Save and close the PDF document.
            document.Save("Output.pdf")
            document.Close(True)
            </code>
            </example> 
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDestination.PointToNativePdf(Syncfusion.PdfExport.PdfPage,System.Drawing.PointF)">
            <summary>
            Translates co-ordinates to PDF co-ordinate system (lower/left).
            </summary>
            <param name="page">The page.</param>
            <param name="point">Point in left/top co-ordinate system.</param>
            <returns>
            Co-ordinates to PDF co-ordinate system (lower/left).
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDestination.InitializePrimitive">
            <summary>
            Infills array by correct values.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDestination.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets pdf primitive representing this object.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDestinationMode">
            <summary>
            Enumeration that represents fit mode.
            </summary>
            <example>
            <code lang="C#">
             //Creates a new document.
            PdfDocument document = new PdfDocument();
            //Adds a page.
            PdfPage page = document.Pages.Add();
            //Creates document bookmarks.
            PdfBookmark bookmark = document.Bookmarks.Add("Page 1");
            //Sets the destination page.
            bookmark.Destination = new PdfDestination(page);
            //Sets the destination location.
            bookmark.Destination.Location = new PointF(20, 20);
            //Sets the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold;
            bookmark.Color = Color.Red;
            //Set the destination mode.
            bookmark.Destination.Mode = PdfDestinationMode.FitH;
            //Saves and closes the PDF document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Creates a new document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page.
            Dim page As PdfPage = document.Pages.Add()
            'Creates document bookmarks.
            Dim bookmark As PdfBookmark = document.Bookmarks.Add("Page 1")
            'Sets the destination page.
            bookmark.Destination = New PdfDestination(page)
            'Sets the destination location.
            bookmark.Destination.Location = New PointF(20, 20)
            'Sets the text style and color.
            bookmark.TextStyle = PdfTextStyle.Bold
            bookmark.Color = Color.Red
            'Set the destination mode.
            bookmark.Destination.Mode = PdfDestinationMode.FitH
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
             </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class 
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class 
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDestinationMode.Location">
            <summary>
            Display the page designated by page, with the coordinates (left, top) positioned
            at the top-left corner of the window and the contents of the page magnified
            by the factor zoom. A NULL value for any of the parameters left, top, or
            zoom specifies that the current value of that parameter is to be retained unchanged.
            A zoom value of 0 has the same meaning as a NULL value.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDestinationMode.FitToPage">
            <summary>
            Display the page designated by page, with its contents magnified just enough
            to fit the entire page within the window both horizontally and vertically. If
            the required horizontal and vertical magnification factors are different, use
            the smaller of the two, centering the page within the window in the other
            dimension.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDestinationMode.FitR">
            <summary>
            Display the page designated by page, with the horizontal coordinate left positioned
            at the left edge of the window and the contents of the page magnified
            just enough to fit the entire height of the page within the window.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDestinationMode.FitH">
            <summary>
            Display the page designated by page, with the vertical coordinate top positioned
            at the top edge of the window and the contents of the page magnified
            just enough to fit the entire width of the page within the window.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfBrush">
            <summary>
            Provides objects used to fill the interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(Color.Red);
            //Draw rectangle.
            graphics.DrawRectangle(brush, new RectangleF(0, 0, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Red)
            'Draw rectangle.
            graphics.DrawRectangle(brush, New RectangleF(0, 0, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBrush.MonitorChanges(Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfStreamWriter,Syncfusion.PdfExport.PdfGraphics.GetResources,System.Boolean,Syncfusion.PdfExport.PdfColorSpace)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBrush.ResetChanges(Syncfusion.PdfExport.PdfStreamWriter)">
            <summary>
            Resets the changes, which were made by the brush.
            In other words resets the state to the initial one.
            </summary>
            <param name="streamWriter">The stream writer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBrush.Syncfusion#PdfExport#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(Color.Red);
            //Draw rectangle.
            graphics.DrawRectangle(brush, new RectangleF(0, 0, 200, 100));
            //Clone the existing brush.
            PdfBrush brush1 = brush.Clone();
            (brush1 as PdfSolidBrush).Color = Color.Green;
            //Draw circle.
            graphics.DrawEllipse(brush1, new RectangleF(300, 0, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Red)
            'Draw rectangle.
            graphics.DrawRectangle(brush, New RectangleF(0, 0, 200, 100))
            'Clone the existing brush.
            Dim brush1 As PdfBrush = brush.Clone()
            TryCast(brush1, PdfSolidBrush).Color = Color.Green
            'Draw circle.
            graphics.DrawEllipse(brush1, New RectangleF(300, 0, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfSolidBrush">
            <summary>
            Represents a brush that fills any object with a solid color.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF solid brush.  
            PdfSolidBrush brush = new PdfSolidBrush(Color.Red);
            //Draw rectangle.
            graphics.DrawRectangle(brush, new RectangleF(0, 0, 200, 100));           
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF gradient brush.           
            Dim brush As New PdfSolidBrush(Color.Red)
            'Draw rectangle.
            graphics.DrawRectangle(brush, New RectangleF(0, 0, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfSolidBrush.m_color">
            <summary>
            The colour of the brush.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfSolidBrush.m_colorSpace">
            <summary>
            The color space of the brush.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfSolidBrush.m_bImmutable">
            <summary>
            Indicates if the brush is immutable.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSolidBrush.#ctor(Syncfusion.PdfExport.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfSolidBrush"/> class.
            </summary>
            <param name="color">The color - that represents the color of this brush.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF solid brush.  
            PdfSolidBrush brush = new PdfSolidBrush(Color.Red);
            //Draw rectangle.
            graphics.DrawRectangle(brush, new RectangleF(0, 0, 200, 100));           
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF gradient brush.           
            Dim brush As New PdfSolidBrush(Color.Red)
            'Draw rectangle.
            graphics.DrawRectangle(brush, New RectangleF(0, 0, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSolidBrush.#ctor(Syncfusion.PdfExport.PdfColor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfSolidBrush"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="immutable">if set to <c>true</c> the brush is immutable.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSolidBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfSolidBrush"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfSolidBrush.Color">
            <summary>
            Gets or sets the color of the brush.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF solid brush.  
            PdfSolidBrush brush = new PdfSolidBrush(Color.Red);
            //Set color.
            brush.Color = new PdfColor(Color.Green);
            //Draw rectangle.
            graphics.DrawRectangle(brush, new RectangleF(0, 0, 200, 100));           
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF gradient brush.           
            Dim brush As New PdfSolidBrush(Color.Red)
            'Set color
            brush.Color = New PdfColor(Color.Green)
            'Draw rectangle.
            graphics.DrawRectangle(brush, New RectangleF(0, 0, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSolidBrush.MonitorChanges(Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfStreamWriter,Syncfusion.PdfExport.PdfGraphics.GetResources,System.Boolean,Syncfusion.PdfExport.PdfColorSpace)">
            <summary>
            Monitors the changes of the brush and modify PDF state respectively.
            </summary>
            <param name="brush">The brush.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources delegate.</param>
            <param name="saveChanges">if set to <c>true</c> the changes should be saved anyway.</param>
            <param name="currentColorSpace">The current color space.</param>
            <returns>True if the brush was different.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSolidBrush.ResetChanges(Syncfusion.PdfExport.PdfStreamWriter)">
            <summary>
            Resets the changes, which were made by the brush.
            In other words resets the state to the initial one.
            </summary>
            <param name="streamWriter">The stream writer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfSolidBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF solid brush.  
            PdfSolidBrush brush = new PdfSolidBrush(Color.Red);
            //Draw rectangle.
            graphics.DrawRectangle(brush, new RectangleF(0, 0, 200, 100)); 
            //Clone the existing solid brush.
            PdfSolidBrush cBrush = brush.Clone() as PdfSolidBrush;
            cBrush.Color = Color.Black;
            graphics.DrawRectangle(cBrush, new RectangleF(0, 150, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF gradient brush.           
            Dim brush As New PdfSolidBrush(Color.Red)
            'Draw rectangle.
            graphics.DrawRectangle(brush, New RectangleF(0, 0, 200, 100))
            'Clone the existing solid brush.
            Dim cBrush As PdfSolidBrush = TryCast(brush.Clone(), PdfSolidBrush)
            cBrush.Color = Color.Black
            graphics.DrawRectangle(cBrush, New RectangleF(0, 150, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfArc">
            <summary>
            Represents an arc shape.
            </summary>
            <remarks>It ignores brush setting.</remarks>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Arc bounds.
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(bounds, 0, 180);
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Arc bounds.
            Dim bounds As New RectangleF(0, 0, 200, 100)
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(bounds, 0, 180)
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfArc.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfArc"/> class with the specified pair of coordinates, width, height and sweep angle
            </summary>
            <param name="width">Width of the rectangle that defines the arc.</param>
            <param name="height">Height of the rectangle that defines the arc.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();       
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(200,100, 0, 180);
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()       
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(200,100, 0, 180)
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfArc.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfArc"/> class with the specified pen, width, height and sweep angle
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the arc.</param>
            <param name="width">Width of the rectangle that defines the arc.</param>
            <param name="height">Height of the rectangle that defines the arc.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add(); 
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(pen, 200, 100, 0, 180);
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF Pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(pen, 200, 100, 0, 180)
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfArc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfArc"/> class.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="width">Width of the rectangle that defines the arc.</param>
            <param name="height">Height of the rectangle that defines the arc.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();       
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(0,0,200,100, 0, 180);
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()       
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(0,0,200,100, 0, 180)
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfArc.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfArc"/> class with the specified <see cref="T:System.Drawing.RectangleF"/> structure and sweep angle
            </summary>
            <param name="rectangle">RectangleF structure that defines the boundaries of the arc.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Arc bounds.
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(bounds, 0, 180);
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Arc bounds.
            Dim bounds As New RectangleF(0, 0, 200, 100)
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(bounds, 0, 180)
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfArc.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfArc"/> class with the specified pen, pair of coordinates, width, height and sweep angle
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the arc.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="width">Width of the rectangle that defines the arc.</param>
            <param name="height">Height of the rectangle that defines the arc.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add(); 
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(pen, 0, 0, 200, 100, 0, 180);
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF Pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(pen, 0, 0, 200, 100, 0, 180)
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfArc.#ctor(Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfArc"/> class with the specified pen, <see cref="T:System.Drawing.RectangleF"/> structure and sweep angle
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the arc.</param>
            <param name="rectangle">RectangleF structure that defines the boundaries of the arc.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Arc bounds.
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red); 
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(pen, bounds, 0, 180);
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Arc bounds.
            Dim bounds As New RectangleF(0, 0, 200, 100)
            'Create new PDF Pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(pen, bounds, 0, 180)
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfArc.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDrawElement">
            <summary>
            Represents a graphics element which can be drawn by a pen.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PDF pen.
             PdfPen pen = new PdfPen(Color.Red);
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(pen, new PointF(0, 0), new PointF(100, 0));
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PDF pen.
             Dim pen As New PdfPen(Color.Red)
             'Create new PdfLine instance.
             Dim line As New PdfLine(pen, New PointF(0, 0), New PointF(100, 0))
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDrawElement.m_pen">
            <summary>
            A pen object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDrawElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDrawElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDrawElement.#ctor(Syncfusion.PdfExport.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDrawElement"/> class with the specified pen
            </summary>
            <param name="pen">The pen.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDrawElement.Pen">
            <summary>
            Gets or sets a pen that will be used to draw the element.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(new PointF(0, 0), new PointF(100, 0));
             //Set pen.
             line.Pen = new PdfPen(Color.Red);
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PdfLine instance.
             Dim line As New PdfLine(New PointF(0, 0), New PointF(100, 0))
             'Set pen.
             line.Pen = New PdfPen(Color.Red)
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDrawElement.ObtainPen">
            <summary>
            Gets the pen. If both pen and brush are not explicitly defined, default pen will be used.
            </summary>
            <returns>Gets the pen for drawing.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.PdfExport.ElementLayouter">
            <summary>
            Base class for elements lay outing.
            </summary>
            
        </member>
        <member name="F:Syncfusion.PdfExport.ElementLayouter.m_element">
            <summary>
            Layout the element.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.ElementLayouter.#ctor(Syncfusion.PdfExport.PdfLayoutElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.ElementLayouter"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.ElementLayouter.Element">
            <summary>
            Gets  element`s layout.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.ElementLayouter.Layout(Syncfusion.PdfExport.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.ElementLayouter.GetNextPage(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Returns the next page.
            </summary>
            <param name="currentPage">Current page.</param>
            <returns>The next page.</returns>
            <remarks>The next page is taken from the same section the current one was.
            If there is not enough pages within the section, the new one is appended.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.ElementLayouter.LayoutInternal(Syncfusion.PdfExport.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.ElementLayouter.GetPaginateBounds(Syncfusion.PdfExport.PdfLayoutParams)">
            <summary>
            Gets paginate bounds.
            </summary>
            <param name="param">Layout parameters.</param>
            <returns>Gets paginate bounds.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLayoutFormat">
            <summary>
            Represents a layouting format
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.
            for (int i = 20; i>0; i--) 
            {
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            }
            //Assign data source.
            table.DataSource = dataTable;
            //Create new PDF layout format instance.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set page break.
            format.Break = PdfLayoutBreakType.FitPage;
            //Set layout type.
            format.Layout = PdfLayoutType.Paginate;
            //Set paginate bounds.
            format.PaginateBounds = new RectangleF(0, 0, 500, 350);
            //Draw grid to the page of PDF document.
            table.Draw(page, new RectangleF(0,0, 500, 700), format);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.
            For i As Integer = 20 To 1 Step -1
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            Next
            'Assign data source.
            table.DataSource = dataTable
            'Create new PDF layout format instance.
            Dim format As New PdfLayoutFormat()
            'Set page break.
            format.Break = PdfLayoutBreakType.FitPage
            'Set layout type.
            format.Layout = PdfLayoutType.Paginate
            'Set paginate bounds.
            format.PaginateBounds = New RectangleF(0, 0, 500, 350)
            'Draw grid to the page of PDF document.
            table.Draw(page, New RectangleF(0, 0, 500, 700), format)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutFormat.m_boundsSet">
            <summary>
            Indicates whether PaginateBounds were set and should be used or not.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutFormat.m_paginateBounds">
            <summary>
            Bounds for the paginating.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutFormat.m_layout">
            <summary>
            Layout type of the element.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutFormat.m_break">
            <summary>
            Break type of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutFormat.Layout">
            <summary>
            Gets or sets layout type of the element.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.
            for (int i = 20; i>0; i--) 
            {
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            }
            //Assign data source.
            table.DataSource = dataTable;
            //Create new PDF layout format instance.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set page break.
            format.Break = PdfLayoutBreakType.FitPage;
            //Set layout type.
            format.Layout = PdfLayoutType.Paginate;
            //Set paginate bounds.
            format.PaginateBounds = new RectangleF(0, 0, 500, 350);
            //Draw grid to the page of PDF document.
            table.Draw(page, new RectangleF(0,0, 500, 700), format);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.
            For i As Integer = 20 To 1 Step -1
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            Next
            'Assign data source.
            table.DataSource = dataTable
            'Create new PDF layout format instance.
            Dim format As New PdfLayoutFormat()
            'Set page break.
            format.Break = PdfLayoutBreakType.FitPage
            'Set layout type.
            format.Layout = PdfLayoutType.Paginate
            'Set paginate bounds.
            format.PaginateBounds = New RectangleF(0, 0, 500, 350)
            'Draw grid to the page of PDF document.
            table.Draw(page, New RectangleF(0, 0, 500, 700), format)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutFormat.Break">
            <summary>
            Gets or sets break type of the element.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.
            for (int i = 20; i>0; i--) 
            {
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            }
            //Assign data source.
            table.DataSource = dataTable;
            //Create new PDF layout format instance.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set page break.
            format.Break = PdfLayoutBreakType.FitPage;
            //Set layout type.
            format.Layout = PdfLayoutType.Paginate;
            //Set paginate bounds.
            format.PaginateBounds = new RectangleF(0, 0, 500, 350);
            //Draw grid to the page of PDF document.
            table.Draw(page, new RectangleF(0,0, 500, 700), format);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.
            For i As Integer = 20 To 1 Step -1
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            Next
            'Assign data source.
            table.DataSource = dataTable
            'Create new PDF layout format instance.
            Dim format As New PdfLayoutFormat()
            'Set page break.
            format.Break = PdfLayoutBreakType.FitPage
            'Set layout type.
            format.Layout = PdfLayoutType.Paginate
            'Set paginate bounds.
            format.PaginateBounds = New RectangleF(0, 0, 500, 350)
            'Draw grid to the page of PDF document.
            table.Draw(page, New RectangleF(0, 0, 500, 700), format)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutFormat.PaginateBounds">
            <summary>
            Gets or sets the bounds on the next page.
            </summary>
            <remarks>If this property is set, the element will use it for the layouting on the next pages,
            otherwise, the element will be layout according to the bounds, used on the first page.</remarks>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.
            for (int i = 20; i>0; i--) 
            {
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            }
            //Assign data source.
            table.DataSource = dataTable;
            //Create new PDF layout format instance.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set page break.
            format.Break = PdfLayoutBreakType.FitPage;
            //Set layout type.
            format.Layout = PdfLayoutType.Paginate;
            //Set paginate bounds.
            format.PaginateBounds = new RectangleF(0, 0, 500, 350);
            //Draw grid to the page of PDF document.
            table.Draw(page, new RectangleF(0,0, 500, 700), format);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.
            For i As Integer = 20 To 1 Step -1
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            Next
            'Assign data source.
            table.DataSource = dataTable
            'Create new PDF layout format instance.
            Dim format As New PdfLayoutFormat()
            'Set page break.
            format.Break = PdfLayoutBreakType.FitPage
            'Set layout type.
            format.Layout = PdfLayoutType.Paginate
            'Set paginate bounds.
            format.PaginateBounds = New RectangleF(0, 0, 500, 350)
            'Draw grid to the page of PDF document.
            table.Draw(page, New RectangleF(0, 0, 500, 700), format)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutFormat.UsePaginateBounds">
            <summary>
            Gets a value indicating whether [use paginate bounds].
            </summary>
            <value><c>true</c> if [use paginate bounds]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfLayoutFormat"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.
            for (int i = 20; i>0; i--) 
            {
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            }
            //Assign data source.
            table.DataSource = dataTable;
            //Create new PDF layout format instance.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set page break.
            format.Break = PdfLayoutBreakType.FitPage;
            //Set layout type.
            format.Layout = PdfLayoutType.Paginate;
            //Set paginate bounds.
            format.PaginateBounds = new RectangleF(0, 0, 500, 350);
            //Draw grid to the page of PDF document.
            table.Draw(page, new RectangleF(0,0, 500, 700), format);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.
            For i As Integer = 20 To 1 Step -1
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            Next
            'Assign data source.
            table.DataSource = dataTable
            'Create new PDF layout format instance.
            Dim format As New PdfLayoutFormat()
            'Set page break.
            format.Break = PdfLayoutBreakType.FitPage
            'Set layout type.
            format.Layout = PdfLayoutType.Paginate
            'Set paginate bounds.
            format.PaginateBounds = New RectangleF(0, 0, 500, 350)
            'Draw grid to the page of PDF document.
            table.Draw(page, New RectangleF(0, 0, 500, 700), format)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutFormat.#ctor(Syncfusion.PdfExport.PdfLayoutFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfLayoutFormat"/> class from the specified layout format
            </summary>
            <param name="baseFormat">The base format.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.
            for (int i = 20; i>0; i--) 
            {
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            }
            //Assign data source.
            table.DataSource = dataTable;
            //Create new PDF layout format instance.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set page break.
            format.Break = PdfLayoutBreakType.FitPage;
            //Set layout type.
            format.Layout = PdfLayoutType.Paginate;
            //Set paginate bounds.
            format.PaginateBounds = new RectangleF(0, 0, 500, 350);
            //Create new PDF layout format instance.
            PdfLayoutFormat newFormat = new PdfLayoutFormat(format);
            //Draw grid to the page of PDF document.
            table.Draw(page, new RectangleF(0,0, 500, 700), newFormat);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.
            For i As Integer = 20 To 1 Step -1
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            Next
            'Assign data source.
            table.DataSource = dataTable
            'Create new PDF layout format instance.
            Dim format As New PdfLayoutFormat()
            'Set page break.
            format.Break = PdfLayoutBreakType.FitPage
            'Set layout type.
            format.Layout = PdfLayoutType.Paginate
            'Set paginate bounds.
            format.PaginateBounds = New RectangleF(0, 0, 500, 350)
            'Create new PDF layout format instance.
            Dim newFormat As PdfLayoutFormat = New PdfLayoutFormat(format)
            'Draw grid to the page of PDF document.
            table.Draw(page, New RectangleF(0, 0, 500, 700), newFormat)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLayoutResult">
            <summary>
            Represents the layouting result format.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.           
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            //Assign data source.
            table.DataSource = dataTable;
            //Draw grid to the page of PDF document.
            PdfLayoutResult result = table.Draw(page, new PointF(0, 0));
            //Draw grid.
            table.Draw(result.Page, result.Bounds.X, result.Bounds.Bottom + 10);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.           
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            'Assign data source.
            table.DataSource = dataTable
            'Draw grid to the page of PDF document.
            Dim result As PdfLayoutResult = table.Draw(page, New PointF(0, 0))
            'Draw grid.
            table.Draw(result.Page, result.Bounds.X, result.Bounds.Bottom + 10)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutResult.m_page">
            <summary>
            The last page where the element was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutResult.m_bounds">
            <summary>
            The bounds of the element on the last page where it was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutResult.m_totalPageSize">
            <summary>
            Holds the total web page layout size
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutResult.Page">
            <summary>
            Gets the last page where the element was drawn.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.           
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            //Assign data source.
            table.DataSource = dataTable;
            //Draw grid to the page of PDF document.
            PdfLayoutResult result = table.Draw(page, new PointF(0, 0));
            //Draw grid.
            table.Draw(result.Page, result.Bounds.X, result.Bounds.Bottom + 10);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.           
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            'Assign data source.
            table.DataSource = dataTable
            'Draw grid to the page of PDF document.
            Dim result As PdfLayoutResult = table.Draw(page, New PointF(0, 0))
            'Draw grid.
            table.Draw(result.Page, result.Bounds.X, result.Bounds.Bottom + 10)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutResult.Bounds">
            <summary>
            Gets the bounds of the element on the last page where it was drawn.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.           
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            //Assign data source.
            table.DataSource = dataTable;
            //Draw grid to the page of PDF document.
            PdfLayoutResult result = table.Draw(page, new PointF(0, 0));
            //Draw grid.
            table.Draw(result.Page, result.Bounds.X, result.Bounds.Bottom + 10);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.           
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            'Assign data source.
            table.DataSource = dataTable
            'Draw grid to the page of PDF document.
            Dim result As PdfLayoutResult = table.Draw(page, New PointF(0, 0))
            'Draw grid.
            table.Draw(result.Page, result.Bounds.X, result.Bounds.Bottom + 10)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutResult.TotalPageSize">
            <summary>
            Holds the total web page layout size
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutResult.#ctor(Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Represents the layouting result format including bounds and resultant page. 
            </summary>
            <param name="page">The current page.</param>
            <param name="bounds">The current bounds.</param>
            <remarks>The page might be null, which means that
            lay outing was performed on PdfGraphics.</remarks>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLayoutParams">
            <summary>
            Represents the layouting parameters.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutParams.m_page">
            <summary>
            Start lay outing page.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutParams.m_bounds">
            <summary>
            Lay outing bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutParams.m_format">
            <summary>
            Layout settings.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutParams.Page">
            <summary>
            Gets or sets the layouting page for the element.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutParams.Bounds">
            <summary>
            Gets or sets layouting bounds for the element.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutParams.Format">
            <summary>
            Gets or sets layouting settings for the element.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfFillElement">
            <summary>
            Represents an element to fill
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFillElement.m_brush">
            <summary>
            Internal variable to store brush.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFillElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfFillElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFillElement.#ctor(Syncfusion.PdfExport.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfFillElement"/> class.
            </summary>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFillElement.#ctor(Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfFillElement"/> class.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFillElement.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfFillElement"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFillElement.Brush">
            <summary>
            Gets or sets the brush of the element
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Set PDF solid brush.
            rect.Brush = new PdfSolidBrush(Color.Green);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Set PDF solid brush.
            rect.Brush = New PdfSolidBrush(Color.Green)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFillElement.ObtainPen">
            <summary>
            Gets the pen. If both pen and brush are not explicitly defined, default pen will be used.
            </summary>
            <exclude/>
            <returns> brush </returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfGraphicsElement">
            <summary>
            Represents a base class for all the page graphics elements.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphicsElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfGraphicsElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphicsElement.Draw(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be drawn.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page.Graphics);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page.Graphics)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphicsElement.Draw(Syncfusion.PdfExport.PdfGraphics,System.Drawing.PointF)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be drawn.</param>
            <param name="location">Location of the element in the Graphics' co-ordinate system.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphicsElement.Draw(Syncfusion.PdfExport.PdfGraphics,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, 10, 10);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, 10, 10)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphicsElement.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLayoutElement">
            <summary>
            Represents the base class for all elements that can be layout on the pages.
            </summary>
            [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Assert, Name = "FullTrust")]
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 800);
            //Draw the rectangle to PDF page.
            PdfLayoutResult result = rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 800)
            'Draw the rectangle to PDF page.
            Dim result As PdfLayoutResult = rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.PdfExport.PdfLayoutElement.EndPageLayout">
            <summary>
            Raises after the element was printed on the page.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 800);
            //Create new PDF layout format.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set layout.
            format.Layout = PdfLayoutType.Paginate;
            //Set break type.
            format.Break = PdfLayoutBreakType.FitPage; 
            //Create layout rectangle.
            RectangleF layoutRect = new RectangleF(10, 10, 300, 500);
            //Raise end page layout event.
            rect.EndPageLayout += Rect_EndPageLayout;
            //Draw the rectangle to PDF page.
            PdfLayoutResult result = rect.Draw(page, layoutRect, format);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 800)
            'Create new PDF layout format.
            Dim format As New PdfLayoutFormat()
            'Set layout.
            format.Layout = PdfLayoutType.Paginate
            'Set break type.
            format.Break = PdfLayoutBreakType.FitPage
            'Create layout rectangle.
            Dim layoutRect As New RectangleF(10, 10, 300, 500)
            'Raise the end page layout event
            AddHandler rect.EndPageLayout, AddressOf Rect_EndPageLayout
            'Draw the rectangle to PDF page.
            Dim result As PdfLayoutResult = rect.Draw(page, layoutRect, format)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.PdfExport.PdfLayoutElement.BeginPageLayout">
            <summary>
            Raises before the element should be printed on the page.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 800);
            //Create new PDF layout format.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set layout.
            format.Layout = PdfLayoutType.Paginate;
            //Set break type.
            format.Break = PdfLayoutBreakType.FitPage; 
            //Create layout rectangle.
            RectangleF layoutRect = new RectangleF(10, 10, 300, 500);
            //Raise begin page layout event.
            rect.BeginPageLayout += Rect_BeginPageLayout;
            //Draw the rectangle to PDF page.
            PdfLayoutResult result = rect.Draw(page, layoutRect, format);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 800)
            'Create new PDF layout format.
            Dim format As New PdfLayoutFormat()
            'Set layout.
            format.Layout = PdfLayoutType.Paginate
            'Set break type.
            format.Break = PdfLayoutBreakType.FitPage
            'Create layout rectangle.
            Dim layoutRect As New RectangleF(10, 10, 300, 500)
            'Raise the begin page layout event.
            AddHandler rect.BeginPageLayout, AddressOf Rect_BeginPageLayout
            'Draw the rectangle to PDF page.
            Dim result As PdfLayoutResult = rect.Draw(page, layoutRect, format)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutElement.RaiseEndPageLayout">
            <summary>
            Gets a value indicating whether EndPageLayout is not null.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutElement.RaiseBeginPageLayout">
            <summary>
            Gets a value indicating whether BeginPageLayout is not null.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLayoutElement.EmbedFontResource">
            <summary>
            Gets a value indicating whether [embed fonts].
            </summary>
            <value><c>true</c> if [embed fonts]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.Draw(Syncfusion.PdfExport.PdfPage,System.Drawing.PointF)">
            <summary>
            Draws the element on the page with the specified page and <see cref="T:System.Drawing.PointF"/> structure
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <returns>PdfLayoutResult that represents the layout result of the drawn element.</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 800);
            //Draw the rectangle to PDF page.
            PdfLayoutResult result = rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 800)
            'Draw the rectangle to PDF page.
            Dim result As PdfLayoutResult = rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.Draw(Syncfusion.PdfExport.PdfPage,System.Single,System.Single)">
            <summary>
            Draws the element on the page with the specified page and pair of coordinates
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="x">X co-ordinate of the element on the page.</param>
            <param name="y">Y co-ordinate of the element on the page.</param>
            <returns>PdfLayoutResult that represents the layout result of the drawn element.</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 800);
            //Draw the rectangle to PDF page.
            PdfLayoutResult result = rect.Draw(page, 10, 10);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 800)
            'Draw the rectangle to PDF page.
            Dim result As PdfLayoutResult = rect.Draw(page, 10, 10)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.Draw(Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Draws the element on the page with the specified page and <see cref="T:System.Drawing.RectangleF"/> structure
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the element.</param>
            <returns>PdfLayoutResult that represents the layout result of the drawn element.</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 1000);
            //Draw the rectangle to PDF page.
            PdfLayoutResult result = rect.Draw(page, new RectangleF(10, 10, 300, 500));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 1000)
            'Draw the rectangle to PDF page.
            Dim result As PdfLayoutResult = rect.Draw(page, New RectangleF(10, 10, 300, 500))
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.Draw(Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the element.</param>
            <param name="embedFonts">Is the font is embedded or not.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.Draw(Syncfusion.PdfExport.PdfPage,System.Drawing.PointF,Syncfusion.PdfExport.PdfLayoutFormat)">
            <summary>
            Draws the element on the page with the specified page, <see cref="T:System.Drawing.PointF"/> structure and layout format
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <param name="format">PdfLayoutFormat that represents the layout settings</param>
            <returns>PdfLayoutResult that represents the layout result of the drawn element.</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 800);
            //Create new PDF layout format.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set layout.
            format.Layout = PdfLayoutType.Paginate;
            //Set break type.
            format.Break = PdfLayoutBreakType.FitPage; 
            //Draw the rectangle to PDF page.
            PdfLayoutResult result = rect.Draw(page, PointF.Empty, format);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 800)
            'Create new PDF layout format.
            Dim format As New PdfLayoutFormat()
            'Set layout.
            format.Layout = PdfLayoutType.Paginate
            'Set break type.
            format.Break = PdfLayoutBreakType.FitPage
            'Draw the rectangle to PDF page.
            Dim result As PdfLayoutResult = rect.Draw(page, PointF.Empty, format)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.Draw(Syncfusion.PdfExport.PdfPage,System.Single,System.Single,Syncfusion.PdfExport.PdfLayoutFormat)">
            <summary>
            Draws the element on the page with the specified page, pair of coordinates and layout format
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="x">X co-ordinate of the element on the page.</param>
            <param name="y">Y co-ordinate of the element on the page.</param>
            <param name="format">PdfLayoutFormat that represents the layout settings</param>
            <returns>PdfLayoutResult that represents the layout result of the drawn element.</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 800);
            //Create new PDF layout format.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set layout.
            format.Layout = PdfLayoutType.Paginate;
            //Set break type.
            format.Break = PdfLayoutBreakType.FitPage; 
            //Draw the rectangle to PDF page.
            PdfLayoutResult result = rect.Draw(page, 10, 20, format);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 800)
            'Create new PDF layout format.
            Dim format As New PdfLayoutFormat()
            'Set layout.
            format.Layout = PdfLayoutType.Paginate
            'Set break type.
            format.Break = PdfLayoutBreakType.FitPage
            'Draw the rectangle to PDF page.
            Dim result As PdfLayoutResult = rect.Draw(page, 10, 20, format)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.Draw(Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfLayoutFormat)">
            <summary>
            Draws the element on the page with the specified page, <see cref="T:System.Drawing.RectangleF"/> structure and layout format
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the element.</param>
            <param name="format">PdfLayoutFormat that represents the layout settings</param>
            <returns>PdfLayoutResult that represents the layout result of the drawn element.</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(PdfBrushes.Red, 200, 800);
            //Create new PDF layout format.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set layout.
            format.Layout = PdfLayoutType.Paginate;
            //Set break type.
            format.Break = PdfLayoutBreakType.FitPage; 
            //Create layout rectangle.
            RectangleF layoutRect = new RectangleF(10, 10, 300, 500);
            //Draw the rectangle to PDF page.
            PdfLayoutResult result = rect.Draw(page, layoutRect, format);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(PdfBrushes.Red, 200, 800)
            'Create new PDF layout format.
            Dim format As New PdfLayoutFormat()
            'Set layout.
            format.Layout = PdfLayoutType.Paginate
            'Set break type.
            format.Break = PdfLayoutBreakType.FitPage
            'Create layout rectangle.
            Dim layoutRect As New RectangleF(10, 10, 300, 500)
            'Draw the rectangle to PDF page.
            Dim result As PdfLayoutResult = rect.Draw(page, layoutRect, format)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.Layout(Syncfusion.PdfExport.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Layout parameters.</param>
            <returns>Returns the results of layout.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.OnEndPageLayout(Syncfusion.PdfExport.EndPageLayoutEventArgs)">
            <summary>
            Raises EndPageLayout event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLayoutElement.OnBeginPageLayout(Syncfusion.PdfExport.BeginPageLayoutEventArgs)">
            <summary>
            Raises BeginPageLayout event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfShapeElement">
            <summary>
            Base class for the main shapes.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfShapeElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>rect</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Get the bounds.
            RectangleF bounds = rect.GetBounds();
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Get the bounds.
            Dim bounds As RectangleF = rect.GetBounds()
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfShapeElement.GetBoundsInternal">
            <summary>
            Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
            <remarks>This method doesn't take into consideration a rotation of the element.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfShapeElement.Layout(Syncfusion.PdfExport.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Returns lay outing results.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.ShapeLayouter">
            <summary>
            ShapeLayouter class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.ShapeLayouter.#ctor(Syncfusion.PdfExport.PdfShapeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.ShapeLayouter"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.ShapeLayouter.Element">
            <summary>
            Gets shape element.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.ShapeLayouter.LayoutInternal(Syncfusion.PdfExport.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.ShapeLayouter.ShapeLayoutResult">
            <summary>
            Contains lay outing result settings.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ShapeLayouter.ShapeLayoutResult.Page">
            <summary>
            The last page where the element was drawn.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TextLayouter">
            <summary>
            Class that layouts the text.
            </summary> 
        </member>
        <member name="F:Syncfusion.PdfExport.TextLayouter.m_format">
            <summary>
            String format.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TextLayouter.#ctor(Syncfusion.PdfExport.PdfTextElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.TextLayouter"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.TextLayouter.Element">
            <summary>
            Gets  element`s layout.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.PdfExport.TextLayouter.LayoutInternal(Syncfusion.PdfExport.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TextLayouter.GetLayoutResult(Syncfusion.PdfExport.TextLayouter.TextPageLayoutResult)">
            <summary>
            Creates layout result.
            </summary>
            <param name="pageResult">Page layout result.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TextLayouter.LayoutOnPage(System.String,Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfLayoutParams)">
            <summary>
            Layouts the text on the page.
            </summary>
            <param name="text">The text that should be printed.</param>
            <param name="currentPage">Current page.</param>
            <param name="currentBounds">Current bounds.</param>
            <param name="param">Layout parameters.</param>
            <returns>Page layout result.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TextLayouter.CheckCorrectBounds(Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Corrects current bounds on the page.
            </summary>
            <param name="currentPage">Current page.</param>
            <param name="currentBounds">Current lay outing bounds.</param>
            <returns>Corrected lay outing bounds.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TextLayouter.GetTextPageBounds(Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfStringLayoutResult)">
            <summary>
            Returns a rectangle where the text was printed on the page.
            </summary>
            <param name="currentPage">Current page.</param>
            <param name="currentBounds">Current page text bounds.</param>
            <param name="stringResult">Layout result.</param>
            <returns>Returns a rectangle where the text was printed on the page.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TextLayouter.RaisePageLayouted(Syncfusion.PdfExport.TextLayouter.TextPageLayoutResult)">
            <summary>
            Raises PageLayout event if needed.
            </summary>
            <param name="pageResult">Page layout result.</param>
            <returns>Event arguments.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TextLayouter.RaiseBeforePageLayout(Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF@)">
            <summary>
            Raises BeforePageLayout event.
            </summary>
            <param name="currentPage">The current page.</param>
            <param name="currentBounds">The current bounds.</param>
            <returns>If true, stops the layout.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TextLayouter.CheckCorectStringFormat(Syncfusion.PdfExport.LineInfo)">
            <summary>
            Corrects string format.
            </summary>
            <param name="lineInfo">The last line infor layouted.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.TextLayouter.TextPageLayoutResult">
            <summary>
            Contains lay outing result settings.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextLayouter.TextPageLayoutResult.Page">
            <summary>
            The last page where the text was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextLayouter.TextPageLayoutResult.Bounds">
            <summary>
            The bounds of the element on the last page where it was drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextLayouter.TextPageLayoutResult.End">
            <summary>
            Indicates whether the lay outing has been finished.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextLayouter.TextPageLayoutResult.Remainder">
            <summary>
            The text that was  not printed.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextLayouter.TextPageLayoutResult.LastLineBounds">
            <summary>
            Gets or sets a bounds of the last text line that was printed.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTextLayoutResult">
             <summary>
             Represents the text lay outing result settings.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Text Page Layout Event
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Text Page Layout Event
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            End Sub
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextLayoutResult.m_remainder">
            <summary>
            The text that was not printed.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextLayoutResult.m_lastLineBounds">
            <summary>
            The bounds of the last line that was printed.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTextLayoutResult.Remainder">
             <summary>
             Gets a value that contains the text that was not printed.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Text Page Layout Event
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 string remText = tlr.Remainder;
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Text Page Layout Event
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim remText As String = tlr.Remainder
            End Sub
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTextLayoutResult.LastLineBounds">
             <summary>
             Gets a value that indicates the bounds of the last line that was printed on the page.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Text Page Layout Event
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.LastLineBounds;
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Text Page Layout Event
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.LastLineBounds
            End Sub
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextLayoutResult.#ctor(Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF,System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTextLayoutResult"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <param name="remainder">The remainder.</param>
            <param name="lastLineBounds">The last line bounds.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfBezierCurve">
            <summary>
            Represents Bezier curve shape.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();   
            //Create new instance of PdfBezierCurve.
            PdfBezierCurve bezier = new PdfBezierCurve(0, 0, 100, 50, 50, 50, 100, 100);
            //Draw the bezier curve to PDF page.
            bezier.Draw(page, new PointF(300, 200));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()   
            'Create new instance of PdfBezierCurve.
            Dim bezier As New PdfBezierCurve(0, 0, 100, 50, 50, 50, 100, 100)
            'Draw the bezier curve to PDF page.
            bezier.Draw(page, New PointF(300, 200))
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBezierCurve.m_startPoint">
            <summary>
            Local variable to store the start Point.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBezierCurve.m_firstControlPoint">
            <summary>
            Local variable to store the firstC ontrol Point.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBezierCurve.m_secondControlPoint">
            <summary>
            Local variable to store the second Control Point.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBezierCurve.m_endPoint">
            <summary>
            Local variable to store the end Point.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBezierCurve.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfBezierCurve"/> class with the specified <see cref="T:System.Drawing.PointF"/> structure
            </summary>
            <param name="startPoint">PointF structure that represents the starting point of the curve.</param>
            <param name="firstControlPoint">PointF structure that represents the first control point for the curve.</param>
            <param name="secondControlPoint">PointF structure that represents the second control point for the curve.</param>
            <param name="endPoint">PointF structure that represents the ending point of the curve.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();       
            //Create new instance of PdfBezierCurve.
            PdfBezierCurve bezier = new PdfBezierCurve(new PointF(0, 0), new PointF(100, 50), new PointF(50, 50), new PointF(100, 100));
            //Draw the bezier curve to PDF page.
            bezier.Draw(page, new PointF(300, 200));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()        
            'Create new instance of PdfBezierCurve.
            Dim bezier As New PdfBezierCurve(New PointF(0, 0), New PointF(100, 50), New PointF(50, 50), New PointF(100, 100))
            'Draw the bezier curve to PDF page.
            bezier.Draw(page, New PointF(300, 200))
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code></example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBezierCurve.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfBezierCurve"/> class with the specified pair of coordinates and control points
            </summary>
            <param name="startPointX">The x-coordinate of the starting point of the curve.</param>
            <param name="startPointY">The y-coordinate of the starting point of the curve.</param>
            <param name="firstControlPointX">The x-coordinate of the first control point of the curve.</param>
            <param name="firstControlPointY">The y-coordinate of the first control point of the curve.</param>
            <param name="secondControlPointX">The x-coordinate of the second control point of the curve.</param>
            <param name="secondControlPointY">The y-coordinate of the second control point of the curve.</param>
            <param name="endPointX">The x-coordinate of the ending point of the curve.</param>
            <param name="endPointY">The y-coordinate of the ending point of the curve.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();        
            //Create new instance of PdfBezierCurve.
            PdfBezierCurve bezier = new PdfBezierCurve(0, 0, 100, 50, 50, 50, 100, 100);
            //Draw the bezier curve to PDF page.
            bezier.Draw(page, new PointF(300, 200));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()       
            'Create new instance of PdfBezierCurve.
            Dim bezier As New PdfBezierCurve(0, 0, 100, 50, 50, 50, 100, 100)
            'Draw the bezier curve to PDF page.
            bezier.Draw(page, New PointF(300, 200))
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBezierCurve.#ctor(Syncfusion.PdfExport.PdfPen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfBezierCurve"/> class with the specified pen and <see cref="T:System.Drawing.PointF"/> structure.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the curve.</param>
            <param name="startPoint">PointF structure that represents the starting point of the curve.</param>
            <param name="firstControlPoint">PointF structure that represents the first control point for the curve.</param>
            <param name="secondControlPoint">PointF structure that represents the second control point for the curve.</param>
            <param name="endPoint">PointF structure that represents the ending point of the curve.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new instance of PdfBezierCurve.
            PdfBezierCurve bezier = new PdfBezierCurve(pen, new PointF(0, 0), new PointF(100, 50), new PointF(50, 50), new PointF(100, 100));
            //Draw the bezier curve to PDF page.
            bezier.Draw(page, new PointF(300, 200));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF Pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new instance of PdfBezierCurve.
            Dim bezier As New PdfBezierCurve(pen, New PointF(0, 0), New PointF(100, 50), New PointF(50, 50), New PointF(100, 100))
            'Draw the bezier curve to PDF page.
            bezier.Draw(page, New PointF(300, 200))
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code></example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBezierCurve.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfBezierCurve"/> class with the specified pair of coordinates and control points
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the curve.</param>
            <param name="startPointX">The x-coordinate of the starting point of the curve.</param>
            <param name="startPointY">The y-coordinate of the starting point of the curve.</param>
            <param name="firstControlPointX">The x-coordinate of the first control point of the curve.</param>
            <param name="firstControlPointY">The y-coordinate of the first control point of the curve.</param>
            <param name="secondControlPointX">The x-coordinate of the second control point of the curve.</param>
            <param name="secondControlPointY">The y-coordinate of the second control point of the curve.</param>
            <param name="endPointX">The x-coordinate of the ending point of the curve.</param>
            <param name="endPointY">The y-coordinate of the ending point of the curve.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new instance of PdfBezierCurve.
            PdfBezierCurve bezier = new PdfBezierCurve(pen, 0, 0, 100, 50, 50, 50, 100, 100);
            //Draw the bezier curve to PDF page.
            bezier.Draw(page, new PointF(300, 200));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF Pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new instance of PdfBezierCurve.
            Dim bezier As New PdfBezierCurve(pen, 0, 0, 100, 50, 50, 50, 100, 100)
            'Draw the bezier curve to PDF page.
            bezier.Draw(page, New PointF(300, 200))
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBezierCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfBezierCurve"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfBezierCurve.StartPoint">
            <summary>
            Gets or sets the starting point of the curve
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            PointF startPoint = new PointF(0, 0);
            PointF firstControlPoint = new PointF(100, 50);
            PointF secondControlPoint = new PointF(50, 50);
            PointF endPoint = new PointF(100, 100);
            //Create new instance of PdfBezierCurve.
            PdfBezierCurve bezier = new PdfBezierCurve(pen, startPoint, firstControlPoint, secondControlPoint, endPoint);
            //Set start point.
            bezier.StartPoint = startPoint;
            //Set first control point.
            bezier.FirstControlPoint = firstControlPoint;
            //Set second control point.
            bezier.SecondControlPoint = secondControlPoint;
            //Set end point.
            bezier.EndPoint = endPoint;
            //Draw the bezier curve to PDF page.
            bezier.Draw(page, new PointF(300, 200));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF Pen.
            Dim pen As New PdfPen(Color.Red)
            Dim startPoint As New PointF(0, 0)
            Dim firstControlPoint As New PointF(100, 50)
            Dim secondControlPoint As New PointF(50, 50)
            Dim endPoint As New PointF(100, 100)
            'Create new instance of PdfBezierCurve.
            Dim bezier As New PdfBezierCurve(pen, startPoint, firstControlPoint, secondControlPoint, endPoint)
            'Set start point.
            bezier.StartPoint = startPoint
            'Set first control point.
            bezier.FirstControlPoint = firstControlPoint
            'Set second control point.
            bezier.SecondControlPoint = secondControlPoint
            'Set end point.
            bezier.EndPoint = endPoint
            'Draw the bezier curve to PDF page.
            bezier.Draw(page, New PointF(300, 200))
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfBezierCurve.FirstControlPoint">
            <summary>
            Gets or sets the first control point of the curve.
            </summary>
             <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            PointF startPoint = new PointF(0, 0);
            PointF firstControlPoint = new PointF(100, 50);
            PointF secondControlPoint = new PointF(50, 50);
            PointF endPoint = new PointF(100, 100);
            //Create new instance of PdfBezierCurve.
            PdfBezierCurve bezier = new PdfBezierCurve(pen, startPoint, firstControlPoint, secondControlPoint, endPoint);
            //Set start point.
            bezier.StartPoint = startPoint;
            //Set first control point.
            bezier.FirstControlPoint = firstControlPoint;
            //Set second control point.
            bezier.SecondControlPoint = secondControlPoint;
            //Set end point.
            bezier.EndPoint = endPoint;
            //Draw the bezier curve to PDF page.
            bezier.Draw(page, new PointF(300, 200));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF Pen.
            Dim pen As New PdfPen(Color.Red)
            Dim startPoint As New PointF(0, 0)
            Dim firstControlPoint As New PointF(100, 50)
            Dim secondControlPoint As New PointF(50, 50)
            Dim endPoint As New PointF(100, 100)
            'Create new instance of PdfBezierCurve.
            Dim bezier As New PdfBezierCurve(pen, startPoint, firstControlPoint, secondControlPoint, endPoint)
            'Set start point.
            bezier.StartPoint = startPoint
            'Set first control point.
            bezier.FirstControlPoint = firstControlPoint
            'Set second control point.
            bezier.SecondControlPoint = secondControlPoint
            'Set end point.
            bezier.EndPoint = endPoint
            'Draw the bezier curve to PDF page.
            bezier.Draw(page, New PointF(300, 200))
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfBezierCurve.SecondControlPoint">
            <summary>
            Gets or sets the second control point of the curve
            </summary>
             <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            PointF startPoint = new PointF(0, 0);
            PointF firstControlPoint = new PointF(100, 50);
            PointF secondControlPoint = new PointF(50, 50);
            PointF endPoint = new PointF(100, 100);
            //Create new instance of PdfBezierCurve.
            PdfBezierCurve bezier = new PdfBezierCurve(pen, startPoint, firstControlPoint, secondControlPoint, endPoint);
            //Set start point.
            bezier.StartPoint = startPoint;
            //Set first control point.
            bezier.FirstControlPoint = firstControlPoint;
            //Set second control point.
            bezier.SecondControlPoint = secondControlPoint;
            //Set end point.
            bezier.EndPoint = endPoint;
            //Draw the bezier curve to PDF page.
            bezier.Draw(page, new PointF(300, 200));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF Pen.
            Dim pen As New PdfPen(Color.Red)
            Dim startPoint As New PointF(0, 0)
            Dim firstControlPoint As New PointF(100, 50)
            Dim secondControlPoint As New PointF(50, 50)
            Dim endPoint As New PointF(100, 100)
            'Create new instance of PdfBezierCurve.
            Dim bezier As New PdfBezierCurve(pen, startPoint, firstControlPoint, secondControlPoint, endPoint)
            'Set start point.
            bezier.StartPoint = startPoint
            'Set first control point.
            bezier.FirstControlPoint = firstControlPoint
            'Set second control point.
            bezier.SecondControlPoint = secondControlPoint
            'Set end point.
            bezier.EndPoint = endPoint
            'Draw the bezier curve to PDF page.
            bezier.Draw(page, New PointF(300, 200))
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfBezierCurve.EndPoint">
            <summary>
            Gets or sets the ending point of the curve.
            </summary>
             <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            PointF startPoint = new PointF(0, 0);
            PointF firstControlPoint = new PointF(100, 50);
            PointF secondControlPoint = new PointF(50, 50);
            PointF endPoint = new PointF(100, 100);
            //Create new instance of PdfBezierCurve.
            PdfBezierCurve bezier = new PdfBezierCurve(pen, startPoint, firstControlPoint, secondControlPoint, endPoint);
            //Set start point.
            bezier.StartPoint = startPoint;
            //Set first control point.
            bezier.FirstControlPoint = firstControlPoint;
            //Set second control point.
            bezier.SecondControlPoint = secondControlPoint;
            //Set end point.
            bezier.EndPoint = endPoint;
            //Draw the bezier curve to PDF page.
            bezier.Draw(page, new PointF(300, 200));
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF Pen.
            Dim pen As New PdfPen(Color.Red)
            Dim startPoint As New PointF(0, 0)
            Dim firstControlPoint As New PointF(100, 50)
            Dim secondControlPoint As New PointF(50, 50)
            Dim endPoint As New PointF(100, 100)
            'Create new instance of PdfBezierCurve.
            Dim bezier As New PdfBezierCurve(pen, startPoint, firstControlPoint, secondControlPoint, endPoint)
            'Set start point.
            bezier.StartPoint = startPoint
            'Set first control point.
            bezier.FirstControlPoint = firstControlPoint
            'Set second control point.
            bezier.SecondControlPoint = secondControlPoint
            'Set end point.
            bezier.EndPoint = endPoint
            'Draw the bezier curve to PDF page.
            bezier.Draw(page, New PointF(300, 200))
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBezierCurve.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBezierCurve.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfEllipse">
            <summary>
            Represents an ellipse shape.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();   
            //Bounds
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(bounds);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()   
             'Bounds
             Dim bounds As New RectangleF(0, 0, 200, 100)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(bounds)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified width and height
            </summary>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(200, 100);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(200, 100)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified pen, width and height.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
             //Create new PDF Pen.
             PdfPen pen = new PdfPen(Color.Red);
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(pen, 200, 100);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PDF Pen.
             Dim pen As New PdfPen(Color.Red)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(pen, 200, 100)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(Syncfusion.PdfExport.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified brush, width and height.
            </summary>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Red);
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(brush, 200, 100);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PDF solid brush.
             Dim brush As PdfBrush = New PdfSolidBrush(Color.Red)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(brush, 200, 100)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified pen, brush, width and height
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new PDF solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Red);
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(pen, brush, 200, 100);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PDF Pen.
             Dim pen As New PdfPen(Color.Red)
             'Create new PDF solid brush.
             Dim brush As PdfBrush = New PdfSolidBrush(Color.Red)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(pen, brush, 200, 100)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified pair of coordinates, width and height
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(0, 0, 200, 100);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add() 
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(0, 0, 200, 100)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the rectangle.
            </summary>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();   
            //Bounds
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(bounds);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()   
             'Bounds
             Dim bounds As New RectangleF(0, 0, 200, 100)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(bounds)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified pen, pair of coordinates, width and height
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(pen, 0, 0, 200, 100);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add() 
             'Create new PDF Pen.
             Dim pen As New PdfPen(Color.Red)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(pen, 0, 0, 200, 100)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified pen and <see cref="T:System.Drawing.RectangleF"/> structure
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();   
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Bounds
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(pen, bounds);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()  
             'Create new PDF Pen.
             Dim pen As New PdfPen(Color.Red)
             'Bounds
             Dim bounds As New RectangleF(0, 0, 200, 100)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(pen, bounds)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified brush, pair of coordinates, width and height
            </summary>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            PdfBrush brush = new PdfSolidBrush(Color.Red);
            //Creat new PdfEllipse instance.
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(brush, 0, 0, 200, 100);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add() 
             'Create new PDF solid brush.
             Dim brush As PdfBrush = New PdfSolidBrush(Color.Red)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(brush, 0, 0, 200, 100)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified brush and <see cref="T:System.Drawing.RectangleF"/> structure
            </summary>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();   
            PdfBrush brush = new PdfSolidBrush(Color.Red);
            //Creat new PdfEllipse instance.
            //Bounds
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(brush, bounds);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()  
             'Create new PDF solid brush.
             Dim brush As PdfBrush = New PdfSolidBrush(Color.Red)
             'Bounds
             Dim bounds As New RectangleF(0, 0, 200, 100)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(brush, bounds)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified pen, brush, pair of coordinates, width and height
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            PdfBrush brush = new PdfSolidBrush(Color.Red);
            //Creat new PdfEllipse instance.
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(pen, brush, 0, 0, 200, 100);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add() 
             'Create new PDF Pen.
             Dim pen As New PdfPen(Color.Red)
             'Create new PDF solid brush.
             Dim brush As PdfBrush = New PdfSolidBrush(Color.Red)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(pen, brush, 0, 0, 200, 100)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipse"/> class with the specified pen, brush and <see cref="T:System.Drawing.RectangleF"/> structure
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();   
            //Create new PDF Pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new PDF solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Red);
            //Bounds
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(pen, brush, bounds);
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()  
             'Create new PDF Pen.
             Dim pen As New PdfPen(Color.Red)
             'Create new PDF solid brush.
             Dim brush As PdfBrush = New PdfSolidBrush(Color.Red)
             'Bounds
             Dim bounds As New RectangleF(0, 0, 200, 100)
             'Creat new PdfEllipse instance.
             Dim ellipse As New PdfEllipse(pen, brush, bounds)
             'Draw the ellipse to PDF page.
             ellipse.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True) 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfEllipse.RadiusX">
            <summary>
            Gets the radius X.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(200, 100);
            //Get the radius X.
            float radiusX = ellipse.RadiusX;
            //Get the radius Y.
            float radiusY = ellipse.RadiusY;
            //Get the center radius.
            PointF center = ellipse.Center;
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Creat new PdfEllipse instance.
            Dim ellipse As New PdfEllipse(200, 100)
            'Get the radius X.
            Dim radiusX As Single = ellipse.RadiusX
            'Get the radius Y.
            Dim radiusY As Single = ellipse.RadiusY
            'Get the center radius.
            Dim center As PointF = ellipse.Center
            'Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfEllipse.RadiusY">
            <summary>
            Gets the radius Y.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(200, 100);
            //Get the radius X.
            float radiusX = ellipse.RadiusX;
            //Get the radius Y.
            float radiusY = ellipse.RadiusY;
            //Get the center radius.
            PointF center = ellipse.Center;
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Creat new PdfEllipse instance.
            Dim ellipse As New PdfEllipse(200, 100)
            'Get the radius X.
            Dim radiusX As Single = ellipse.RadiusX
            'Get the radius Y.
            Dim radiusY As Single = ellipse.RadiusY
            'Get the center radius.
            Dim center As PointF = ellipse.Center
            'Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfEllipse.Center">
            <summary>
            Gets the center point.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Creat new PdfEllipse instance.
            PdfEllipse ellipse = new PdfEllipse(200, 100);
            //Get the radius X.
            float radiusX = ellipse.RadiusX;
            //Get the radius Y.
            float radiusY = ellipse.RadiusY;
            //Get the center radius.
            PointF center = ellipse.Center;
            //Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Creat new PdfEllipse instance.
            Dim ellipse As New PdfEllipse(200, 100)
            'Get the radius X.
            Dim radiusX As Single = ellipse.RadiusX
            'Get the radius Y.
            Dim radiusY As Single = ellipse.RadiusY
            'Get the center radius.
            Dim center As PointF = ellipse.Center
            'Draw the ellipse to PDF page.
            ellipse.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipse.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfEllipsePart">
            <summary>
            Represents a base class of arc and pie shapes.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Arc bounds.
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(bounds, 0, 180);
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Arc bounds.
            Dim bounds As New RectangleF(0, 0, 200, 100)
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(bounds, 0, 180)
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfEllipsePart.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Arc bounds.
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(bounds, 0, 180);
            //Set start angle.
            arc.StartAngle = 0;
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Arc bounds.
            Dim bounds As New RectangleF(0, 0, 200, 100)
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(bounds, 0, 180)
            'Set start angle.
            arc.StartAngle = 0
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfEllipsePart.SweepAngle">
            <summary>
            Gets or sets the sweep angle.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Arc bounds.
            RectangleF bounds = new RectangleF(0, 0, 200, 100);
            //Create new instance of PdfArc.
            PdfArc arc = new PdfArc(bounds, 0, 180);
            //Set start angle.
            arc.StartAngle = 0;
            //Set sweep angle.
            arc.SweepAngle = 90;
            //Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Arc bounds.
            Dim bounds As New RectangleF(0, 0, 200, 100)
            'Create new instance of PdfArc.
            Dim arc As New PdfArc(bounds, 0, 180)
            'Set start angle.
            arc.StartAngle = 0
            'Set sweep angle.
            arc.SweepAngle = 90
            'Draw the arc to PDF page.
            arc.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf")
            'Close the PDF document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipsePart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipsePart"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipsePart.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipsePart"/> class with the specified pair of coordinates, width, height and sweep angle
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the ellipse.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the ellipse.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipsePart.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipsePart"/> class with the specified <see cref="T:System.Drawing.RectangleF"/> structure and sweep angle
            </summary>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the ellipse.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the ellipse.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipsePart.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipsePart"/> class with the specified pen, brush, pair of coordinates, width and height and sweep angle.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the ellipse.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the ellipse.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfEllipsePart.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfEllipsePart"/> class.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the ellipse.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the ellipse.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLine">
            <summary>
            Represents a line shape.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(new PointF(0, 0), new PointF(100, 0));
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PdfLine instance.
             Dim line As New PdfLine(New PointF(0, 0), New PointF(100, 0))
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLine.m_x1">
            <summary>
            Local variable to store x2.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLine.m_y1">
            <summary>
            Local variable to store Y1.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLine.m_x2">
            <summary>
            Local variable to store x1.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLine.m_y2">
            <summary>
            Local variable to store Y2.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLine.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfLine"/> class from the specified two pair fo coordinates.
            </summary>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the end pint.</param>
            <param name="y2">The y-coordinate of the end pint.</param>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(0, 0, 100, 0);
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PdfLine instance.
             Dim line As New PdfLine(0, 0, 100, 0)
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLine.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfLine"/> class.
            </summary>
            <param name="point1">The line start point.</param>
            <param name="point2">The line end point.</param>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(new PointF(0, 0), new PointF(100, 0));
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PdfLine instance.
             Dim line As New PdfLine(New PointF(0, 0), New PointF(100, 0))
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLine.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfLine"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the end pint.</param>
            <param name="y2">The y-coordinate of the end pint.</param>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PDF pen.
             PdfPen pen = new PdfPen(Color.Red);
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(pen, 0, 0, 100, 0);
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PDF pen.
             Dim pen As New PdfPen(Color.Red)
             'Create new PdfLine instance.
             Dim line As New PdfLine(pen, 0, 0, 100, 0)
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLine.#ctor(Syncfusion.PdfExport.PdfPen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfLine"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="point1">The line start point.</param>
            <param name="point2">The line end point.</param>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PDF pen.
             PdfPen pen = new PdfPen(Color.Red);
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(pen, new PointF(0, 0), new PointF(100, 0));
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PDF pen.
             Dim pen As New PdfPen(Color.Red)
             'Create new PdfLine instance.
             Dim line As New PdfLine(pen, New PointF(0, 0), New PointF(100, 0))
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfLine"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLine.X1">
            <summary>
            Gets or sets the x coordinate of the start point.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(new PointF(0, 0), new PointF(100, 0));
             //Set the x coordinate of the start point.
             line.X1 = 0;
             //Set the y coordinate of the start point.
             line.Y1 = 0;
             //Set the x coordinate of the end point.
             line.X2 = 100;
             //Set the y coordinate of the end point.
             line.Y2 = 0;
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PdfLine instance.
             Dim line As New PdfLine(New PointF(0, 0), New PointF(100, 0))
             'Set the x coordinate of the start point.
             line.X1 = 0
             'Set the y coordinate of the start point.
             line.Y1 = 0
             'Set the x coordinate of the end point.
             line.X2 = 100
             'Set the y coordinate of the end point.
             line.Y2 = 0
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLine.Y1">
            <summary>
            Gets or sets the y coordinate of the start point.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(new PointF(0, 0), new PointF(100, 0));
             //Set the x coordinate of the start point.
             line.X1 = 0;
             //Set the y coordinate of the start point.
             line.Y1 = 0;
             //Set the x coordinate of the end point.
             line.X2 = 100;
             //Set the y coordinate of the end point.
             line.Y2 = 0;
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PdfLine instance.
             Dim line As New PdfLine(New PointF(0, 0), New PointF(100, 0))
             'Set the x coordinate of the start point.
             line.X1 = 0
             'Set the y coordinate of the start point.
             line.Y1 = 0
             'Set the x coordinate of the end point.
             line.X2 = 100
             'Set the y coordinate of the end point.
             line.Y2 = 0
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLine.X2">
            <summary>
            Gets or sets the x coordinate of the end point.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(new PointF(0, 0), new PointF(100, 0));
             //Set the x coordinate of the start point.
             line.X1 = 0;
             //Set the y coordinate of the start point.
             line.Y1 = 0;
             //Set the x coordinate of the end point.
             line.X2 = 100;
             //Set the y coordinate of the end point.
             line.Y2 = 0;
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PdfLine instance.
             Dim line As New PdfLine(New PointF(0, 0), New PointF(100, 0))
             'Set the x coordinate of the start point.
             line.X1 = 0
             'Set the y coordinate of the start point.
             line.Y1 = 0
             'Set the x coordinate of the end point.
             line.X2 = 100
             'Set the y coordinate of the end point.
             line.Y2 = 0
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfLine.Y2">
            <summary>
            Gets or sets the y coordinate of the end point.
            </summary>
            <example>
            <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a new PDF page.
             PdfPage page = document.Pages.Add();
             //Create new PdfLine instance.
             PdfLine line = new PdfLine(new PointF(0, 0), new PointF(100, 0));
             //Set the x coordinate of the start point.
             line.X1 = 0;
             //Set the y coordinate of the start point.
             line.Y1 = 0;
             //Set the x coordinate of the end point.
             line.X2 = 100;
             //Set the y coordinate of the end point.
             line.Y2 = 0;
             //Draw the line to PDF page.
             line.Draw(page, PointF.Empty);
             //Save the PDF docment.
             document.Save("output.pdf");
             //Close the PDF document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a new PDF page.
             Dim page As PdfPage = document.Pages.Add()
             'Create new PdfLine instance.
             Dim line As New PdfLine(New PointF(0, 0), New PointF(100, 0))
             'Set the x coordinate of the start point.
             line.X1 = 0
             'Set the y coordinate of the start point.
             line.Y1 = 0
             'Set the x coordinate of the end point.
             line.X2 = 100
             'Set the y coordinate of the end point.
             line.Y2 = 0
             'Draw the line to PDF page.
             line.Draw(page, PointF.Empty)
             'Save the PDF docment.
             document.Save("output.pdf")
             'Close the PDF document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLine.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfLine.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPath">
            <summary>
            Implements graphics path, which is a sequence of primitive graphics elements.
            </summary>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPath.m_points">
            <summary>
            Local varaible to store the points.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPath.m_pathTypes">
            <summary>
            Local varaible to store the path Types.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPath.m_bStartFigure">
            <summary>
            Local varaible to store the Start Figure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPath.m_fillMode">
            <summary>
            Local varaible to store the fill Mode.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPath"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.#ctor(System.Drawing.PointF[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPath"/> class.
            </summary>
            <param name="points">The array of points that represents the points to define the path.</param>
            <param name="pathTypes">The path types specifies the types of the corresponding points in the path.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            // Create an array of points.
            PointF[] pathPoints = { new PointF(0, 0), new PointF(100, 0), new PointF(100, 100), new PointF(0, 100), new PointF(0, 0), new PointF(100, 100), new PointF(0, 100), new PointF(100, 0) };
            //Create path types.
            byte[] pathTypes = { 0, 1, 1, 129, 0, 1, 1, 1 };
            //Create new PDF path.
            PdfPath path = new PdfPath(pathPoints, pathTypes);
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang ="VB">
             'Create a document.
             Dim doc As New PdfDocument()
             'Add a new page.
             Dim page As PdfPage = doc.Pages.Add()
             ' Create an array of points.
             Dim pathPoints As PointF() = {New PointF(0, 0), New PointF(100, 0), New PointF(100, 100), New PointF(0, 100), New PointF(0, 0), New PointF(100, 100), New PointF(0, 100), New PointF(100, 0)}
             'Create path types.
             Dim pathTypes As Byte() = {0, 1, 1, 129, 0, 1, 1, 1}
             'Create new PDF path.
             Dim path As New PdfPath(pathPoints, pathTypes)
             'Draw PDF path to page.
             path.Draw(page, PointF.Empty)
             'Save and close the document.
             doc.Save("output.pdf")
             doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.#ctor(Syncfusion.PdfExport.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPath"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath(PdfPens.Red);
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath(PdfPens.Red)
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.#ctor(Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPath"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath(PdfBrushes.Red);
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath(PdfBrushes.Red)
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.#ctor(Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfFillMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPath"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode specifies how the interiors of shapes in this path are filled.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath(PdfBrushes.Red, PdfFillMode.Alternate);
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath(PdfBrushes.Red, PdfFillMode.Alternate)
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.#ctor(Syncfusion.PdfExport.PdfPen,System.Drawing.PointF[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPath"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The array of points that represents the points to define the path.</param>
            <param name="pathTypes">The path types specifies the types of the corresponding points in the path.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            // Create an array of points.
            PointF[] pathPoints = { new PointF(0, 0), new PointF(100, 0), new PointF(100, 100), new PointF(0, 100), new PointF(0, 0), new PointF(100, 100), new PointF(0, 100), new PointF(100, 0) };
            //Create path types.
            byte[] pathTypes = { 0, 1, 1, 129, 0, 1, 1, 1 };
            //Create new PDF path.
            PdfPath path = new PdfPath(PdfPens.Red, pathPoints, pathTypes);
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang ="VB">
             'Create a document.
             Dim doc As New PdfDocument()
             'Add a new page.
             Dim page As PdfPage = doc.Pages.Add()
             ' Create an array of points.
             Dim pathPoints As PointF() = {New PointF(0, 0), New PointF(100, 0), New PointF(100, 100), New PointF(0, 100), New PointF(0, 0), New PointF(100, 100), New PointF(0, 100), New PointF(100, 0)}
             'Create path types.
             Dim pathTypes As Byte() = {0, 1, 1, 129, 0, 1, 1, 1}
             'Create new PDF path.
             Dim path As New PdfPath(PdfPens.Red, pathPoints, pathTypes)
             'Draw PDF path to page.
             path.Draw(page, PointF.Empty)
             'Save and close the document.
             doc.Save("output.pdf")
             doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.#ctor(Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfFillMode,System.Drawing.PointF[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPath"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode specifies how the interiors of shapes in this path are filled.</param>
            <param name="points">The array of points that represents the points to define the path.</param>
            <param name="pathTypes">The path types specifies the types of the corresponding points in the path.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            // Create an array of points.
            PointF[] pathPoints = { new PointF(0, 0), new PointF(100, 0), new PointF(100, 100), new PointF(0, 100), new PointF(0, 0), new PointF(100, 100), new PointF(0, 100), new PointF(100, 0) };
            //Create path types.
            byte[] pathTypes = { 0, 1, 1, 129, 0, 1, 1, 1 };
            //Create new PDF path.
            PdfPath path = new PdfPath(PdfBrushes.Red, PdfFillMode.Alternate, pathPoints, pathTypes);
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang ="VB">
             'Create a document.
             Dim doc As New PdfDocument()
             'Add a new page.
             Dim page As PdfPage = doc.Pages.Add()
             ' Create an array of points.
             Dim pathPoints As PointF() = {New PointF(0, 0), New PointF(100, 0), New PointF(100, 100), New PointF(0, 100), New PointF(0, 0), New PointF(100, 100), New PointF(0, 100), New PointF(100, 0)}
             'Create path types.
             Dim pathTypes As Byte() = {0, 1, 1, 129, 0, 1, 1, 1}
             'Create new PDF path.
             Dim path As New PdfPath(PdfBrushes.Red, PdfFillMode.Alternate, pathPoints, pathTypes)
             'Draw PDF path to page.
             path.Draw(page, PointF.Empty)
             'Save and close the document.
             doc.Save("output.pdf")
             doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfFillMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPath"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode specifies how the interiors of shapes in this path are filled.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath(PdfPens.Green, PdfBrushes.Red, PdfFillMode.Alternate);
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath(PdfPens.Green, PdfBrushes.Red, PdfFillMode.Alternate)
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPath.FillMode">
            <summary>
            Gets or sets the fill mode.
            </summary>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Set the path fill mode.
            path.FillMode = PdfFillMode.Winding;
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Set the path fill mode.
            path.FillMode = PdfFillMode.Winding;
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPath.PathPoints">
            <summary>
            Gets the path points.
            </summary>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Set the path fill mode.
            path.FillMode = PdfFillMode.Winding;
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Get path Points.
            PointF[] pathPoints = path.PathPoints;
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Set the path fill mode.
            path.FillMode = PdfFillMode.Winding;
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Get path Points.
            Dim pathPoints As PointF() = path.PathPoints
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPath.PathTypes">
            <summary>
            Gets the path point types.
            </summary>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Set the path fill mode.
            path.FillMode = PdfFillMode.Winding;
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Get path Types.
            byte[] pathTypes = path.PathTypes;
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Set the path fill mode.
            path.FillMode = PdfFillMode.Winding;
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Get path Types.
            Dim pathTypes As Byte() = path.PathTypes
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPath.PointCount">
            <summary>
            Gets the point count.
            </summary>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();        
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Get path point count.
            int count = path.PointCount;
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()       
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Get path point count.
            Dim count As Integer = path.PointCount
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPath.LastPoint">
            <summary>
            Gets the last point.
            </summary>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Set the path fill mode.
            path.FillMode = PdfFillMode.Winding;
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Get last point.
            PointF lastPoint = path.LastPoint;
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Set the path fill mode.
            path.FillMode = PdfFillMode.Winding;
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Get last point.
            Dim lastPoint As PointF = path.LastPoint
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPath.Points">
            <summary>
            Gets the points list.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPath.Types">
            <summary>
            Gets the types.
            </summary>
            <value>The types.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Adds an arc.
            </summary>
            <param name="rectangle">The boundaries of the arc.</param>
            <param name="startAngle">The start angle of the arc.</param>
            <param name="sweepAngle">The angle between startAngle and the end of the arc.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
             //Add arc.
             path.AddArc(new RectangleF(0, 0, 100, 100), 0, -90);
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add arc.
            path.AddArc(New RectangleF(0, 0, 100, 100), 0, -90)
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an arc.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangular region.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangular region.</param>
            <param name="width">The width of the rectangular region.</param>
            <param name="height">The height of the rectangular region.</param>
            <param name="startAngle">The start angle of the arc.</param>
            <param name="sweepAngle">The angle between startAngle and the end of the arc.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
             //Add arc.
             path.AddArc(0, 0, 100, 100, 0, -90);
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add arc.
            path.AddArc(0, 0, 100, 100, 0, -90)
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds a bezier curve.
            </summary>
            <param name="startPoint">The start point - represents the starting point of the curve.</param>
            <param name="firstControlPoint">The first control point - represents the first control point of the curve.</param>
            <param name="secondControlPoint">The second control point - repesents the second control point of the curve.</param>
            <param name="endPoint">The end point - represents the end point of the curve.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Start figure.
            path.StartFigure();
            //Add bezier.
            path.AddBezier(new PointF(30, 30), new PointF(90, 0), new PointF(60, 90), new PointF(120, 30));
            //Close figure.
            path.CloseFigure();
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Start figure.
            path.StartFigure()
            'Add bezier.
            path.AddBezier(New PointF(30, 30), New PointF(90, 0), New PointF(60, 90), New PointF(120, 30))
            'Close figure.
            path.CloseFigure()
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a bezier curve.
            </summary>
            <param name="startPointX">The start point X.</param>
            <param name="startPointY">The start point Y.</param>
            <param name="firstControlPointX">The first control point X.</param>
            <param name="firstControlPointY">The first control point Y.</param>
            <param name="secondControlPointX">The second control point X.</param>
            <param name="secondControlPointY">The second control point Y.</param>
            <param name="endPointX">The end point X.</param>
            <param name="endPointY">The end point Y.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Start figure.
            path.StartFigure();
            //Add bezier.
            path.AddBezier(30, 30, 90, 0, 60, 90, 120, 30);
            //Close figure.
            path.CloseFigure();
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Start figure.
            path.StartFigure()
            'Add bezier.
            path.AddBezier(30, 30, 90, 0, 60, 90, 120, 30)
            'Close figure.
            path.CloseFigure()
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddEllipse(System.Drawing.RectangleF)">
            <summary>
            Adds an ellipse.
            </summary>
            <param name="rectangle">The boundaries of the ellipse.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
             //Add ellipse.
             path.AddEllipse(new RectangleF(0, 0, 200, 100));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add ellipse.
            path.AddEllipse(New RectangleF(0, 0, 200, 100))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an ellipse.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangular region.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangular region.</param>
            <param name="width">The width of the rectangular region.</param>
            <param name="height">The height of the rectangular region.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
             //Add ellipse.
             path.AddEllipse(0, 0, 200, 100);
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add ellipse.
            path.AddEllipse(0, 0, 200, 100)
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds a line.
            </summary>
            <param name="point1">The start point of the line.</param>
            <param name="point2">The end point of the line.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Add line path points.
            path.AddLine(new PointF(10, 100), new PointF(10, 200));
            path.AddLine(new PointF(100, 100), new PointF(100, 200));
            path.AddLine(new PointF(100, 200), new PointF(55, 150));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add line path points.
            path.AddLine(New PointF(10, 100), New PointF(10, 200))
            path.AddLine(New PointF(100, 100), New PointF(100, 200))
            path.AddLine(New PointF(100, 200), New PointF(55, 150))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a line.
            </summary>
            <param name="x1">The x-coordinate of the starting point of the line.</param>
            <param name="y1">The y-coordinate of the starting point of the line.</param>
            <param name="x2">The x-coordinate of the end point of the line.</param>
            <param name="y2">The y-coordinate of the end point of the line.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Add line path points.
            path.AddLine(10, 100, 10, 200);        
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add line path points.
            path.AddLine(10, 100, 10, 200)        
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddPath(Syncfusion.PdfExport.PdfPath)">
            <summary>
            Appends the path specified to this one.
            </summary>
            <param name="path">The path, which should be appended.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            // Create an array of points.
            PointF[] pathPoints = { new PointF(0, 0), new PointF(100, 0), new PointF(100, 100), new PointF(0, 100), new PointF(0, 0), new PointF(100, 100), new PointF(0, 100), new PointF(100, 0) };
            //Create path types.
            byte[] pathTypes = { 0, 1, 1, 129, 0, 1, 1, 1 };
            //Create PDF path.
            PdfPath pPath = new PdfPath(pathPoints, pathTypes);
            //Add PDF path.
            path.AddPath(pPath);      
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            ' Create an array of points.
            Dim pathPoints As PointF() = {New PointF(0, 0), New PointF(100, 0), New PointF(100, 100), New PointF(0, 100), New PointF(0, 0), New PointF(100, 100), New PointF(0, 100), New PointF(100, 0)}
            'Create path types.
            Dim pathTypes As Byte() = {0, 1, 1, 129, 0, 1, 1, 1}
            'Create PDF path.
            Dim pPath As New PdfPath(pathPoints, pathTypes)
            'Add PDF path.
            path.AddPath(pPath)    
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddPath(System.Drawing.PointF[],System.Byte[])">
            <summary>
            Appends the path specified by the points and their types to this one.
            </summary>
            <param name="pathPoints">The array of points that represents the points to define the path.</param>
            <param name="pathTypes">The path types specifies the types of the corresponding points in the path.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            // Create an array of points.
            PointF[] pathPoints = { new PointF(0, 0), new PointF(100, 0), new PointF(100, 100), new PointF(0, 100), new PointF(0, 0), new PointF(100, 100), new PointF(0, 100), new PointF(100, 0) };
            //Create path types.
            byte[] pathTypes = { 0, 1, 1, 129, 0, 1, 1, 1 };       
            //Add path.
            path.AddPath(pathPoints, pathTypes);      
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            ' Create an array of points.
            Dim pathPoints As PointF() = {New PointF(0, 0), New PointF(100, 0), New PointF(100, 100), New PointF(0, 100), New PointF(0, 0), New PointF(100, 100), New PointF(0, 100), New PointF(100, 0)}
            'Create path types.
            Dim pathTypes As Byte() = {0, 1, 1, 129, 0, 1, 1, 1}       
            'Add path.
            path.AddPath(pathPoints, pathTypes)    
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddPie(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Appends the pie to this path.
            </summary>
            <param name="rectangle">The bounding rectangle of the pie.</param>
            <param name="startAngle">The start angle of the pie.</param>
            <param name="sweepAngle">The sweep angle of the pie.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Add Pie.
            path.AddPie(new RectangleF(20, 20, 70, 70), -45, 90);   
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add Pie.
            path.AddPie(New RectangleF(20, 20, 70, 70), -45, 90)  
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends the pie to this path.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <param name="startAngle">The start angle of the pie.</param>
            <param name="sweepAngle">The sweep angle of the pie.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Add Pie.
            path.AddPie(20, 20, 70, 70, -45, 90);   
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add Pie.
            path.AddPie(20, 20, 70, 70, -45, 90)  
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddPolygon(System.Drawing.PointF[])">
            <summary>
            Append the closed polygon to this path.
            </summary>
            <param name="points">The points of the polygon.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Create polygon points.
            PointF[] polygonPoints = { new PointF(23, 20), new PointF(40, 10), new PointF(57, 20), new PointF(50, 40), new PointF(30, 40) };
            //Add polygon.
            path.AddPolygon(polygonPoints);
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Create polygon points.
            Dim polygonPoints As PointF() = {New PointF(23, 20), New PointF(40, 10), New PointF(57, 20), New PointF(50, 40), New PointF(30, 40)}
            'Add polygon.
            path.AddPolygon(polygonPoints)
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddRectangle(System.Drawing.RectangleF)">
            <summary>
            Appends the rectangle to this path.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Add rectangle
            path.AddRectangle(new RectangleF(0, 0, 200, 100));
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add rectangle
            path.AddRectangle(New RectangleF(0, 0, 200, 100))
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends the rectangle to this path.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangular region.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangular region.</param>
            <param name="width">The width of the rectangular region.</param>
            <param name="height">The height of the rectangular region.</param>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Add rectangle
            path.AddRectangle(0, 0, 200, 100);
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Add rectangle
            path.AddRectangle(0, 0, 200, 100)
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.StartFigure">
            <summary>
            Starts a new figure.
            </summary>
            <remarks>The next added primitive will start a new figure.</remarks>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Start first figure.
            path.StartFigure();
            path.AddArc(10, 10, 50, 50, 0, 270);                  
            path.CloseFigure();          
            //Start second figure.
            path.StartFigure();
            path.AddRectangle(10, 70, 50, 100);            
            path.CloseFigure();
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Start first figure.
            path.StartFigure()
            path.AddArc(10, 10, 50, 50, 0, 270)
            path.CloseFigure()
            'Start second figure.
            path.StartFigure()
            path.AddRectangle(10, 70, 50, 100)
            path.CloseFigure()
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.CloseFigure">
            <summary>
            Closes the last figure.
            </summary>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            //Start first figure.
            path.StartFigure();
            path.AddArc(10, 10, 50, 50, 0, 270);                  
            path.CloseFigure();          
            //Start second figure.
            path.StartFigure();
            path.AddRectangle(10, 70, 50, 100);            
            path.CloseFigure();
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            'Start first figure.
            path.StartFigure()
            path.AddArc(10, 10, 50, 50, 0, 270)
            path.CloseFigure()
            'Start second figure.
            path.StartFigure()
            path.AddRectangle(10, 70, 50, 100)
            path.CloseFigure()
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.CloseAllFigures">
            <summary>
            Closes all non-closed figures.
            </summary>
            <example>
            <code lang="C#">
            //Create a document.
            PdfDocument doc = new PdfDocument();
            //Add a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF path.
            PdfPath path = new PdfPath();
            path.StartFigure();
            path.AddLine(new Point(10, 100), new Point(150, 100));
            path.AddLine(new Point(150, 100), new Point(10, 200));
            path.StartFigure();
            path.AddArc(200, 200, 100, 100, 0, 90);
            path.StartFigure();
            PointF point1 = new PointF(300, 300);
            PointF point2 = new PointF(400, 325);
            PointF point3 = new PointF(400, 375);
            PointF point4 = new PointF(300, 400);
            PointF[] points = { point1, point2, point3, point4 };
            path.AddPolygon(points);
            //Close all the figures.
            path.CloseAllFigures();
            //Draw PDF path to page.
            path.Draw(page, PointF.Empty);
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a document.
            Dim doc As New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF path.
            Dim path As New PdfPath()
            path.StartFigure()
            path.AddLine(New Point(10, 100), New Point(150, 100))
            path.AddLine(New Point(150, 100), New Point(10, 200))
            path.StartFigure()
            path.AddArc(200, 200, 100, 100, 0, 90)
            path.StartFigure()
            Dim point1 As New PointF(300, 300)
            Dim point2 As New PointF(400, 325)
            Dim point3 As New PointF(400, 375)
            Dim point4 As New PointF(300, 400)
            Dim points As PointF() = {point1, point2, point3, point4}
            path.AddPolygon(points)
            'Close all the figures.
            path.CloseAllFigures()
            'Draw PDF path to page.
            path.Draw(page, PointF.Empty)
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddPoints(System.Collections.Generic.List{System.Single},Syncfusion.PdfExport.PathPointType)">
            <summary>
            Adds the points along with their type to the path.
            </summary>
            <param name="points">The points.</param>
            <param name="pointType">Type of the points.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddPoints(System.Collections.Generic.List{System.Single},Syncfusion.PdfExport.PathPointType,System.Int32,System.Int32)">
            <summary>
            Adds the points along with their type to the path.
            </summary>
            <param name="points">The points.</param>
            <param name="pointType">Type of the points.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.AddPoint(System.Drawing.PointF,Syncfusion.PdfExport.PathPointType)">
            <summary>
            Adds a point and its type.
            </summary>
            <param name="point">The point.</param>
            <param name="pointType">Type of the point.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPath.CloseFigure(System.Int32)">
            <summary>
            Closes the figure.
            </summary>
            <param name="index">The index of the last figure point.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTemplate">
            <summary>
            Represents Pdf Template object.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(new SizeF(200, 100));
            //Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty);
            //Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 50));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(New SizeF(200, 100))
            'Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty)
            'Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 50))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTemplate.m_graphics">
            <summary>
            Graphics context of the template.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTemplate.m_content">
            <summary>
            Content of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTemplate.m_resources">
            <summary>
            Resources of the template.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTemplate.m_size">
            <summary>
            Size of the template.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTemplate.m_customPdfTemplateName">
            <summary>
            To create custom pdftemplate name and set signature validation appearance
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTemplate.m_isAnnotationTemplate">
            <summary>
            Indicates template contains appearance of annotation
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTemplate.m_isScaleAnnotation">
            <summary>
            Indicates annotation template needs scaling
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTemplate"/> class.
            </summary>
            <param name="size">The size of the PDF template</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(new SizeF(200, 100));
            //Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty);
            //Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 50));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(New SizeF(200, 100))
            'Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty)
            'Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 50))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTemplate"/> class.
            </summary>
            <param name="rect">The rect - represents the rectangle bounds of the PDF template.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(new RectangleF(0, 0, 200, 100));
            //Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty);
            //Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 50));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(New RectangleF(0, 0, 200, 100))
            'Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty)
            'Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 50))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTemplate"/> class.
            </summary>
            <param name="width">The width of the template.</param>
            <param name="height">The height of the template.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(200, 100);
            //Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty);
            //Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 50));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(200, 100)
            'Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty)
            'Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 50))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTemplate"/> class.
            </summary>
            <param name="x">The X-coordinate of the template start point.</param>
            <param name="y">The Y-coordinate of the template start point.</param>
            <param name="width">The width of the template.</param>
            <param name="height">The height of the template.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(0, 0, 200, 100);
            //Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty);
            //Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 50));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(0, 0, 200, 100)
            'Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty)
            'Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 50))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTemplate.Graphics">
            <summary>
            Gets graphics context of the template.
            </summary>
            <remarks>It will return null, if the template is read-only.</remarks>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(new SizeF(200, 100));
            //Get the template graphics.
            PdfGraphics graphics = template.Graphics;
            //Draw the text to the template graphics.
            graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, new PointF(0,0));
            //Draw a rectangle on the template graphics
            graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 50));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(New SizeF(200, 100))
            'Get the template graphics.
            Dim graphics As PdfGraphics = template.Graphics
            'Draw the text to the template graphics.
            graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, New PointF(0, 0))
            'Draw a rectangle on the template graphics
            graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 50))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTemplate.Size">
            <summary>
            Gets the size of the template.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(new SizeF(200, 100));
            //Get the template graphics.
            PdfGraphics graphics = template.Graphics;
            //Get the template size.
            SizeF templateSize = template.Size;
            Console.Write("Template size: " + templateSize.Width + ", " + templateSize.Height);
            //Draw the text to the template graphics.
            graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, new PointF(0,0));
            //Draw a rectangle on the template graphics
            graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 50));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(New SizeF(200, 100))
            'Get the template graphics.
            Dim graphics As PdfGraphics = template.Graphics
             'Get the template size.
             Dim templateSize As SizeF = template.Size
             Console.Write("Template size: " + templateSize.Width + ", " + templateSize.Height)
            'Draw the text to the template graphics.
            graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, New PointF(0, 0))
            'Draw a rectangle on the template graphics
            graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 50))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTemplate.Width">
            <summary>
            Gets the width of the template.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(new SizeF(200, 100));
            //Get the template graphics.
            PdfGraphics graphics = template.Graphics;
            //Get the template width.
            float width = template.Width;
            Console.Write("Template width: " + width);
            //Draw the text to the template graphics.
            graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, new PointF(0,0));
            //Draw a rectangle on the template graphics
            graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 50));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(New SizeF(200, 100))
            'Get the template graphics.
            Dim graphics As PdfGraphics = template.Graphics
             'Get the template width.
             Dim width As Single = template.Width
             Console.Write("Template width: " + width)
            'Draw the text to the template graphics.
            graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, New PointF(0, 0))
            'Draw a rectangle on the template graphics
            graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 50))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTemplate.Height">
            <summary>
            Gets the height of the template.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(new SizeF(200, 100));
            //Get the template graphics.
            PdfGraphics graphics = template.Graphics;
            //Get the template height.
            float height = template.Height;
            Console.Write("Template height: " + height);
            //Draw the text to the template graphics.
            graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, new PointF(0,0));
            //Draw a rectangle on the template graphics
            graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 50));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(New SizeF(200, 100))
            'Get the template graphics.
            Dim graphics As PdfGraphics = template.Graphics
            'Get the template height.
            Dim height As Single = template.Height
            Console.Write("Template height: " + height)
            'Draw the text to the template graphics.
            graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, New PointF(0, 0))
            'Draw a rectangle on the template graphics
            graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 50))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.Reset(System.Drawing.SizeF)">
            <summary>
            Resets the template and sets the specified size.
            </summary>
            <param name="size">The size.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(new SizeF(200, 100));
            //Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty);
            //Reset the template.
            template.Reset(new SizeF(300, 200));
            //Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 150));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(New SizeF(200, 100))
            'Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty)
            'Reset the template.
            template.Reset(New SizeF(300, 200))
            'Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 150))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.Reset">
            <summary>
            Resets an instance.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF standard font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 14);
            //Create new PdfTemplate object.
            PdfTemplate template = new PdfTemplate(new SizeF(200, 100));
            //Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty);
            //Reset the template.
            template.Reset();
            //Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, new RectangleF(0, 20, 200, 150));
            //Draw the template to PDF page.
            template.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);</code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF standard font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 14)
            'Create new PdfTemplate object.
            Dim template As New PdfTemplate(New SizeF(200, 100))
            'Draw the text to the template graphics.
            template.Graphics.DrawString("This is PDF template.", font, PdfBrushes.Black, PointF.Empty)
            'Reset the template.
            template.Reset()
            'Draw a rectangle on the template graphics
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, New RectangleF(0, 20, 200, 150))
            'Draw the template to PDF page.
            template.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTemplate.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.GetBoundsInternal">
            <summary>
            Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
            <remarks>This method doesn't take into consideration a rotation of the element.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.Initialize">
            <summary>
            Initializes object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.GetResources">
            <summary>
            Gets the resources and modifies the template dictionary.
            </summary>
            <returns>Pdf resources.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.AddType">
            <property name="flag" value="Finished" />
            <summary>
            Adds type key.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.AddSubType">
            <property name="flag" value="Finished" />
            <summary>
            Adds SubType key.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.SetSize(System.Drawing.SizeF)">
            <summary>
            Sets the size of the template.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTemplate.SetBounds(System.Drawing.RectangleF)">
            <summary>
            Sets the bounds of the template.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTemplate.IsAnnotationTemplate">
            <summary>
            Gets or sets a value, indicating the annotation graphics.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTemplate.NeedScaling">
            <summary>
            Gets or sets a value, indicating the annotation template need scaling.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPie">
            <summary>
            Represents a pie shape.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(new RectangleF(0, 0, 200, 100), 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(New RectangleF(0, 0, 200, 100), 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(200, 100, 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(200, 100, 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="pen">The pen of the pie shape.</param>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(PdfPens.Red, 200, 100, 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(PdfPens.Red, 200, 100, 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="brush">The brush of the pie shape.</param>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(PdfBrushes.Red, 200, 100, 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(PdfBrushes.Red, 200, 100, 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="pen">The pen of the pie shape.</param>
            <param name="brush">The brush of the pie shape.</param>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(PdfPens.Black, PdfBrushes.Red, 200, 100, 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(PdfPens.Black, PdfBrushes.Red, 200, 100, 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(0, 0, 200, 100, 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(0, 0, 200, 100, 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="rectangle">The rectangle region of the pie shape.</param>       
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(new RectangleF(0, 0, 200, 100), 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(New RectangleF(0, 0, 200, 100), 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="pen">The pen of the pie shape.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(PdfPens.Red, 0, 0, 200, 100, 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(PdfPens.Red, 0, 0, 200, 100, 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="pen">The pen of the pie.</param>
            <param name="rectangle">The rectangle region of the pie shape.</param>        
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(PdfPens.Red, new RectangleF(0, 0, 200, 100), 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(PdfPens.Red,New RectangleF(0, 0, 200, 100), 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="brush">The brush of the pie shape.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(PdfBrushes.Red, 0, 0, 200, 100, 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(PdfBrushes.Red, 0, 0, 200, 100, 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="brush">The brush of the pie shape.</param>
            <param name="rectangle">The rectangle region of the pie shape.</param>        
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(PdfBrushes.Red, new RectangleF(0, 0, 200, 100), 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(PdfBrushes.Red, New RectangleF(0, 0, 200, 100), 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="pen">The pen of the pie shape.</param>
            <param name="brush">The brush of the pie shape.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">The width of the bounding rectangle.</param>
            <param name="height">The height of the bounding rectangle.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(PdfPens.Black, PdfBrushes.Red, 0, 0, 200, 100, 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(PdfPens.Black, PdfBrushes.Red, 0, 0, 200, 100, 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPie"/> class.
            </summary>
            <param name="pen">The pen of the pie shape.</param>
            <param name="brush">The brush of the pie shape.</param>
            <param name="rectangle">The rectangle region of the pie shape.</param>      
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the pie.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the pie.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF pie instance.
            PdfPie pie = new PdfPie(PdfPens.Black, PdfBrushes.Red, new RectangleF(0, 0, 200, 100), 0, 180);
            //Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF pie instance.
            Dim pie As New PdfPie(PdfPens.Black, PdfBrushes.Red, New RectangleF(0, 0, 200, 100), 0, 180)
            'Draw the pie to PDF page.
            pie.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPie.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPolygon">
            <summary>
            Represents a set of points connected with lines, could be drawn and filled.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Polygon points.            
            PointF point1 = new PointF(50, 50);
            PointF point2 = new PointF(100, 50);
            PointF point3 = new PointF(150, 100);
            PointF point4 = new PointF(150, 150);
            PointF point5 = new PointF(100, 200);
            PointF point6 = new PointF(50, 200);
            PointF point7 = new PointF(0, 150);
            PointF point8 = new PointF(0, 100);
            PointF[] points = { point1, point2, point3, point4, point5, point6, point7, point8 };
            //Create a new PDF polygon instance.            
            PdfPolygon polygon = new PdfPolygon(points);
            //Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Polygon points.            
            Dim point1 As New PointF(50, 50)
            Dim point2 As New PointF(100, 50)
            Dim point3 As New PointF(150, 100)
            Dim point4 As New PointF(150, 150)
            Dim point5 As New PointF(100, 200)
            Dim point6 As New PointF(50, 200)
            Dim point7 As New PointF(0, 150)
            Dim point8 As New PointF(0, 100)
            Dim points As PointF() = {point1, point2, point3, point4, point5, point6, point7, point8}
            'Create a new PDF polygon instance.
            Dim polygon As New PdfPolygon(points)
            'Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPolygon.m_points">
            <summary>
            Array of the points.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPolygon.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPolygon"/> class.
            </summary>
            <param name="points">The points that represents the vertices of the polygon.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Polygon points.            
            PointF point1 = new PointF(50, 50);
            PointF point2 = new PointF(100, 50);
            PointF point3 = new PointF(150, 100);
            PointF point4 = new PointF(150, 150);
            PointF point5 = new PointF(100, 200);
            PointF point6 = new PointF(50, 200);
            PointF point7 = new PointF(0, 150);
            PointF point8 = new PointF(0, 100);
            PointF[] points = { point1, point2, point3, point4, point5, point6, point7, point8 };
            //Create a new PDF polygon instance.            
            PdfPolygon polygon = new PdfPolygon(points);
            //Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Polygon points.            
            Dim point1 As New PointF(50, 50)
            Dim point2 As New PointF(100, 50)
            Dim point3 As New PointF(150, 100)
            Dim point4 As New PointF(150, 150)
            Dim point5 As New PointF(100, 200)
            Dim point6 As New PointF(50, 200)
            Dim point7 As New PointF(0, 150)
            Dim point8 As New PointF(0, 100)
            Dim points As PointF() = {point1, point2, point3, point4, point5, point6, point7, point8}
            'Create a new PDF polygon instance.
            Dim polygon As New PdfPolygon(points)
            'Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPolygon.#ctor(Syncfusion.PdfExport.PdfPen,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPolygon"/> class.
            </summary>
            <param name="pen">The pen of the polygon shape.</param>
            <param name="points">The points that represents the vertices of the polygon.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Polygon points.            
            PointF point1 = new PointF(100, 100);
            PointF point2 = new PointF(150, 100);
            PointF point3 = new PointF(200, 150);
            PointF point4 = new PointF(200, 200);
            PointF point5 = new PointF(150, 250);
            PointF point6 = new PointF(100, 250);
            PointF point7 = new PointF(50, 200);
            PointF point8 = new PointF(50, 150);
            PointF[] points = { point1, point2, point3, point4, point5, point6, point7, point8 };
            //Create a new PDF polygon instance.            
            PdfPolygon polygon = new PdfPolygon(PdfPens.Red, points);
            //Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Polygon points.            
            Dim point1 As New PointF(100, 100)
            Dim point2 As New PointF(150, 100)
            Dim point3 As New PointF(200, 150)
            Dim point4 As New PointF(200, 200)
            Dim point5 As New PointF(150, 250)
            Dim point6 As New PointF(100, 250)
            Dim point7 As New PointF(50, 200)
            Dim point8 As New PointF(50, 150)
            Dim points As PointF() = {point1, point2, point3, point4, point5, point6, point7, point8}
            'Create a new PDF polygon instance.
            Dim polygon As New PdfPolygon(PdfPens.Red, points)
            'Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPolygon.#ctor(Syncfusion.PdfExport.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPolygon"/> class.
            </summary>
            <param name="brush">The brush of the polygon shape.</param>
            <param name="points">The points that represents the vertices of the polygon.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Polygon points.            
            PointF point1 = new PointF(100, 100);
            PointF point2 = new PointF(150, 100);
            PointF point3 = new PointF(200, 150);
            PointF point4 = new PointF(200, 200);
            PointF point5 = new PointF(150, 250);
            PointF point6 = new PointF(100, 250);
            PointF point7 = new PointF(50, 200);
            PointF point8 = new PointF(50, 150);
            PointF[] points = { point1, point2, point3, point4, point5, point6, point7, point8 };
            //Create a new PDF polygon instance.            
            PdfPolygon polygon = new PdfPolygon(PdfBrushes.Red, points);
            //Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Polygon points.            
            Dim point1 As New PointF(100, 100)
            Dim point2 As New PointF(150, 100)
            Dim point3 As New PointF(200, 150)
            Dim point4 As New PointF(200, 200)
            Dim point5 As New PointF(150, 250)
            Dim point6 As New PointF(100, 250)
            Dim point7 As New PointF(50, 200)
            Dim point8 As New PointF(50, 150)
            Dim points As PointF() = {point1, point2, point3, point4, point5, point6, point7, point8}
            'Create a new PDF polygon instance.
            Dim polygon As New PdfPolygon(PdfBrushes.Red, points)
            'Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPolygon.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPolygon"/> class.
            </summary>
            <param name="pen">The pen of the polygon shape.</param>
            <param name="brush">The brush of the polygon shape.</param>
            <param name="points">The points that represents the vertices of the polygon.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Polygon points.            
            PointF point1 = new PointF(100, 100);
            PointF point2 = new PointF(150, 100);
            PointF point3 = new PointF(200, 150);
            PointF point4 = new PointF(200, 200);
            PointF point5 = new PointF(150, 250);
            PointF point6 = new PointF(100, 250);
            PointF point7 = new PointF(50, 200);
            PointF point8 = new PointF(50, 150);
            PointF[] points = { point1, point2, point3, point4, point5, point6, point7, point8 };
            //Create a new PDF polygon instance.            
            PdfPolygon polygon = new PdfPolygon(PdfPens.Black, PdfBrushes.Red, points);
            //Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Polygon points.            
            Dim point1 As New PointF(100, 100)
            Dim point2 As New PointF(150, 100)
            Dim point3 As New PointF(200, 150)
            Dim point4 As New PointF(200, 200)
            Dim point5 As New PointF(150, 250)
            Dim point6 As New PointF(100, 250)
            Dim point7 As New PointF(50, 200)
            Dim point8 As New PointF(50, 150)
            Dim points As PointF() = {point1, point2, point3, point4, point5, point6, point7, point8}
            'Create a new PDF polygon instance.
            Dim polygon As New PdfPolygon(PdfPens.Black, PdfBrushes.Red, points)
            'Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPolygon.Points">
            <summary>
            Gets or sets the points of the polygon.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Polygon points.            
            PointF point1 = new PointF(100, 100);
            PointF point2 = new PointF(150, 100);
            PointF point3 = new PointF(200, 150);
            PointF point4 = new PointF(200, 200);
            PointF point5 = new PointF(150, 250);
            PointF point6 = new PointF(100, 250);
            PointF point7 = new PointF(50, 200);
            PointF point8 = new PointF(50, 150);
            PointF[] points = { point1, point2, point3, point4, point5, point6, point7, point8 };
            //Create a new PDF polygon instance.            
            PdfPolygon polygon = new PdfPolygon(PdfPens.Black, new PointF[] { new PointF(0,100) });
            //Set the polygon points.        
            polygon.Points = points;
            //Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Polygon points.            
            Dim point1 As New PointF(100, 100)
            Dim point2 As New PointF(150, 100)
            Dim point3 As New PointF(200, 150)
            Dim point4 As New PointF(200, 200)
            Dim point5 As New PointF(150, 250)
            Dim point6 As New PointF(100, 250)
            Dim point7 As New PointF(50, 200)
            Dim point8 As New PointF(50, 150)
            Dim points As PointF() = {point1, point2, point3, point4, point5, point6, point7, point8}
            'Create a new PDF polygon instance.
            Dim polygon As New PdfPolygon(PdfPens.Black, New PointF() {New PointF(0, 100)})
            'Set the polygon points.
            polygon.Points = points
            'Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPolygon.Count">
            <summary>
            Gets a number of the points in the polygon.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Polygon points.            
            PointF point1 = new PointF(100, 100);
            PointF point2 = new PointF(150, 100);
            PointF point3 = new PointF(200, 150);
            PointF point4 = new PointF(200, 200);
            PointF point5 = new PointF(150, 250);
            PointF point6 = new PointF(100, 250);
            PointF point7 = new PointF(50, 200);
            PointF point8 = new PointF(50, 150);
            PointF[] points = { point1, point2, point3, point4, point5, point6, point7, point8 };
            //Create a new PDF polygon instance.            
            PdfPolygon polygon = new PdfPolygon(PdfPens.Red, points);
            //Get the polygon points count.
            int count = polygon.Count;
            Console.WriteLine("Polygon points count: " + count);
            //Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Polygon points.            
            Dim point1 As New PointF(100, 100)
            Dim point2 As New PointF(150, 100)
            Dim point3 As New PointF(200, 150)
            Dim point4 As New PointF(200, 200)
            Dim point5 As New PointF(150, 250)
            Dim point6 As New PointF(100, 250)
            Dim point7 As New PointF(50, 200)
            Dim point8 As New PointF(50, 150)
            Dim points As PointF() = {point1, point2, point3, point4, point5, point6, point7, point8}
            'Create a new PDF polygon instance.
            Dim polygon As New PdfPolygon(PdfPens.Red, points)
            'Get the polygon points count.
            Dim count As Integer = polygon.Count
            Console.WriteLine("Polygon points count: " + count)
            'Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPolygon.AddPoint(System.Drawing.PointF)">
            <summary>
            Adds a point to the polygon.
            </summary>
            <param name="point">The last point of the polygon.</param>
             <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Polygon points.            
            PointF point1 = new PointF(100, 100);
            PointF point2 = new PointF(150, 100);
            PointF point3 = new PointF(200, 150);
            PointF point4 = new PointF(200, 200);
            PointF point5 = new PointF(150, 250);
            PointF point6 = new PointF(100, 250);
            PointF point7 = new PointF(50, 200);
            PointF point8 = new PointF(50, 150);
            PointF[] points = { point1, point2, point3, point4, point5, point6, point7, point8 };
            //Create a new PDF polygon instance.            
            PdfPolygon polygon = new PdfPolygon(PdfPens.Red, points);
            //Add points.
            polygon.AddPoint(new PointF(50, 50));
            //Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Polygon points.            
            Dim point1 As New PointF(100, 100)
            Dim point2 As New PointF(150, 100)
            Dim point3 As New PointF(200, 150)
            Dim point4 As New PointF(200, 200)
            Dim point5 As New PointF(150, 250)
            Dim point6 As New PointF(100, 250)
            Dim point7 As New PointF(50, 200)
            Dim point8 As New PointF(50, 150)
            Dim points As PointF() = {point1, point2, point3, point4, point5, point6, point7, point8}
            'Create a new PDF polygon instance.
            Dim polygon As New PdfPolygon(PdfPens.Red, points)
            'Add points.
            polygon.AddPoint(New PointF(50, 50))
            'Draw the polygon to PDF page.
            polygon.Draw(page, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPolygon.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPolygon.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfRectangle">
            <summary>
            Represents a simple rectangle that could be drawn and/or filled.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(pen, 200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(pen, 200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(Syncfusion.PdfExport.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Green);
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(brush, 200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF solid brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Green)
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(brush, 200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new PDF solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Green);
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(pen, brush, 200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new PDF solid brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Green)
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(pen, brush, 200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of this Rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of this Rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(0, 0, 200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(0, 0, 200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(new RectangleF(0, 0, 200, 100));
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(New RectangleF(0, 0, 200, 100))
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x-coordinate of the upper-left corner of this Rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of this Rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(pen, 0, 0, 200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(pen, 0, 0, 200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
             <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(pen, new RectangleF(0, 0, 200, 100));
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(pen, New RectangleF(0, 0, 200, 100))
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x-coordinate of the upper-left corner of this Rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of this Rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Green);
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(brush, 0, 0, 200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF solid brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Green)
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(brush, 0, 0, 200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Green);
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(brush, new RectangleF(0, 0, 200, 100));
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF solid brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Green)
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(brush, New RectangleF(0, 0, 200, 100))
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x-coordinate of the upper-left corner of this Rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of this Rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new PDF solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Green);
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(pen, brush, 0, 0, 200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new PDF solid brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Green)
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(pen, brush, 0, 0, 200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PDF pen.
            PdfPen pen = new PdfPen(Color.Red);
            //Create new PDF solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Green);
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(pen, brush, new RectangleF(0, 0, 200, 100));
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PDF pen.
            Dim pen As New PdfPen(Color.Red)
            'Create new PDF solid brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Green)
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(pen, brush, New RectangleF(0, 0, 200, 100))
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangle.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfRectangleArea">
            <summary>
            Represents an area bound by a rectangle.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfRectangleArea.m_rect">
            <summary>
            Bounds of the element.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangleArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangleArea"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangleArea.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangleArea"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangleArea.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangleArea"/> class.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangleArea.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangleArea"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangleArea.#ctor(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfRectangleArea"/> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfRectangleArea.X">
            <summary>
            Gets or sets the X co-ordinate of the upper-left corner of this the element.
            </summary>
             <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Set the X co-ordinate of the upper-left corner of rectangle.
            rect.X = 0;
            //Set the Y co-ordinate of the upper-left corner of rectangle.
            rect.Y = 0;
            //Set the width of the rectangle.
            rect.Width = 200;
            //Set the height of the rectangle.
            rect.Height = 100; 
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Set the X co-ordinate of the upper-left corner of rectangle.
            rect.X = 0
            'Set the Y co-ordinate of the upper-left corner of rectangle.
            rect.Y = 0
            'Set the width of the rectangle.
            rect.Width = 200
            'Set the height of the rectangle.
            rect.Height = 100 
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfRectangleArea.Y">
            <summary>
            Gets or sets the Y co-ordinate of the upper-left corner of this the element.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Set the X co-ordinate of the upper-left corner of rectangle.
            rect.X = 0;
            //Set the Y co-ordinate of the upper-left corner of rectangle.
            rect.Y = 0;
            //Set the width of the rectangle.
            rect.Width = 200;
            //Set the height of the rectangle.
            rect.Height = 100; 
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Set the X co-ordinate of the upper-left corner of rectangle.
            rect.X = 0
            'Set the Y co-ordinate of the upper-left corner of rectangle.
            rect.Y = 0
            'Set the width of the rectangle.
            rect.Width = 200
            'Set the height of the rectangle.
            rect.Height = 100 
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfRectangleArea.Width">
            <summary>
            Gets or sets the width of this element.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Set the X co-ordinate of the upper-left corner of rectangle.
            rect.X = 0;
            //Set the Y co-ordinate of the upper-left corner of rectangle.
            rect.Y = 0;
            //Set the width of the rectangle.
            rect.Width = 200;
            //Set the height of the rectangle.
            rect.Height = 100; 
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Set the X co-ordinate of the upper-left corner of rectangle.
            rect.X = 0
            'Set the Y co-ordinate of the upper-left corner of rectangle.
            rect.Y = 0
            'Set the width of the rectangle.
            rect.Width = 200
            'Set the height of the rectangle.
            rect.Height = 100 
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfRectangleArea.Height">
            <summary>
            Gets or sets the height of this element.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Set the X co-ordinate of the upper-left corner of rectangle.
            rect.X = 0;
            //Set the Y co-ordinate of the upper-left corner of rectangle.
            rect.Y = 0;
            //Set the width of the rectangle.
            rect.Width = 200;
            //Set the height of the rectangle.
            rect.Height = 100; 
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Set the X co-ordinate of the upper-left corner of rectangle.
            rect.X = 0
            'Set the Y co-ordinate of the upper-left corner of rectangle.
            rect.Y = 0
            'Set the width of the rectangle.
            rect.Width = 200
            'Set the height of the rectangle.
            rect.Height = 100 
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfRectangleArea.Size">
            <summary>
            Gets or sets the size of this element.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Set the size of the element.
            rect.Size = new SizeF(200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Set the size of the element.
            rect.Size = New SizeF(200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfRectangleArea.Bounds">
            <summary>
            Gets or sets bounds of this element.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a new PDF page.
            PdfPage page = document.Pages.Add();
            //Create new PdfRectangle instance.
            PdfRectangle rect = new PdfRectangle(200, 100);
            //Set the bounds of the element.
            rect.Bounds = new RectangleF(0, 10, 200, 100);
            //Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty);
            //Save the PDF docment.
            document.Save("output.pdf");
            //Close the PDF document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a new PDF page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new PdfRectangle instance.
            Dim rect As New PdfRectangle(200, 100)
            'Set the bounds of the element.
            rect.Bounds = New RectangleF(0, 10, 200, 100)
            'Draw the rectangle to PDF page.
            rect.Draw(page, PointF.Empty)
            'Save the PDF docment.
            document.Save("output.pdf") 
            Close the PDF document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfRectangleArea.GetBoundsInternal">
            <summary>
            Overloaded. Returns a rectangle that bounds this element.
            </summary>
            <returns>Returns a rectangle that bounds this element.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTextElement">
             <summary>
             Represents the text area with the ability to span several pages and inherited from the <see cref="T:Syncfusion.PdfExport.PdfLayoutElement"/> class
             </summary>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!", font, PdfBrushes.Black);
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!", font, PdfBrushes.Black)
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextElement.m_text">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextElement.m_value">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextElement.m_pen">
            <summary>
            Pen for text drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextElement.m_brush">
            <summary>
            Brush for text drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextElement.m_font">
            <summary>
            Font for text drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextElement.m_format">
            <summary>
            Text format.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextElement.ispdfTextElement">
             <summary>
            indicate whether the PdfGridCell value is PdfTextElement
             </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTextElement"/> class.
             </summary>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement();
             //Set text.
             element.Text = "Hello World!!!";
             //Set font.
             element.Font = font;
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement()
            'Set text.
            element.Text = "Hello World!!!"
            'Set font.
            element.Font = font
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTextElement"/> class with text to draw into the PDF.
             </summary>
             <param name="text">The text to draw into the PDF.</param>
              <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!");        
             //Set font.
             element.Font = font;
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!")      
            'Set font.
            element.Font = font
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.#ctor(System.String,Syncfusion.PdfExport.PdfFont)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTextElement"/> class with the text and <see cref="T:Syncfusion.PdfExport.PdfFont"/>.
             </summary>
             <param name="text">The text to draw into the PDF.</param>
             <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> that defines the text format.</param>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!", font);
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!", font)
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.#ctor(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTextElement"/> class with text,<see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfPen"/>.
             </summary>
             <param name="text">The text to draw into the PDF.</param>
             <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> that defines the text format.</param>
             <param name="pen">The <see cref="T:Syncfusion.PdfExport.PdfPen"/> that determines the color, width, and style of the text</param>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!", font, PdfPens.Black);
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!", font, PdfPens.Black)
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.#ctor(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTextElement"/> class with text,<see cref="T:Syncfusion.PdfExport.PdfFont"/> and <see cref="T:Syncfusion.PdfExport.PdfBrush"/>.
             </summary>
             <param name="text">The text to draw into the PDF.</param>
             <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> that defines the text format.</param>
             <param name="brush">The <see cref="T:Syncfusion.PdfExport.PdfBrush"/>  that determines the color and texture of the drawn text.</param>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!", font, PdfBrushes.Black);
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!", font, PdfBrushes.Black)
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.#ctor(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfStringFormat)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTextElement"/> class with text,<see cref="T:Syncfusion.PdfExport.PdfFont"/>,<see cref="T:Syncfusion.PdfExport.PdfPen"/>,<see cref="T:Syncfusion.PdfExport.PdfBrush"/> and <see cref="T:Syncfusion.PdfExport.PdfStringFormat"/>.
             </summary>
             <param name="text">The text to draw into the PDF.</param>
             <param name="font">The <see cref="T:Syncfusion.PdfExport.PdfFont"/> that defines the text format.</param>
             <param name="pen">The <see cref="T:Syncfusion.PdfExport.PdfPen"/> that determines the color, width, and style of the text</param>
             <param name="brush">The <see cref="T:Syncfusion.PdfExport.PdfBrush"/>  that determines the color and texture of the drawn text.</param>
             <param name="format">The <see cref="T:Syncfusion.PdfExport.PdfStringFormat"/> that determines string format.</param>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF string format.
             PdfStringFormat format = new PdfStringFormat();
             //Set alignments.
             format.Alignment = PdfTextAlignment.Center;
             format.LineAlignment = PdfVerticalAlignment.Middle;
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!", font, PdfPens.Red, PdfBrushes.Black, format);
             //Draw the text element.
             element.Draw(page, new RectangleF(0, 0, 200, 20));
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set alignments.
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!", font, PdfPens.Red, PdfBrushes.Black, format)
            'Draw the text element.
            element.Draw(page, New RectangleF(0, 0, 200, 20))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTextElement.Text">
             <summary>
             Gets or sets a value indicating the text that should be printed.
             </summary>
             <value>The <see cref="T:System.String"/> to draw to the PDF </value>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement();
             //Set text.
             element.Text = "Hello World!!!";
             //Set font.
             element.Font = font;
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement()
            'Set text.
            element.Text = "Hello World!!!"
            'Set font.
            element.Font = font
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTextElement.Value">
            <summary>
            Gets or sets a value indicating the text that should be printed.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTextElement.Pen">
             <summary>
             Gets or sets a <see cref="T:Syncfusion.PdfExport.PdfPen"/> that determines the color, width, and style of the text
             </summary>
             <value>The <see cref="T:Syncfusion.PdfExport.PdfPen"/> that determines the color, width, and style of the text </value>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement();
             //Set text.
             element.Text = "Hello World!!!";
             //Set font.
             element.Font = font;
             //Set PDF pen.
             element.Pen = PdfPens.Red;
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement()
            'Set text.
            element.Text = "Hello World!!!"
            'Set font.
            element.Font = font
            'Set PDF pen.
            element.Pen = PdfPens.Red
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTextElement.Brush">
             <summary>
             Gets or sets the <see cref="T:Syncfusion.PdfExport.PdfBrush"/> that will be used to draw the text with color and texture.
             </summary>
             <value>The <see cref="T:Syncfusion.PdfExport.PdfBrush"/> that determines the color and texture of the drawn text </value>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement();
             //Set text.
             element.Text = "Hello World!!!";
             //Set font.
             element.Font = font;
             //Set PDF brush.
             element.Brush = PdfBrushes.RoyalBlue;
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement()
            'Set text.
            element.Text = "Hello World!!!"
            'Set font.
            element.Font = font
            'Set PDF brush.
            element.Brush = PdfBrushes.RoyalBlue
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTextElement.Font">
             <summary>
             Gets or sets a <see cref="T:Syncfusion.PdfExport.PdfFont"/> that defines the text format.
             </summary>
             <value>The <see cref="T:Syncfusion.PdfExport.PdfFont"/> that defines the text format</value>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement();
             //Set text.
             element.Text = "Hello World!!!";
             //Set font.
             element.Font = font;
             //Set PDF brush.
             element.Brush = PdfBrushes.RoyalBlue;
             //Draw the text element.
             element.Draw(graphics);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement()
            'Set text.
            element.Text = "Hello World!!!"
            'Set font.
            element.Font = font
            'Set PDF brush.
            element.Brush = PdfBrushes.RoyalBlue
            'Draw the text element.
            element.Draw(graphics)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTextElement.StringFormat">
             <summary>
             Gets or sets the <see cref="T:Syncfusion.PdfExport.PdfStringFormat"/> that will be used to set the string format
             </summary>
             <value>The <see cref="T:Syncfusion.PdfExport.PdfStringFormat"/> used to set the string format</value>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF string format.
             PdfStringFormat format = new PdfStringFormat();
             //Set alignments.
             format.Alignment = PdfTextAlignment.Center;
             format.LineAlignment = PdfVerticalAlignment.Middle;
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!", font, PdfPens.Red);
             //Set PDF string format.
             element.StringFormat = format;
             //Draw the text element.
             element.Draw(page, new RectangleF(0, 0, 200, 20));
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set alignments.
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!", font, PdfPens.Red)
            'Draw the text element.
            element.Draw(page, New RectangleF(0, 0, 200, 20))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.Draw(Syncfusion.PdfExport.PdfPage,System.Drawing.PointF,Syncfusion.PdfExport.PdfLayoutFormat)">
             <summary>
             Draws the text on the page in the specified location with <see cref="T:Syncfusion.PdfExport.PdfLayoutFormat"/>.
             It returns the <see cref="T:Syncfusion.PdfExport.PdfTextLayoutResult"/> which contains last page and bounds where the text element drawn.
             </summary>
             <param name="page">Current page where the text should be drawn.</param>
             <param name="location">PointF structure that specifies the start location on the page.</param>
             <param name="format">The <see cref="T:Syncfusion.PdfExport.PdfLayoutFormat"/> that represents the layout settings</param>
             <returns>The <see cref="T:Syncfusion.PdfExport.PdfTextLayoutResult"/> that represents the layout result of the drawn text.</returns>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!", font, PdfBrushes.Black);
             //Create layout format
             PdfLayoutFormat format=new PdfLayoutFormat();
             format.Layout=PdfLayoutType.Paginate;
             //Draw the text with layout format
             element.Draw(page, new PointF(0, 0), format);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!", font, PdfBrushes.Black)
            'Create layout format
            Dim format As New PdfLayoutFormat()
            format.Layout = PdfLayoutType.Paginate
            'Draw the text with layout format
            element.Draw(page, New PointF(0, 0), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.Draw(Syncfusion.PdfExport.PdfPage,System.Drawing.PointF,System.Single,Syncfusion.PdfExport.PdfLayoutFormat)">
             <summary>Draws the text on the page in the specified location,width and <see cref="T:Syncfusion.PdfExport.PdfLayoutFormat"/>.
             It returns the <see cref="T:Syncfusion.PdfExport.PdfTextLayoutResult"/> which contains last page and bounds where the text element drawn
             </summary>
             <param name="page">Current page where the text should be drawn.</param>
             <param name="location">PointF structure that specifies the start location on the page.</param>
             <param name="width">Width of the text bounds.</param>
             <param name="format">The <see cref="T:Syncfusion.PdfExport.PdfLayoutFormat"/> that represents the layout settings</param>
             <returns>The <see cref="T:Syncfusion.PdfExport.PdfTextLayoutResult"/> that represents the layout result of the drawn text.</returns>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!", font, PdfBrushes.Black);
             //Create layout format
             PdfLayoutFormat format=new PdfLayoutFormat();
             format.Layout=PdfLayoutType.Paginate;
             //Draw the text with layout format
             element.Draw(page, new PointF(0, 0), 200, format);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!", font, PdfBrushes.Black)
            'Create layout format
            Dim format As New PdfLayoutFormat()
            format.Layout = PdfLayoutType.Paginate
            'Draw the text with layout format
            element.Draw(page, New PointF(0, 0), 200, format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.Draw(Syncfusion.PdfExport.PdfPage,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfLayoutFormat)">
             <summary>
             Draws the text on the page with specified layout rectangle and <see cref="T:Syncfusion.PdfExport.PdfLayoutFormat"/>.
             It returns the <see cref="T:Syncfusion.PdfExport.PdfTextLayoutResult"/> which contains last page and bounds where the text element drawn.
             </summary>
             <param name="page">Current page where the text should be drawn.</param>
             <param name="layoutRectangle">RectangleF structure that specifies the bounds of the text.</param>
             <param name="format">The <see cref="T:Syncfusion.PdfExport.PdfLayoutFormat"/> that represents the layout settings</param>
             <returns>The <see cref="T:Syncfusion.PdfExport.PdfTextLayoutResult"/> that represents the layout result of the drawn text.</returns>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Use the font installed in the machine
             PdfFont font = new PdfTrueTypeFont(new Font("Arial", 14));
             //Create PDF text element
             PdfTextElement element = new PdfTextElement("Hello World!!!", font, PdfBrushes.Black);
             //Create layout format
             PdfLayoutFormat format=new PdfLayoutFormat();
             format.Layout=PdfLayoutType.Paginate;
             //Draw the text with layout format
             element.Draw(page, new RectangleF(0, 0, 200, 400), format);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Use the font installed in the machine
            Dim font As PdfFont = New PdfTrueTypeFont(New Font("Arial", 14))
            'Create PDF text element
            Dim element As New PdfTextElement("Hello World!!!", font, PdfBrushes.Black)
            'Create layout format
            Dim format As New PdfLayoutFormat()
            format.Layout = PdfLayoutType.Paginate
            'Draw the text with layout format
            element.Draw(page, New RectangleF(0, 0, 200, 400), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.ObtainBrush">
            <summary>
            Gets a brush for drawing.
            </summary>
            <returns>Gets a brush for drawing.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTextElement.Layout(Syncfusion.PdfExport.PdfLayoutParams)">
            <summary>
            Layouts the element.
            </summary>
            <param name="param">Lay outing parameters.</param>
            <returns>Returns lay outing results.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCancelEventArgs">
            <summary>
            Provides the data for a cancelable event.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
             e.Cancel=true;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            End Sub
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
             e.Cancel=True
            End Sub
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCancelEventArgs.m_cancel">
            <summary>
            Indicates whether lay outing should be stopped.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.PdfExport.PdfCancelEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            bounds = column;
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
             e.Cancel=true;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim rect As New RectangleF(0, 0, page.GetClientSize().Width, 50)
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            End Sub
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
            e.Cancel=True
            End Sub
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.BeginPageLayoutEventArgs">
            <summary>
             Provides data for event before lay outing the new page.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
             private bool m_paginateStart = true;
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
            RectangleF bounds = e.Bounds;
            // First column.
            if (!m_paginateStart)
            {
               bounds.X = bounds.Width + 20f;
               bounds.Y = 10f;
            }
            e.Bounds = bounds;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim m_paginateStart As Bool= True
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
            Dim bounds As RectangleF = e.Bounds
            ' First column.
            If (Not m_paginateStart) Then
            bounds.X = bounds.Width + 20f
            bounds.Y = 10f
            End If
            e.Bounds = bounds
            End Sub
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.BeginPageLayoutEventArgs.m_bounds">
            <summary>
            The bounds of the lay outing on the page.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.BeginPageLayoutEventArgs.m_page">
            <summary>
            Page where the lay outing should start.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.BeginPageLayoutEventArgs.Bounds">
            <summary>
            Gets or sets value that indicates the lay outing bounds on the page.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
             private bool m_paginateStart = true;
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
            RectangleF bounds = e.Bounds;
            // First column.
            if (!m_paginateStart)
            {
               bounds.X = bounds.Width + 20f;
               bounds.Y = 10f;
            }
            e.Bounds = bounds;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim m_paginateStart As Bool= True
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
            Dim bounds As RectangleF = e.Bounds
            ' First column.
            If (Not m_paginateStart) Then
            bounds.X = bounds.Width + 20f
            bounds.Y = 10f
            End If
            e.Bounds = bounds
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.BeginPageLayoutEventArgs.Page">
            <summary>
            Gets the page where the lay outing should start.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
             private bool m_paginateStart = true;
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
             PdfPage page = e.pAGE;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim m_paginateStart As Bool= True
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
            Dim page As PdfPage = e.Page
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.BeginPageLayoutEventArgs.#ctor(System.Drawing.RectangleF,Syncfusion.PdfExport.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.BeginPageLayoutEventArgs"/> class with the specified rectangle and page
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="page">The page.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.EndPageLayoutEventArgs">
             <summary>
             Provides data for event once lay outing completed on the new page.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             m_columnBounds = column;
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Page Layout Event Handler
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Page Layout Event Handler
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.EndPageLayoutEventArgs.m_result">
            <summary>
            Layout result.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.EndPageLayoutEventArgs.m_nextPage">
            <summary>
            The next page for lay outing.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.EndPageLayoutEventArgs.Result">
             <summary>
             Gets the lay outing result of the page.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Page Layout Event Handler
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Page Layout Event Handler
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.PdfExport.EndPageLayoutEventArgs.NextPage">
             <summary>
             Gets or sets a value indicating the next page where the element should be layout
             </summary>
             <remarks>The default value is null. In this case the element will be layout on the next page.</remarks>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Page Layout Event Handler
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Page Layout Event Handler.
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.EndPageLayoutEventArgs.#ctor(Syncfusion.PdfExport.PdfLayoutResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.EndPageLayoutEventArgs"/> class. with the specified <see cref="T:Syncfusion.PdfExport.PdfLayoutResult"/>
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.EndTextPageLayoutEventArgs">
             <summary>
             Represents the base class for classes that contain event data, and provides a value to use for events, once completed the text lay outing on the page.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Text Page Layout Event
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Text Page Layout Event
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.EndTextPageLayoutEventArgs.#ctor(Syncfusion.PdfExport.PdfTextLayoutResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.EndTextPageLayoutEventArgs"/> class with the specified <see cref="T:Syncfusion.PdfExport.PdfTextLayoutResult"/>
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.EndTextPageLayoutEventArgs.Result">
             <summary>
             Gets the lay outing result of the page.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Text Page Layout Event
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Text Page Layout Event
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            End Sub
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.PdfExport.BeginPageLayoutEventHandler">
            <summary>
            Represents the method that will handle an event that before lay outing on the page.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
             private bool m_paginateStart = true;
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //Begin Page Layout Event Handler
            private void BeginPageLayout2(object sender, BeginPageLayoutEventArgs e)
            {
            RectangleF bounds = e.Bounds;
            // First column.
            if (!m_paginateStart)
            {
               bounds.X = bounds.Width + 20f;
               bounds.Y = 10f;
            }
            e.Bounds = bounds;
            }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim m_paginateStart As Bool= True
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            'Begin Page Layout Event Handler
            Private Sub BeginPageLayout2(ByVal sender As object, ByVal e As BeginPageLayoutEventArgs)
            Dim bounds As RectangleF = e.Bounds
            ' First column.
            If (Not m_paginateStart) Then
            bounds.X = bounds.Width + 20f
            bounds.Y = 10f
            End If
            e.Bounds = bounds
            End Sub
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.EndPageLayoutEventHandler">
            <summary>
            Represents the method that will handle an event, once completed the lay outing on the page.
            </summary>
             <example>
             <code lang="C#">
             // Create a PDF document
             PdfDocument doc = new PdfDocument();
             //Creates a new page and adds it as the last page of the document
             PdfPage page = doc.Pages.Add();
              private bool m_paginateStart = true;
             PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
             PdfPen pen = new PdfPen(Color.Black, 1f);
             //Creates a new  pdf font
             PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
             Font font = new Font("Calibri", 14f, FontStyle.Bold);
             PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
             string path = @"..\..\Data\Essential studio.txt";
             StreamReader reader = new StreamReader(path, Encoding.ASCII);
             string text = reader.ReadToEnd();
             reader.Close();
             RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
             //Create text element
             PdfTextElement element = new PdfTextElement(text, pdfFont);
             element.Brush = new PdfSolidBrush(Color.Black);
             PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
             layoutFormat.Break = PdfLayoutBreakType.FitPage;
             layoutFormat.Layout = PdfLayoutType.Paginate;
             //Raise the event when the text flows to next page.
             element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
             //Get the remaining text that flows beyond the boundary.
             PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
             //Saves the document.
             doc.Save("Sample.pdf");
             //End Page Layout Event Handler
             private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
             {
                 EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                 PdfTextLayoutResult tlr = args.Result;
                 RectangleF bounds = tlr.Bounds;
                 args.NextPage = tlr.Page;   
              }
             </code>
             <code lang="VB">
             'Create a PDF document
             Dim doc As New PdfDocument()
             'Creates a new page and adds it as the last page of the document
             Dim page As PdfPage = doc.Pages.Add()
             Dim m_paginateStart As Bool= True
             Dim brush As New PdfSolidBrush(Color.Black)
             Dim pen As New PdfPen(Color.Black, 1f)
             'Creates a new  pdf font
             Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
             Dim font As New Font("Calibri", 14f, FontStyle.Bold)
             Dim trueTypeFont As New PdfTrueTypeFont(font, True)
             Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
             Dim reader As New StreamReader(path, Encoding.ASCII)
             Dim text As string = reader.ReadToEnd()
             reader.Close()
             Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            	'Create text element
            	Dim element As New PdfTextElement(text, pdfFont)
            	element.Brush = New PdfSolidBrush(Color.Black)
            	Dim layoutFormat As New PdfLayoutFormat()
            	layoutFormat.Break = PdfLayoutBreakType.FitPage
            	layoutFormat.Layout = PdfLayoutType.Paginate
            	'Raise the event when the text flows to next page.
            	element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            	'Get the remaining text that flows beyond the boundary.
            	Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            	'Saves the document.
            	doc.Save("Sample.pdf")
             'End Page Layout Event Handler
             Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            	Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            	Dim tlr As PdfTextLayoutResult = args.Result
            	Dim bounds As RectangleF = tlr.Bounds
            	args.NextPage = tlr.Page
            End Sub
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.PdfExport.EndTextPageLayoutEventHandler">
            <summary>
            Represents the method that will handle an event, once completed the text lay outing on the page.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF document
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
             private bool m_paginateStart = true;
            PdfSolidBrush brush = new PdfSolidBrush(Color.Black);
            PdfPen pen = new PdfPen(Color.Black, 1f);
            //Creates a new  pdf font
            PdfStandardFont pdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 11.5f);
            Font font = new Font("Calibri", 14f, FontStyle.Bold);
            PdfTrueTypeFont trueTypeFont = new PdfTrueTypeFont(font, true);
            string path = @"..\..\Data\Essential studio.txt";
            StreamReader reader = new StreamReader(path, Encoding.ASCII);
            string text = reader.ReadToEnd();
            reader.Close();
            RectangleF column = new RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height);
            //Create text element
            PdfTextElement element = new PdfTextElement(text, pdfFont);
            element.Brush = new PdfSolidBrush(Color.Black);
            PdfLayoutFormat layoutFormat = new PdfLayoutFormat();
            layoutFormat.Break = PdfLayoutBreakType.FitPage;
            layoutFormat.Layout = PdfLayoutType.Paginate;
            //Raise the event when the text flows to next page.
            element.BeginPageLayout += new BeginPageLayoutEventHandler(BeginPageLayout2);
            //Get the remaining text that flows beyond the boundary.
            PdfTextLayoutResult result = element.Draw(page, column, layoutFormat);
            //Saves the document.
            doc.Save("Sample.pdf");
            //End Text Page Layout Event Handler
            private void EndPageLayout2(object sender, EndPageLayoutEventArgs e)
            {
                EndTextPageLayoutEventArgs args = (EndTextPageLayoutEventArgs)e;
                PdfTextLayoutResult tlr = args.Result;
                RectangleF bounds = tlr.Bounds;
                args.NextPage = tlr.Page;   
             }
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As New PdfDocument()
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = doc.Pages.Add()
            Dim m_paginateStart As Bool= True
            Dim brush As New PdfSolidBrush(Color.Black)
            Dim pen As New PdfPen(Color.Black, 1f)
            'Creates a new  pdf font
            Dim pdfFont As New PdfStandardFont(PdfFontFamily.Helvetica, 11.5f)
            Dim font As New Font("Calibri", 14f, FontStyle.Bold)
            Dim trueTypeFont As New PdfTrueTypeFont(font, True)
            Dim path As string = "..\..\..\..\..\..\..\..\..\Common\Data\PDF\Essential studio.txt"
            Dim reader As New StreamReader(path, Encoding.ASCII)
            Dim text As string = reader.ReadToEnd()
            reader.Close()
            Dim column As New RectangleF(0, 20, page.Graphics.ClientSize.Width / 2f - 10f, page.Graphics.ClientSize.Height)
            'Create text element
            Dim element As New PdfTextElement(text, pdfFont)
            element.Brush = New PdfSolidBrush(Color.Black)
            Dim layoutFormat As New PdfLayoutFormat()
            layoutFormat.Break = PdfLayoutBreakType.FitPage
            layoutFormat.Layout = PdfLayoutType.Paginate
            'Raise the event when the text flows to next page.
            element.BeginPageLayout += New BeginPageLayoutEventHandler(BeginPageLayout2)
            'Get the remaining text that flows beyond the boundary.
            Dim result As PdfTextLayoutResult = element.Draw(page, column, layoutFormat)
            'Saves the document.
            doc.Save("Sample.pdf")
            'End Text Page Layout Event Handler
            Private Sub EndPageLayout2(ByVal sender As object, ByVal e As EndPageLayoutEventArgs)
            Dim args As EndTextPageLayoutEventArgs = CType(e, EndTextPageLayoutEventArgs)
            Dim tlr As PdfTextLayoutResult = args.Result
            Dim bounds As RectangleF = tlr.Bounds
            args.NextPage = tlr.Page
            End Sub
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLayoutType">
            <summary>
            Specifies type of paginating.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.
            for (int i = 20; i>0; i--) 
            {
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            }
            //Assign data source.
            table.DataSource = dataTable;
            //Create new PDF layout format instance.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set page break.
            format.Break = PdfLayoutBreakType.FitPage;
            //Set layout type.
            format.Layout = PdfLayoutType.Paginate;
            //Set paginate bounds.
            format.PaginateBounds = new RectangleF(0, 0, 500, 350);
            //Draw grid to the page of PDF document.
            table.Draw(page, new RectangleF(0,0, 500, 700), format);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.
            For i As Integer = 20 To 1 Step -1
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            Next
            'Assign data source.
            table.DataSource = dataTable
            'Create new PDF layout format instance.
            Dim format As New PdfLayoutFormat()
            'Set page break.
            format.Break = PdfLayoutBreakType.FitPage
            'Set layout type.
            format.Layout = PdfLayoutType.Paginate
            'Set paginate bounds.
            format.PaginateBounds = New RectangleF(0, 0, 500, 350)
            'Draw grid to the page of PDF document.
            table.Draw(page, New RectangleF(0, 0, 500, 700), format)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutType.Paginate">
            <summary>
            If the element exceeds the page, proceed it on the next page.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutType.OnePage">
            <summary>
            Draw the element on the one page only.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLayoutBreakType">
            <summary>
            Specifies how the element should be contained on the page.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page.
            PdfPage page = doc.Pages.Add();
            //Create a new PDF grid instance.
            PdfGrid table = new PdfGrid();
            //Create a DataTable.
            DataTable dataTable = new DataTable();
            //Add columns to the DataTable
            dataTable.Columns.Add("ID");
            dataTable.Columns.Add("Name");
            //Add rows to the DataTable.
            for (int i = 20; i>0; i--) 
            {
            dataTable.Rows.Add(new object[] { "E01", "Clay" });
            dataTable.Rows.Add(new object[] { "E02", "Thomas" });
            dataTable.Rows.Add(new object[] { "E03", "George" });
            dataTable.Rows.Add(new object[] { "E04", "Stefan" });
            dataTable.Rows.Add(new object[] { "E05", "Mathew" });
            }
            //Assign data source.
            table.DataSource = dataTable;
            //Create new PDF layout format instance.
            PdfLayoutFormat format = new PdfLayoutFormat();
            //Set page break.
            format.Break = PdfLayoutBreakType.FitPage;
            //Set layout type.
            format.Layout = PdfLayoutType.Paginate;
            //Set paginate bounds.
            format.PaginateBounds = new RectangleF(0, 0, 500, 350);
            //Draw grid to the page of PDF document.
            table.Draw(page, new RectangleF(0,0, 500, 700), format);
            //Save the document.
            doc.Save("Output.pdf");
            //close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create a new PDF grid instance.
            Dim table As New PdfGrid()
            'Create a DataTable.
            Dim dataTable As New DataTable()
            'Add columns to the DataTable
            dataTable.Columns.Add("ID")
            dataTable.Columns.Add("Name")
            'Add rows to the DataTable.
            For i As Integer = 20 To 1 Step -1
            dataTable.Rows.Add(New Object() { "E01", "Clay"})
            dataTable.Rows.Add(New Object() { "E02", "Thomas"})
            dataTable.Rows.Add(New Object() { "E03", "George"})
            dataTable.Rows.Add(New Object() { "E04", "Stefan"})
            dataTable.Rows.Add(New Object() { "E05", "Mathew"})
            Next
            'Assign data source.
            table.DataSource = dataTable
            'Create new PDF layout format instance.
            Dim format As New PdfLayoutFormat()
            'Set page break.
            format.Break = PdfLayoutBreakType.FitPage
            'Set layout type.
            format.Layout = PdfLayoutType.Paginate
            'Set paginate bounds.
            format.PaginateBounds = New RectangleF(0, 0, 500, 350)
            'Draw grid to the page of PDF document.
            table.Draw(page, New RectangleF(0, 0, 500, 700), format)
            'Save the document.
            doc.Save("Output.pdf")
            'close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutBreakType.FitPage">
            <summary>
            Fit the element according to the bounds specified or the page bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutBreakType.FitElement">
            <summary>
            If the element doesn't fit at the first page, don't draw it on this page.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLayoutBreakType.FitColumnsToPage">
            <summary>
            Fit the columns withtin the page.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCidFont">
            <summary>
            A Class representing Pdf document which is used for Cid Font Descryptor Factory.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCidFont.#ctor(Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontStyle,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCidFont"/> class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCidFont.GetSystemInfo(Syncfusion.PdfExport.PdfCjkFontFamily)">
            <summary>
            Gets the system info.
            </summary>
            <param name="fontFamily">The font family.</param>
            <returns>The properly formed dictionary.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory">
            <summary>
            A Class representing Pdf document which is used for Cjk Font Descryptor Factory.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.GetFontDescryptor(Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontStyle,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Gets the font descryptor.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontMetrics">The font metrics.</param>
            <returns>font Descryptor</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillMonotypeSungLight(Syncfusion.PdfExport.PdfDictionary,Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Fills the monotype sung light font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillHeiseiKakuGothicW5(Syncfusion.PdfExport.PdfDictionary,Syncfusion.PdfExport.PdfFontStyle,Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Fills the heisei kaku gothic w5 font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillHanyangSystemsShinMyeongJoMedium(Syncfusion.PdfExport.PdfDictionary,Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Fills the hanyang systems shin myeong jo medium font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillHeiseiMinchoW3(Syncfusion.PdfExport.PdfDictionary,Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Fills the heisei mincho w3 font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillSinoTypeSongLight(Syncfusion.PdfExport.PdfDictionary,Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Fills the sino type song light font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillMonotypeHeiMedium(Syncfusion.PdfExport.PdfDictionary,Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Fills the monotype hei medium font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillHanyangSystemsGothicMedium(Syncfusion.PdfExport.PdfDictionary,Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Fills the hanyang systems gothic medium font descryptor.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillKnownInfo(Syncfusion.PdfExport.PdfDictionary,Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontMetrics)">
            <summary>
            Fills the known info.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontMetrics">The font metrics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillFlags(Syncfusion.PdfExport.PdfDictionary,Syncfusion.PdfExport.PdfCjkFontFamily)">
            <summary>
            Fills the flags.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontFamily">The font family.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkFontDescryptorFactory.FillFontBBox(Syncfusion.PdfExport.PdfDictionary,System.Drawing.Rectangle)">
            <summary>
            Fills the font BBox.
            </summary>
            <param name="fontDescryptor">The font descryptor.</param>
            <param name="fontBBox">The font BBox.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCjkStandardFont">
            <summary>
            Represents the standard CJK fonts.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Set the standard font.
            PdfFont font = new PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20);
            //Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, new PointF(0, 0));
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Set the standard font.
            Dim font As PdfFont = New PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20)
            'Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, New PointF(0, 0))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCjkStandardFont.m_fontFamily">
            <summary>
            Font family
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.#ctor(Syncfusion.PdfExport.PdfCjkFontFamily,System.Single,Syncfusion.PdfExport.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCjkStandardFont"/> class with the specified <see cref="T:Syncfusion.PdfExport.PdfCjkFontFamily"/>, size and style
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Set the standard font.
            PdfFont font = new PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20, PdfFontStyle.Bold);
            //Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, new PointF(0, 0));
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Set the standard font.
            Dim font As PdfFont = New PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20, PdfFontStyle.Bold)
            'Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, New PointF(0, 0))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.#ctor(Syncfusion.PdfExport.PdfCjkFontFamily,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCjkStandardFont"/> class with the specified <see cref="T:Syncfusion.PdfExport.PdfCjkFontFamily"/> and size 
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Set the standard font.
            PdfFont font = new PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20);
            //Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, new PointF(0, 0));
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Set the standard font.
            Dim font As PdfFont = New PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20)
            'Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, New PointF(0, 0))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.#ctor(Syncfusion.PdfExport.PdfCjkStandardFont,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCjkStandardFont"/> class with the specified <see cref="T:Syncfusion.PdfExport.PdfCjkStandardFont"/> and size 
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Set the standard font.
            PdfCjkStandardFont cjkFont = new PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20);
            //Create PDF cjk font.
            PdfFont font = new PdfCjkStandardFont(cjkFont, 20);
            //Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, new PointF(0, 0));
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Set the standard font.
            Dim cjkFont As New PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20)
            'Create PDF cjk font.
            Dim font As PdfFont = New PdfCjkStandardFont(cjkFont, 20)
            'Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, New PointF(0, 0))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.#ctor(Syncfusion.PdfExport.PdfCjkStandardFont,System.Single,Syncfusion.PdfExport.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfCjkStandardFont"/> class with the specified <see cref="T:Syncfusion.PdfExport.PdfCjkFontFamily"/>, size and style
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Set the standard font.
            PdfCjkStandardFont cjkFont = new PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20, PdfFontStyle.Bold);
            //Create PDF cjk font.
            PdfFont font = new PdfCjkStandardFont(cjkFont, 20);
            //Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, new PointF(0, 0));
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Set the standard font.
            Dim cjkFont As New PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20, PdfFontStyle.Bold)
            'Create PDF cjk font.
            Dim font As PdfFont = New PdfCjkStandardFont(cjkFont, 20)
            'Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, New PointF(0, 0))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCjkStandardFont.FontFamily">
            <summary>
            Gets the CJK font family.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
             //Create new PDF cjk font.
             PdfCjkStandardFont font = new PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20, PdfFontStyle.Bold);
             //Draw the text.
             graphics.DrawString("The CJK font family name is " + font.FontFamily.ToString(), font, PdfBrushes.Black, new PointF(0, 0));
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF cjk font.
            Dim font As New PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20, PdfFontStyle.Bold)
            'Draw the text.
            graphics.DrawString("The CJK font family name is " + font.FontFamily.ToString(), font, PdfBrushes.Black, New PointF(0, 0))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.GetCharWidth(System.Char,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns width of the char.
            </summary>
            <param name="charCode">Char symbol.</param>
            <param name="format">String format.</param>
            <returns>Width of the symbol.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.GetLineWidth(System.String,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns width of the line.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.InitializeInternals">
            <summary>
            Initializes the internals.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.CreateInternals">
            <summary>
            Creates font's dictionary.
            </summary>
            <returns>font's dictionary.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.GetDescendantFont">
            <summary>
            Returns descendant font.
            </summary>
            <returns>Returns descendant font.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.GetEncoding(Syncfusion.PdfExport.PdfCjkFontFamily)">
            <summary>
            Gets the prope CJK encoding.
            </summary>
            <param name="fontFamily">The font family.</param>
            <returns>Proper PDF name for the encoding.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.CheckStyle">
            <summary>
            Checks the style.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFont.GetCharWidthInternal(System.Char)">
            <summary>
            Gets the char width internal.
            </summary>
            <param name="charCode">The character code.</param>
            <returns>The width of the character.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory">
            <summary>
            A Class representing Pdf document which is used for Cjk Font Metrics Factory.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory.c_subSuperScriptFactor">
            <summary>
            Multiplier of subscript superscript.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory.GetMetrics(Syncfusion.PdfExport.PdfCjkFontFamily,Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Returns font metrics depending on the font settings.
            </summary>
            <param name="fontFamily">Font family.</param>
            <param name="fontStyle">Font style.</param>
            <param name="size">Size of the font.</param>
            <returns>Returns font metrics depending on the font settings.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory.GetHanyangSystemsGothicMediumMetrix(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Gets the hanyang systems gothic medium font metrix.
            </summary>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The filled font metrix.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory.GetMonotypeHeiMedium(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Gets the monotype hei medium metrix.
            </summary>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory.GetMonotypeSungLightMetrix(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Gets the monotype sung light metrix.
            </summary>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory.GetSinoTypeSongLight(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Gets the sino type song light font metrics.
            </summary>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>PdfFontMetrics instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory.GetHeiseiMinchoW3(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Gets the heisei mincho w3.
            </summary>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory.GetHeiseiKakuGothicW5Metrix(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Gets the heisei kaku gothic w5 metrix.
            </summary>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCjkStandardFontMetricsFactory.GetHanyangSystemsShinMyeongJoMediumMetrix(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Gets the hanyang systems shin myeong jo medium metrix.
            </summary>
            <param name="fontStyle">The font style.</param>
            <param name="size">The size.</param>
            <returns>The proper PdfFontMetrics class instance.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfFont">
            <summary>
            Defines a particular format for text, including font face, size, and style attributes. 
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFont.CharSizeMultiplier">
            <summary>
            Multiplier of the symbol width.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFont.m_size">
            <summary>
            Size of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFont.m_style">
            <summary>
            Style of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFont.m_fontMetrics">
            <summary>
            Metrics of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFont.m_fontInternals">
            <summary>
            PDf primitive of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFont.m_ascentValue">
            <summary>
            Ascent value of the Font
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfFont"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.#ctor(System.Single,Syncfusion.PdfExport.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfFont"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Name">
            <summary>
            Gets the face name of this Font.
            </summary>
            <value>A string representation of the face name of this <see cref="T:Syncfusion.PdfExport.PdfFont"/>.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Get font Name.
            string fontName = font.Name;
            //Get font size.
            float fontSize = font.Size;
            //Get font height.
            float fontHeight = font.Height;
            //Get the font style.
            PdfFontStyle style = font.Style;
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("Font Name: " + fontName);
            builder.AppendLine("Font Size: " + fontSize);
            builder.AppendLine("Font Height: " + FontHeight);
            builder.AppendLine("Font Style: " + style.ToString());
            //Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Get font Name.
            Dim fontName As String = font.Name
            'Get font size.
            Dim fontSize As Single = font.Size
            'Get font height.
            Dim fontHeight As Single = font.Height
            'Get the font style.
            Dim style As PdfFontStyle = font.Style
            Dim builder As New StringBuilder()
            builder.AppendLine("Font Name: " + fontName)
            builder.AppendLine("Font Size: " + fontSize)
            builder.AppendLine("Font Height: " + fontHeight)
            builder.AppendLine("Font Style: " + style.ToString())
            'Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Size">
            <summary>
            Gets the size of this font.
            </summary>
            <value>The em-size of this Font.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Get font Name.
            string fontName = font.Name;
            //Get font size.
            float fontSize = font.Size;
            //Get font height.
            float fontHeight = font.Height;
            //Get the font style.
            PdfFontStyle style = font.Style;
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("Font Name: " + fontName);
            builder.AppendLine("Font Size: " + fontSize);
            builder.AppendLine("Font Height: " + FontHeight);
            builder.AppendLine("Font Style: " + style.ToString());
            //Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Get font Name.
            Dim fontName As String = font.Name
            'Get font size.
            Dim fontSize As Single = font.Size
            'Get font height.
            Dim fontHeight As Single = font.Height
            'Get the font style.
            Dim style As PdfFontStyle = font.Style
            Dim builder As New StringBuilder()
            builder.AppendLine("Font Name: " + fontName)
            builder.AppendLine("Font Size: " + fontSize)
            builder.AppendLine("Font Height: " + fontHeight)
            builder.AppendLine("Font Style: " + style.ToString())
            'Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Height">
            <summary>
            Gets the height of the font in points.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Get font Name.
            string fontName = font.Name;
            //Get font size.
            float fontSize = font.Size;
            //Get font height.
            float fontHeight = font.Height;
            //Get the font style.
            PdfFontStyle style = font.Style;
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("Font Name: " + fontName);
            builder.AppendLine("Font Size: " + fontSize);
            builder.AppendLine("Font Height: " + FontHeight);
            builder.AppendLine("Font Style: " + style.ToString());
            //Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Get font Name.
            Dim fontName As String = font.Name
            'Get font size.
            Dim fontSize As Single = font.Size
            'Get font height.
            Dim fontHeight As Single = font.Height
            'Get the font style.
            Dim style As PdfFontStyle = font.Style
            Dim builder As New StringBuilder()
            builder.AppendLine("Font Name: " + fontName)
            builder.AppendLine("Font Size: " + fontSize)
            builder.AppendLine("Font Height: " + fontHeight)
            builder.AppendLine("Font Style: " + style.ToString())
            'Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Style">
            <summary>
            Gets the style information for this font.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Get font Name.
            string fontName = font.Name;
            //Get font size.
            float fontSize = font.Size;
            //Get font height.
            float fontHeight = font.Height;
            //Get the font style.
            PdfFontStyle style = font.Style;
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("Font Name: " + fontName);
            builder.AppendLine("Font Size: " + fontSize);
            builder.AppendLine("Font Height: " + FontHeight);
            builder.AppendLine("Font Style: " + style.ToString());
            //Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Get font Name.
            Dim fontName As String = font.Name
            'Get font size.
            Dim fontSize As Single = font.Size
            'Get font height.
            Dim fontHeight As Single = font.Height
            'Get the font style.
            Dim style As PdfFontStyle = font.Style
            Dim builder As New StringBuilder()
            builder.AppendLine("Font Name: " + fontName)
            builder.AppendLine("Font Size: " + fontSize)
            builder.AppendLine("Font Height: " + fontHeight)
            builder.AppendLine("Font Style: " + style.ToString())
            'Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Bold">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.PdfExport.PdfFont"/> is bold.
            </summary>
            <value><c>true</c> if bold; otherwise, <c>false</c>.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Get font Name.
            string fontName = font.Name;
            //Get font size.
            float fontSize = font.Size;
            //Get font height.
            float fontHeight = font.Height;
            //Get the font style.
            PdfFontStyle style = font.Style;
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("Font Name: " + fontName);
            builder.AppendLine("Font Size: " + fontSize);
            builder.AppendLine("Font Height: " + FontHeight);
            builder.AppendLine("Font Style: " + style.ToString());
            builder.AppendLine("Bold: " + font.Bold.ToString());
            builder.AppendLine("Italic: " + font.Italic.ToString());
            builder.AppendLine("Underline: " + font.Underline.ToString());
            builder.AppendLine("Strikeout: " + font.Strikeout.ToString());      
            //Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Get font Name.
            Dim fontName As String = font.Name
            'Get font size.
            Dim fontSize As Single = font.Size
            'Get font height.
            Dim fontHeight As Single = font.Height
            'Get the font style.
            Dim style As PdfFontStyle = font.Style
            Dim builder As New StringBuilder()
            builder.AppendLine("Font Name: " + fontName)
            builder.AppendLine("Font Size: " + fontSize)
            builder.AppendLine("Font Height: " + fontHeight)
            builder.AppendLine("Font Style: " + style.ToString())
            builder.AppendLine("Bold: " + font.Bold.ToString())
            builder.AppendLine("Italic: " + font.Italic.ToString())
            builder.AppendLine("Underline: " + font.Underline.ToString())
            builder.AppendLine("Strikeout: " + font.Strikeout.ToString())      
            'Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Italic">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.PdfExport.PdfFont"/> has the italic style applied.
            </summary>
            <value><c>true</c> if italic; otherwise, <c>false</c>.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Get font Name.
            string fontName = font.Name;
            //Get font size.
            float fontSize = font.Size;
            //Get font height.
            float fontHeight = font.Height;
            //Get the font style.
            PdfFontStyle style = font.Style;
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("Font Name: " + fontName);
            builder.AppendLine("Font Size: " + fontSize);
            builder.AppendLine("Font Height: " + FontHeight);
            builder.AppendLine("Font Style: " + style.ToString());
            builder.AppendLine("Bold: " + font.Bold.ToString());
            builder.AppendLine("Italic: " + font.Italic.ToString());
            builder.AppendLine("Underline: " + font.Underline.ToString());
            builder.AppendLine("Strikeout: " + font.Strikeout.ToString());      
            //Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Get font Name.
            Dim fontName As String = font.Name
            'Get font size.
            Dim fontSize As Single = font.Size
            'Get font height.
            Dim fontHeight As Single = font.Height
            'Get the font style.
            Dim style As PdfFontStyle = font.Style
            Dim builder As New StringBuilder()
            builder.AppendLine("Font Name: " + fontName)
            builder.AppendLine("Font Size: " + fontSize)
            builder.AppendLine("Font Height: " + fontHeight)
            builder.AppendLine("Font Style: " + style.ToString())
            builder.AppendLine("Bold: " + font.Bold.ToString())
            builder.AppendLine("Italic: " + font.Italic.ToString())
            builder.AppendLine("Underline: " + font.Underline.ToString())
            builder.AppendLine("Strikeout: " + font.Strikeout.ToString())      
            'Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Strikeout">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.PdfExport.PdfFont"/> is strikeout.
            </summary>
            <value><c>true</c> if strikeout; otherwise, <c>false</c>.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Get font Name.
            string fontName = font.Name;
            //Get font size.
            float fontSize = font.Size;
            //Get font height.
            float fontHeight = font.Height;
            //Get the font style.
            PdfFontStyle style = font.Style;
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("Font Name: " + fontName);
            builder.AppendLine("Font Size: " + fontSize);
            builder.AppendLine("Font Height: " + FontHeight);
            builder.AppendLine("Font Style: " + style.ToString());
            builder.AppendLine("Bold: " + font.Bold.ToString());
            builder.AppendLine("Italic: " + font.Italic.ToString());
            builder.AppendLine("Underline: " + font.Underline.ToString());
            builder.AppendLine("Strikeout: " + font.Strikeout.ToString());      
            //Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Get font Name.
            Dim fontName As String = font.Name
            'Get font size.
            Dim fontSize As Single = font.Size
            'Get font height.
            Dim fontHeight As Single = font.Height
            'Get the font style.
            Dim style As PdfFontStyle = font.Style
            Dim builder As New StringBuilder()
            builder.AppendLine("Font Name: " + fontName)
            builder.AppendLine("Font Size: " + fontSize)
            builder.AppendLine("Font Height: " + fontHeight)
            builder.AppendLine("Font Style: " + style.ToString())
            builder.AppendLine("Bold: " + font.Bold.ToString())
            builder.AppendLine("Italic: " + font.Italic.ToString())
            builder.AppendLine("Underline: " + font.Underline.ToString())
            builder.AppendLine("Strikeout: " + font.Strikeout.ToString())      
            'Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Underline">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.PdfExport.PdfFont"/> is underline.
            </summary>
            <value><c>true</c> if underline; otherwise, <c>false</c>.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Get font Name.
            string fontName = font.Name;
            //Get font size.
            float fontSize = font.Size;
            //Get font height.
            float fontHeight = font.Height;
            //Get the font style.
            PdfFontStyle style = font.Style;
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("Font Name: " + fontName);
            builder.AppendLine("Font Size: " + fontSize);
            builder.AppendLine("Font Height: " + FontHeight);
            builder.AppendLine("Font Style: " + style.ToString());
            builder.AppendLine("Bold: " + font.Bold.ToString());
            builder.AppendLine("Italic: " + font.Italic.ToString());
            builder.AppendLine("Underline: " + font.Underline.ToString());
            builder.AppendLine("Strikeout: " + font.Strikeout.ToString());      
            //Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Get font Name.
            Dim fontName As String = font.Name
            'Get font size.
            Dim fontSize As Single = font.Size
            'Get font height.
            Dim fontHeight As Single = font.Height
            'Get the font style.
            Dim style As PdfFontStyle = font.Style
            Dim builder As New StringBuilder()
            builder.AppendLine("Font Name: " + fontName)
            builder.AppendLine("Font Size: " + fontSize)
            builder.AppendLine("Font Height: " + fontHeight)
            builder.AppendLine("Font Style: " + style.ToString())
            builder.AppendLine("Bold: " + font.Bold.ToString())
            builder.AppendLine("Italic: " + font.Italic.ToString())
            builder.AppendLine("Underline: " + font.Underline.ToString())
            builder.AppendLine("Strikeout: " + font.Strikeout.ToString())      
            'Draw string to PDF page.
            graphics.DrawString(builder.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Metrics">
            <summary>
            Gets or sets the metrics for this font.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Ascent">
            <summary>
            Gets or sets the ascent value 
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">String to measure.</param>
            <returns>Size of the text.</returns>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            string text = "Hello World!";
            //Measure the text.
            SizeF size = font.MeasureString(text);
            //Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, new RectangleF(PointF.Empty, size));
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            Dim text As String = "Hello World!"
            'Measure the text.
            Dim size As SizeF = font.MeasureString(text)
            'Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, New RectangleF(PointF.Empty, size))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">String to measure.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>Size of the text.</returns>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);     
            PdfStringFormat format = newSyncfusion.PdfExport.Graphics.PdfStringFormat();
            format.Alignment = PdfTextAlignment.Center;
            format.LineAlignment = PdfVerticalAlignment.Middle;
            string text = "Hello World!";
            //Measure the text.
            SizeF size = font.MeasureString(text, format);
            //Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, new RectangleF(PointF.Empty, size), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            Dim format As PdfStringFormat = NewSyncfusion.PdfExport.Graphics.PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            Dim text As String = "Hello World!"
            'Measure the text.
            Dim size As SizeF = font.MeasureString(text, format)
            'Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, New RectangleF(PointF.Empty, size), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String,Syncfusion.PdfExport.PdfStringFormat,System.Int32@,System.Int32@)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">String to measure.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <param name="charactersFitted">Number of characters in the string.</param>
            <param name="linesFilled">Number of text lines in the string.</param>
            <returns>Size of the text.</returns>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);     
            PdfStringFormat format = newSyncfusion.PdfExport.Graphics.PdfStringFormat();
            format.Alignment = PdfTextAlignment.Center;
            format.LineAlignment = PdfVerticalAlignment.Middle;
            string text = "Hello World!";
            int charactersFilled, linesFilled;
            //Measure the text.
            SizeF size = font.MeasureString(text, format , out charactersFilled, linesFilled);
            //Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, new RectangleF(PointF.Empty, size), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            Dim format As PdfStringFormat = NewSyncfusion.PdfExport.Graphics.PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            Dim text As String = "Hello World!"
            Dim charactersFilled As Integer, linesFilled As Integer
            'Measure the text.
            Dim size As SizeF = font.MeasureString(text, format, charactersFilled, linesFilled)
            'Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, New RectangleF(PointF.Empty, size), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String,System.Single)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">String to measure.</param>
            <param name="width">Maximum width of the string in points.</param>
            <returns>Size of the text.</returns>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);     
            PdfStringFormat format = newSyncfusion.PdfExport.Graphics.PdfStringFormat();
            format.Alignment = PdfTextAlignment.Center;
            format.LineAlignment = PdfVerticalAlignment.Middle;
            string text = "Hello World!";
            //Measure the text.
            SizeF size = font.MeasureString(text, 100);
            //Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, new RectangleF(PointF.Empty, size), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            Dim format As PdfStringFormat = NewSyncfusion.PdfExport.Graphics.PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            Dim text As String = "Hello World!"
            'Measure the text.
            Dim size As SizeF = font.MeasureString(text, 100)
            'Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, New RectangleF(PointF.Empty, size), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String,System.Single,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">String to measure.</param>
            <param name="width">Maximum width of the string in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>Size of the text.</returns>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);     
            PdfStringFormat format = newSyncfusion.PdfExport.Graphics.PdfStringFormat();
            format.Alignment = PdfTextAlignment.Center;
            format.LineAlignment = PdfVerticalAlignment.Middle;
            string text = "Hello World!";
            //Measure the text.
            SizeF size = font.MeasureString(text, 100,  format);
            //Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, new RectangleF(PointF.Empty, size), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            Dim format As PdfStringFormat = NewSyncfusion.PdfExport.Graphics.PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            Dim text As String = "Hello World!"
            'Measure the text.
            Dim size As SizeF = font.MeasureString(text, 100, format)
            'Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, New RectangleF(PointF.Empty, size), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String,System.Single,Syncfusion.PdfExport.PdfStringFormat,System.Int32@,System.Int32@)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">String to measure.</param>
            <param name="width">Maximum width of the string in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <param name="charactersFitted">Number of characters in the string.</param>
            <param name="linesFilled">Number of text lines in the string.</param>
            <returns>Size of the text.</returns>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);     
            PdfStringFormat format = newSyncfusion.PdfExport.Graphics.PdfStringFormat();
            format.Alignment = PdfTextAlignment.Center;
            format.LineAlignment = PdfVerticalAlignment.Middle;
            string text = "Hello World!";
            int charactersFilled, linesFilled;
            //Measure the text.
            SizeF size = font.MeasureString(text, format, 100, out charactersFilled, linesFilled);
            //Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, new RectangleF(PointF.Empty, size), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            Dim format As PdfStringFormat = NewSyncfusion.PdfExport.Graphics.PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            Dim text As String = "Hello World!"
            Dim charactersFilled As Integer, linesFilled As Integer
            'Measure the text.
            Dim size As SizeF = font.MeasureString(text, 100, format, charactersFilled, linesFilled)
            'Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, New RectangleF(PointF.Empty, size), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String,System.Drawing.SizeF)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">String to measure.</param>
            <param name="layoutArea">SizeF structure that specifies the maximum layout area for the text in points.</param>
            <returns>Size of the text.</returns>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);     
            PdfStringFormat format = newSyncfusion.PdfExport.Graphics.PdfStringFormat();
            format.Alignment = PdfTextAlignment.Center;
            format.LineAlignment = PdfVerticalAlignment.Middle;
            string text = "Hello World!";      
            //Measure the text.
            SizeF size = font.MeasureString(text, new SizeF(100,100));
            //Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, new RectangleF(PointF.Empty, size), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            Dim format As PdfStringFormat = NewSyncfusion.PdfExport.Graphics.PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            Dim text As String = "Hello World!"        
            'Measure the text.
            Dim size As SizeF = font.MeasureString(text, New SizeF(100,100))
            'Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, New RectangleF(PointF.Empty, size), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String,System.Drawing.SizeF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">String to measure.</param>
            <param name="layoutArea">SizeF structure that specifies the maximum layout area for the text in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>Size of the text.</returns>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);     
            PdfStringFormat format = newSyncfusion.PdfExport.Graphics.PdfStringFormat();
            format.Alignment = PdfTextAlignment.Center;
            format.LineAlignment = PdfVerticalAlignment.Middle;
            string text = "Hello World!";       
            //Measure the text.
            SizeF size = font.MeasureString(text, new SizeF(100,100) , format);
            //Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, new RectangleF(PointF.Empty, size), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            Dim format As PdfStringFormat = NewSyncfusion.PdfExport.Graphics.PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            Dim text As String = "Hello World!" 
            'Measure the text.
            Dim size As SizeF = font.MeasureString(text, New SizeF(100,100), format)
            'Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, New RectangleF(PointF.Empty, size), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String,System.Drawing.SizeF,Syncfusion.PdfExport.PdfStringFormat,System.Int32@,System.Int32@)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">String to measure.</param>
            <param name="layoutArea">SizeF structure that specifies the maximum layout area for the text in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <param name="charactersFitted">Number of characters in the string.</param>
            <param name="linesFilled">Number of text lines in the string.</param>
            <returns>Size of the text.</returns>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);     
            PdfStringFormat format = newSyncfusion.PdfExport.Graphics.PdfStringFormat();
            format.Alignment = PdfTextAlignment.Center;
            format.LineAlignment = PdfVerticalAlignment.Middle;
            string text = "Hello World!";
            int charactersFilled, linesFilled;
            //Measure the text.
            SizeF size = font.MeasureString(text, new SizeF(100, 100), format , out charactersFilled, linesFilled);
            //Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, new RectangleF(PointF.Empty, size), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            Dim format As PdfStringFormat = NewSyncfusion.PdfExport.Graphics.PdfStringFormat()
            format.Alignment = PdfTextAlignment.Center
            format.LineAlignment = PdfVerticalAlignment.Middle
            Dim text As String = "Hello World!"
            Dim charactersFilled As Integer, linesFilled As Integer
            'Measure the text.
            Dim size As SizeF = font.MeasureString(text, New SizeF(100,100), format, charactersFilled, linesFilled)
            'Draw string to PDF page.
            graphics.DrawString(text, font, PdfBrushes.Black, New RectangleF(PointF.Empty, size), format)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.MeasureString(System.String,System.Drawing.SizeF,Syncfusion.PdfExport.PdfStringFormat,Syncfusion.PdfExport.PdfStringLayoutResult@)">
            <summary>
             Measures a string by using this font and it returns layout result.
            </summary>
            <param name="text"></param>
            <param name="layoutArea"></param>
            <param name="format"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFont.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets Pdf primitive representing the font.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.GetCharWidth(System.Char,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns width of the char.
            </summary>
            <param name="charCode">Char symbol.</param>
            <param name="format">String format.</param>
            <returns>Width of the symbol.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.GetLineWidth(System.String,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns width of the line.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.SetStyle(Syncfusion.PdfExport.PdfFontStyle)">
            <summary>
            Sets the style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFont.ApplyFormatSettings(System.String,Syncfusion.PdfExport.PdfStringFormat,System.Single)">
            <summary>
            Applies settings to the default line width.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <param name="width">Default line width.</param>
            <returns>Line width with settings applied.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfFontMetrics">
            <summary>
            Metrics of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.Ascent">
            <summary>
            Gets ascent of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.Descent">
            <summary>
            Gets descent of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.Name">
            <summary>
            Name of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.PostScriptName">
            <summary>
            Gets PostScript Name of the  font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.Size">
            <summary>
            Gets size of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.Height">
            <summary>
            Gets height of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.FirstChar">
            <summary>
            First char of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.LastChar">
            <summary>
            Last char of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.LineGap">
            <summary>
            Line gap.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.SubScriptSizeFactor">
            <summary>
            Subscript size factor.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.SuperscriptSizeFactor">
            <summary>
            Superscript size factor.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.m_widthTable">
            <summary>
            Gets table of glyphs' width.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontMetrics.IsBold">
            <summary>
            Indicate whether the ttfreader font has bold style.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFontMetrics.GetAscent(Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns ascent taking into consideration font's size.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Returns ascent taking into consideration font's size.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFontMetrics.GetDescent(Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns descent taking into consideration font's size.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Returns descent taking into consideration font's size.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFontMetrics.GetLineGap(Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns Line gap taking into consideration font's size.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Returns line gap taking into consideration font's size.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFontMetrics.GetHeight(Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns height taking into consideration font's size.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Returns height taking into consideration font's size.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFontMetrics.GetSize(Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Calculates size of the font depending on the subscript/superscript value.
            </summary>
            <param name="format">Text format settings.</param>
            <returns>Size of the font depending on the subscript/superscript value.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfFontMetrics.Clone">
            <summary>
            Clones the metrics.
            </summary>
            <returns>Cloned metrics.</returns>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfFontMetrics.WidthTable">
            <summary>
            Gets or sets the width table.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.WidthTable">
            <summary>
            The base class for a width table.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.WidthTable.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value>index</value>
        </member>
        <member name="M:Syncfusion.PdfExport.WidthTable.Clone">
            <summary>
            Clones this instance of the WidthTable class.
            </summary>
            <returns>A copy of this WidthTable instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.WidthTable.Syncfusion#PdfExport#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.WidthTable.ToArray">
            <summary>
            Toes the array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.PdfExport.StandardWidthTable">
            <summary>
            Implements a width table for standard fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.StandardWidthTable.m_widths">
            <summary>
            The widths of the supported characters.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.StandardWidthTable.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value>index</value>
        </member>
        <member name="P:Syncfusion.PdfExport.StandardWidthTable.Length">
            <summary>
            Gets the length of the internal array.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StandardWidthTable.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.StandardWidthTable"/> class.
            </summary>
            <param name="widths">The widths table.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.StandardWidthTable.Clone">
            <summary>
            Clones this instance of the WidthTable class.
            </summary>
            <returns>A copy of this WidthTable instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StandardWidthTable.ToArray">
            <summary>
            Converts width table to a PDF array.
            </summary>
            <returns>The properly formed pdf array.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.CjkWidthTable">
            <summary>
            Implements CJK width table, which is quite complex.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CjkWidthTable.m_width">
            <summary>
            Local variable to store the width.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CjkWidthTable.m_defaultWidth">
            <summary>
            Local variable to store the default width.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkWidthTable.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.CjkWidthTable"/> class.
            </summary>
            <param name="defaultWidth">The default width of the CJK characters.
            This value will be returned if there is no width information for a character.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkWidthTable.DefaultWidth">
            <summary>
            Gets the default character width.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkWidthTable.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value>index</value>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkWidthTable.Add(Syncfusion.PdfExport.CjkWidth)">
            <summary>
            Adds the specified widths.
            </summary>
            <param name="widths">The CJK widths.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkWidthTable.Clone">
            <summary>
            Clones this instance of the WidthTable class.
            </summary>
            <returns>A copy of this WidthTable instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkWidthTable.ToArray">
            <summary>
            Converts width table to a PDF array.
            </summary>
            <returns>A well formed PDF array.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.CjkWidth">
            <summary>
            The base class of CJK widths types.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkWidth.From">
            <summary>
            Gets the starting character.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkWidth.To">
            <summary>
            Gets the ending character.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkWidth.Item(System.Int32)">
            <summary>
            Gets the width of the specified character.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkWidth.AppendToArray(Syncfusion.PdfExport.PdfArray)">
            <summary>
            Appends internal data to a PDF array.
            </summary>
            <param name="arr">The pdf array.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkWidth.Syncfusion#PdfExport#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkWidth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The proper copy of this instance.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.CjkSameWidth">
            <summary>
            Implements capabilities to control a range of character with the same width.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CjkSameWidth.m_from">
            <summary>
            The Form
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CjkSameWidth.m_to">
            <summary>
            The to
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CjkSameWidth.m_width">
            <summary>
            The Width
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkSameWidth.From">
            <summary>
            Gets the starting character.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkSameWidth.To">
            <summary>
            Gets the ending character.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkSameWidth.Item(System.Int32)">
            <summary>
            Gets the width of the specified character.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkSameWidth.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.CjkSameWidth"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkSameWidth.AppendToArray(Syncfusion.PdfExport.PdfArray)">
            <summary>
            Appends internal data to a PDF array.
            </summary>
            <param name="arr">The pdf array.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkSameWidth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The proper copy of this instance.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.CjkDifferentWidth">
            <summary>
            Implements capabilities to control a sequent range of characters with different width.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CjkDifferentWidth.m_from">
            <summary>
            The form
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CjkDifferentWidth.m_width">
            <summary>
            The width
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkDifferentWidth.From">
            <summary>
            Gets the starting character.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkDifferentWidth.To">
            <summary>
            Gets the ending character.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.CjkDifferentWidth.Item(System.Int32)">
            <summary>
            Gets the width of the specified character.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkDifferentWidth.#ctor(System.Int32,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.CjkDifferentWidth"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="widths">The widths.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkDifferentWidth.AppendToArray(Syncfusion.PdfExport.PdfArray)">
            <summary>
            Appends internal data to a PDF array.
            </summary>
            <param name="arr">The pdf array.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.CjkDifferentWidth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The proper copy of this instance.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfStandardFont">
            <summary>
            Represents one of the 14 standard PDF fonts.
            It's used to create a standard PDF font to draw the text in to the PDF
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFont.c_charOffset">
            <summary>
            First character position.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFont.m_fontFamily">
            <summary>
            FontFamily of the font.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.#ctor(Syncfusion.PdfExport.PdfFontFamily,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStandardFont"/> class with font family and it's size
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size of the font.</param>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.#ctor(Syncfusion.PdfExport.PdfFontFamily,System.Single,Syncfusion.PdfExport.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStandardFont"/> class with font family, size and font style
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size of the font.</param>
            <param name="style">The style of the font.</param>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.#ctor(Syncfusion.PdfExport.PdfStandardFont,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStandardFont"/> class with <see cref="T:Syncfusion.PdfExport.PdfStandardFont"/> as prototype and font size
            </summary>
            <param name="prototype">The <see cref="T:Syncfusion.PdfExport.PdfStandardFont"/> using as prototype.</param>
            <param name="size">The size of the font.</param>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(new PdfStandardFont(PdfFontFamily.Helvetica,12), 12);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(New PdfStandardFont(PdfFontFamily.Helvetica,12), 12)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.#ctor(Syncfusion.PdfExport.PdfStandardFont,System.Single,Syncfusion.PdfExport.PdfFontStyle)">
            <summary>Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStandardFont"/> class <span>with</span><see cref="T:Syncfusion.PdfExport.PdfStandardFont"/> as prototype,font size and font style</summary>
            <param name="prototype">The <see cref="T:Syncfusion.PdfExport.PdfStandardFont"/> using as prototype..</param>
            <param name="size">The size of the font.</param>
            <param name="style">The style of the font.</param>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(new PdfStandardFont(PdfFontFamily.Helvetica,12), 12, PdfFontStyle.Bold);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(New PdfStandardFont(PdfFontFamily.Helvetica,12), 12, PdfFontStyle.Bold)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.PdfExport.PdfStandardFont"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStandardFont.FontFamily">
            <summary>
            Gets the FontFamily.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfFontFamily"/> </value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draw string to PDF page.
            graphics.DrawString(font.FontFamily.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draw string to PDF page.
            graphics.DrawString(font.FontFamily.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.GetCharWidth(System.Char,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns the width of the char.
            </summary>
            <param name="charCode">Char symbol.</param>
            <param name="format">String format.</param>
            <returns>Width of the symbol.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.GetLineWidth(System.String,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns width of the line.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.InitializeInternals">
            <summary>
            Initializes font internals.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.CreateInternals">
            <summary>
            Creates font's dictionary.
            </summary>
            <returns>font's dictionary.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.CheckStyle">
            <summary>
            Checks font style of the font.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.GetCharWidthInternal(System.Char)">
            <summary>
            Returns width of the char. This methods doesn't takes into consideration font's size.
            </summary>
            <param name="charCode">Char symbol.</param>
            <returns>Width of the symbol.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFont.Convert(System.String)">
            <summary>
            Converts the specified text.
            </summary>
            <param name="text">The unicode text.</param>
            <returns>The ANSI string.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfStandardFontMetricsFactory">
            <summary>
            Factory of the standard fonts metrics.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_subSuperScriptFactor">
            <summary>
            Multiplier os subscript superscript.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaName">
            <summary>
            Font type
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaBoldAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaBoldDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaBoldName">
            <summary>
            Font type
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaItalicName">
            <summary>
            Font type
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaBoldItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaBoldItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_HelveticaBoldItalicName">
            <summary>
            Font type
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierBoldAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierBoldDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierBoldName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierItalicName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierBoldItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierBoldItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_CourierBoldItalicName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesBoldAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesBoldDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesBoldName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesItalicName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesBoldItalicAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesBoldItalicDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_TimesBoldItalicName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_symbolAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_symbolDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_symbolName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_zapfDingbatsAscent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_zapfDingbatsDescent">
            <summary>
            Ascender value for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_zapfDingbatsName">
            <summary>
            Font type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_arialWidth">
            <summary>
            Arial widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_arialBoldWidth">
            <summary>
            Arial bold widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_fixedWidth">
            <summary>
            Fixed widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_timesRomanWidth">
            <summary>
            Times widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_timesRomanBoldWidth">
            <summary>
            Times bold widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_timesRomanItalicWidth">
            <summary>
            Times italic widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_timesRomanBoldItalicWidth">
            <summary>
            Times bold italic widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_symbolWidth">
            <summary>
            Symbol widths table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.c_zapfDingbatsWidth">
            <summary>
            Zip dingbats widths table.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.GetMetrics(Syncfusion.PdfExport.PdfFontFamily,Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Returns metrics of the font.
            </summary>
            <param name="fontFamily">Family of the font.</param>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Returns metrics of the font.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.GetHelveticaMetrics(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Creates Helvetica font metrics.
            </summary>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.GetCourierMetrics(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Creates Courier font metrics.
            </summary>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.GetTimesMetrics(Syncfusion.PdfExport.PdfFontStyle,System.Single)">
            <summary>
            Creates Times font metrics.
            </summary>
            <param name="fontStyle">Style of the font.</param>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.GetSymbolMetrics(System.Single)">
            <summary>
            Creates Symbol font metrics.
            </summary>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStandardFontMetricsFactory.GetZapfDingbatsMetrics(System.Single)">
            <summary>
            Creates ZapfDingbats font metrics.
            </summary>
            <param name="size">Size of the font.</param>
            <returns>Helvetica font metrics.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfStringFormat">
            <summary>
            Represents the text layout information on PDF
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_alignment">
            <summary>
            Horizontal text alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_lineAlignment">
            <summary>
            Vertical text alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_characterSpacing">
            <summary>
            Character spacing value.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_wordSpacing">
            <summary>
            Word spacing value.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_leading">
            <summary>
            Text leading.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_clip">
            <summary>
            Shows if the text should be a part of the current clipping path.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_subSuperScript">
            <summary>
            Indicates whether the text is in subscript or superscript mode.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_scalingFactor">
            <summary>
            The scaling factor of the text being drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_firstLineIndent">
            <summary>
            Indent of the first line in the text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_paragraphIndent">
            <summary>
            Indent of the first line in the paragraph.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_lineLimit">
            <summary>
            Indicates whether entire lines are laid out in the formatting rectangle only or not.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_measureTrailingSpaces">
            <summary>
            Indicates whether spaces at the end of the line should be left or removed.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_noClip">
            <summary>
            Indicates whether the text region should be clipped or not.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringFormat.m_wrapType">
            <summary>
            Indicates text wrapping type.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStringFormat"/> class.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringFormat.#ctor(Syncfusion.PdfExport.PdfTextAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStringFormat"/> class with horizontal alignment of a text
            </summary>
            <param name="alignment">The <see cref="T:Syncfusion.PdfExport.PdfTextAlignment"/> represents the horizontal alignment of a text in PDF .</param>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat(PdfTextAlignment.Center);     
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat(PdfTextAlignment.Center)     
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringFormat.#ctor(Syncfusion.PdfExport.PdfTextAlignment,Syncfusion.PdfExport.PdfVerticalAlignment)">
            <summary>Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStringFormat"/> class with horizontal and vertical alignment</summary>
            <param name="alignment">The <see cref="T:Syncfusion.PdfExport.PdfTextAlignment"/> represents the horizontal alignment of a text in PDF .</param>
            <param name="lineAlignment">The <see cref="T:Syncfusion.PdfExport.PdfVerticalAlignment"/> represents the vertical alignment of a text in PDF</param>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat(PdfTextAlignment.Center, PdfVerticalAlignment.Middle);       
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat(PdfTextAlignment.Center, PdfVerticalAlignment.Middle)    
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.TextDirection">
            <summary>
            Gets or sets the value that indicates text direction.
            </summary>       
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;       
            format.TextDirection = PdfTextDirection.RightToLeft;       
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;       
            'Set right to left.
            format.TextDirection = PdfTextDirection.RightToLeft       
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.Alignment">
            <summary>
            Gets or sets the horizontal text alignment
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfTextAlignment"/> represents the horizontal alignment of a text in PDF </value>
            <remarks >Default value: PdfTextAlignment.Left </remarks>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.LineAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfVerticalAlignment"/> represents the vertical alignment of a text in PDF </value>
            <remarks > Default Value: PdfVerticalAlignment.Top </remarks>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.CharacterSpacing">
            <summary>
            Gets or sets value that indicates a size among the characters in the text.
            When the glyph for each character in the string is rendered, this value is
            added to the glyph�s displacement.
            </summary>
            <remarks>
            Default value is 0.</remarks>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Set character spacing.
            format.CharacterSpacing = 1;       
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Set character spacing.
            format.CharacterSpacing = 1       
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.WordSpacing">
            <summary>
            Gets or sets value that indicates a size among the words in the text.
            Word spacing works the same way as character spacing but applies only to the
            space character, code 32.
            </summary>
            <remarks>Default value is 0.</remarks>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;        
            //Set word spacing.
            format.WordSpacing = 1.5f;        
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;       
            'Set word spacing.
            format.WordSpacing = 1.5F       
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.LineSpacing">
            <summary>
            Gets or sets value that indicates the vertical distance between the baselines of adjacent lines of text.
            </summary>
            <remarks>Default value is 0.</remarks>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;       
            //Set line spacing.
            format.LineSpacing = 1.1f;      
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;       
            'Set line spacing.
            format.LineSpacing = 1.1F       
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.ClipPath">
            <summary>
            Gets or sets a value indicating whether the text
            should be a part of the clipping path.
            </summary>
            <value><c>true</c> if ClipPath; otherwise, <c>false</c>.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Set character spacing.
            format.CharacterSpacing = 1;
            //Set clip path.
            format.ClipPath = true;      
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Set character spacing.
            format.CharacterSpacing = 1
            'Set clip path.
            format.ClipPath = True       
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.SubSuperScript">
            <summary>
            Gets or sets value indicating whether the text is in subscript or superscript mode.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfSubSuperScript"/> indicating whether the text is in subscript or superscript mode</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;       
            //Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;      
            'Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.ParagraphIndent">
            <summary>
            Gets or sets the indent of the first line in the paragraph.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;       
            //Set paragraph indent.
            format.ParagraphIndent = 2.1f;      
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;      
            'Set paragraph indent.
            format.ParagraphIndent = 2.1F      
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.LineLimit">
            <summary>
            Gets or sets a value indicating whether [line limit].
            </summary>
            <value><c>true</c> if [line limit]; otherwise, <c>false</c>.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Set character spacing.
            format.CharacterSpacing = 1;
            //Set clip path.
            format.ClipPath = true;
            //Set line limit.
            format.LineLimit = true;
            //Set line spacing.
            format.LineSpacing = 1.1f;
            //Set measure trailing spaces.
            format.MeasureTrailingSpaces = true;
            //Set no clip
            format.NoClip = true;
            //Set paragraph indent.
            format.ParagraphIndent = 2.1f;
            //Set right to left.
            format.RightToLeft = false;
            //Set word spacing.
            format.WordSpacing = 1.5f;
            //Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word;
            //Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Set character spacing.
            format.CharacterSpacing = 1
            'Set clip path.
            format.ClipPath = True
            'Set line limit.
            format.LineLimit = True
            'Set line spacing.
            format.LineSpacing = 1.1F
            'Set measure trailing spaces.
            format.MeasureTrailingSpaces = True
            'Set no clip
            format.NoClip = True
            'Set paragraph indent.
            format.ParagraphIndent = 2.1F
            'Set right to left.
            format.RightToLeft = False
            'Set word spacing.
            format.WordSpacing = 1.5F
            'Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word
            'Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.MeasureTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether [measure trailing spaces].
            </summary>
            <value>
            	<c>true</c> if [measure trailing spaces]; otherwise, <c>false</c>.
            </value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Set character spacing.
            format.CharacterSpacing = 1;
            //Set clip path.
            format.ClipPath = true;
            //Set line limit.
            format.LineLimit = true;
            //Set line spacing.
            format.LineSpacing = 1.1f;
            //Set measure trailing spaces.
            format.MeasureTrailingSpaces = true;
            //Set no clip
            format.NoClip = true;
            //Set paragraph indent.
            format.ParagraphIndent = 2.1f;
            //Set right to left.
            format.RightToLeft = false;
            //Set word spacing.
            format.WordSpacing = 1.5f;
            //Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word;
            //Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Set character spacing.
            format.CharacterSpacing = 1
            'Set clip path.
            format.ClipPath = True
            'Set line limit.
            format.LineLimit = True
            'Set line spacing.
            format.LineSpacing = 1.1F
            'Set measure trailing spaces.
            format.MeasureTrailingSpaces = True
            'Set no clip
            format.NoClip = True
            'Set paragraph indent.
            format.ParagraphIndent = 2.1F
            'Set right to left.
            format.RightToLeft = False
            'Set word spacing.
            format.WordSpacing = 1.5F
            'Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word
            'Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.NoClip">
            <summary>
            Gets or sets a value indicating whether [no clip].
            </summary>
            <value><c>true</c> if [no clip]; otherwise, <c>false</c>.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Set character spacing.
            format.CharacterSpacing = 1;
            //Set clip path.
            format.ClipPath = true;
            //Set line limit.
            format.LineLimit = true;
            //Set line spacing.
            format.LineSpacing = 1.1f;
            //Set measure trailing spaces.
            format.MeasureTrailingSpaces = true;
            //Set no clip
            format.NoClip = true;
            //Set paragraph indent.
            format.ParagraphIndent = 2.1f;
            //Set right to left.
            format.RightToLeft = false;
            //Set word spacing.
            format.WordSpacing = 1.5f;
            //Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word;
            //Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Set character spacing.
            format.CharacterSpacing = 1
            'Set clip path.
            format.ClipPath = True
            'Set line limit.
            format.LineLimit = True
            'Set line spacing.
            format.LineSpacing = 1.1F
            'Set measure trailing spaces.
            format.MeasureTrailingSpaces = True
            'Set no clip
            format.NoClip = True
            'Set paragraph indent.
            format.ParagraphIndent = 2.1F
            'Set right to left.
            format.RightToLeft = False
            'Set word spacing.
            format.WordSpacing = 1.5F
            'Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word
            'Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.WordWrap">
            <summary>
            Gets or sets value indicating type of the text wrapping.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfWordWrapType"/> indicating type of the text wrapping</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Set character spacing.
            format.CharacterSpacing = 1;
            //Set clip path.
            format.ClipPath = true;
            //Set line limit.
            format.LineLimit = true;
            //Set line spacing.
            format.LineSpacing = 1.1f;
            //Set measure trailing spaces.
            format.MeasureTrailingSpaces = true;
            //Set no clip
            format.NoClip = true;
            //Set paragraph indent.
            format.ParagraphIndent = 2.1f;
            //Set right to left.
            format.RightToLeft = false;
            //Set word spacing.
            format.WordSpacing = 1.5f;
            //Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word;
            //Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Set character spacing.
            format.CharacterSpacing = 1
            'Set clip path.
            format.ClipPath = True
            'Set line limit.
            format.LineLimit = True
            'Set line spacing.
            format.LineSpacing = 1.1F
            'Set measure trailing spaces.
            format.MeasureTrailingSpaces = True
            'Set no clip
            format.NoClip = True
            'Set paragraph indent.
            format.ParagraphIndent = 2.1F
            'Set right to left.
            format.RightToLeft = False
            'Set word spacing.
            format.WordSpacing = 1.5F
            'Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word
            'Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.HorizontalScalingFactor">
            <summary>
            Gets or sets the scaling factor.
            </summary>
            <remarks>The default scaling factor is 100, which means 100% and original size.
            It's used to make PDF font looking smaller when metafile is rendered into PDF.</remarks>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringFormat.FirstLineIndent">
            <summary>
            Gets or sets the indent of the first line in the text.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringFormat.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>The new created object.</returns>
            <example>
            <code lang="C#">
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Clone the string format.
            PdfStringFormat format1 = format.Clone() as PdfStringFormat;
            </code>
            <code lang="VB">
            'Create a new PDF string format instance.
            Dim format As New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle
            'Clone the string format.
            Dim format1 As PdfStringFormat = TryCast(format.Clone(), PdfStringFormat)
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTrueTypeFont">
             <summary>
             Represents TrueType font.
             </summary>
            [System.Security.Permissions.PermissionSet( System.Security.Permissions.SecurityAction.Assert, Name = "FullTrust" )]
             <example> 
             <code lang="C#">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add a page to the document.
             PdfPage page = document.Pages.Add();
             //Create PDF graphics for the page.
             PdfGraphics graphics = page.Graphics;
             //Create new system font.
             Font sFont = new Font("Arial", 12, FontStyle.Regular);
             //Create a new PDF true type font instance.
             PdfFont font = new PdfTrueTypeFont(sFont);
             //Draw string to PDF page.
             graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
             //Save the document.
             document.Save("Output.pdf");
             //Close the document.
             document.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add a page to the document.
             Dim page As PdfPage = document.Pages.Add()
             'Create PDF graphics for the page.
             Dim graphics As PdfGraphics = page.Graphics
             'Create new system font.
             Dim sFont As New Font("Arial", 12, FontStyle.Regular)
             'Create a new PDF true type font instance.
             Dim font As PdfFont = New PdfTrueTypeFont(sFont)
             'Draw string to PDF page.
             graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
             'Save the document.
             document.Save("Output.pdf")
             'Close the document.
             document.Close(True)
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTrueTypeFont.Encoding">
            <summary>
            Encoding for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTrueTypeFont.m_embed">
            <summary>
            Indicates whether the font should be embeded.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTrueTypeFont.m_fontInternal">
            <summary>
            Internal font object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.#ctor(System.IO.Stream,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTrueTypeFont"/> class.
            </summary>
            <param name="fontStream">The font file.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.#ctor(System.IO.Stream,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTrueTypeFont"/> class.
            </summary>
            <param name="fontStream">The font file.</param>
            <param name="size">The size.</param>
            <param name="isTrueType">Type of the is true.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.#ctor(System.IO.Stream,System.Single,Syncfusion.PdfExport.PdfFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTrueTypeFont"/> class.
            </summary>
            <param name="fontStream">The font file.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.#ctor(System.IO.Stream,System.Single,Syncfusion.PdfExport.PdfFontStyle,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTrueTypeFont"/> class.
            </summary>
            <param name="fontStream">The font file.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
            <param name="useTrueType">use true type.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTrueTypeFont.Unicode">
            <summary>Gets a value indicating whether this <see cref="T:Syncfusion.PdfExport.PdfTrueTypeFont"/> is Unicode enabled (Read only).</summary>
            <value>
            <c>true</c> if Unicode; otherwise, <c>false</c>.</value>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create new system font.
            Font sFont = new Font("Arial", 12, FontStyle.Regular);
            //Create a new PDF true type font instance.
            PdfTrueTypeFont font = new PdfTrueTypeFont(sFont, 12, true);
            //Check unicode support.
            bool isUnicode = font.Unicode;
            //Draw string to PDF page.
            graphics.DrawString("Unicode Font = " + isUnicode, font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create new system font.
            Dim sFont As New Font("Arial", 12, FontStyle.Regular)
            'Create a new PDF true type font instance.
            Dim font As PdfTrueTypeFont = New PdfTrueTypeFont(sFont, 12, True)
            'Check unicode support.
            Dim isUnicode As Boolean = font.Unicode
            'Draw string to PDF page.
            graphics.DrawString("Unicode Font = " + isUnicode, font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTrueTypeFont.Embed">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.PdfExport.PdfTrueTypeFont"/> is embeded it to the PDF document
            </summary>
            <value><c>true</c> if embeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTrueTypeFont.InternalFont">
            <summary>
            Gets internals of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTrueTypeFont.FontFile">
            <summary>
            Gets path to the font file if the font was created from a file.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.GetCharWidth(System.Char,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns width of the char.
            </summary>
            <param name="charCode">Char symbol.</param>
            <param name="format">String format.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.GetLineWidth(System.String,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns width of the line.
            </summary>
            <param name="line">Text line.</param>
            <param name="format">String format.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.SetSymbols(System.String)">
            <summary>
            Stores used symbols.
            </summary>
            <param name="text">String text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.CreateFontInternal(System.IO.Stream,Syncfusion.PdfExport.PdfFontStyle)">
            <summary>
            Creates internal font object.
            </summary>
            <param name="fontStream">Font file.</param>
            <param name="style">Suggested style of the font.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.InitializeInternals">
            <summary>
            Initializes font internals.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.CalculateStyle(Syncfusion.PdfExport.PdfFontStyle)">
            <summary>
            Sets the style of the font.
            </summary>
            <param name="style">Suggested style of the font.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTrueTypeFont.GetUnicodeLineWidth(System.String,System.Single@)">
            <summary>
            Calcuates width of the unicode line.
            </summary>
            <param name="line">String text.</param>
            <param name="width">Width of the line.</param>
            <returns>True if success, false otherwise.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.RtlRenderer">
            <summary>
            Renderers text and layouts it for RTL support.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.RtlRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.RtlRenderer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.RtlRenderer.Layout(System.String,Syncfusion.PdfExport.PdfTrueTypeFont,System.Boolean,System.Boolean,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Layouts text. Changes blocks position in the RTL text.
            Ligates the text if needed.
            </summary>
            <param name="line">Line of the text.</param>
            <param name="font">Font to be used for string printing.</param>
            <param name="rtl">Font alignment.</param>
            <param name="wordSpace">Indicates whether Word Spacing used or not.</param>
            <param name="format">String format.</param>
            <returns>Layout string.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.RtlRenderer.SplitLayout(System.String,Syncfusion.PdfExport.PdfTrueTypeFont,System.Boolean,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Layouts a string and splits it by the words and using correct lay outing.
            </summary>
            <param name="line">Text line.</param>
            <param name="font">Font object.</param>
            <param name="rtl">Indicates whether RTL should be applied.</param>
            <param name="format">String format.</param>
            <returns>Array of words if converted, null otherwise.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.RtlRenderer.CustomLayout(System.String,Syncfusion.PdfExport.PdfTrueTypeFont,System.Boolean,System.Boolean,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Uses manual algorithm for text lay outing.
            </summary>
            <param name="line">Line of the text to be layouted.</param>
            <param name="font">Font which is used for text printing.</param>
            <param name="rtl">Indicates whether we use RTL or RTL lay outing of the text container.</param>
            <param name="wordSpace">If true - word spacing is used.</param>
            <param name="format">String format.</param>
            <returns>layout string array.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.RtlRenderer.CustomLayout(System.String,System.Boolean,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Uses manual algorithm for text lay outing.
            </summary>
            <param name="line">Line of the text to be layouted.</param>
            <param name="rtl">Indicates whether we use RTL or LTR layouting of the text container.</param>
            <param name="format">String format.</param>
            <returns>layout string.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.RtlRenderer.AddChars(Syncfusion.PdfExport.PdfTrueTypeFont,System.String)">
            <summary>
            Add information about used glyphs to the font.
            </summary>
            <param name="font">Font used for text rendering.</param>
            <param name="line">Line of the text.</param>
            <returns>String in the form to be written to the file.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.RtlRenderer.CustomSplitLayout(System.String,Syncfusion.PdfExport.PdfTrueTypeFont,System.Boolean,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Layouts a string and splits it by the words by using custom lay outing.
            </summary>
            <param name="line">Text line.</param>
            <param name="font">Font object.</param>
            <param name="rtl">Indicates whether RTL should be applied.</param>
            <param name="format">String format.</param>
            <returns>Array of words if converted, null otherwise.</returns>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.m_types">
            <summary>
            Specifies the character types.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.m_textOrder">
            <summary>
            Specifies the text order (RTL or LTR).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.m_length">
            <summary>
            Specifies the text length.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.m_result">
            <summary>
            Specifies the resultant types.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.m_levels">
            <summary>
            Specifies the resultant levels.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.m_rtlCharacterTypes">
            <summary>
            Specifies the RTL character types.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.L">
            <summary>
            Left-to-Right (Non-European or non-Arabic digits).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.LRE">
            <summary>
            Left-to-Right Embedding
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.LRO">
            <summary>
            Left-to-Right Override
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.R">
            <summary>
            Right-to-Left (Hebrew alphabet, and related punctuation).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.AL">
            <summary>
            Right-to-Left Arabic 
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.RLE">
            <summary>
            Right-to-Left Embedding.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.RLO">
            <summary>
            Right-to-Left Override
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.PDF">
            <summary>
            Pop Directional Format
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.EN">
            <summary>
            European Number (European digits, Eastern Arabic-Indic digits).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.ES">
            <summary>
            European Number Separator (Plus sign, Minus sign).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.ET">
            <summary>
            European Number Terminator (Degree sign, currency symbols).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.AN">
            <summary>
            Arabic Number (Arabic-Indic digits, Arabic decimal and thousands separators).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.CS">
            <summary>
            Common Number Separator (Colon, Comma, Full Stop, No-Break Space.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.NSM">
            <summary>
            Nonspacing Mark (Characters with the General_Category values).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.BN">
            <summary>
            Boundary Neutral (Default ignorables, non-characters, and control characters, other than those explicitly given other types.)
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.B">
            <summary>
            Paragraph Separator (Paragraph separator, appropriate Newline Functions, higher-level protocol paragraph determination).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.S">
            <summary>
            	Segment Separator (tab).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.WS">
            <summary>
            Whitespace (Space, Figure space, Line separator, Form feed, General Punctuation spaces).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.ON">
            <summary>
            Other Neutrals (All other characters, including object replacement character).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.RTLCharacters.CharTypes">
            <summary>
            RTL character types.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfStringLayouter">
            <summary>
            Class lay outing the text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringLayouter.m_font">
            <summary>
            Pdf font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringLayouter.m_format">
            <summary>
            String format.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringLayouter.m_size">
            <summary>
            Bounds of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringLayouter.m_reader">
            <summary>
            String tokenizer.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStringLayouter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.Layout(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat,System.Drawing.RectangleF,System.Single)">
            <summary>
            Layouts the text.
            </summary>
            <param name="text">String text.</param>
            <param name="font">Font for the text.</param>
            <param name="format">String format.</param>
            <param name="rect">Bounds of the text.</param>
            <param name="pageHeight">Page height.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.Layout(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat,System.Drawing.SizeF)">
            <summary>
            Layouts the text.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.Initialize(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat,System.Drawing.RectangleF,System.Single)">
            <summary>
            Initializes internal data.
            </summary>
            <param name="text">String text.</param>
            <param name="font">Font for the text.</param>
            <param name="format">String format.</param>
            <param name="rect">Bounds of the text.</param>
            <param name="pageHeight">Bounds of the text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.DoLayout">
            <summary>
            Layouts the text.
            </summary>
            <returns>Lay outing data.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.CopyToResult(Syncfusion.PdfExport.PdfStringLayoutResult,Syncfusion.PdfExport.PdfStringLayoutResult,System.Collections.Generic.List{Syncfusion.PdfExport.LineInfo},System.Int32@)">
            <summary>
            Copies layout result from line result to entire result. Checks whether we can proceed lay outing or not.
            </summary>
            <param name="result">Final result.</param>
            <param name="lineResult">Line result.</param>
            <param name="lines">Lines array.</param>
            <param name="numInserted">Number of symbols inserted.</param>
            <returns>True if we can proceed, False - to stop lay outing.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.FinalizeResult(Syncfusion.PdfExport.PdfStringLayoutResult,System.Collections.Generic.List{Syncfusion.PdfExport.LineInfo})">
            <summary>
            Finalizes final result.
            </summary>
            <param name="result">Final result.</param>
            <param name="lines">Lines array.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.Clear">
            <summary>
            Cleares all resources.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.GetLineHeight">
            <summary>
            Calculates height of the line.
            </summary>
            <returns>Height of the line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.LayoutLine(System.String,System.Single)">
            <summary>
            Layouts line.
            </summary>
            <param name="line">Text line.</param>
            <param name="lineIndent">Line indent.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.AddToLineResult(Syncfusion.PdfExport.PdfStringLayoutResult,System.Collections.Generic.List{Syncfusion.PdfExport.LineInfo},System.String,System.Single,Syncfusion.PdfExport.LineType)">
            <summary>
            Adds line to line result.
            </summary>
            <param name="lineResult">Line resut.</param>
            <param name="lines">Array of the lines.</param>
            <param name="line">Text line.</param>
            <param name="lineWidth">Line width.</param>
            <param name="breakType">Line break type.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.TrimLine(Syncfusion.PdfExport.LineInfo,System.Boolean)">
            <summary>
            Trims whitespaces at the line.
            </summary>
            <param name="info">Line info.</param>
            <param name="firstLine">Indicates whether the line is the first in the text.</param>
            <returns>Trimed line info.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.GetLineWidth(System.String)">
            <summary>
            Calculates width of the line.
            </summary>
            <param name="line">String line.</param>
            <returns>Width of the line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.GetLineIndent(System.Boolean)">
            <summary>
            Returns line indent for the line.
            </summary>
            <param name="firstLine">If true - the line is the first in the text.</param>
            <returns>Line indent for the line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStringLayouter.GetWrapType">
            <summary>
            Returns wrap type.
            </summary>
            <returns>Returns wrap type.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfStringLayoutResult">
            <summary>
            Layouter result.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringLayoutResult.m_lines">
            <summary>
            Layouted lines.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringLayoutResult.m_remainder">
            <summary>
            The text wasn't lay outed.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringLayoutResult.m_actualSize">
            <summary>
            Actual layouted text bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStringLayoutResult.m_lineHeight">
            <summary>
            Height of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringLayoutResult.Remainder">
            <summary>
            Gets the text which is not lay outed
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringLayoutResult.ActualSize">
            <summary>
            Gets the actual layouted text bounds
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringLayoutResult.Lines">
            <summary>
            Gets layouted lines information.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringLayoutResult.LineHeight">
            <summary>
            Gets the height of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringLayoutResult.Empty">
            <summary>
            Gets value that indicates whether any text was layouted.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStringLayoutResult.LineCount">
            <summary>
            Gets number of the lines layouted.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.LineInfo">
            <summary>
            Provides a line information
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.LineInfo.m_text">
            <summary>
            Line text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.LineInfo.m_width">
            <summary>
            Width of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.LineInfo.m_lineType">
            <summary>
            Breaking type of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.LineInfo.LineType">
            <summary>
            Gets the width of the line text.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.LineInfo.Text">
            <summary>
            Gets the line text.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.LineInfo.Width">
            <summary>
            Gets width of the line text.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.LineType">
            <summary>
            Break type of the line.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.LineType.None">
            <summary>
            Unknown type line.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.LineType.NewLineBreak">
            <summary>
            The line has new line symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.LineType.LayoutBreak">
            <summary>
            layout break.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.LineType.FirstParagraphLine">
            <summary>
            The line is the first in the paragraph.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.LineType.LastParagraphLine">
            <summary>
            The line is the last in the paragraph.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.StringTokenizer">
            <summary>
            Utility class for working with strings.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.StringTokenizer.WhiteSpace">
            <summary>
            Whitespace symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.StringTokenizer.Tab">
            <summary>
            Whitespace symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.StringTokenizer.Spaces">
            <summary>
            Array of spaces.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.StringTokenizer.c_regexOptions">
            <summary>
            Default RegEx checks object's options.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.StringTokenizer.c_whiteSpacePatterm">
            <summary>
            Pattern for WhiteSpace.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.StringTokenizer.s_whiteSpaceRegex">
            <summary>
            Whitespace regex.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.StringTokenizer.m_text">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.StringTokenizer.m_position">
            <summary>
            Current position.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.StringTokenizer"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.StringTokenizer.EOF">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.PdfExport.StringTokenizer"/> is EOF.
            </summary>
            <value><c>true</c> if EOF; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.StringTokenizer.Length">
            <summary>
            Gets text length.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.StringTokenizer.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.GetCharsCount(System.String,System.Char[])">
            <property name="flag" value="Finished" />
            <summary>
            Returns number of symbols occurred in the text.
            </summary>
            <param name="text">Text data.</param>
            <param name="symbols"> Array of symbols to be searched.</param>
            <returns>
            Number of symbols occurred in the text.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.ReadLine">
            <summary>
            Reads line of the text.
            </summary>
            <returns>Text line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.PeekLine">
            <summary>
            Reads line of the text.
            </summary>
            <returns>Text line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.ReadWord">
            <summary>
            reads a word from the text.
            </summary>
            <returns>A word from the data.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.PeekWord">
            <summary>
            Peeks a word from the text.
            </summary>
            <returns>A word from the data.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.Read">
            <summary>
            Reads char form the data.
            </summary>
            <returns>Char symbol.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.Read(System.Int32)">
            <summary>
            Reads count of the symbols.
            </summary>
            <param name="count">Number of symbols.</param>
            <returns>String text.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.Peek">
            <summary>
            Peeks char form the data.
            </summary>
            <returns>Char symbol.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.Close">
            <summary>
            Closes a reader.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.ReadToEnd">
            <summary>
            Reads text to the end.
            </summary>
            <returns>Reads text to the end.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.IsWhitespace(System.String)">
            <summary>
            Indicates whether user specified token is whitespace symbols or not.
            </summary>
            <param name="token">Token to check.</param>
            <returns>True if token is whitespace; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.StringTokenizer.Contains(System.Char[],System.Char)">
            <summary>
            Checks whether array contains a symbol.
            </summary>
            <param name="array">Array of symbols.</param>
            <param name="symbol">Char symbol.</param>
            <returns>True - if comtains, False otherwise.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfReader">
            <summary>
            Reader of the TTF data.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.Encoding">
            <summary>
            Encoding class.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.WidthMultiplier">
            <summary>
            Width multiplier.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.c_ttfVersion1">
            <summary>
            Version of Ttf file.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.c_ttfVersion2">
            <summary>
            Version of Ttf file.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.c_macTtfVersion">
            <summary>
            Version of Mac Ttf file
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.c_fp">
            <summary>
            FP.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.s_tableNames">
            <summary>
            Aray of table names.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_tableNames">
            <summary>
            Array of table names.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.s_entrySelectors">
            <summary>
            Integer's table. One of this integer would be used as a key
            for writing some info in the header of the font program.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_reader">
            <summary>
            Binary reader object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_tableDirectory">
            <summary>
            The whole list of tables loaded from Ttf.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_metrics">
            <summary>
            Ttf metrics.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_width">
            <summary>
            Width table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_macintosh">
            <summary>
            Glyphs for Macintosh or Symbol fonts (char - key, glyph - value).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_microsoft">
            <summary>
            Glyphs for Microsoft Unicode fonts (char - key, glyph - value)..
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_macintoshGlyphs">
            <summary>
            Glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_microsoftGlyphs">
            <summary>
            Glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_bIsLocaShort">
            <summary>
            Indicates whether loca table is short.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfReader.m_AnsiEncode">
            <summary>
            Indicated whether the Encoding with Ansi or not
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfReader.Reader">
            <summary>
            Gets or sets binary reader.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfReader.Metrics">
            <summary>
            Gets metrics of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfReader.TableDirectory">
            <summary>
            The whole list of tables loaded from Ttf.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfReader.Macintosh">
            <summary>
            Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfReader.Microsoft">
            <summary>
            Gets glyphs for Microsoft Unicode fonts (char - key, glyph - value)..
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfReader.MacintoshGlyphs">
            <summary>
            Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfReader.MicrosoftGlyphs">
            <summary>
            Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfReader.TableNames">
            /// <summary>
            Array of table names.
            </summary>
            <value>Table names</value>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates a new object.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.Close">
            <summary>
            Closes all the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetGlyph(System.Char)">
            <summary>
            Gets glyph's info by char code.
            </summary>
            <param name="charCode">Char symbol.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetGlyph(System.Int32)">
            <summary>
            Gets glyph's info by glyph index..
            </summary>
            <param name="glyphIndex">Glyph index.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.CreateInternals">
            <summary>
            Creates fonts internals.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadFontProgram(System.Collections.Generic.Dictionary{System.Char,System.Char})">
            <summary>
            Reads a font's program.
            </summary>
            <param name="chars">Array of used chars.</param>
            <returns>Binary font data.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ConvertString(System.String)">
            <summary>
            Reconverts string to be in proper format saved into PDF file.
            Return value would be in string.
            </summary>
            <param name="text">String to be reconverted.</param>
            <returns>Reconverted string.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetCharWidth(System.Char)">
            <summary>
            Gets char width.
            </summary>
            <param name="code">Char for which to measure the width.</param>
            <returns>Char width.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetGlyphChars(System.Collections.Generic.Dictionary{System.Char,System.Char})">
            <summary>
            Gets hashtable with chars indexed by glyph index.
            </summary>
            <param name="chars">Chars that are used in destination output.</param>
            <returns>Hashtable with chars indexed by glyph index.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.Initialize">
            <summary>
            Provides basic parsing required for font comparing (FontFamily and MacStyle).
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadFontDirectory">
            <summary>
            Reads font directory.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.FixOffsets">
            <summary>
            Fixes the offsets of the font tables.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadMetrics">
            <summary>
            Reads font metrics.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.InitializeMetrics(Syncfusion.PdfExport.TtfNameTable,Syncfusion.PdfExport.TtfHeadTable,Syncfusion.PdfExport.TtfHorizontalHeaderTable,Syncfusion.PdfExport.TtfOS2Table,Syncfusion.PdfExport.TtfPostTable,Syncfusion.PdfExport.TtfCmapSubTable[])">
            <summary>
            Initializes metrics.
            </summary>
            <param name="nameTable">Name table.</param>
            <param name="headTable">Head table.</param>
            <param name="horizontalHeadTable">Horizontal head table.</param>
            <param name="os2Table">OS/2 table.</param>
            <param name="postTable">Post table.</param>
            <param name="cmapTables">Cmap subtables.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadNameTable">
            <summary>
            Reads name table.
            </summary>
            <returns>Name table.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadHeadTable">
            <summary>
            Reads head table.
            </summary>
            <returns>Head table.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadHorizontalHeaderTable">
            <summary>
            Reads horizontal header table.
            </summary>
            <returns>Horizontal header table.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadOS2Table">
            <summary>
            Reads OS2 table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadPostTable">
            <summary>
            Reads post table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadWidthTable(System.Int32,System.Int32)">
            <summary>
            Reads Width of the glyphs.
            </summary>
            <param name="glyphCount">Number of glyphs.</param>
            <param name="unitsPerEm">Power of 2.</param>
            <returns>Width of the glyphs.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadCmapTable">
            <summary>
            Reads cmap table.
            </summary>
            <returns>Array of subtables.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadCmapSubTable(Syncfusion.PdfExport.TtfCmapSubTable)">
            <summary>
            Reads cmap subtables.
            </summary>
            <param name="subTable">Cmap subtable.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadAppleCmapTable(Syncfusion.PdfExport.TtfCmapSubTable,Syncfusion.PdfExport.TtfCmapEncoding)">
            <summary>
            Reads Symbol cmap table.
            </summary>
            <param name="subTable">Cmap subtable.</param>
            <param name="encoding">Encoding ID.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadMicrosoftCmapTable(Syncfusion.PdfExport.TtfCmapSubTable,Syncfusion.PdfExport.TtfCmapEncoding)">
            <summary>
            Reads Symbol cmap table.
            </summary>
            <param name="subTable">Cmap subtable.</param>
            <param name="encoding">Encoding ID.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadTrimmedCmapTable(Syncfusion.PdfExport.TtfCmapSubTable,Syncfusion.PdfExport.TtfCmapEncoding)">
            <summary>
            Reads Trimed cmap table.
            </summary>
            <param name="subTable">Cmap subtable.</param>
            <param name="encoding">Encoding ID.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadLocaTable(System.Boolean)">
            <summary>
            Reads loca table.
            </summary>
            <param name="bShort">If True - table is int16, int32 otherwise.</param>
            <returns>Loca table.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadUshortArray(System.Int32)">
            <summary>
            Reads ushort array.
            </summary>
            <param name="len">Length of the array.</param>
            <returns>Ushort array.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.AddGlyphByIndex(Syncfusion.PdfExport.TtfGlyphInfo,Syncfusion.PdfExport.TtfCmapEncoding)">
            <summary>
            Adds glyph to the collection.
            </summary>
            <param name="glyph">Glyph info.</param>
            <param name="encoding">Encoding ID.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetWidth(System.Int32)">
            <summary>
            Returns width of the glyph.
            </summary>
            <param name="glyphCode">Code of the glyph.</param>
            <returns>Returns width of the glyph.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.UpdateWidth">
            <summary>
            Updates chars structure which is used in the case
            of ansi encoding (256 bytes).
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.CheckPreambula">
            <summary>
            Indicates whether code is right Ttf preambula code:
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetCmapEncoding(System.Int32,System.Int32)">
            <summary>
            Gets CMAP encoding based on platform ID and encoding ID.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetTable(System.String)">
            <summary>
            Returns table.
            </summary>
            <param name="name">Name of the table.</param>
            <returns>Returns table.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.UpdateGlyphChars(System.Collections.Generic.Dictionary{System.Int32,System.Int32},Syncfusion.PdfExport.TtfLocaTable)">
            <summary>
            Updates hashtable of used glyphs.
            </summary>
            <param name="glyphChars">Dictionary of used glyphs.</param>
            <param name="locaTable">Loca table.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ProcessCompositeGlyph(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32,Syncfusion.PdfExport.TtfLocaTable)">
            <summary>
            Checks if glyph is composite or not.
            If True, it provides additional work.
            </summary>
            <param name="glyphChars">Dictionary of glyphs.</param>
            <param name="glyph">Glyph index.</param>
            <param name="locaTable">Loca table.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GenerateGlyphTable(System.Collections.Generic.Dictionary{System.Int32,System.Int32},Syncfusion.PdfExport.TtfLocaTable,System.Int32[]@,System.Byte[]@)">
            <summary>
            Creates new glyph tables based on chars that are used for output.
            </summary>
            <param name="glyphChars">dictionary of glyphs.</param>
            <param name="locaTable">Loca table.</param>
            <param name="newLocaTable">The updated table that stores the offsets to the
            locations of the glyphs in the font.</param>
            <param name="newGlyphTable">The updated glyph table that holds only the glyphs that
            are used for destination output.</param>
            <returns>Glyph table size.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.UpdateLocaTable(System.Int32[],System.Boolean,System.Byte[]@)">
            <summary>
            Updates new Loca table.
            </summary>
            <param name="newLocaTable">New Loca table.</param>
            <param name="bLocaIsShort">Indicates whether loca is short.</param>
            <param name="newLocaTableOut">Updated new loca table.</param>
            <returns>Updated loca table size.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetFontProgram(System.Byte[],System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Returns font program data.
            </summary>
            <param name="newLocaTableOut">New updated loca table.</param>
            <param name="newGlyphTable">New glyph table.</param>
            <param name="glyphTableSize">Size of glyph table.</param>
            <param name="locaTableSize">Size of loca table.</param>
            <returns>Font program data.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetFontProgramLength(System.Byte[],System.Byte[],System.Int16@)">
            <summary>
            Calculate size of the font program.
            </summary>
            <param name="newLocaTableOut">Updated new loca table.</param>
            <param name="newGlyphTable">New glyph table.</param>
            <param name="numTables">Number of tables used.</param>
            <returns>Size of the font program.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.CalculateCheckSum(System.Byte[])">
            <summary>
            Gets checksum from source buffer.
            </summary>
            <param name="bytes">Byte array.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.WriteCheckSums(Syncfusion.PdfExport.BigEndianWriter,System.Int16,System.Byte[],System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Writing to destination buffer - checksums and sizes of used tables.
            </summary>
            <param name="writer">Writer object.</param>
            <param name="numTables">Number of tables.</param>
            <param name="newLocaTableOut">New updated loca table.</param>
            <param name="newGlyphTable">New glyph table.</param>
            <param name="glyphTableSize">Size of glyph table.</param>
            <param name="locaTableSize">Size of loca table.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.WriteGlyphs(Syncfusion.PdfExport.BigEndianWriter,System.Byte[],System.Byte[])">
            <summary>
            // Writing to destination buffer - used glyphs.
            </summary>
            <param name="writer">Writer object.</param>
            <param name="newLocaTableOut">New updated loca table.</param>
            <param name="newGlyphTable">New glyph table.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.InitializeFontName(Syncfusion.PdfExport.TtfNameTable)">
            <summary>
            Initializes font name.
            </summary>
            <param name="nameTable">Name table.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.Align(System.UInt32)">
            <summary>
            Aligns number to be divisible on 4.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.GetDefaultGlyph">
            <summary>
            Returns default glyph.
            </summary>
            <returns>Returns default glyph.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadInt32">
            <summary>
            Reads 32 bit integer.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadUInt32">
            <summary>
            Reads 32 bit integer.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadUInt16">
            <summary>
            Reads 16 bit integer.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadInt16">
            <summary>
            Reads 16 bit integer.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadInt64">
            <summary>
            Reads 64 bit integer.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.Reverse(System.Byte[])">
            <summary>
            Reverts array elements.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.Seek(System.Int64)">
            <summary>
            Seeks reader to the sepcified position.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.Skip(System.Int64)">
            <summary>
            Skips number of bytes.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadString(System.Int32)">
            <summary>
            Reads string.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadString(System.Int32,System.Boolean)">
            <summary>
            Reads string.
            </summary>
            <param name="len">Size of the string in bytes.</param>
            <param name="unicode">Indicates whethere string is unicode or not.</param>
            <returns>String data.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadBytes(System.Int32)">
            <summary>
            Reads bytes from the reader.
            </summary>
            <param name="count">Number of bytes.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.ReadFixed">
            <summary>
            Reads FIXED data type (16.16) fixed point number.
            </summary>
            <returns>FIXED data type (16.16) fixed point number.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes to array in BigEndian order.
            </summary>
            <param name="buffer">Byte array.</param>
            <param name="index">Start index.</param>
            <param name="count">Number bytes to read.</param>
            <returns>Number bytes that was read.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.UnicodeTrueTypeFont">
            <summary>
            Creator of Unicode TrueType type font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_nameString">
            <summary>
            String for generating font name.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_cmapPrefix">
            <summary>
            Cmap table's start prefix.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_cmapEndCodespaceRange">
            <summary>
            Cmap table's start suffix.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_cmapSuffix">
            <summary>
            Cmap table's end
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_cmapBeginRange">
            <summary>
            Cmap's begin range marker.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_cmapEndRange">
            <summary>
            Cmap's end range marker.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_cmapNextRangeValue">
            <summary>
            Cmap's next range default value
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_registry">
            <summary>
            Default registry's value
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_defWidthIndex">
            <summary>
            Index of the default symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.c_cidStreamLength">
            <summary>
            Length of Cid Stream
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_fontStream">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_filePath">
            <summary>
            Path to ttf file.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_size">
            <summary>
            Size of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_metrics">
            <summary>
            Font metrics.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_fontDictionary">
            <summary>
            Pdf primitive describing the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_descendantFont">
            <summary>
            Descendant font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_fontDescriptor">
            <summary>
            font descripter
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_fontProgram">
            <summary>
            Font program.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_cmap">
            <summary>
            Cmap stream.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_ttfReader">
            <summary>
            ttf reader object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_usedChars">
            <summary>
            Array of used chars.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_subsetName">
            <summary>
            Name of the font subset.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_ttfMetrics">
            <summary>
            Ttf metrics structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.UnicodeTrueTypeFont.m_type">
            <summary>
            Specifies the composite font types.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.UnicodeTrueTypeFont.Size">
            <summary>
            Gets size of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.UnicodeTrueTypeFont.Metrics">
            <summary>
            Gets font metrics.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.UnicodeTrueTypeFont.TtfReader">
            <summary>
            Gets ttf reader.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.UnicodeTrueTypeFont.FontFile">
            <summary>
            Gets path to the font file if the font was created from a file.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.UnicodeTrueTypeFont.TtfMetrics">
            <summary>
            Gets TtfMetrics structure.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.UnicodeTrueTypeFont.SkipFontEmbed">
            <summary>
            Get or set the font embed type.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.#ctor(System.IO.Stream,System.Single,Syncfusion.PdfExport.CompositeFontType)">
            <summary>
            creates a new object.
            </summary>
            <param name="font">Font object.</param>
            <param name="size">Font size.</param>
            <param name="type">Compisite type.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.#ctor(Syncfusion.PdfExport.UnicodeTrueTypeFont)">
            <summary>
            Creates a new object from a prototype object.
            </summary>
            <param name="prototype">Prototype object.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.SetSymbols(System.String)">
            <summary>
            Stores used symbols.
            </summary>
            <param name="text">String text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.SetSymbols(System.UInt16[])">
            <summary>
            Stores used symbols.
            </summary>
            <param name="glyphs">Glyphs, used by the line of the text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.GetInternals">
            <summary>
            Gets Pdf primitive reprsenting font.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.CreateInternals">
            <summary>
            Creates font internals.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.GetCharWidth(System.Char)">
            <summary>
            Returns width of the char symbol.
            </summary>
            <param name="charCode">Char symbol.</param>
            <returns>Width of the char symbol in universal units.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.GetLineWidth(System.String)">
            <summary>
            Returns width of the text line.
            </summary>
            <param name="line">String line.</param>
            <returns>Width of the char symbol in universal units.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.Initialize(System.IO.Stream)">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.InitializeMetrics">
            <summary>
            Initializes metrics.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.CreateFontProgram">
            <summary>
            Creates font program.
            </summary>
            <returns>Font program.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.GenerateFontProgram">
            <summary>
            Generates font program.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.CreateFontDictionary">
            <summary>
            Generates font dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.CreateDescendantFont">
            <summary>
            Creates descendant font.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.CreateCmap">
            <summary>
            Creates cmap.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.GenerateCmap">
            <summary>
            Creates cmap.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.CreateSystemInfo">
            <summary>
            Creates system info dictionary for CID font.
            </summary>
            <returns>Pdf primitive.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.CreateFontDescriptor">
            <summary>
            Creates font descriptor.
            </summary>
            <returns>Pdf primitive.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.FormatName(System.String)">
            <summary>
            Generates name of the font.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.GetFontName">
            <summary>
            Gets random string.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.GetDescendantWidth">
            <summary>
            Gets width description pad array for cid font.
            </summary>
            <returns>Width description pad array for cid font.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.ToHexString(System.Int32)">
            <summary>
            Converts integer of decimal system to hex integer.
            </summary>
            <param name="n">Integer to be converted.</param>
            <returns>Hex string.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.GetDescriptorFlags">
            <summary>
            Calculates flags for the font descriptor.
            </summary>
            <returns>Flags for the font descriptor.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.GetBoundBox">
            <summary>
            Calculates BoundBox of the descriptor.
            </summary>
            <returns>BoundBox of the descriptor.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.FontDictionaryBeginSave(System.Object,Syncfusion.PdfExport.SavePdfPrimitiveEventArgs)">
            <summary>
            Runs before font Dictionary will be saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="ars">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.FontProgramBeginSave(System.Object,Syncfusion.PdfExport.SavePdfPrimitiveEventArgs)">
            <summary>
            Runs before font program stream save.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="ars">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.CmapBeginSave(System.Object,Syncfusion.PdfExport.SavePdfPrimitiveEventArgs)">
            <summary>
            Runs before cmap will be saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="ars">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.UnicodeTrueTypeFont.DescendantFontBeginSave(System.Object,Syncfusion.PdfExport.SavePdfPrimitiveEventArgs)">
            <summary>
            Runs before font Dictionary will be saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="ars">Event arguments.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfFontStyle">
            <summary>
            Specifies style information applied to text.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontStyle.Regular">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontStyle.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontStyle.Underline">
            <summary>
            Represents the underline text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontStyle.Strikeout">
            <summary>
            Strikeout text.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfFontFamily">
            <summary>
            Indicates type of standard PDF fonts.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontFamily.Helvetica">
            <summary>
            Represents the Helvetica font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontFamily.Courier">
            <summary>
            Represents the Courier font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontFamily.TimesRoman">
            <summary>
            Represents the Times Roman font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontFamily.Symbol">
            <summary>
            Represents the Symbol font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFontFamily.ZapfDingbats">
            <summary>
            Represents the ZapfDingbats font.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCjkFontFamily">
            <summary>
            Specifies the type of CJK font.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Set the standard font.
            PdfFont font = new PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20);
            //Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, new PointF(0, 0));
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Set the standard font.
            Dim font As PdfFont = New PdfCjkStandardFont(PdfCjkFontFamily.HeiseiMinchoW3, 20)
            'Draw the text.
            graphics.DrawString("こんにちは世界", font, PdfBrushes.Black, New PointF(0, 0))
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCjkFontFamily.HanyangSystemsGothicMedium">
            <summary>
            Represents the Hanyang Systems Gothic Medium font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCjkFontFamily.HanyangSystemsShinMyeongJoMedium">
            <summary>
            Represents the Hanyang Systems shin myeong Jo Medium font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCjkFontFamily.HeiseiKakuGothicW5">
            <summary>
            Represents the Heisei kaku GothicW5 font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCjkFontFamily.HeiseiMinchoW3">
            <summary>
            Represents the Heisei MinchoW3 font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCjkFontFamily.MonotypeHeiMedium">
            <summary>
            Represents the Monotype Hei Medium font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCjkFontFamily.MonotypeSungLight">
            <summary>
            Represents the monotype sung Light font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCjkFontFamily.SinoTypeSongLight">
            <summary>
            Represents the sinotype song light font.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfWordWrapType">
            <summary>
            Specifies the types of text wrapping.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Set character spacing.
            format.CharacterSpacing = 1;
            //Set clip path.
            format.ClipPath = true;
            //Set line limit.
            format.LineLimit = true;
            //Set line spacing.
            format.LineSpacing = 1.1f;
            //Set measure trailing spaces.
            format.MeasureTrailingSpaces = true;
            //Set no clip
            format.NoClip = true;
            //Set paragraph indent.
            format.ParagraphIndent = 2.1f;
            //Set right to left.
            format.RightToLeft = false;
            //Set word spacing.
            format.WordSpacing = 1.5f;
            //Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word;
            //Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Set character spacing.
            format.CharacterSpacing = 1
            'Set clip path.
            format.ClipPath = True
            'Set line limit.
            format.LineLimit = True
            'Set line spacing.
            format.LineSpacing = 1.1F
            'Set measure trailing spaces.
            format.MeasureTrailingSpaces = True
            'Set no clip
            format.NoClip = True
            'Set paragraph indent.
            format.ParagraphIndent = 2.1F
            'Set right to left.
            format.RightToLeft = False
            'Set word spacing.
            format.WordSpacing = 1.5F
            'Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word
            'Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfWordWrapType.None">
            <summary>
            Text wrapping between lines when formatting within a rectangle is disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfWordWrapType.Word">
            <summary>
            Text is wrapped by words. If there is a word that is longer than bounds' width, this word is wrapped by characters.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfWordWrapType.WordOnly">
            <summary>
            Text is wrapped by words. If there is a word that is longer than bounds' width, it won't be wrapped at all
            and the process will be finished.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfWordWrapType.Character">
            <summary>
            Text is wrapped by characters. In this case the word at the end of the text line can be split.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfSubSuperScript">
            <summary>
            Specifies type of the SubSuperScript.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Set character spacing.
            format.CharacterSpacing = 1;
            //Set clip path.
            format.ClipPath = true;
            //Set line limit.
            format.LineLimit = true;
            //Set line spacing.
            format.LineSpacing = 1.1f;
            //Set measure trailing spaces.
            format.MeasureTrailingSpaces = true;
            //Set no clip
            format.NoClip = true;
            //Set paragraph indent.
            format.ParagraphIndent = 2.1f;
            //Set right to left.
            format.RightToLeft = false;
            //Set word spacing.
            format.WordSpacing = 1.5f;
            //Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word;
            //Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Set character spacing.
            format.CharacterSpacing = 1
            'Set clip path.
            format.ClipPath = True
            'Set line limit.
            format.LineLimit = True
            'Set line spacing.
            format.LineSpacing = 1.1F
            'Set measure trailing spaces.
            format.MeasureTrailingSpaces = True
            'Set no clip
            format.NoClip = True
            'Set paragraph indent.
            format.ParagraphIndent = 2.1F
            'Set right to left.
            format.RightToLeft = False
            'Set word spacing.
            format.WordSpacing = 1.5F
            'Set word wrap type.
            format.WordWrap = PdfWordWrapType.Word
            'Set sub/super script type.
            format.SubSuperScript = PdfSubSuperScript.SubScript
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfSubSuperScript.None">
            <summary>
            Specifies no subscript or superscript.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfSubSuperScript.SuperScript">
            <summary>
            Specifies superscript format.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfSubSuperScript.SubScript">
            <summary>
            Specifies subscript format.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfPlatformID">
            <summary>
            Ttf platform ID.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPlatformID.AppleUnicode">
            <summary>
            Apple platform.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPlatformID.Macintosh">
            <summary>
            Macintosh platform.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPlatformID.Iso">
            <summary>
            Iso platform.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPlatformID.Microsoft">
            <summary>
            Microsoft platform.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfNameID">
            <summary>
            Ttf Name ID.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameID.Copyright">
            <summary>
            The Copyright
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameID.FontFamily">
            <summary>
            The Font Family
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameID.FontSubFamily">
            <summary>
            The Font Sub Family
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameID.FontIdentifier">
            <summary>
            The Font Identifier
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameID.FontName">
            <summary>
            The Font Name
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameID.Version">
            <summary>
            The Version
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameID.PostScriptName">
            <summary>
            The PostScriptName
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameID.Trademark">
            <summary>
            The Trademark
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfCmapEncoding">
            <summary>
            Enumerator that implements CMAP encodings.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapEncoding.Unknown">
            <summary>
            Unknown encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapEncoding.Symbol">
            <summary>
            When building a symbol font for Windows.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapEncoding.Unicode">
            <summary>
            When building a Unicode font for Windows.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapEncoding.Macintosh">
            <summary>
            For font that will be used on a Macintosh.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapEncoding.UnicodeUCS4">
            <summary>
            When building a Unicode font for Windows (plane characters).
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfMicrosoftEncodingID">
            <summary>
            Microsoft encoding ID
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftEncodingID.Undefined">
            <summary>
            Undefined encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftEncodingID.Unicode">
            <summary>
            Unicode encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftEncodingID.UnicodeUCS4">
            <summary>
            Unicode UCS 4 encoding.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfMacintoshEncodingID">
            <summary>
            Macintosh encoding ID.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMacintoshEncodingID.Roman">
            <summary>
            Roman encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMacintoshEncodingID.Japanese">
            <summary>
            Japanese encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMacintoshEncodingID.Chinese">
            <summary>
            Chinese encoding.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfCmapFormat">
            <summary>
            Enumerator that implements CMAP formats.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapFormat.Apple">
            <summary>
            This is the Apple standard character to glyph index mapping table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapFormat.Microsoft">
            <summary>
            This is the Microsoft standard character to glyph index mapping table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapFormat.Trimmed">
            <summary>
            Format 6: Trimmed table mapping.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapFormat.MicrosoftExt">
            <summary>
            This is the Microsoft standard character-to-glyph-index mapping table for fonts supporting Unicode supplementary-plane characters (U+10000 to U+10FFFF).
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfCompositeGlyphFlags">
            <summary>
            ttf composite glyph flags.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.ARG_1_AND_2_ARE_WORDS">
            <summary>
            The ARG_1_AND_2_ARE_WORDS.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.ARGS_ARE_XY_VALUES">
            <summary>
            The ARGS_ARE_XY_VALUES.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.ROUND_XY_TO_GRID">
            <summary>
            The ROUND_XY_TO_GRID.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.WE_HAVE_A_SCALE">
            <summary>
            The WE_HAVE_A_SCALE.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.RESERVED">
            <summary>
            The RESERVED.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.MORE_COMPONENTS">
            <summary>
            The MORE_COMPONENTS.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.WE_HAVE_AN_X_AND_Y_SCALE">
            <summary>
            The WE_HAVE_AN_X_AND_Y_SCALE.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.WE_HAVE_A_TWO_BY_TWO">
            <summary>
            The WE_HAVE_A_TWO_BY_TWO.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.WE_HAVE_INSTRUCTIONS">
            <summary>
            The WE_HAVE_INSTRUCTIONS.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCompositeGlyphFlags.USE_MY_METRICS">
            <summary>
            The USE_MY_METRICS.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.FontEncoding">
            <summary>
            Character set encoding type of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontEncoding.Unknown">
            <summary>
            Unknown encoding
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontEncoding.StandardEncoding">
            <summary>
            Adobe standard Latin-text encoding
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontEncoding.MacRomanEncoding">
            <summary>
            Mac OS standard encoding
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontEncoding.MacExpertEncoding">
            <summary>
            An encoding for use with expert fonts
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontEncoding.WinAnsiEncoding">
            <summary>
            Windows Code Page 1252
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontEncoding.PDFDocEncoding">
            <summary>
            Encoding for text strings in a PDF document outside the document's content streams.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontEncoding.IdentityH">
            <summary>
            The horizontal identity mapping for 2-byte CIDs; may be used with CIDFonts using any
            Registry, Ordering, and Supplement values. It maps 2-byte character codes ranging from
            0 to 65,535 to the same 2-byte CID value, interpreted high-order byte first.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.FontDescriptorFlags">
            <summary>
            Enumerator that implements font descriptor flags.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontDescriptorFlags.FixedPitch">
            <summary>
            All glyphs have the same width (as opposed to proportional or variable-pitch
            fonts, which have different widths).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontDescriptorFlags.Serif">
            <summary>
            Glyphs have serifs, which are short strokes drawn at an angle on the top and
            bottom of glyph stems (as opposed to sans serif fonts, which do not).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontDescriptorFlags.Symbolic">
            <summary>
            Font contains glyphs outside the Adobe standard Latin character set. The
            flag and the nonsymbolic flag cannot both be set or both be clear.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontDescriptorFlags.Script">
            <summary>
            Glyphs resemble cursive handwriting.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontDescriptorFlags.Nonsymbolic">
            <summary>
            Font uses the Adobe standard Latin character set or a subset of it.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontDescriptorFlags.Italic">
            <summary>
            Glyphs have dominant vertical strokes that are slanted.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.FontDescriptorFlags.ForceBold">
            <summary>
            Bold font.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.CompositeFontType">
            <summary>
            Specifies the composite font types.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompositeFontType.Type0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.CompositeFontType.TrueType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfTableInfo">
            <summary>
            Holds offset for TTF table from beginning of TrueType font file.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableInfo.Offset">
            <summary>
            Gets or sets ofset from beginning of TrueType font file.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableInfo.Length">
            <summary>
            Gets or sets length of this table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableInfo.Checksum">
            <summary>
            Gets or sets table checksum.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfTableInfo.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.PdfExport.TtfTableInfo"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.PdfExport.PathPointType">
            <summary>
            Path point type
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PathPointType.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PathPointType.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PathPointType.Bezier3">
            <summary>
            Bezier3
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PathPointType.Bezier">
            <summary>
            Bezier
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PathPointType.PathTypeMask">
            <summary>
            PathTypeMask
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PathPointType.DashMode">
            <summary>
            DashMode
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PathPointType.PathMarker">
            <summary>
            PathMarker
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PathPointType.CloseSubpath">
            <summary>
            CloseSubpath
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfMetrics">
            <summary>
            ttf metrics.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.LineGap">
            <summary>
            Typographic line gap.
            Negative LineGap values are treated as DEF_TABLE_CHECKSUM.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.ContainsCFF">
            <summary>
            Gets or sets contains CFF.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.IsSymbol">
            <summary>
            Gets or sets value indicating if Symbol font is used.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.FontBox">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.IsFixedPitch">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.ItalicAngle">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.PostScriptName">
            <summary>
            Gets or sets post-script font name.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.FontFamily">
            <summary>
            Gets or sets font family name.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.CapHeight">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.Leading">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.MacAscent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.MacDescent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.WinDescent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.WinAscent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.StemV">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.WidthTable">
            <summary>
            Gets or sets widths table for the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.MacStyle">
            <summary>
            Regular: 0
            Bold: 1
            Italic: 2
            Bold Italic: 3
            Bit 0- bold (if set to 1)
            Bit 1- italic (if set to 1)
            Bits 2-15- reserved (set to 0).
            NOTE:
            Note that macStyle bits must agree with the 'OS/2' table fsSelection bits.
            The fsSelection bits are used over the macStyle bits in Microsoft Windows.
            The PANOSE values and 'post' table values are ignored for determining bold or italic fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.SubScriptSizeFactor">
            <summary>
            Subscript size factor.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMetrics.SuperscriptSizeFactor">
            <summary>
            Superscript size factor.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfMetrics.IsItalic">
            <summary>
            Gets a value indicating whether this instance is italic.
            </summary>
            <value><c>true</c> if this instance is italic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfMetrics.IsBold">
            <summary>
            Gets a value indicating whether this instance is bold.
            </summary>
            <value><c>true</c> if this instance is bold; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfNameTable">
            <summary>
            name ttf table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameTable.FormatSelector">
            <summary>
            Local variable to store Format Selector.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameTable.RecordsCount">
            <summary>
            Local variable to store Records Count.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameTable.Offset">
            <summary>
            Local variable to store Offset.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameTable.NameRecords">
            <summary>
            Local variable to store Name Records.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfNameRecord">
            <summary>
            Name record.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameRecord.PlatformID">
            <summary>
            The PlatformID.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameRecord.EncodingID">
            <summary>
            The EncodingID.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameRecord.LanguageID">
            <summary>
            The PlatformIDLanguageID
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameRecord.NameID">
            <summary>
            The NameID.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameRecord.Length">
            <summary>
            The Length.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameRecord.Offset">
            <summary>
            The Offset.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfNameRecord.Name">
            <summary>
            The Name.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfTableNames">
            <summary>
            Names of the tables.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.cmap">
            <summary>
            The cmap.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.glyf">
            <summary>
            The glyf.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.head">
            <summary>
            The head.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.hhea">
            <summary>
            The hhea.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.hmtx">
            <summary>
            The cmap.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.loca">
            <summary>
            The loca.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.maxp">
            <summary>
            The maxp.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.name">
            <summary>
            The cmap.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.post">
            <summary>
            The post.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.OS2">
            <summary>
            The OS2.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.CFF">
            <summary>
            The CFF.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.cvt">
            <summary>
            The cvt.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.fpgm">
            <summary>
            The fpgm.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTableNames.prep">
            <summary>
            The prep.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfHeadTable">
            <summary>
            Head table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.Modified">
            <summary>
            Modified: International date (8-byte field).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.Created">
            <summary>
            Created: International date (8-byte field).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.MagicNumber">
            <summary>
            MagicNumber: Set to 0x5F0F3CF5.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.CheckSumAdjustment">
            <summary>
            CheckSumAdjustment: To compute: set it to 0, sum the entire font as ULONG,
            then store 0xB1B0AFBA - sum.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.FontRevision">
            <summary>
            FontRevision: Set by font manufacturer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.Version">
            <summary>
            Table version number: 0x00010000 for version 1.0.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.XMin">
            <summary>
            Minimum x for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.YMin">
            <summary>
            Minimum y for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.UnitsPerEm">
            <summary>
            Valid range is from 16 to 16384.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.YMax">
            <summary>
            Maximum y for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.XMax">
            <summary>
            Maximum x for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.MacStyle">
            <summary>
            Regular: 0
            Bold: 1
            Italic: 2
            Bold Italic: 3
            Bit 0 - bold (if set to 1)
            Bit 1 - italic (if set to 1)
            Bits 2-15 - reserved (set to 0)
            NOTE:
            Note that macStyle bits must agree with the 'OS/2' table fsSelection bits.
            The fsSelection bits are used over the macStyle bits in Microsoft Windows.
            The PANOSE values and 'post' table values are ignored for determining bold or italic fonts.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.Flags">
            <summary>
            Bit 0 - baseline for font at y=0
            Bit 1 - left SideBearing at x=0
            Bit 2 - instructions may depend on point size
            Bit 3 - force ppem to integer values for all private scaler math; may use fractional ppem sizes if this bit is clear
            Bit 4 - instructions may alter advance width (the advance widths might not scale linearly)
            Note: All other bits must be zero.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.LowestRecPPEM">
            <summary>
            LowestRecPPEM: Smallest readable size in pixels.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.FontDirectionHint">
            <summary>
            FontDirectionHint:
            0   Fully mixed directional glyphs
            1   Only strongly left to right
            2   Like 1 but also contains neutrals
            -1   Only strongly right to left
            -2   Like -1 but also contains neutrals.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.IndexToLocFormat">
            <summary>
            0 for short offsets, 1 for long.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHeadTable.GlyphDataFormat">
            <summary>
            0 for current format.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfHorizontalHeaderTable">
            <summary>
            This table contains information for horizontal layout.
            The values in the minRightSidebearing, minLeftSideBearing, and xMaxExtent should be computed
            using only glyphs that have contours.
            Glyphs with no contours should be ignored for the purpose of these calculations.
            All reserved areas must be set to 0.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.Version">
            <summary>
            Version.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.Ascender">
            <summary>
            Typographic ascent.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.AdvanceWidthMax">
            <summary>
            Maximum advance width value in HTML table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.Descender">
            <summary>
            Typographic descent.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.NumberOfHMetrics">
            <summary>
            Number of hMetric entries in HTML table;
            may be smaller than the total number of glyphs in the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.LineGap">
            <summary>
            Typographic line gap. Negative LineGap values are treated as DEF_TABLE_CHECKSUM
            in Windows 3.1, System 6, and System 7.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.MinLeftSideBearing">
            <summary>
            Minimum left SideBearing value in HTML table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.MinRightSideBearing">
            <summary>
            Minimum right SideBearing value; calculated as Min(aw - lsb - (xMax - xMin)).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.XMaxExtent">
            <summary>
            Max(lsb + (xMax - xMin)).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.CaretSlopeRise">
            <summary>
            Used to calculate the slope of the cursor (rise/run); 1 for vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.CaretSlopeRun">
            <summary>
            0 for vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfHorizontalHeaderTable.MetricDataFormat">
            <summary>
            0 for current format.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfOS2Table">
            <summary>
            The OS/2 table consists of a set of metrics that are required by Windows and OS/2.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.Version">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.XAvgCharWidth">
            <summary>
            The Average Character Width parameter specifies
            the arithmetic average of the escapement (width)
            of all of the 26 lowercase letters a through z of the Latin alphabet
            and the space character. If any of the 26 lowercase letters are not present,
            this parameter should equal the weighted average of all glyphs in the font.
            For non-UGL (platform 3, encoding 0) fonts, use the unweighted average.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UsWeightClass">
            <summary>
            Indicates the visual weight (degree of blackness or thickness of strokes)
            of the characters in the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UsWidthClass">
            <summary>
            Indicates a relative change from the normal aspect ratio (width to height ratio)
            as specified by a font designer for the glyphs in a font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.FsType">
            <summary>
            Indicates font embedding licensing rights for the font.
            Embeddable fonts may be stored in a document.
            When a document with embedded fonts is opened on a system that does not have the font installed
            (the remote system), the embedded font may be loaded for temporary (and in some cases, permanent)
            use on that system by an embedding-aware application.
            Embedding licensing rights are granted by the vendor of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.YSubscriptXSize">
            <summary>
            The recommended horizontal size in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.YSubscriptYSize">
            <summary>
            The recommended vertical size in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.YSubscriptXOffset">
            <summary>
            The recommended horizontal offset in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.YSubscriptYOffset">
            <summary>
            The recommended vertical offset in font design units from the baseline for subscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.ySuperscriptXSize">
            <summary>
            The recommended horizontal size in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.YSuperscriptYSize">
            <summary>
            The recommended vertical size in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.YSuperscriptXOffset">
            <summary>
            The recommended horizontal offset in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.YSuperscriptYOffset">
            <summary>
            The recommended vertical offset in font design units from the baseline for superscripts for this font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.YStrikeoutSize">
            <summary>
            Width of the strikeout stroke in font design units.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.YStrikeoutPosition">
            <summary>
            The position of the strikeout stroke relative to the baseline in font design units.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.SFamilyClass">
            <summary>
            This parameter is a classification of font-family design.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.Panose">
            <summary>
            This 10 byte series of numbers are used to describe the visual characteristics
            of a given typeface.  These characteristics are then used to associate the font with
            other fonts of similar appearance having different names. The variables for each digit are listed below.
            The specifications for each variable can be obtained in the specification
            PANOSE v2.0 Numerical Evaluation from Microsoft or Elseware Corporation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UlUnicodeRange1">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UlUnicodeRange2">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UlUnicodeRange3">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UlUnicodeRange4">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.AchVendID">
            <summary>
            The four character identifier for the vendor of the given type face.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.FsSelection">
            <summary>
            Information concerning the nature of the font patterns.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UsFirstCharIndex">
            <summary>
            The minimum Unicode index (character code) in this font,
            according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.
            For most fonts supporting Win-ANSI or other character sets, this value would be 0x0020.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UsLastCharIndex">
            <summary>
            usLastCharIndex: The maximum Unicode index (character code) in this font,
            according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.
            This value depends on which character sets the font supports.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.STypoAscender">
            <summary>
            The typographic ascender for this font.
            Remember that this is not the same as the Ascender value in the 'hhea' table,
            which Apple defines in a far different manner.
            DEF_TABLE_OFFSET good source for usTypoAscender is the Ascender value from an AFM file.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.STypoDescender">
            <summary>
            The typographic descender for this font.
            Remember that this is not the same as the Descender value in the 'hhea' table,
            which Apple defines in a far different manner.
            DEF_TABLE_OFFSET good source for usTypoDescender is the Descender value from an AFM file.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.STypoLineGap">
            <summary>
            The typographic line gap for this font.
            Remember that this is not the same as the LineGap value in the 'hhea' table,
            which Apple defines in a far different manner.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UsWinAscent">
            <summary>
            The ascender metric for Windows.
            This too is distinct from Apple's Ascender value and from the usTypoAscender values.
            usWinAscent is computed as the yMax for all characters in the Windows ANSI character set.
            usTypoAscent is used to compute the Windows font height and default line spacing.
            For platform 3 encoding 0 fonts, it is the same as yMax.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UsWinDescent">
            <summary>
            The descender metric for Windows.
            This too is distinct from Apple's Descender value and from the usTypoDescender values.
            usWinDescent is computed as the -yMin for all characters in the Windows ANSI character set.
            usTypoAscent is used to compute the Windows font height and default line spacing.
            For platform 3 encoding 0 fonts, it is the same as -yMin.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UlCodePageRange1">
            <summary>
            This field is used to specify the code pages encompassed
            by the font file in the 'cmap' subtable for platform 3, encoding ID 1 (Microsoft platform).
            If the font file is encoding ID 0, then the Symbol Character Set bit should be set.
            If the bit is set (1) then the code page is considered functional.
            If the bit is clear (0) then the code page is not considered functional.
            Each of the bits is treated as an independent flag and the bits can be set in any combination.
            The determination of "functional" is left up to the font designer,
            although character set selection should attempt to be functional by code pages if at all possible.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UlCodePageRange2">
            <summary>
            This field is used to specify the code pages encompassed
            by the font file in the 'cmap' subtable for platform 3, encoding ID 1 (Microsoft platform).
            If the font file is encoding ID 0, then the Symbol Character Set bit should be set.
            If the bit is set (1) then the code page is considered functional.
            If the bit is clear (0) then the code page is not considered functional.
            Each of the bits is treated as an independent flag and the bits can be set in any combination.
            The determination of "functional" is left up to the font designer,
            although character set selection should attempt to be functional by code pages if at all possible.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.SxHeight">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.SCapHeight">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UsDefaultChar">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UsBreakChar">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfOS2Table.UsMaxContext">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfPostTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPostTable.FormatType">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPostTable.ItalicAngle">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPostTable.UnderlinePosition">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPostTable.UnderlineThickness">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPostTable.IsFixedPitch">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPostTable.MinMemType42">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPostTable.MaxMemType42">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPostTable.MinMemType1">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfPostTable.MaxMemType1">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfLongHorMertric">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfLongHorMertric.AdvanceWidth">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfLongHorMertric.Lsb">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfCmapTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapTable.TablesCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfCmapSubTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapSubTable.PlatformID">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapSubTable.EncodingID">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfCmapSubTable.Offset">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfAppleCmapSubTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfAppleCmapSubTable.Format">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfAppleCmapSubTable.Length">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfAppleCmapSubTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfTrimmedCmapSubTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTrimmedCmapSubTable.Format">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTrimmedCmapSubTable.Length">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTrimmedCmapSubTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTrimmedCmapSubTable.FirstCode">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfTrimmedCmapSubTable.EntryCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.Format">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.Length">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.SegCountX2">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.SearchRange">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.EntrySelector">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.RangeShift">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.EndCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.ReservedPad">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.StartCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.IdDelta">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.IdRangeOffset">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfMicrosoftCmapSubTable.GlyphID">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfGlyphInfo">
            <summary>
            Holds glyph info and its width of character.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfGlyphInfo.Index">
            <summary>
            Holds glyph index.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfGlyphInfo.Width">
            <summary>
            Holds character's width.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfGlyphInfo.CharCode">
            <summary>
            Code of the char symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.TtfGlyphInfo.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.PdfExport.TtfGlyphInfo"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.PdfExport.TtfGlyphInfo.CompareTo(System.Object)">
            <summary>
            Compares two WidthDescriptor objects.
            </summary>
            <param name="obj">Another object for comparing.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfLocaTable">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfLocaTable.Offsets">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TtfGlyphHeader">
            <summary>
            Ttf structure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfGlyphHeader.numberOfContours">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfGlyphHeader.XMin">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfGlyphHeader.YMin">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfGlyphHeader.XMax">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TtfGlyphHeader.YMax">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.JpegDecoder.c_SoiMarker">
            <summary>
            Start of image marker.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.JpegDecoder.c_JfifMarker">
            <summary>
            JFIF marker.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.JpegDecoder.c_SosMarker">
            <summary>
            Start of scan marker.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.JpegDecoder.c_EoiMarker">
            <summary>
            End of image marker.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.JpegDecoder.c_Sof0Marker">
            <summary>
            Start of file markers.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.JpegDecoder.m_noOfComponents">
            <summary>
            indicates the colorspace for image
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.JpegDecoder.GetColorSpace">
            <summary>
            Get ColorSpace for JPG/JPEG image
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.PdfExport.PngDecoder.PngHeader.Width">
            <summary>
            Indicates the width of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PngDecoder.PngHeader.Height">
            <summary>
            Indicates the height of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PngDecoder.PngHeader.ColorType">
            <summary>
            Indicates the Png image type.
            <remarks>Possible values : 0,2,3,4 and 6.</remarks>
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PngDecoder.PngHeader.Compression">
            <summary>
            Indicates the type of compression.
            <remarks>
            0 - Zlib Compression
            </remarks>
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PngDecoder.PngHeader.BitDepth">
            <summary>
            Indicates the number of bits per sample or per palette index.
            <remarks>Valid values are : 1,2,4,8 and 16.</remarks>
            |-----------------------------------------|
            | ColorType | BitDepth   | ImageType      |
            |-----------------------------------------|
            |     0     | 1,2,4,8,16 | GrayScale      |
            |     2     | 8,16       | TrueColor      |
            |     3     | 1,2,4,8    | Indexed PLTE   |
            |     4     | 8,16       | GrayScaleAlpha |
            |     6     | 8,16       | TrueColorAlpha |
            |------------------------------------------
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PngDecoder.PngHeader.Filter">
            <summary>
            Indicates the preprocessing method applied to the image data before compression.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PngDecoder.PngHeader.Interlace">
            <summary>
            Indicates the transmission order of the image data.
            <remarks>Possible values : 0 and 1</remarks>
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.StreamExtensions">
            <summary>
            Stream extentions
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StreamExtensions.ReadUInt32(System.IO.Stream)">
            <summary>
            Read Unsigned Int 32
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StreamExtensions.ReadString(System.IO.Stream,System.Int32)">
            <summary>
            Read String
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StreamExtensions.Reset(System.IO.Stream)">
            <summary>
            Reset position
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StreamExtensions.Skip(System.IO.Stream,System.Int32)">
            <summary>
            Skip read
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StreamExtensions.ReadByte(System.IO.Stream,System.Int32)">
            <summary>
            Read byte
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StreamExtensions.IsJpeg(System.IO.Stream)">
            <summary>
            Detect JPEG
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.StreamExtensions.IsPng(System.IO.Stream)">
            <summary>
            Detect PNG
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfBitmap">
            <summary>
            Represents the bitmap images.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBitmap.#ctor(System.IO.Stream)">
            <summary>
            Initialize an instance of <see cref="T:Syncfusion.PdfExport.PdfBitmap"/> class
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBitmap.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBitmap.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBitmap.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBitmap.MarkDisposed">
            <summary>
            Disposes the specified disposing.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBitmap.Save">
            <summary>
            Saves the image into stream.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfBitmap.SetColorSpace">
            <summary>
            Sets the color space.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfImage">
            <summary>
            Represents the base class for images.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfImage.Height">
            <summary>
            Image height
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfImage.Width">
            <summary>
            Image width
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfImage.HorizontalResolution">
            <summary>
            Image horizontal resolution
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfImage.VerticalResolution">
            <summary>
            Image vertical resolution
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfImage.PhysicalDimension">
            <summary>
            Image physical dimension
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfImage.JpegOrientationAngle">
            <summary>
            JPEG image orientation angle
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfImage.ImageStream">
            <summary>
            Image stream
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfImage.FromStream(System.IO.Stream)">
            <summary>
            Creates PdfImage from stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Returns a created PdfImage object.</returns>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfImage.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfImage.Save">
            <summary>
            Saves the image into stream.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfImage.DrawInternal(Syncfusion.PdfExport.PdfGraphics)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfImage.GetBoundsInternal">
            <summary>
            Gets bounds of image.
            </summary>
            <remarks>The DPI is standard, not image DPI.</remarks>
            <returns>Bounds of image.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfColor">
            <summary>
            Implements structures and routines working with color.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create PDF color.
            PdfColor color = new PdfColor(Color.Red);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(color);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create PDF color.
            Dim color As New PdfColor(Color.Red)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.s_rgbStrings">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds RGB colors converted into strings.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.s_grayStringsSroke">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds Grayscale colors converted into strings for stroking.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.s_grayStringsFill">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds Grayscale colors converted into strings for filling.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.s_emptyColor">
             <property name="flag" value="Finished" />
            
             <summary>
             Holds the system-wide empty PDF color.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.MaxColourChannelValue">
             <property name="flag" value="Finished" />
            
             <summary>
             Max value of color channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_red">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Red channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_cyan">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Cyan channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_green">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Green channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_magenta">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Magenta channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_blue">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Blue channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_yellow">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Yellow channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_black">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Black channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_gray">
             <property name="flag" value="Finished" />
            
             <summary>
             Value of Gray channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_alpha">
             <property name="flag" value="Finished" />
            
             <summary>
             Alpha channel.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColor.m_isFilled">
             <property name="flag" value="Finished" />
            
             <summary>
             Shows if the color is empty.
             </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.Empty">
            <summary>
            Gets a null color.
            </summary>
            <value>The empty.</value>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Gets an empty PDF color instance.
            PdfColor color = PdfColor.Empty;
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(color);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Gets an empty PDF color instance.
            Dim color As PdfColor = PdfColor.Empty
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.IsEmpty">
            <summary>
            Gets whether the PDFColor is Empty or not.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(Color.Empty);
            //Check the color.
            bool isEmpty = pdfColor.IsEmpty;
            Console.WriteLine("The Color is " + (isEmpty? "empty" : "not empty"));
            </code>
            <code lang="VB.NET">
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(Color.Empty)
            'Check the color.
            Dim isEmpty As Boolean = pdfColor.IsEmpty
            Console.WriteLine("The Color is " + (If(isEmpty, "empty", "not empty")))
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.B">
            <summary>
            Gets or sets Blue channel value.
            </summary>
            <value>The B.</value>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("SlateBlue");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the blue channel value.   
            string text = "The blue channel value is " + pdfColor.B;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("SlateBlue")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the blue channel value.   
            Dim text As String = "The blue channel value is " + pdfColor.B
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.Blue">
            <summary>
            Gets the blue color
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("Blue");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the blue color value.   
            string text = "The blue color value is " + pdfColor.Blue;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("Blue")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the blue color value.   
            Dim text As String = "The blue color value is " + pdfColor.Blue
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.C">
            <summary>
            Gets or sets Cyan channel value.
            </summary>
            <value>The C.</value>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("SlateBlue");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the cyan channel value. 
            string text = "The cyan channel value is " + pdfColor.C;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("SlateBlue")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the cyan channel value.   
            Dim text As String = "The cyan channel value is " + pdfColor.C
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.G">
            <summary>
            Gets or sets Green channel value.
            </summary>
            <value>The G.</value>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("LawnGreen");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the green channel value.   
            string text = "The green channel value is " + pdfColor.G;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("LawnGreen")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the green channel value.   
            Dim text As String = "The green channel value is " + pdfColor.G
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.Green">
            <summary>
            Gets the green value
            </summary>
            <value>The green.</value>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("Green");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the green color value.   
            string text = "The green color value is " + pdfColor.Green;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("Green")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the green color value.   
            Dim text As String = "The green color value is " + pdfColor.Green
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.Gray">
            <summary>
            Gets or sets Gray channel value.
            </summary>
            <value>The gray.</value>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("DarkSlateGray");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the gray channel value.   
            string text = "The gray channel value is " + pdfColor.Gray;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("DarkSlateGray")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the gray channel value.   
            Dim text As String = "The gray channel value is " + pdfColor.Gray
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.K">
            <summary>
            Gets or sets Black channel value.
            </summary>
            <value>The K.</value>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("DarkSlateGray");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the black channel value.   
            string text = "The black channel value is " + pdfColor.K;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("DarkSlateGray")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the black channel value.   
            Dim text As String = "The black channel value is " + pdfColor.K
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.M">
            <summary>
            Gets or sets Magenta channel value.
            </summary>
            <value>The M.</value>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("DarkSlateGray");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the megenta channel value.   
            string text = "The megenta channel value is " + pdfColor.M;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("DarkSlateGray")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the megenta channel value.   
            Dim text As String = "The megenta channel value is " + pdfColor.M
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.R">
            <summary>
            Gets or sets Red channel value.
            </summary>
            <value>The R.</value>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("Red");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the red channel value.   
            string text = "The red channel value is " + pdfColor.R;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("Red")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the red channel value.   
            Dim text As String = "The red channel value is " + pdfColor.R
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.Red">
            <summary>
            Gets the red color
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("Red");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the red color value.   
            string text = "The red color value is " + pdfColor.Red;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("Red")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the red color value.   
            Dim text As String = "The red color value is " + pdfColor.Red
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.Y">
            <summary>
            Gets or sets Yellow channel value.
            </summary>
            <value>The Y.</value>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create color
            Color color = Color.FromName("YellowGreen");
            //Create a new PDF color instance.
            PdfColor pdfColor = new PdfColor(color);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(pdfColor);
            //Get the yellow channel value.   
            string text = "The yellow channel value is " + pdfColor.Y;
            //Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create color
            Dim color As Color = Color.FromName("YellowGreen")
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(color)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
            'Get the yellow channel value.   
            Dim text As String = "The yellow channel value is " + pdfColor.Y
            'Draw string to PDF page.
            graphics.DrawString(text, font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfColor.A">
             <property name="flag" value="Finished" />
            
             <summary>
             Gets or sets Alpha channel value.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF Document.
             PdfDocument doc = new PdfDocument();
             //Add pages to the document
             PdfPage page = doc.Pages.Add();
             //Create PDF graphics for the page
             PdfGraphics graphics = page.Graphics;
             //Create PDF font.
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
             //Create color
             Color color = Color.FromName("DarkSlateGray");
             //Create a new PDF color instance.
             PdfColor pdfColor = new PdfColor(color);
             //Create new PDF brush.
             PdfBrush brush = new PdfSolidBrush(pdfColor);
             //Get the alpha channel value.   
             string text = "The alpha channel value is " + pdfColor.A;
             //Draw string to PDF page.
             graphics.DrawString(text, font, brush, PointF.Empty);
             //Save the document
             doc.Save("Output.pdf");
             //Close the document
             doc.Close(true);
             </code>
             <code lang="VB.NET">
             ' Create a PDF Document.
             Dim doc As New PdfDocument()
             'Add pages to the document
             Dim page As PdfPage = doc.Pages.Add()
             'Create PDF graphics for the page
             Dim graphics As PdfGraphics = page.Graphics
             'Create PDF font.
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
             'Create color
             Dim color As Color = Color.FromName("DarkSlateGray")
             'Create a new PDF color instance.
             Dim pdfColor As New PdfColor(color)
             'Create new PDF brush.
             Dim brush As PdfBrush = New PdfSolidBrush(pdfColor)
             'Get the alpha channel value.   
             Dim text As String = "The alpha channel value is " + pdfColor.A
             'Draw string to PDF page.
             graphics.DrawString(text, font, brush, PointF.Empty)
             'Save the document
             doc.Save("Output.pdf")
             'Close the document
             doc.Close(True)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.#ctor(Syncfusion.PdfExport.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfColor"/> class with source color 
            </summary>
            <param name="color">Source color object.</param>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create PDF color.
            PdfColor color = new PdfColor(new PdfColor(Color.Green));
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(color);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create PDF color.
            Dim color As New PdfColor(New PdfColor(Color.Green))
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfColor"/> class with <see cref="T:System.Drawing.Color"/> object
            </summary>
            <param name="color">Source color object.</param>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create PDF color.
            PdfColor color = new PdfColor(Color.Red);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(color);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create PDF color.
            Dim color As New PdfColor(Color.Red)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfColor"/> class with gray value
            </summary>
            <param name="gray">Gray value.</param>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create PDF color.
            PdfColor color = new PdfColor(0.5f);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(color);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create PDF color.
            Dim color As New PdfColor(0.5F)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfColor"/> class with Red,Green and Blue values.
            </summary>
            <param name="red">Red channel value.</param>
            <param name="green">Green channel value.</param>
            <param name="blue">Blue channel value.</param>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create PDF color.
            PdfColor color = new PdfColor(200, 120, 80);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(color);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create PDF color.
            Dim color As New PdfColor(200, 120, 80)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
             <property name="flag" value="Finished" />
            
             <summary>
             Creates new object.
             </summary>
             <param name="a">Alpha channel.</param>
             <param name="red">Red channel value.</param>
             <param name="green">Green channel value.</param>
             <param name="blue">Blue channel value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfColor"/> class with Cyan,Magenta,Yellow and Black channels.
            </summary>
            <param name="cyan">Cyan channel value.</param>
            <param name="magenta">Magenta channel value.</param>
            <param name="yellow">Yellow channel value.</param>
            <param name="black">Black channel value.</param>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create PDF color.
            PdfColor color = new PdfColor(200, 120, 80, 40);
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(color);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create PDF color.
            Dim color As New PdfColor(200, 120, 80, 40)
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.ToArgb">
            <summary>
            Creates the Alpha ,Red ,Green, and Blue value of this PDFColor structure.
            </summary>
            <returns>ARGB value.</returns>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            //Create new PDF color.
            PdfColor color1 = new PdfColor(Color.LightBlue);
            //Get the ARGB value.
            int argb = color1.ToArgb();
            Console.WriteLine("ARGB: "+ argb); 
            </code>
            <code lang="VB.NET">
            'Create new PDF color.
            Dim color1 As New PdfColor(Color.LightBlue)
            'Get the ARGB value.
            Dim argb As Integer = color1.ToArgb()
            Console.WriteLine("ARGB: " + argb)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.op_Implicit(System.Drawing.Color)~Syncfusion.PdfExport.PdfColor">
            <summary>
            Implicit operator.
            </summary>
            <param name="color">System.Drawing.Color.</param>
            <returns>PDFColor.</returns>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create PDF color.
            PdfColor color = System.Drawing.Color.Red;
            //Create new PDF brush.
            PdfBrush brush = new PdfSolidBrush(color);
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create PDF color.
            Dim color As PdfColor = System.Drawing.Color.Red
            'Create new PDF brush.
            Dim brush As PdfBrush = New PdfSolidBrush(color)
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, brush, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.op_Implicit(Syncfusion.PdfExport.PdfColor)~System.Drawing.Color">
            <summary>
            Implicit operator.
            </summary>
            <param name="color">System.Drawing.Color.</param>
            <returns>PDFColor.</returns>
            <property name="flag" value="Finished"/>
            <example><code lang="C#">
             //Create a new PDF color instance.
             PdfColor pdfColor = new PdfColor(200, 120, 80);
             //Convert PDF color to System color.
             System.Drawing.Color systemColor = pdfColor;
             Console.WriteLine("Red: " + systemColor.R + " Green: " + systemColor.G + " Blue: " + systemColor.B);
            </code>
            <code lang="VB.NET">
            'Create a new PDF color instance.
            Dim pdfColor As New PdfColor(200, 120, 80)
            'Convert PDF color to System color.
            Dim systemColor As System.Drawing.Color = pdfColor
            Console.WriteLine("Red: " + systemColor.R + " Green: " + systemColor.G + " Blue: " + systemColor.B)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.op_Equality(Syncfusion.PdfExport.PdfColor,Syncfusion.PdfExport.PdfColor)">
            <summary>
            Operator ==.
            </summary>
            <param name="colour1">The color 1.</param>
            <param name="colour2">The color 2.</param>
            <returns>
            True if color 1 is equal to color 2; otherwise False.
            </returns>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            //Create new PDF color.
            PdfColor color1 = new PdfColor(Color.Red);
            PdfColor color2 = new PdfColor(255, 0, 0);
            //Check both the color are equal.
            if (color1 == color2)
            Console.WriteLine("Both the colors are same.");        
            </code>
            <code lang="VB.NET">
            'Create new PDF color.
            Dim color1 As New PdfColor(Color.Red)
            Dim color2 As New PdfColor(255, 0, 0)
            'Check both the color are equal.
            If color1 = color2 Then
            Console.WriteLine("Both the colors are same.")      
            End If
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.op_Inequality(Syncfusion.PdfExport.PdfColor,Syncfusion.PdfExport.PdfColor)">
            <summary>
            Operator !=.
            </summary>
            <param name="colour1">The color 1.</param>
            <param name="colour2">The color 2.</param>
            <returns>
            True if color 1 is not equal to color 2; otherwise False.
            </returns>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="C#">
            //Create new PDF color.
            PdfColor color1 = new PdfColor(Color.Red);
            PdfColor color2 = new PdfColor(250, 0, 0);
            //Check both the color are equal.
            if (color1 != color2)
            Console.WriteLine("The colors are not same.");        
            </code>
            <code lang="VB.NET">
            'Create new PDF color.
            Dim color1 As New PdfColor(Color.Red)
            Dim color2 As New PdfColor(250, 0, 0)
            'Check both the color are equal.
            If color1 = color2 Then
            Console.WriteLine("The colors are not same.")      
            End If
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to
            compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal
            to the current <see cref="T:System.Object"/>; otherwise -
            False.
            </returns>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="c#">
            //Create new PDF color.
            PdfColor color1 = new PdfColor(Color.Red);
            PdfColor color2 = new PdfColor(253, 0, 0);
            //Check both the color are equal.
            if(color1.Equals(color2))
            Console.WriteLine("Both the colors are same.");  
            </code>
            <code lang="VB.NET">
            'Create new PDF color.
            Dim color1 As New PdfColor(Color.Red)
            Dim color2 As New PdfColor(253, 0, 0)
            'Check both the color are equal.
            If color1.Equals(color2) Then
            Console.WriteLine("Both the colors are same.")
            End If
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.Equals(Syncfusion.PdfExport.PdfColor)">
            <summary>
            Determines if the specified color is equal to this one.
            </summary>
            <param name="colour">The color.</param>
            <returns>
            True if the color is equal; otherwise - False.
            </returns>
            <property name="flag" value="Finished"/>
            <example>
            <code lang="c#">
            //Create new PDF color.
            PdfColor color1 = new PdfColor(Color.Red);
            PdfColor color2 = new PdfColor(253, 0, 0);
            //Check both the color are equal.
            if(color1.Equals(color2))
            Console.WriteLine("Both the colors are same.");  
            </code>
            <code lang="VB.NET">
            'Create new PDF color.
            Dim color1 As New PdfColor(Color.Red)
            Dim color2 As New PdfColor(253, 0, 0)
            'Check both the color are equal.
            If color1.Equals(color2) Then
            Console.WriteLine("Both the colors are same.")
            End If
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for
            use in hashing algorithms and data structures like a hash
            table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.RGBToString(System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Sets RGB color.
             </summary>
             <param name="ifStroking">If color stroking.</param>
             <returns>
             Result string.
             </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.GrayscaleToString(System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Sets gray color.
             </summary>
             <param name="ifStroking">If color stroking.</param>
             <returns>
             Result string.
             </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.CMYKToString(System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Sets CMYK color.
             </summary>
             <param name="ifStroking">If color stroking.</param>
             <returns>
             Result string.
             </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.ToString(Syncfusion.PdfExport.PdfColorSpace,System.Boolean)">
             <property name="flag" value="Finished" />
            
             <summary>
             Converts PDFColor to PDF string representation.
             </summary>
             <param name="colorSpace">Color space.</param>
             <param name="stroke">If color stroking.</param>
             <returns>
             Result string.
             </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.AssignCMYK(System.Byte,System.Byte,System.Byte)">
             <property name="flag" value="Finished" />
            
             <summary>
             Converts RGB to CMYK.
             </summary>
             <param name="r">Red channel value.</param>
             <param name="g">Green channel value.</param>
             <param name="b">Blue channel value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.AssignRGB(System.Single,System.Single,System.Single,System.Single)">
             <property name="flag" value="Finished" />
            
             <summary>
             Converts CMYK to RGB.
             </summary>
             <param name="cyan">Cyan channel value.</param>
             <param name="magenta">Magenta channel value.</param>
             <param name="yellow">Yellow channel value.</param>
             <param name="black">Black channel value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.CompareColours(System.Drawing.Color,System.Drawing.Color)">
             <property name="flag" value="Finished" />
            
             <summary>
             Compares colors.
             </summary>
             <param name="color1">The color 1.</param>
             <param name="color2">The color 2.</param>
             <returns>
             True if colors are identical; otherwise - False.
             </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.ToArray">
            <summary>
            Converts colour to a PDF array of R, G and B float values.
            </summary>
            <returns>Filled PdfArray object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfColor.ToArray(Syncfusion.PdfExport.PdfColorSpace)">
            <summary>
            Converts colour to a PDF array.
            </summary>
            <param name="colorSpace">The color space.</param>
            <returns>The well filled PdfArray object.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfGraphics">
            <summary>
            Represents a graphics context of the objects.
            It's used for performing all the graphics operations.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Draw string to PDF page graphics.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Draw the rectangle to PDF page graphics.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(0, 20, 200, 100));
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Draw string to PDF page graphics.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Draw the rectangle to PDF page graphics.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(0, 20, 200, 100))
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.PathTypesValuesMask">
            <summary>
            Specifies the mask of path type values.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_isEMF">
            <summary>
            Check whether it is an emf call
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_isEMFPlus">
            <summary>
            Check whether it is an emf plus call
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_isUseFontSize">
            <summary>
            check whether to use font size to calculate the shift
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_isBaselineFormat">
            <summary>
            Check whether it is an emf call
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_streamWriter">
            <summary>
            Represents the Stream writer object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_getResources">
            <summary>
            Represents the Resource container for the graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_canvasSize">
            <summary>
            Represents the Size of the canvas.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_clipBounds">
            <summary>
            Represents the size of the canvas reduced by margins and templates.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_bStateSaved">
            <summary>
            Represents the state, whether it is saved or not.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_currentPen">
            <summary>
            Represents the Current pen.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_currentBrush">
            <summary>
            Represents the Current brush.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_currentFont">
            <summary>
            Represents the Current font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_currentColorSpace">
            <summary>
            Represents the Current color space.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_bCSInitialized">
            <summary>
            Indicates whether color space was initialized.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_graphicsState">
            <summary>
            Stack of the graphics states.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_matrix">
            <summary>
            The transformation matrix monitoring all changes with CTM.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_previousTextRenderingMode">
            <summary>
            Stores previous rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_previousCharacterSpacing">
            <summary>
            Previous character spacing value or 0.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_previousWordSpacing">
            <summary>
            Previous word spacing value or 0.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_previousTextScaling">
            <summary>
            The previously used text scaling value.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_trasparencies">
            <summary>
            Holds transparencies used in the graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_currentStringFormat">
            <summary>
            Current string format.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_layer">
            <summary>
            Internal variable to store layer on which this graphics lays.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_automaticFields">
            <summary>
            Internal variable to store collection of automatic fields.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_stringLayoutResult">
            <summary>
            Internal variable to store layout result after drawing string.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_transparencyObject">
            <summary>
            Indicates whether the object had trasparency.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.s_transparencyLock">
            <summary>
            Helps to lock s_mask to avoid race conditions.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.s_syncLockTemplate">
            <summary>
            Helps to lock DrawTemplate in multi threading
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_emfScalingFactor">
            <summary>
            Emf Text Scaling Factor
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_isEmfTextScaled">
            <summary>
            Check whether it is an emf Text Matrix
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.isImageOptimized">
            <summary>
            Identifying the Optimized image
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_isNormalRender">
            <summary>
            To check wihether its a direct text rendering.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.lastDocumentCS">
            <summary>
            To store the previous document color spaace.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.lastGraphicsCS">
            <summary>
            To store the previous graphics color spaace.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.colorSpaceChanged">
            <summary>
            To check whether the last color space of document and garphics is saved.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_textRenderingMode">
            <summary>
            Stores Text rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphics.m_isTextRenderingSet">
            <summary>
            Indicates whether the text rendering mode is set.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.Size">
            <summary>
            Gets the size of the canvas.
            </summary>
            <remarks>Usually, this value is equal to the size of the object this graphics belongs to.</remarks>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Get the graphics canvas size.
            SizeF canvasSize = graphics.Size;
            //Draw string to PDF page graphics.
            graphics.DrawString("Canvas size: " + canvasSize.ToString(), font, PdfBrushes.Black, PointF.Empty);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Get the graphics canvas size.
            Dim canvasSize As SizeF = graphics.Size
            'Draw string to PDF page graphics.
            graphics.DrawString("Canvas size: " + canvasSize.ToString(), font, PdfBrushes.Black, PointF.Empty)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.ClientSize">
            <summary>
            Gets the size of the canvas reduced by margins and page templates.
            </summary>
            <remarks>It indicates a size of the canvas reduced by margins and template dimensions.
            This value doesn't change when any custom clip is set.</remarks>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Get the graphics client size.
            SizeF clientSize = graphics.ClientSize;
            //Draw rectangle to PDF graphics.
            graphics.DrawRectangle(PdfBrushes.Red, new RectangleF(PointF.Empty, clientSize));
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Get the graphics client size.
            Dim clientSize As SizeF = graphics.ClientSize
            'Draw rectangle to PDF graphics.
            graphics.DrawRectangle(PdfBrushes.Red, New RectangleF(PointF.Empty, clientSize))
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.ColorSpace">
            <summary>
            Gets or sets the current color space of the document
            </summary>
            <remarks>The value change of this property has impact on the objects
            which will be drawn after the change.</remarks>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Set the color space.
            graphics.ColorSpace = PdfColorSpace.GrayScale;
            //Get the graphics client size.
            SizeF clientSize = graphics.ClientSize;
            //Draw rectangle to PDF graphics.
            graphics.DrawRectangle(PdfBrushes.Red, new RectangleF(PointF.Empty, clientSize));
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Set the color space.
            graphics.ColorSpace = PdfColorSpace.GrayScale
            'Get the graphics client size.
            Dim clientSize As SizeF = graphics.ClientSize
            'Draw rectangle to PDF graphics.
            graphics.DrawRectangle(PdfBrushes.Red, New RectangleF(PointF.Empty, clientSize))
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.StreamWriter">
            <summary>
            Gets the stream writer.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.Matrix">
            <summary>
            Gets the transformation matrix reflecting current transformation.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.Layer">
            <summary>
            Gets the layer for the graphics, if exists.
            </summary>
            <value>The layer.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.Page">
            <summary>
            Gets the page for this graphics, if exists.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.AutomaticFields">
            <summary>
            Gets the automatic fields.
            </summary>
            <value>The automatic fields.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.StringLayoutResult">
            <summary>
            Returns the result after drawing string.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.TransparencyObject">
            <summary>
            Gets the transparency object value
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphics.IsTemplateGraphics">
            <summary>
            Gets or sets a value, indicating the template graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.#ctor(System.Drawing.SizeF,Syncfusion.PdfExport.PdfGraphics.GetResources,Syncfusion.PdfExport.PdfStreamWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfGraphics"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="resources">The resources.</param>
            <param name="writer">The stream writer of the current layer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.#ctor(System.Drawing.SizeF,Syncfusion.PdfExport.PdfGraphics.GetResources,Syncfusion.PdfExport.PdfStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfGraphics"/> class.
            </summary>
            <param name="size">The size.</param>
            <param name="resources">The resources.</param>
            <param name="stream">The stream of the current layer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawLine(Syncfusion.PdfExport.PdfPen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a line connecting two <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the line.</param>
            <param name="point1">PointF structure that represents the first point to connect.</param>
            <param name="point2">PointF structure that represents the second point to connect.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds pen.  
            PdfPen pen = new PdfPen(PdfBrushes.Brown, 1f);
            //Draw line
            page.Graphics.DrawLine(pen, new PointF(100, 100), new PointF(200, 100));
            //Save document
            doc.Save("Line.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds pen.
            Dim pen As New PdfPen(PdfBrushes.Brown, 1.0F)
            'Draw line
            page.Graphics.DrawLine(pen, New PointF(100, 100), New PointF(200, 100))
            'Saves the PDF.
            doc.Save("Line.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawLine(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line connecting the two points specified by the coordinate pairs.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the line.</param>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds pen.  
            PdfPen pen = new PdfPen(PdfBrushes.Brown, 1f);
            //Draw line
            page.Graphics.DrawLine(pen, 100, 100, 200, 100);
            //Save document
            doc.Save("Line.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds pen.
            Dim pen As New PdfPen(PdfBrushes.Brown, 1.0F)
            'Draw line
            page.Graphics.DrawLine(pen, 100, 100, 200, 100)
            'Saves the PDF.
            doc.Save("Line.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawRectangle(Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle specified by a pen, a Rectangle structure.
            </summary>
            <param name="pen">A Pen that determines the color, width, and style of the rectangle.</param>
            <param name="rectangle">A Rectangle structure that represents the rectangle to draw.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfPen pen = new PdfPen (Color.Red);
            //Draw Rectangle
            page.Graphics.DrawRectangle(pen, new RectangleF(10, 10, 100, 100));
            //Save document
            doc.Save("Rect.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim pen As New PdfPen(Color.Red)
            'Draw Rectangle
            page.Graphics.DrawRectangle(pen, New RectangleF(10, 10, 100, 100))
            'Saves the PDF.
            doc.Save("Rect.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawRectangle(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle specified by a pen, a coordinate pair, a width, and a height.
            </summary>
            <param name="pen">A Pen that determines the color, width, and style of the rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">Width of the rectangle to draw.</param>
            <param name="height">Height of the rectangle to draw.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfPen pen = new PdfPen (Color.Red);
            //Draw Rectangle
            page.Graphics.DrawRectangle(pen, 10, 10, 100, 100);
            //Save document
            doc.Save("Rect.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim pen As New PdfPen(Color.Red)
            'Draw Rectangle
            page.Graphics.DrawRectangle(pen, 10, 10, 100, 100)
            'Saves the PDF.
            doc.Save("Rect.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawRectangle(Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle specified by a Rectangle structure.
            </summary>
            <param name="brush">Brush that determines the color and texture of the rectangle.</param>
            <param name="rectangle">A Rectangle structure that represents the rectangle to draw.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Rectangle
            page.Graphics.DrawRectangle(brush, new RectangleF(10, 10, 100, 100));
            //Save document
            doc.Save("Rect.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Rectangle
            page.Graphics.DrawRectangle(brush, New RectangleF(10, 10, 100, 100))
            'Saves the PDF.
            doc.Save("Rect.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawRectangle(Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle specified by a brush, coordinate pair, a width, and a height.
            </summary>
            <param name="brush">Brush that determines the color and texture of the rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">Width of the rectangle to draw.</param>
            <param name="height">Height of the rectangle to draw.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Rectangle
            page.Graphics.DrawRectangle(brush, 10, 10, 100, 100);
            //Save document
            doc.Save("Rect.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Rectangle
            page.Graphics.DrawRectangle(brush, 10, 10, 100, 100)
            'Saves the PDF.
            doc.Save("Rect.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawRectangle(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle specified by a pen, a brush and a Rectangle structure.
            </summary>
            <param name="pen">A Pen that determines the color, width, and style of the rectangle.</param>
            <param name="brush">Brush that determines the color and texture of the rectangle.</param>
            <param name="rectangle">A Rectangle structure that represents the rectangle to draw.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Rectangle
            page.Graphics.DrawRectangle(PdfPens.Black, brush, new RectangleF(10, 10, 100, 100));
            //Save document
            doc.Save("Rect.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Rectangle
            page.Graphics.DrawRectangle(PdfPens.Black, brush, New RectangleF(10, 10, 100, 100))
            'Saves the PDF.
            doc.Save("Rect.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawRectangle(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle specified by a pen, a coordinate pair, a width, and a height.
            </summary>
            <param name="pen">A Pen that determines the color, width, and style of the rectangle.</param>
            <param name="brush">Brush that determines the color and texture of the rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">Width of the rectangle to draw.</param>
            <param name="height">Height of the rectangle to draw.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Rectangle
            page.Graphics.DrawRectangle(PdfPens.Black, brush, 10, 10, 100, 100);
            //Save document
            doc.Save("Rect.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Rectangle
            page.Graphics.DrawRectangle(PdfPens.Black, brush, 10, 10, 100, 100)
            'Saves the PDF.
            doc.Save("Rect.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawEllipse(Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse specified by a pen, a bounding Rectangle structure.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();        
            //Draw Ellipse
            page.Graphics.DrawEllipse(PdfPens.Red, new RectangleF(10, 10, 100, 100));
            //Save document
            doc.Save("Ellipse.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()       
            'Draw Ellipse
            page.Graphics.DrawEllipse(PdfPens.Red, New RectangleF(10, 10, 100, 100))
            'Saves the PDF.
            doc.Save("Ellipse.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawEllipse(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of the rectangle, a height, and a width.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();        
            //Draw Ellipse
            page.Graphics.DrawEllipse(PdfPens.Red, 10, 10, 100, 100);
            //Save document
            doc.Save("Ellipse.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()       
            'Draw Ellipse
            page.Graphics.DrawEllipse(PdfPens.Red, 10, 10, 100, 100)
            'Saves the PDF.
            doc.Save("Ellipse.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawEllipse(Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse specified by a brush, a bounding Rectangle structure.
            </summary>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Ellipse
            page.Graphics.DrawEllipse(brush, new RectangleF(10, 10, 100, 100));
            //Save document
            doc.Save("Ellipse.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Ellipse
            page.Graphics.DrawEllipse(brush, New RectangleF(10, 10, 100, 100))
            'Saves the PDF.
            doc.Save("Ellipse.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawEllipse(Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of the rectangle, a height, and a width.
            </summary>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Ellipse
            page.Graphics.DrawEllipse(brush, 10, 10, 100, 100);
            //Save document
            doc.Save("Ellipse.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Ellipse
            page.Graphics.DrawEllipse(brush, 10, 10, 100, 100)
            'Saves the PDF.
            doc.Save("Ellipse.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawEllipse(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse specified by a bounding Rectangle structure.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Ellipse
            page.Graphics.DrawEllipse(PdfPens.Black, brush, new RectangleF(10, 10, 100, 100));
            //Save document
            doc.Save("Ellipse.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Ellipse
            page.Graphics.DrawEllipse(PdfPens.Black, brush, New RectangleF(10, 10, 100, 100))
            'Saves the PDF.
            doc.Save("Ellipse.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawEllipse(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse specified by a pen, a brush and coordinates for the upper-left corner of the rectangle, a height, and a width.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="brush">Brush that determines the color and texture of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Ellipse
            page.Graphics.DrawEllipse(PdfPens.Black, brush, 10, 10, 100, 100);
            //Save document
            doc.Save("Ellipse.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Ellipse
            page.Graphics.DrawEllipse(PdfPens.Black, brush, 10, 10, 100, 100)
            'Saves the PDF.
            doc.Save("Ellipse.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawArc(Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by a Rectangle structure.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the arc.</param>
            <param name="rectangle">RectangleF structure that defines the boundaries of the ellipse.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Draw Arc
            page.Graphics.DrawArc(PdfPens.Red, new RectangleF(10, 10, 100, 200), 90, 270);
            //Save document
            doc.Save("Arc.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Draw Arc
            page.Graphics.DrawArc(PdfPens.Red, New RectangleF(10, 10, 100, 200), 90, 270)
            'Saves the PDF.
            doc.Save("Arc.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawArc(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the arc.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="width">Width of the rectangle that defines the ellipse.</param>
            <param name="height">Height of the rectangle that defines the ellipse.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Draw Arc
            page.Graphics.DrawArc(PdfPens.Red, 10, 10, 100, 200, 90, 270);
            //Save document
            doc.Save("Arc.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Draw Arc
            page.Graphics.DrawArc(PdfPens.Red, 10, 10, 100, 200, 90, 270)
            'Saves the PDF.
            doc.Save("Arc.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPie(Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a Rectangle structure and two radial lines.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the pie shape.</param>
            <param name="rectangle">Rectangle structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();       
            //Draw Pie
            page.Graphics.DrawPie(PdfPens.Green, new RectangleF(10, 10, 100, 200), 90, 270);
            //Save document
            doc.Save("Pie.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()      
            'Draw Pie
            page.Graphics.DrawPie(PdfPens.Green, New RectangleF(10, 10, 100, 200), 90, 270)
            'Saves the PDF.
            doc.Save("Pie.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPie(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the pie shape.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();       
            //Draw Pie
            page.Graphics.DrawPie(PdfPens.Green, 10, 10, 100, 200, 90, 270);
            //Save document
            doc.Save("Pie.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()      
            'Draw Pie
            page.Graphics.DrawPie(PdfPens.Green, 10, 10, 100, 200, 90, 270)
            'Saves the PDF.
            doc.Save("Pie.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPie(Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a Rectangle structure and two radial lines.
            </summary>
            <param name="brush">Brush that determines the color and texture of the pie.</param>
            <param name="rectangle">Rectangle structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Pie
            page.Graphics.DrawPie(brush, new RectangleF(10, 10, 100, 200), 90, 270);
            //Save document
            doc.Save("Pie.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Pie
            page.Graphics.DrawPie(brush, New RectangleF(10, 10, 100, 200), 90, 270)
            'Saves the PDF.
            doc.Save("Pie.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPie(Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.
            </summary>
            <param name="brush">Brush that determines the color and texture of the pie.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Pie
            page.Graphics.DrawPie(brush, 10, 10, 100, 200, 90, 270);
            //Save document
            doc.Save("Pie.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Pie
            page.Graphics.DrawPie(brush,10, 10, 100, 200, 90, 270)
            'Saves the PDF.
            doc.Save("Pie.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPie(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a Rectangle structure and two radial lines.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the pie shape.</param>
            <param name="brush">Brush that determines the color and texture of the pie.</param>
            <param name="rectangle">Rectangle structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Pie
            page.Graphics.DrawPie(PdfPens.Green, brush, new RectangleF(10, 10, 100, 200), 90, 270);
            //Save document
            doc.Save("Pie.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Pie
            page.Graphics.DrawPie(PdfPens.Green, brush, New RectangleF(10, 10, 100, 200), 90, 270)
            'Saves the PDF.
            doc.Save("Pie.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPie(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a Rectangle structure and two radial lines.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the pie shape.</param>
            <param name="brush">Brush that determines the color and texture of the pie.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
            //Draw Pie
            page.Graphics.DrawPie(PdfPens.Green, brush, 10, 10, 100, 200, 90, 270);
            //Save document
            doc.Save("Pie.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Draw Pie
            page.Graphics.DrawPie(PdfPens.Green, brush, 10, 10, 100, 200, 90, 270)
            'Saves the PDF.
            doc.Save("Pie.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPolygon(Syncfusion.PdfExport.PdfPen,System.Drawing.PointF[])">
            <summary>
            Draws a polygon defined by a pen, an array of Point structures.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the polygon.</param>
            <param name="points">Array of PointF structures that represent the vertices of the polygon.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();       
             //Adds points.
             PointF p1 = new PointF(10, 100);
             PointF p2 = new PointF(10, 200);
             PointF p3 = new PointF(100, 100);
             PointF p4 = new PointF(100, 200);
             PointF p5 = new PointF(55, 150);
             PointF[] points = { p1, p2, p3, p4, p5};
            //Draw Polygon
            page.Graphics.DrawPolygon(PdfPens.Red, points);
            //Save document
            doc.Save("Polygon.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()        
            'Add Points
            Dim p1 As New PointF(10, 100)
            Dim p2 As New PointF(10, 200)
            Dim p3 As New PointF(100, 100)
            Dim p4 As New PointF(100, 200)
            Dim p5 As New PointF(55, 150)
            Dim points As PointF() = {p1, p2, p3, p4, p5}
            'Draw Polygon
            page.Graphics.DrawPolygon(PdfPens.Red, points);
            'Saves the PDF.
            doc.Save("Polygon.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPolygon(Syncfusion.PdfExport.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Draws a polygon defined by a brush, an array of Point structures.
            </summary>
            <param name="brush">Brush that determines the color and texture of the pie.</param>
            <param name="points">Array of Point structures that represent the vertices of the polygon.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
             //Adds points.
             PointF p1 = new PointF(10, 100);
             PointF p2 = new PointF(10, 200);
             PointF p3 = new PointF(100, 100);
             PointF p4 = new PointF(100, 200);
             PointF p5 = new PointF(55, 150);
             PointF[] points = { p1, p2, p3, p4, p5};
            //Draw Polygon
            page.Graphics.DrawPolygon(brush, points);
            //Save document
            doc.Save("Polygon.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Add Points
            Dim p1 As New PointF(10, 100)
            Dim p2 As New PointF(10, 200)
            Dim p3 As New PointF(100, 100)
            Dim p4 As New PointF(100, 200)
            Dim p5 As New PointF(55, 150)
            Dim points As PointF() = {p1, p2, p3, p4, p5}
            'Draw Polygon
            page.Graphics.DrawPolygon(brush, points);
            'Saves the PDF.
            doc.Save("Polygon.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPolygon(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Draws a polygon defined by a pen, a brush, an array of Point structures.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the polygon.</param>
            <param name="brush">Brush that determines the color and texture of the pie.</param>
            <param name="points">Array of Point structures that represent the vertices of the polygon.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Brush.  
             PdfBrush brush = new PdfSolidBrush (Color.Red);
             //Adds points.
             PointF p1 = new PointF(10, 100);
             PointF p2 = new PointF(10, 200);
             PointF p3 = new PointF(100, 100);
             PointF p4 = new PointF(100, 200);
             PointF p5 = new PointF(55, 150);
             PointF[] points = { p1, p2, p3, p4, p5};
            //Draw Polygon
            page.Graphics.DrawPolygon(PdfPens.Black, brush, points);
            //Save document
            doc.Save("Polygon.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Brush.
            Dim brush As New PdfSolidBrush (Color.Red)
            'Add Points
            Dim p1 As New PointF(10, 100)
            Dim p2 As New PointF(10, 200)
            Dim p3 As New PointF(100, 100)
            Dim p4 As New PointF(100, 200)
            Dim p5 As New PointF(55, 150)
            Dim points As PointF() = {p1, p2, p3, p4, p5}
            'Draw Polygon
            page.Graphics.DrawPolygon(PdfPens.Black, brush, points);
            'Saves the PDF.
            doc.Save("Polygon.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawBezier(Syncfusion.PdfExport.PdfPen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a Bezier spline defined by four Point structures.
            </summary>
            <param name="pen">Pen structure that determines the color, width, and style of the curve.</param>
            <param name="startPoint">Point structure that represents the starting point of the curve.</param>
            <param name="firstControlPoint">Point structure that represents the first control point for the curve.</param>
            <param name="secondControlPoint">Point structure that represents the second control point for the curve.</param>
            <param name="endPoint">Point structure that represents the ending point of the curve.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds pen.  
            PdfPen pen = new PdfPen(PdfBrushes.Brown, 1f);
            //Draw Bezier
            page.Graphics.DrawBezier(pen, new PointF(10, 10), new PointF(10, 50), new PointF(50, 80), new PointF(80, 10));
            //Save document
            doc.Save("Bezier.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds pen.
            Dim pen As New PdfPen(PdfBrushes.Brown, 1.0F)
            'Draw Bezier
            page.Graphics.DrawBezier(pen, New PointF(10, 10), New PointF(10, 50), New PointF(50, 80), New PointF(80, 10));
            'Saves the PDF.
            doc.Save("Bezier.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawBezier(Syncfusion.PdfExport.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a Bezier spline defined by four ordered pairs of coordinates that represent points.
            </summary>
            <param name="pen">Pen structure that determines the color, width, and style of the curve.</param>
            <param name="startPointX">The x-coordinate of the starting point of the curve.</param>
            <param name="startPointY">The y-coordinate of the starting point of the curve.</param>
            <param name="firstControlPointX">The x-coordinate of the first control point of the curve.</param>
            <param name="firstControlPointY">The y-coordinate of the first control point of the curve.</param>
            <param name="secondControlPointX">The x-coordinate of the second control point of the curve.</param>
            <param name="secondControlPointY">The y-coordinate of the second control point of the curve.</param>
            <param name="endPointX">The x-coordinate of the ending point of the curve.</param>
            <param name="endPointY">The y-coordinate of the ending point of the curve.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds pen.  
            PdfPen pen = new PdfPen(PdfBrushes.Brown, 1f);
            //Draw Bezier
            page.Graphics.DrawBezier(pen, 10, 10, 10, 50, 50, 80, 80, 10);
            //Save document
            doc.Save("Bezier.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds pen.
            Dim pen As New PdfPen(PdfBrushes.Brown, 1.0F)
            'Draw Bezier
            page.Graphics.DrawBezier(pen, 10, 10, 10, 50, 50, 80, 80, 10);
            'Saves the PDF.
            doc.Save("Bezier.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPath(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfPath)">
            <summary>
            Draws a GraphicsPath defined by a pen and path
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="path">GraphicsPath to draw.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Path.  
            PdfPath path = new PdfPath();
            path.AddRectangle (new RectangleF (10,10,100,100));
            path.AddEllipse (new RectangleF (100,100,100,100));
            //Draw Paths
            page.Graphics.DrawPath(PdfPens.Red, path);
            //Save document
            doc.Save("Paths.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Path.  
            Dim path  As New PdfPath();
            path.AddRectangle (New RectangleF (10,10,100,100));
            path.AddEllipse (New RectangleF (100,100,100,100));
            'Draw Path
            page.Graphics.DrawPath(PdfPens.Red, path)
            'Saves the PDF.
            doc.Save("Paths.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPath(Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfPath)">
            <summary>
            Draws a GraphicsPath defined by a brush and path
            </summary>
            <param name="brush">Brush that determines the color and texture of the path.</param>
            <param name="path">GraphicsPath to draw.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Path.  
            PdfPath path = new PdfPath();
            path.AddRectangle (new RectangleF (10,10,100,100));
            path.AddEllipse (new RectangleF (100,100,100,100));
            //Draw Paths
            page.Graphics.DrawPath(PdfBrushes.Red, path);
            //Save document
            doc.Save("Paths.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Path.  
            Dim path  As New PdfPath();
            path.AddRectangle (New RectangleF (10,10,100,100));
            path.AddEllipse (New RectangleF (100,100,100,100));
            'Draw Path
            page.Graphics.DrawPath(PdfBrushes.Red, path)
            'Saves the PDF.
            doc.Save("Paths.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPath(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfPath)">
            <summary>
            Draws a GraphicsPath defined by a pen, a brush and path
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="brush">Brush that determines the color and texture of the path.</param>
            <param name="path">GraphicsPath to draw.</param>
            <example>
            <code lang="C#">
            // Creates a document.
            PdfDocument doc = new PdfDocument();
            //Adds a new page.
            PdfPage page = doc.Pages.Add();
            //Adds Path.  
            PdfPath path = new PdfPath();
            path.AddRectangle (new RectangleF (10,10,100,100));
            path.AddEllipse (new RectangleF (100,100,100,100));
            //Draw Paths
            page.Graphics.DrawPath(PdfPens.Black, PdfBrushes.Red, path);
            //Save document
            doc.Save("Paths.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a document.
            Dim doc As New PdfDocument()
            'Adds a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Adds Path.  
            Dim path  As New PdfPath();
            path.AddRectangle (New RectangleF (10,10,100,100));
            path.AddEllipse (New RectangleF (100,100,100,100));
            'Draw Path
            page.Graphics.DrawPath(PdfPens.Black, PdfBrushes.Red, path)
            'Saves the PDF.
            doc.Save("Paths.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawImage(Syncfusion.PdfExport.PdfImage,System.Drawing.PointF)">
            <summary>
            Draws the specified PdfImage, using its original physical size, at the specified location..
            </summary>
            <param name="image">PdfImage to draw.</param>
            <param name="point">Point structure that represents the location of the upper-left corner of the drawn image.</param>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Adds a page to the document.
            PdfPage page = doc.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics g = page.Graphics;
            //Creates an image object.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Draws the image.
            g.DrawImage(image, new PointF(0, 0));
            //Saves the document.
            doc.Save("Output.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim doc As New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Creates PDF graphics for the page.
            Dim g As PdfGraphics = page.Graphics
            'Creates an image object.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Draws the image.
            g.DrawImage(image,New PointF(0, 0))
            'Saves the document.
            doc.Save("Output.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawImage(Syncfusion.PdfExport.PdfImage,System.Single,System.Single)">
            <summary>
            Draws the specified image, using its original physical size, at the location specified by a coordinate pair.
            </summary>
            <param name="image">PdfImage to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Adds a page to the document.
            PdfPage page = doc.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics g = page.Graphics;
            //Creates an image object.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Draws the image.
            g.DrawImage(image, 0, 0);
            //Saves the document.
            doc.Save("Output.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim doc As New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Creates PDF graphics for the page.
            Dim g As PdfGraphics = page.Graphics
            'Creates an image object.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Draws the image.
            g.DrawImage(image, 0, 0)
            'Saves the document.
            doc.Save("Output.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawImage(Syncfusion.PdfExport.PdfImage,System.Drawing.RectangleF)">
            <summary>
            Draws the specified Image at the specified location and with the specified size.
            </summary>
            <param name="image">PdfImage to draw.</param>
            <param name="rectangle">RectangleF structure that specifies the location and size of the drawn image.</param>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Adds a page to the document.
            PdfPage page = doc.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics g = page.Graphics;
            //Creates an image object.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Draws the image.
            g.DrawImage(image, new RectangleF(0, 0, 300, 200));
            //Saves the document.
            doc.Save("Output.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim doc As New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Creates PDF graphics for the page.
            Dim g As PdfGraphics = page.Graphics
            'Creates an image object.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Draws the image.
            g.DrawImage(image,New RectangleF(0, 0, 300, 200))
            'Saves the document.
            doc.Save("Output.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawImage(Syncfusion.PdfExport.PdfImage,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Draws the specified Image at the specified location and with the specified shape and size.
            </summary>
            <param name="image">PdfImage to draw.</param>
            <param name="point">Point structure that represents the location of the upper-left corner of the drawn image.</param>
            <param name="size">SizeF structure that represents the height and width of the drawn image.</param>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Adds a page to the document.
            PdfPage page = doc.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics g = page.Graphics;
            //Creates an image object.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Draws the image.
            g.DrawImage(image, new PointF(0, 0), new SizeF(300, 200));
            //Saves the document.
            doc.Save("Output.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim doc As New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Creates PDF graphics for the page.
            Dim g As PdfGraphics = page.Graphics
            'Creates an image object.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Draws the image.
            g.DrawImage(image,New PointF(0, 0), New SizeF(300, 200))
            'Saves the document.
            doc.Save("Output.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawImage(Syncfusion.PdfExport.PdfImage,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified image, using its original physical size, at the location specified by a coordinate pair.
            </summary>
            <param name="image">PdfImage to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="width">Width of the drawn image.</param>
            <param name="height">Height of the drawn image.</param>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Adds a page to the document.
            PdfPage page = doc.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics g = page.Graphics;
            //Creates an image object.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Draws the image.
            g.DrawImage(image, 0, 0, 300, 200);
            //Saves the document.
            doc.Save("Output.pdf");
            //Closes the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim doc As New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Creates PDF graphics for the page.
            Dim g As PdfGraphics = page.Graphics
            'Creates an image object.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Draws the image.
            g.DrawImage(image, 0, 0, 300, 200)
            'Saves the document.
            doc.Save("Output.pdf")
            'Closes the document.
            doc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="point">PointF structure that specifies the upper-left corner of the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Creates a solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draws the String.
            graphics.DrawString("Hello world!", font, brush, new PointF(20, 20));
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Creates a solid brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draws the text.
            graphics.DrawString("Hello world!", font, brush, New PointF(20,20))
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush,System.Drawing.PointF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="point">PointF structure that specifies the upper-left corner of the drawn text.</param>
            <param name="format">The text string format.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Creates a solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create PDF string format.
            PdfStringFormat format = new PdfStringFormat();
            //Set text alignement.
            format.Alignment = PdfTextAlignment.Left;
            format.LineAlignment = PdfVerticalAlignment.Top;
            //Draws the String.
            graphics.DrawString("Hello world!", font, brush, new PointF(20, 20), format);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Creates a solid brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set text alignement.
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Top
            'Draws the text.
            graphics.DrawString("Hello world!", font, brush, New PointF(20,20), format)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);       
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfBrushes.Red, 20, 20);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics        
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)       
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfBrushes.Red, 20,20)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text.</param>
            <param name="format">The text string format.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Creates a solid brush.
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create PDF string format.
            PdfStringFormat format = new PdfStringFormat();
            //Set text alignement.
            format.Alignment = PdfTextAlignment.Left;
            format.LineAlignment = PdfVerticalAlignment.Top;
            //Draws the String.
            graphics.DrawString("Hello world!", font, brush, 20, 20, format);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Creates a solid brush.
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set text alignement.
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Top
            'Draws the text.
            graphics.DrawString("Hello world!", font, brush, 20,20, format)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="point">PointF structure that specifies the upper-left corner of the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);       
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, new PointF(20, 20));
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics        
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)       
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, New PointF(20,20))
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,System.Drawing.PointF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="point">PointF structure that specifies the upper-left corner of the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create PDF string format.
            PdfStringFormat format = new PdfStringFormat();
            //Set text alignement.
            format.Alignment = PdfTextAlignment.Left;
            format.LineAlignment = PdfVerticalAlignment.Top;
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, new PointF(20, 20), format);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics        
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set text alignement.
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Top
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, New PointF(20,20), format)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 20, 20);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics      
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 20, 20)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,System.Single,System.Single,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string..</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text.</param>
            <param name="format">The text string format.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create PDF string format.
            PdfStringFormat format = new PdfStringFormat();
            //Set text alignement.
            format.Alignment = PdfTextAlignment.Left;
            format.LineAlignment = PdfVerticalAlignment.Top;
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 20, 20, format);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics        
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set text alignement.
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Top
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 20,20, format)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="point">PointF structure that specifies the upper-left corner of the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, new PointF(20, 20));
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics      
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, New PointF(20, 20))
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.PointF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="point">PointF structure that specifies the upper-left corner of the drawn text.</param>
            <param name="format">StringFormat that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create PDF string format.
            PdfStringFormat format = new PdfStringFormat();
            //Set text alignement.
            format.Alignment = PdfTextAlignment.Left;
            format.LineAlignment = PdfVerticalAlignment.Top;
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, new PointF(20, 20), format);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics        
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set text alignement.
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Top
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, New PointF(20,20), format)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text.</param>
            <param name="format">The text string format.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create PDF string format.
            PdfStringFormat format = new PdfStringFormat();
            //Set text alignement.
            format.Alignment = PdfTextAlignment.Left;
            format.LineAlignment = PdfVerticalAlignment.Top;
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, 20, 20, format);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics        
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set text alignement.
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Top
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, 20,20, format)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, 20, 20);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics      
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, 20, 20)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfBrushes.Red, new RectangleF(20, 20, 200, 20));
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics      
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfBrushes.Red, New RectangleF(20, 20, 200, 20))
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">StringFormat that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create PDF string format.
            PdfStringFormat format = new PdfStringFormat();
            //Set text alignement.
            format.Alignment = PdfTextAlignment.Left;
            format.LineAlignment = PdfVerticalAlignment.Top;
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfBrushes.Red, new RectangleF(20, 20, 200, 20), format);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics        
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set text alignement.
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Top
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfBrushes.Red, New RectangleF(20, 20, 200, 20), format)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, new RectangleF(20, 20, 200, 20));
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics      
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, New RectangleF(20, 20, 200, 20))
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">StringFormat that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create PDF string format.
            PdfStringFormat format = new PdfStringFormat();
            //Set text alignement.
            format.Alignment = PdfTextAlignment.Left;
            format.LineAlignment = PdfVerticalAlignment.Top;
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, new RectangleF(20, 20, 200, 20), format);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics        
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set text alignement.
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Top
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, New RectangleF(20, 20, 200, 20), format)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawString(System.String,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen, Brush and Font objects. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">StringFormat that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.</param>
            <example >
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;       
            //Sets the font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create PDF string format.
            PdfStringFormat format = new PdfStringFormat();
            //Set text alignement.
            format.Alignment = PdfTextAlignment.Left;
            format.LineAlignment = PdfVerticalAlignment.Top;
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, new RectangleF(20, 20, 200, 20), format);
            //Saves the document.
            document.Save("Sample.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As PdfDocument = New PdfDocument()
            'Adds a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics        
            'Sets the font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create PDF string format.
            Dim format As New PdfStringFormat()
            'Set text alignement.
            format.Alignment = PdfTextAlignment.Left
            format.LineAlignment = PdfVerticalAlignment.Top
            'Draws the text.
            graphics.DrawString("Hello world!", font, PdfPens.Red, PdfBrushes.Green, New RectangleF(20, 20, 200, 20), format)
            'Saves the document.
            document.Save("Sample.pdf")
            'Closes the document
            document.Close(true)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.TranslateTransform(System.Single,System.Single)">
            <summary>
            Changes the origin of the coordinate system by prepending the specified translation to the transformation matrix of this Graphics.
            </summary>
            <param name="offsetX">The x-coordinate of the translation.</param>
            <param name="offsetY">The y-coordinate of the translation.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Save the graphics.
            graphics.Save();
            //Set graphics translate transform.
            graphics.TranslateTransform(100, 100);            
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);
            //Restore the graphics.
            graphics.Restore();
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Save the graphics.
            graphics.Save()
            'Set graphics translate transform.
            graphics.TranslateTransform(100, 100)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)
            'Restore the graphics.
            graphics.Restore()
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.ScaleTransform(System.Single,System.Single)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.
            </summary>
            <param name="scaleX">Scale factor in the x direction.</param>
            <param name="scaleY">Scale factor in the y direction.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Save the graphics.
            graphics.Save();
            //Scale transform
            graphics.ScaleTransform(0.5f, 0.5f);             
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);
            //Restore the graphics.
            graphics.Restore();
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Save the graphics.
            graphics.Save()
            'Scale transform
            graphics.ScaleTransform(0.5F, 0.5F)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)
            'Restore the graphics.
            graphics.Restore()
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.RotateTransform(System.Single)">
            <summary>
            Applies the specified rotation to the transformation matrix of this Graphics.
            </summary>
            <param name="angle">Angle of rotation in degrees.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Save the graphics.
            graphics.Save();
            //Set rotate transform
            graphics.RotateTransform(-90);            
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, -100, 0);
            //Restore the graphics.
            graphics.Restore();
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Save the graphics.
            graphics.Save()
            'Set rotate transform
            graphics.RotateTransform(-90)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, -100, 0)
            'Restore the graphics.
            graphics.Restore()
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.SkewTransform(System.Single,System.Single)">
            <summary>
            Skews the coordinate system axes.
            </summary>
            <param name="angleX">Skews the X axis by this angle (in
            degrees).</param>
            <param name="angleY">Skews the Y axis by this angle (in
            degrees).</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Save the graphics.
            graphics.Save();
            //Set skew transform
            graphics.SkewTransform(10,10);                
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);
            //Restore the graphics.
            graphics.Restore();
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Save the graphics.
            graphics.Save()
            'Set skew transform
            graphics.SkewTransform(10, 10)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)
            'Restore the graphics.
            graphics.Restore()
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPdfTemplate(Syncfusion.PdfExport.PdfTemplate,System.Drawing.PointF)">
            <summary>
            Draws a template using its original size, at the specified location.
            </summary>
            <param name="template"><see cref="T:Syncfusion.PdfExport.PdfTemplate"/> object.</param>
            <param name="location">PointF structure that specifies the upper-left corner of the drawn template.</param>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument pdfDocument = new PdfDocument();
            //Adds a page to the PDF document.
            PdfPage pdfPage = pdfDocument.Pages.Add();
            //Create a PDF Template.
            PdfTemplate template = new PdfTemplate(100, 50);
            //Draws a rectangle into the graphics of the template.
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, new System.Drawing.RectangleF(0, 0, 100, 50));
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14);
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Draws a string into the graphics of the template.
            template.Graphics.DrawString("Hello World", font, brush, 5, 5);
            //Draws the template into the page graphics of the document.
            pdfPage.Graphics.DrawPdfTemplate(template, PointF.Empty);
            //Saves the document.
            pdfDocument.Save("Output.pdf");
            //Close the document
            pdfDocument.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim pdfDocument As New PdfDocument()
            'Adds a page to the PDF document
            Dim pdfPage As PdfPage = pdfDocument.Pages.Add()
            'Creates a PDF Template.
            Dim template As New PdfTemplate(100, 50)
            'Draws a rectangle into the graphics of the template.
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, New System.Drawing.RectangleF(0, 0, 100, 50))
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14)
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            'Draws a string into the graphics of the template.
            template.Graphics.DrawString("Hello World", font, brush, 5, 5)
            'Draws the template into the page graphics of the document.
            pdfPage.Graphics.DrawPdfTemplate(template, PointF.Empty)
            'Saves the document.
            pdfDocument.Save("Output.pdf")
            'Close the document
            pdfDocument.Close(True)
            </code></example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPdfTemplate(Syncfusion.PdfExport.PdfTemplate,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Draws a template at the specified location and size.
            </summary>
            <param name="template"><see cref="T:Syncfusion.PdfExport.PdfTemplate"/> object.</param>
            <param name="location">PointF structure that specifies the upper-left corner of the drawn template.</param>
            <param name="size">Size of the template.</param>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument pdfDocument = new PdfDocument();
            //Adds a page to the PDF document.
            PdfPage pdfPage = pdfDocument.Pages.Add();
            //Create a PDF Template.
            PdfTemplate template = new PdfTemplate(100, 50);
            //Draws a rectangle into the graphics of the template.
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, new System.Drawing.RectangleF(0, 0, 100, 50));
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 14);
            PdfBrush brush = new PdfSolidBrush(Color.Black);
            //Draws a string into the graphics of the template.
            template.Graphics.DrawString("Hello World", font, brush, 5, 5);
            //Draws the template into the page graphics of the document.
            pdfPage.Graphics.DrawPdfTemplate(template, PointF.Empty, template.Size);
            //Saves the document.
            pdfDocument.Save("Output.pdf");
            //Close the document
            pdfDocument.Close(true);
            </code>
            <code lang="VB">
            'Creates a new PDF document.
            Dim pdfDocument As New PdfDocument()
            'Adds a page to the PDF document
            Dim pdfPage As PdfPage = pdfDocument.Pages.Add()
            'Creates a PDF Template.
            Dim template As New PdfTemplate(100, 50)
            'Draws a rectangle into the graphics of the template.
            template.Graphics.DrawRectangle(PdfBrushes.BurlyWood, New System.Drawing.RectangleF(0, 0, 100, 50))
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 14)
            Dim brush As PdfBrush = New PdfSolidBrush(Color.Black)
            'Draws a string into the graphics of the template.
            template.Graphics.DrawString("Hello World", font, brush, 5, 5)
            'Draws the template into the page graphics of the document.
            pdfPage.Graphics.DrawPdfTemplate(template, PointF.Empty, template.Size)
            'Saves the document.
            pdfDocument.Save("Output.pdf")
            'Close the document
            pdfDocument.Close(True)
            </code></example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.Flush">
            <summary>
            Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Draw string to PDF page graphics.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty);
            //Draw the rectangle to PDF page graphics.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(0, 20, 200, 100));
            graphics.Flush();
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Draw string to PDF page graphics.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, PointF.Empty)
            'Draw the rectangle to PDF page graphics.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(0, 20, 200, 100))
            graphics.Flush()
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.Save">
            <summary>
            Saves the current state of this Graphics and identifies the saved state with a GraphicsState.
            </summary>
            <returns>This method returns a GraphicsState that represents the saved state of this Graphics. </returns>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Save the graphics.
            graphics.Save();
            //Set graphics translate transform.
            graphics.TranslateTransform(100, 100);            
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);
            //Restore the graphics.
            graphics.Restore();
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Save the graphics.
            graphics.Save()
            'Set graphics translate transform.
            graphics.TranslateTransform(100, 100)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)
            'Restore the graphics.
            graphics.Restore()
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.Restore">
            <summary>
            Restores the state of this Graphics to the state represented by a GraphicsState.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Save the graphics.
            graphics.Save();
            //Set graphics translate transform.
            graphics.TranslateTransform(100, 100);            
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);
            //Restore the graphics.
            graphics.Restore();
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Save the graphics.
            graphics.Save()
            'Set graphics translate transform.
            graphics.TranslateTransform(100, 100)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)
            'Restore the graphics.
            graphics.Restore()
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.Restore(Syncfusion.PdfExport.PdfGraphicsState)">
            <summary>
            Restores the state of this Graphics to the state represented by a GraphicsState.
            </summary>
            <param name="state">GraphicsState that represents the state to which to restore this Graphics.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Save the graphics.
            PdfGraphicsState state = graphics.Save();
            //Set graphics translate transform.
            graphics.TranslateTransform(100, 100);            
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);
            //Restore the graphics.
            graphics.Restore(state);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Save the graphics.
            Dim state As PdfGraphicsState = graphics.Save()
            'Set graphics translate transform.
            graphics.TranslateTransform(100, 100)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)
            'Restore the graphics.
            graphics.Restore(state)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.SetClip(System.Drawing.RectangleF)">
            <summary>
            Sets the clipping region of this Graphics to the rectangle specified by a RectangleF structure.
            </summary>
            <param name="rectangle">RectangleF structure that represents the new clip region.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //set clip.
            graphics.SetClip(new RectangleF(0, 0, 50, 12));          
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);        
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'set clip.
            graphics.SetClip(New RectangleF(0, 0, 50, 12))
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)        
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.SetClip(System.Drawing.RectangleF,Syncfusion.PdfExport.PdfFillMode)">
            <summary>
            Sets the clipping region of this Graphics to the result of the specified operation combining the current clip region and the rectangle specified by a RectangleF structure.
            </summary>
            <param name="rectangle">RectangleF structure to combine.</param>
            <param name="mode">Member of the PdfFillMode enumeration that specifies the filling operation to use.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //set clip.
            graphics.SetClip(new RectangleF(0, 0, 50, 12), PdfFillMode.Alternate);          
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);        
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'set clip.
            graphics.SetClip(New RectangleF(0, 0, 50, 12), PdfFillMode.Alternate)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)        
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.SetClip(Syncfusion.PdfExport.PdfPath)">
            <summary>
            Sets the clipping region of this Graphics to the result of the specified operation combining the current clip region and the specified PdfPath.
            </summary>
            <param name="path">PdfPath to clip.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create PDF path.
            PdfPath path = new PdfPath();
            path.AddRectangle(new RectangleF(0, 0, 50, 12));
            //set clip.
            graphics.SetClip(path);          
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);        
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create PDF path.
            Dim path As New PdfPath()
            path.AddRectangle(New RectangleF(0, 0, 50, 12))
            'set clip.
            graphics.SetClip(path)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)        
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.SetClip(Syncfusion.PdfExport.PdfPath,Syncfusion.PdfExport.PdfFillMode)">
            <summary>
            Modifying the current clipping path by intersecting it with the current path.
            </summary>
            <param name="path">PdfPath to fill.</param>
            <param name="mode">Member of the PdfFillMode enumeration that specifies the filling operation to use.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Create PDF path.
            PdfPath path = new PdfPath();
            path.AddRectangle(new RectangleF(0, 0, 50, 12));
            //set clip.
            graphics.SetClip(path, PdfFillMode.Alternate);          
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);        
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Create PDF path.
            Dim path As New PdfPath()
            path.AddRectangle(New RectangleF(0, 0, 50, 12))
            'set clip.
            graphics.SetClip(path, PdfFillMode.Alternate)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)        
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.SetTransparency(System.Single)">
            <summary>
            Sets the transparency of this Graphics with the specified value for pen
            </summary>
            <param name="alpha">The alpha value for both pen
            and brush operations.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Set transparancy.
            graphics.SetTransparency(0.5f);
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfBrushes.Red, 0, 0);        
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Set transparancy.
            graphics.SetTransparency(0.5F)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfBrueshes.Red, 0, 0)        
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.SetTransparency(System.Single,System.Single)">
            <summary>
            Sets the transparency of this Graphics with the specified value for pen and brush
            </summary>
            <param name="alphaPen">The alpha value for pen operations.</param>
            <param name="alphaBrush">The alpha value for brush operations.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Set transparancy.
            graphics.SetTransparency(0.5f, 0.5f);
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Black, PdfBrushes.Red, 0, 0);        
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Set transparancy.
            graphics.SetTransparency(0.5F, 0.5F)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Black, PdfBrueshes.Red, 0, 0)        
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.SetTransparency(System.Single,System.Single,Syncfusion.PdfExport.PdfBlendMode)">
            <summary>
            Sets the transparency of this Graphics with the specified PdfBlendMode
            </summary>
            <param name="alphaPen">The alpha value for pen operations.</param>
            <param name="alphaBrush">The alpha value for brush operations.</param>
            <param name="blendMode">The blend mode.</param>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Set transparancy.
            graphics.SetTransparency(0.5f, 0.5f, PdfBlendMode.HardLight);
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Black, PdfBrushes.Red, 0, 0);        
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Set transparancy.
            graphics.SetTransparency(0.5F, 0.5F, PdfBlendMode.HardLight)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Black, PdfBrueshes.Red, 0, 0)        
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.NormalizeText(Syncfusion.PdfExport.PdfFont,System.String)">
            <summary>
            Normalizes the text.
            </summary>
            <param name="font">The font.</param>
            <param name="text">The text.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.SetLayer(Syncfusion.PdfExport.PdfPageLayer)">
            <summary>
            Sets the layer for the graphics.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.PageSave(System.Object,System.EventArgs)">
            <summary>
            Handles the Save event of the Page control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.UpdateY(System.Single)">
            <summary>
            Updates y co-ordinate.
            </summary>
            <param name="y">Y co-ordinate.</param>
            <returns>Updated y co-ordinate.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.Reset(System.Drawing.SizeF)">
            <summary>
            Clears an instance.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DoRestoreState">
            <summary>
            Restores graphics state.
            </summary>
            <returns>The restored graphics state.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.StateControl(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfFont)">
            <summary>
            Controls all state modifications and react repectively.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.StateControl(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Controls all state modifications and react respectively.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="font">The font.</param>
            <param name="format">Text settings.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.FontControl(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat,System.Boolean)">
            <summary>
            Saves the font and other font settings.
            </summary>
            <param name="font">Current font.</param>
            <param name="format">Current format.</param>
            <param name="saveState">If set to <c>true</c> the state's been changed.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.BrushControl(Syncfusion.PdfExport.PdfBrush,System.Boolean)">
            <summary>
            Controls the brush state.
            </summary>
            <param name="brush">The brush.</param>
            <param name="saveState">if set to <c>true</c> the state's been changed.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.InitCurrentColorSpace">
            <summary>
            Initializes the current color space.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.PenControl(Syncfusion.PdfExport.PdfPen,System.Boolean)">
            <summary>
            Controls the pen state.
            </summary>
            <param name="pen">The pen.</param>
            <param name="saveState">if set to <c>true</c> the state's been changed.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPath(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Boolean)">
            <summary>
            Draws the path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="needClosing">if it is need to close, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawPath(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfFillMode,System.Boolean)">
            <summary>
            Draws the path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode.</param>
            <param name="needClosing">if it is need to close, set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetBezierArcPoints(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the bezier points for arc constructing.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="startAng">The start angle.</param>
            <param name="extent">The extent.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.ConstructArcPath(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs the arc path using Bezier curves.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="startAng">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.BuildUpPath(Syncfusion.PdfExport.PdfPath)">
            <summary>
            Builds up the path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetBezierPoints(System.Drawing.PointF[],System.Byte[],System.Int32@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Gets the bezier points from respective arrays.
            </summary>
            <param name="points">The points.</param>
            <param name="types">The types.</param>
            <param name="i">The i.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.BuildUpPath(System.Drawing.PointF[],System.Byte[])">
            <summary>
            Builds up the path.
            </summary>
            <param name="points">The points.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.CheckFlags(System.Byte)">
            <summary>
            Checks path point type flags.
            </summary>
            <param name="type">The path point type.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetTextRenderingMode(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Gets the text rendering mode.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="format">The format.</param>
            <returns>Proper TextRenderingMode value.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.ClipTranslateMargins(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the drawing area and translates origin.
            </summary>
            <param name="x">X co-ordinate of the co-ordinate system.</param>
            <param name="y">Y co-ordinate of the co-ordinate system.</param>
            <param name="left">Left margin value.</param>
            <param name="top">Top margin value.</param>
            <param name="right">Right margin value.</param>
            <param name="bottom">Bottom margin value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.ClipTranslateMargins(System.Drawing.RectangleF)">
            <summary>
            Sets the drawing area and translates origin.
            </summary>
            <param name="clipBounds">Clip bounds of the graphics.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.InitializeCoordinates">
            <summary>
            Initializes coordinate system.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.InitializeCoordinates(Syncfusion.PdfExport.PdfPageBase)">
            <summary>
            Initializes coordinate system.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetTranslateTransform(System.Single,System.Single,Syncfusion.PdfExport.PdfTransformationMatrix)">
            <summary>
            Translates coordinates of the input matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="input">Input matrix.</param>
            <returns>Output matrix.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetScaleTransform(System.Single,System.Single,Syncfusion.PdfExport.PdfTransformationMatrix)">
            <summary>
            Scales coordinates of the input matrix.
            </summary>
            <param name="x">X scaling.</param>
            <param name="y">Y scaling.</param>
            <param name="input">Input matrix.</param>
            <returns>Output matrix.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetRotateTransform(System.Single,Syncfusion.PdfExport.PdfTransformationMatrix)">
            <summary>
            Rotates coordinates of the input matrix.
            </summary>
            <param name="angle">Rotation angle.</param>
            <param name="input">Input matrix.</param>
            <returns>Output matrix.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetSkewTransform(System.Single,System.Single,Syncfusion.PdfExport.PdfTransformationMatrix)">
            <summary>
            Skews coordinates of the input matrix.
            </summary>
            <param name="angleX">X skewing.</param>
            <param name="angleY">Y skewing.</param>
            <param name="input">Input matrix.</param>
            <returns>Output matrix.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawCjkString(Syncfusion.PdfExport.LineInfo,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws a CJK string.
            </summary>
            <param name="lineInfo">The line info.</param>
            <param name="layoutRectangle">The layout rectangle.</param>
            <param name="font">The font.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetCjkString(System.String)">
            <summary>
            Gets a CJK string.
            </summary>
            <param name="line">The line.</param>
            <returns>A proper PdfString class instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawAsciiLine(Syncfusion.PdfExport.LineInfo,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws Ascii line.
            </summary>
            <param name="lineInfo">Text line.</param>
            <param name="layoutRectangle">Lay outing rectangle.</param>
            <param name="font">Font object.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetAsciiString(System.String)">
            <summary>
            Creates PdfString from ASCII string. 
            </summary>
            <param name="token">String line.</param>
            <returns>PdfString object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawUnicodeLine(Syncfusion.PdfExport.LineInfo,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws unicode line.
            </summary>
            <param name="lineInfo">Text line.</param>
            <param name="layoutRectangle">Lay outing rectangle.</param>
            <param name="font">Font object.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetUnicodeString(System.String)">
            <summary>
            Creates PdfString from the unicode text.
            </summary>
            <param name="token">Unicode text.</param>
            <returns>PdfString object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.BreakUnicodeLine(System.String,Syncfusion.PdfExport.PdfTrueTypeFont,System.String[]@)">
            <summary>
            Breakes the unicode line to the words and converts symbols to glyphs.
            </summary>
            <param name="line">String text.</param>
            <param name="ttfFont">TTF font.</param>
            <param name="words">Array of real words.</param>
            <returns>Array of text in glyphs.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.ConvertToUnicode(System.String,Syncfusion.PdfExport.PdfTrueTypeFont)">
            <summary>
            Converts to unicode format.
            </summary>
            <param name="text">Unicode text.</param>
            <param name="ttfFont">The TTF font.</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawUnicodeBlocks(System.String[],System.String[],Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat,System.Single)">
            <summary>
            Draws array of unicode tokens.
            </summary>
            <param name="blocks">Unicode tokens.</param>
            <param name="words">Array of the real words.</param>
            <param name="font">Font object.</param>
            <param name="format">Text formatting.</param>
            <param name="wordSpacing">Word spacing value if need to be justified.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.ApplyStringSettings(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Applies all the text settings.
            </summary>
            <param name="font">Font object.</param>
            <param name="pen">Pen object.</param>
            <param name="brush">Brush object.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetHorizontalAlignShift(System.Single,System.Single,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Calculates shift value if the line is horizontaly aligned.
            </summary>
            <param name="lineWidth">Line width.</param>
            <param name="boundsWidth">Bounds width.</param>
            <param name="format">Text format.</param>
            <returns>Shift value.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetTextVerticalAlignShift(System.Single,System.Single,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Calculates shift value if the text is vertically aligned.
            </summary>
            <param name="textHeight">Text height.</param>
            <param name="boundsHeight">Bounds height.</param>
            <param name="format">Text format.</param>
            <returns>Shift value.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.JustifyLine(Syncfusion.PdfExport.LineInfo,System.Single,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Justifies the line if needed.
            </summary>
            <param name="lineInfo">String text.</param>
            <param name="boundsWidth">Width of the bounds.</param>
            <param name="format">Text format.</param>
            <returns>Space width for justifying.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.ShouldJustify(Syncfusion.PdfExport.LineInfo,System.Single,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Checks whether the line should be justified.
            </summary>
            <param name="lineInfo">String text.</param>
            <param name="boundsWidth">Width of the bounds.</param>
            <param name="format">Text format.</param>
            <returns>True if the line should be justified.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.CheckCorrectLayoutRectangle(System.Drawing.SizeF,System.Single,System.Single,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Creates lay outed rectangle depending on the text settings.
            </summary>
            <param name="textSize">Size of the text.</param>
            <param name="x">X co-ordinate of the text.</param>
            <param name="y">Y co-ordinate of the text.</param>
            <param name="format">Text format settings.</param>
            <returns>layout rectangle.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.UnderlineStrikeoutText(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfStringLayoutResult,Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Emulates Underline, Strikeout of the text if needed.
            </summary>
            <param name="pen">Current pen.</param>
            <param name="brush">Current brush.</param>
            <param name="result">Lay outing result.</param>
            <param name="font">Font object.</param>
            <param name="layoutRectangle">Lay outing rectangle.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.CreateUnderlineStikeoutPen(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Creates a pen for drawing lines in the text.
            </summary>
            <param name="pen">Current pen.</param>
            <param name="brush">Current brush.</param>
            <param name="font">Current font.</param>
            <param name="format">Text format.</param>
            <returns>Pen for the lines.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawLayoutResult(Syncfusion.PdfExport.PdfStringLayoutResult,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfStringFormat,System.Drawing.RectangleF)">
            <summary>
            Draws layout result.
            </summary>
            <param name="result">Layout result.</param>
            <param name="font">Text font.</param>
            <param name="format">Text format.</param>
            <param name="layoutRectangle">Layout rectangle.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.DrawStringLayoutResult(Syncfusion.PdfExport.PdfStringLayoutResult,Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfBrush,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Draws a layout result.
            </summary>
            <param name="result">Layout result.</param>
            <param name="font">Text font.</param>
            <param name="pen">The pen object.</param>
            <param name="brush">The brush object.</param>
            <param name="layoutRectangle">Layout rectangle.</param>
            <param name="format">Text format.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetLineIndent(Syncfusion.PdfExport.LineInfo,Syncfusion.PdfExport.PdfStringFormat,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Returns line indent for the line.
            </summary>
            <param name="lineInfo">Line info.</param>
            <param name="format">Text settings.</param>
            <param name="layoutBounds">Layout Bounds.</param>
            <param name="firstLine">Indicates whether the line is the first in the text.</param>
            <returns>Returns line indent for the line.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.RightToLeft(Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Checks whether RTL is enabled.
            </summary>
            <param name="format">Text settings.</param>
            <returns>Tre if RTL is enabled.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.GetLineBounds(System.Int32,Syncfusion.PdfExport.PdfStringLayoutResult,Syncfusion.PdfExport.PdfFont,System.Drawing.RectangleF,Syncfusion.PdfExport.PdfStringFormat)">
            <summary>
            Returns bounds of the line info.
            </summary>
            <param name="lineIndex">index of the line in the result.</param>
            <param name="result">Layout result.</param>
            <param name="font">Font used for this text.</param>
            <param name="layoutRectangle">Layout rectangle.</param>
            <param name="format">Text settings.</param>
            <returns>Returns bounds of the line info.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfGraphics.GetResources">
            <summary>
            Delegate declaring a method returning resources.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfGraphics.TransparencyData">
            <summary>
            Holds info about transparency.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.TransparencyData.#ctor(System.Single,System.Single,Syncfusion.PdfExport.PdfBlendMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfGraphics.TransparencyData"/> class.
            </summary>
            <param name="alphaPen">The alpha pen.</param>
            <param name="alphaBrush">The alpha brush.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.TransparencyData.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and
            represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphics.TransparencyData.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfGraphicsState">
            <summary>
            Represents the state of a Graphics object. This object is returned by a call to the Save methods.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Save the graphics.
            PdfGraphicsState state = graphics.Save();
            //Set graphics translate transform.
            graphics.TranslateTransform(100, 100);            
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0);
            //Restore the graphics.
            graphics.Restore(state);
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Save the graphics.
            Dim state As PdfGraphicsState = graphics.Save()
            'Set graphics translate transform.
            graphics.TranslateTransform(100, 100)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Red, 0, 0)
            'Restore the graphics.
            graphics.Restore(state)
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_graphics">
            <summary>
            Parent graphics object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_matrix">
            <summary>
            The current transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_textRenderingMode">
            <summary>
            Stores previous rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_characterSpacing">
            <summary>
            Previous character spacing value or 0.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_wordSpacing">
            <summary>
            Previous word spacing value or 0.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_textScaling">
            <summary>
            The previously used text scaling value.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_pen">
            <summary>
            Current pen.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_brush">
            <summary>
            Current brush.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_font">
            <summary>
            Current font.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsState.m_colorSpace">
            <summary>
            Current color space.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.Graphics">
            <summary>
            Gets the parent graphics object.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.Matrix">
            <summary>
            Gets the current matrix.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.CharacterSpacing">
            <summary>
            Gets or sets the current character spacing.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.WordSpacing">
            <summary>
            Gets or sets the word spacing value.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.TextScaling">
            <summary>
            Gets or sets the text scaling value.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.Pen">
            <summary>
            Gets or sets the current pen object.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.Brush">
            <summary>
            Gets or sets the brush.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.Font">
            <summary>
            Gets or sets the current font object.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.ColorSpace">
            <summary>
            Gets or sets the current color space value.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfGraphicsState.TextRenderingMode">
            <summary>
            Gets or sets the text rendering mode.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphicsState.#ctor">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfGraphicsState.#ctor(Syncfusion.PdfExport.PdfGraphics,Syncfusion.PdfExport.PdfTransformationMatrix)">
            <summary>
            Creates new object.
            </summary>
            <param name="graphics">Parent graphics state.</param>
            <param name="matrix">The current transformation matrix.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfMargins">
            <summary>
            A class representing PDF page margins.
            </summary>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create new PDF margin.
            PdfMargins margin = new PdfMargins();
            //Set all the side of the page margin.
            margin.All = 20;       
            //Set margin
            document.PageSettings.Margins = margin;
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Draws the String.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(new PointF(0, 0), page.GetClientSize()));
            //Saves the document.
            document.Save("output.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">   
            'Creates a new PDF document.
            Dim document As New PdfDocument()
            'Create new PDF margin.
            Dim margin As New PdfMargins()
            'Set all the side of page margin.
            margin.All = 20        
            'Set margin.
            document.PageSettings.Margins = margin
            'Adds a page.PdfPage 
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Draws the String.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(New PointF(0, 0), page.GetClientSize()))
            'Saves the document.
            document.Save("output.pdf")
            'Closes the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfMargins.PageMargin">
            <summary>
            Represents the Default Page Margin value.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfMargins.Left">
            <summary>
            Gets or sets the left margin size.
            </summary>
            <remarks>Default value: 40 pixels</remarks>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create new PDF margin.
            PdfMargins margin = new PdfMargins();
            //Set left margin.
            margin.Left = 20;
            //Set right margin.
            margin.Right = 40;
            //Set top margin.
            margin.Top = 100;
            //Set bottom margin.
            margin.Bottom = 100;
            //Set margin.
            document.PageSettings.Margins = margin;
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Draws the String.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(new PointF(0, 0), page.GetClientSize()));
            //Saves the document.
            document.Save("output.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">   
            'Creates a new PDF document.
            Dim document As New PdfDocument()
            'Create new PDF margin.
            Dim margin As New PdfMargins()
            'Set left margin.
            margin.Left = 20
            'Set right margin.
            margin.Right = 40
            'Set top margin.
            margin.Top = 100
            'Set bottom margin.
            margin.Bottom = 100
            'Set margin.
            document.PageSettings.Margins = margin
            'Adds a page.PdfPage 
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Draws the String.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(New PointF(0, 0), page.GetClientSize()))
            'Saves the document.
            document.Save("output.pdf")
            'Closes the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfMargins.Top">
            <summary>
            Gets or sets the top margin size.
            </summary>
            <remarks>Default value: 40 pixels</remarks>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create new PDF margin.
            PdfMargins margin = new PdfMargins();
            //Set left margin.
            margin.Left = 20;
            //Set right margin.
            margin.Right = 40;
            //Set top margin.
            margin.Top = 100;
            //Set bottom margin.
            margin.Bottom = 100;
            //Set margin.
            document.PageSettings.Margins = margin;
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Draws the String.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(new PointF(0, 0), page.GetClientSize()));
            //Saves the document.
            document.Save("output.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">   
            'Creates a new PDF document.
            Dim document As New PdfDocument()
            'Create new PDF margin.
            Dim margin As New PdfMargins()
            'Set left margin.
            margin.Left = 20
            'Set right margin.
            margin.Right = 40
            'Set top margin.
            margin.Top = 100
            'Set bottom margin.
            margin.Bottom = 100
            'Set margin.
            document.PageSettings.Margins = margin
            'Adds a page.PdfPage 
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Draws the String.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(New PointF(0, 0), page.GetClientSize()))
            'Saves the document.
            document.Save("output.pdf")
            'Closes the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfMargins.Right">
            <summary>
            Gets or sets the right margin size.
            </summary>
            <remarks>Default value: 40 pixels</remarks>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create new PDF margin.
            PdfMargins margin = new PdfMargins();
            //Set left margin.
            margin.Left = 20;
            //Set right margin.
            margin.Right = 40;
            //Set top margin.
            margin.Top = 100;
            //Set bottom margin.
            margin.Bottom = 100;
            //Set margin.
            document.PageSettings.Margins = margin;
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Draws the String.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(new PointF(0, 0), page.GetClientSize()));
            //Saves the document.
            document.Save("output.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">   
            'Creates a new PDF document.
            Dim document As New PdfDocument()
            'Create new PDF margin.
            Dim margin As New PdfMargins()
            'Set left margin.
            margin.Left = 20
            'Set right margin.
            margin.Right = 40
            'Set top margin.
            margin.Top = 100
            'Set bottom margin.
            margin.Bottom = 100
            'Set margin.
            document.PageSettings.Margins = margin
            'Adds a page.PdfPage 
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Draws the String.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(New PointF(0, 0), page.GetClientSize()))
            'Saves the document.
            document.Save("output.pdf")
            'Closes the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfMargins.Bottom">
            <summary>
            Gets or sets the bottom margin size.
            </summary>
            <remarks>Default value: 40 pixels</remarks>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create new PDF margin.
            PdfMargins margin = new PdfMargins();
            //Set left margin.
            margin.Left = 20;
            //Set right margin.
            margin.Right = 40;
            //Set top margin.
            margin.Top = 100;
            //Set bottom margin.
            margin.Bottom = 100;
            //Set margin.
            document.PageSettings.Margins = margin;
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Draws the String.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(new PointF(0, 0), page.GetClientSize()));
            //Saves the document.
            document.Save("output.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">   
            'Creates a new PDF document.
            Dim document As New PdfDocument()
            'Create new PDF margin.
            Dim margin As New PdfMargins()
            'Set left margin.
            margin.Left = 20
            'Set right margin.
            margin.Right = 40
            'Set top margin.
            margin.Top = 100
            'Set bottom margin.
            margin.Bottom = 100
            'Set margin.
            document.PageSettings.Margins = margin
            'Adds a page.PdfPage 
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Draws the String.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(New PointF(0, 0), page.GetClientSize()))
            'Saves the document.
            document.Save("output.pdf")
            'Closes the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfMargins.All">
            <summary>
            Sets margin of each side of the page
            </summary>
            <value>Margin of each side.</value>
            <remarks>Default value: 40 pixels</remarks>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create new PDF margin.
            PdfMargins margin = new PdfMargins();
            //Set all the side of the page margin.
            margin.All = 20;       
            //Set margin
            document.PageSettings.Margins = margin;
            //Adds a page.PdfPage 
            PdfPage page = document.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Draws the String.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(new PointF(0, 0), page.GetClientSize()));
            //Saves the document.
            document.Save("output.pdf");
            //Closes the document.
            document.Close(true);
            </code>
            <code lang="VB">   
            'Creates a new PDF document.
            Dim document As New PdfDocument()
            'Create new PDF margin.
            Dim margin As New PdfMargins()
            'Set all the side of page margin.
            margin.All = 20        
            'Set margin.
            document.PageSettings.Margins = margin
            'Adds a page.PdfPage 
            Dim page As PdfPage = document.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Draws the String.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(New PointF(0, 0), page.GetClientSize()))
            'Saves the document.
            document.Save("output.pdf")
            'Closes the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMargins.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfMargins"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMargins.SetMargins(System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="margin">The margin size.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMargins.SetMargins(System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="leftRight">The left right.</param>
            <param name="topBottom">The top bottom.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMargins.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMargins.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>The cloned object.</returns>
            <example>
            <code lang="C#">
            //Creates a new PDF document.
            PdfDocument document = new PdfDocument();
            //Create new PDF margin.
            PdfMargins margin = new PdfMargins();
            //Set left margin.
            margin.All = 20;
            //Create new PDF section.
            PdfSection section = document.Sections.Add();
            //Set margin.
            section.PageSettings.Margins = margin;
            //Adds a page.PdfPage 
            PdfPage page = section.Pages.Add();
            //Creates PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Draws the String.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(new PointF(0, 0), page.GetClientSize()));
            //Create new PDF section.
            section = document.Sections.Add();
            //Clone the margin.
            PdfMargins margin1 = margin.Clone() as PdfMargins;
            margin1.Left = 30;
            //set marign.
            section.PageSettings.Margins = margin1;
            page = section.Pages.Add();
            //Creates PDF graphics for the page.
            graphics = page.Graphics;
            //Draws the String.
            graphics.DrawRectangle(PdfPens.Red, new RectangleF(new PointF(0, 0), page.GetClientSize()));
            //Saves the document.
            document.Save("output.pdf");
            //Closes the document.
            document.Close(true);
            </code> 
            <code lang="VB">
            'Creates a new PDF document.
            Dim document As New PdfDocument()
            'Create new PDF margin.
            Dim margin As New PdfMargins()
            'Set left margin.
            margin.All = 20
            'Create new PDF section.
            Dim section As PdfSection = document.Sections.Add()
            'Set margin.
            section.PageSettings.Margins = margin
            'Adds a page.PdfPage 
            Dim page As PdfPage = section.Pages.Add()
            'Creates PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Draws the String.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(New PointF(0, 0), page.GetClientSize()))
            'Create new PDF section.
            section = document.Sections.Add()
            'Clone the margin.
            Dim margin1 As PdfMargins = TryCast(margin.Clone(), PdfMargins)
            margin1.Left = 30
            'set marign.
            section.PageSettings.Margins = margin1
            page = section.Pages.Add()
            'Creates PDF graphics for the page.
            graphics = page.Graphics
            'Draws the String.
            graphics.DrawRectangle(PdfPens.Red, New RectangleF(New PointF(0, 0), page.GetClientSize()))
            'Saves the document.
            document.Save("output.pdf")
            'Closes the document.
            document.Close(True)
            </code> 
            </example>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPen">
            <summary>
            A class defining settings for drawing operations, that determines the color, width, and style of the drawing elements.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPen.m_bImmutable">
            <summary>
            Indicates if the pen is immutable.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPen.Brush">
            <summary>
            Gets or sets the brush, which specifies the pen behavior.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfBrush"/> that determines the color and texture</value>
            <remarks>If the brush is set, the color values are ignored,
            except for PdfSolidBrush.</remarks>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
             //Set brush.
             pen.Brush = new PdfSolidBrush(Color.Green);
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Set brush.
            pen.Brush = New PdfSolidBrush(Color.Green)
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPen.Color">
            <summary>
            Gets or sets the color of the pen.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfColor"/> provide the color to pen</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set pen color.
            pen.Color = new PdfColor(Color.Green);
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Set pen color.
            pen.Color = New PdfColor(Color.Green)
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPen.DashOffset">
            <summary>
            Gets or sets the dash offset of the pen.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set pen dash offset.
            pen.DashOffset = 0.5f;
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Set pen dash offset.
            pen.DashOffset = 0.5F
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPen.DashPattern">
            <summary>
            Gets or sets the dash pattern of the pen.
            </summary>
            <remarks>we can't set the Dash pattern for solid dash style </remarks>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set custom dash style.
            pen.DashStyle = PdfDashStyle.Custom;
            // Create a custom dash pattern.
            pen.DashPattern = new float[] { 4.0f, 2.0f, 1.0f, 3.0f }
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
             'Set custom dash style.
             pen.DashStyle = PdfDashStyle.Custom
             'Create a custom dash pattern.
             pen.DashPattern = New Single() { 4.0F, 2.0F, 1.0F, 3.0F}
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPen.DashStyle">
            <summary>
            Gets or sets the dash style of the pen.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfDashStyle"/> provides the various dash styles</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set custom dash style.
            pen.DashStyle = PdfDashStyle.Custom;
            // Create a custom dash pattern.
            pen.DashPattern = new float[] { 4.0f, 2.0f, 1.0f, 3.0f }
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
             'Set custom dash style.
             pen.DashStyle = PdfDashStyle.Custom
             'Create a custom dash pattern.
             pen.DashPattern = New Single() { 4.0F, 2.0F, 1.0F, 3.0F}
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPen.LineCap">
            <summary>
            Gets or sets the line cap of the pen.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfLineCap"/> gives various line cap options</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set custom dash style.
            pen.DashStyle = PdfDashStyle.Custom;
            //Set line cap.
            pen.LineCap = PdfLineCap.Round;
            // Create a custom dash pattern.
            pen.DashPattern = new float[] { 4.0f, 2.0f, 1.0f, 3.0f }
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Set custom dash style.
            pen.DashStyle = PdfDashStyle.Custom
            'Create a custom dash pattern.
            'Set line cap.
            pen.LineCap = PdfLineCap.Round
             pen.DashPattern = New Single() { 4.0F, 2.0F, 1.0F, 3.0F}
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPen.LineJoin">
            <summary>
            Gets or sets the line join style of the pen.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfLineJoin"/> provides various line join options.</value>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set custom dash style.
            pen.DashStyle = PdfDashStyle.Custom;
            //Set line jion.
            pen.LineJoin = PdfLineJoin.Bevel;
            // Create a custom dash pattern.
            pen.DashPattern = new float[] { 4.0f, 2.0f, 1.0f, 3.0f }
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Set custom dash style.
            pen.DashStyle = PdfDashStyle.Custom
            'Set line jion.
            pen.LineJoin = PdfLineJoin.Bevel
            'Create a custom dash pattern.
            pen.DashPattern = New Single() { 4.0F, 2.0F, 1.0F, 3.0F}
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPen.Width">
            <summary>
            Gets or sets the width of the pen.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set pen width.
            pen.Width = 4;
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Set pen width.
            pen.Width = 4
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPen.MiterLimit">
            <summary>
            Gets or sets the miter limit.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set pen width.
            pen.Width = 4;
            //Set miter limit,
            pen.MiterLimit = 2;
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Set pen width.
            pen.Width = 4
            'Set miter limit,
            pen.MiterLimit = 2
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.#ctor(Syncfusion.PdfExport.PdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPen"/> class.
            </summary>
            <param name="color">The color.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(new PdfColor(Color.Red));
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(New PdfColor(Color.Red))
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPen"/> class.
            </summary>
            <param name="color">The system color.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.#ctor(Syncfusion.PdfExport.PdfColor,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPen"/> class with color and width of the pen
            </summary>
            <param name="color">The <see cref="T:Syncfusion.PdfExport.PdfColor"/> provides color to the pen.</param>
            <param name="width">Width of the pen's line.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(new PdfColor(Color.Red), 2);
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(New PdfColor(Color.Red), 2)
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>        
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPen"/> class with color and width of the pen
            </summary>
            <param name="color">The <see cref="P:Syncfusion.PdfExport.PdfPen.Color"/> provides color to the pen.</param>
            <param name="width">Width of the pen's line.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red, 2);
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red, 2)
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.#ctor(Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPen"/> class with <see cref="T:Syncfusion.PdfExport.PdfBrush"/>
            </summary>
            <param name="brush">The <see cref="T:Syncfusion.PdfExport.PdfBrush"/> provides color and texture to the pen.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(new PdfSolidBrush(Color.Red));
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(New PdfSolidBrush(Color.Red))
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.#ctor(Syncfusion.PdfExport.PdfBrush,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPen"/> class with <see cref="T:Syncfusion.PdfExport.PdfBrush"/> and width.
            </summary>
            <param name="brush">The <see cref="T:Syncfusion.PdfExport.PdfBrush"/> provides color and texture to the pen.</param>
            <param name="width">Width of the pen's line.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(new PdfSolidBrush(Color.Red), 2);
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(New PdfSolidBrush(Color.Red), 2)
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.Syncfusion#PdfExport#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A new pen with the same properties.</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Clone the PDF pen.
            PdfPen pen1 = pen.Clone();
            pen1.Width = 10;
            graphics.DrawRectangle(pen1, new RectangleF(10, 120, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Clone the PDF pen.
            Dim pen1 As PdfPen = pen.Clone()
            pen1.Width = 10
            graphics.DrawRectangle(pen1, New RectangleF(10, 120, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.AssignBrush(Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Sets the brush.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.SetStrokingToBrush(Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Sets the stroking flag to brush.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.ResetStroking(Syncfusion.PdfExport.PdfBrush)">
            <summary>
            Resets the stroking.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.MonitorChanges(Syncfusion.PdfExport.PdfPen,Syncfusion.PdfExport.PdfStreamWriter,Syncfusion.PdfExport.PdfGraphics.GetResources,System.Boolean,Syncfusion.PdfExport.PdfColorSpace)">
            <summary>
            Monitors the changes.
            </summary>
            <param name="currentPen">The current pen.</param>
            <param name="streamWriter">The stream writer.</param>
            <param name="getResources">The get resources.</param>
            <param name="saveState">if it is save state, set to <c>true</c>.</param>
            <param name="currentColorSpace">The current color space.</param>
            <returns>True if the pen was different.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.GetPattern">
            <summary>
            Gets the pattern.
            </summary>
            <returns>The initialized pattern.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.DashControl(Syncfusion.PdfExport.PdfPen,System.Boolean,Syncfusion.PdfExport.PdfStreamWriter)">
            <summary>
            Controls the dash style and behaviour of each line.
            </summary>
            <param name="pen">The pen.</param>
            <param name="saveState">if set to <c>true</c> the state should be changed anyway.</param>
            <param name="streamWriter">The stream writer.</param>
            <returns>True if the dash is different.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPen.CheckImmutability(System.String)">
            <summary>
            Checks the immutability.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfResources.m_names">
            <summary>
            Dictionary of the objects names.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfResources.m_properties">
            <summary>
            Dictionary of the properties names.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfResources.Names">
            <summary>
            Gets the font names.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfResources.OriginalFontName">
            <summary>
            Get or set the type1 font name other than PdfStandardFonts,inorder to refer exact font from page's font resource
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfResources"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.#ctor(Syncfusion.PdfExport.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfResources"/> class.
            </summary>
            <param name="baseDictionary">The base dictionary.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.GetName(Syncfusion.PdfExport.IPdfWrapper)">
            <summary>
            Generates name for the object and adds to the resource if the object is new. Otherwise
            returns object's name in the context of the resources.
            </summary>
            <param name="obj">Object contained by a resource.</param>
            <returns>Returns object's name in the context of the resources.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.ObtainNames">
            <summary>
            Gets resource names to font dictionaries.
            </summary>
            <returns>The names to font dictionaries.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.RequireProcSet(System.String)">
            <summary>
            Requires the proc set.
            </summary>
            <param name="procSetName">Name of the proc set.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.GenerateName">
            <summary>
            Generates Unique string name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.Add(Syncfusion.PdfExport.IPdfWrapper,Syncfusion.PdfExport.PdfName)">
            <summary>
            Adds object to the resources.
            </summary>
            <param name="obj">Object to be added to resources.</param>
            <param name="name">Name of the object.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.Add(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfName)">
            <summary>
            Adds the font to the "Fonts" sub dictionary.
            </summary>
            <param name="font">The font to add.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.AddProperties(System.String,Syncfusion.PdfExport.PdfReferenceHolder)">
            <summary>
            Adds the Layer Properties to the "Properties"  dictionary.
            </summary>
            <param name="layerid">The layer properties to add.</param>
            <param name="reff">The reference.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.Add(Syncfusion.PdfExport.PdfTemplate,Syncfusion.PdfExport.PdfName)">
            <summary>
            Adds the template to the "XObject" sub dictionary.
            </summary>
            <param name="template">The template to add.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.Add(Syncfusion.PdfExport.PdfImage,Syncfusion.PdfExport.PdfName)">
            <summary>
            Adds the image to the "XObject" sub dictionary.
            </summary>
            <param name="image">The image to add.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.Add(Syncfusion.PdfExport.PdfBrush,Syncfusion.PdfExport.PdfName)">
            <summary>
            Adds the specified brush to the resources.
            </summary>
            <param name="brush">The brush.</param>
            <param name="name">The name of the brush.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfResources.Add(Syncfusion.PdfExport.PdfTransparency,Syncfusion.PdfExport.PdfName)">
            <summary>
            Adds the specified transparancy to the resources.
            </summary>
            <param name="transparancy">The transparancy.</param>
            <param name="name">The name of the brush.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTransformationMatrix">
            <summary>
            Class for representing Root transformation matrix.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTransformationMatrix.DegRadFactor">
             <property name="flag" value="Finished" />
            
             <summary>
             Value for angle converting.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTransformationMatrix.RadDegFactor">
             <property name="flag" value="Finished" />
            
             <summary>
             Value for angle converting.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTransformationMatrix.m_matrix">
             <property name="flag" value="Finished" />
            
             <summary>
             Transformation matrix.
             </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTransformationMatrix.OffsetX">
            <summary>
            Gets the X translation value.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTransformationMatrix.OffsetY">
            <summary>
            Gets the Y translation value.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTransformationMatrix.Matrix">
             <property name="flag" value="Finished" />
            
             <summary>
             Gets or sets the internal matrix object.
             </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.#ctor">
            <summary>
            Initializes object.
            </summary>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Translate(System.Drawing.SizeF)">
            <summary>
            Translates coordinates by specified coordinates.
            </summary>
            <param name="offsets">Offsets for translation.</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Translate(System.Single,System.Single)">
            <summary>
            Translates coordinates by specified coordinates.
            </summary>
            <param name="offsetX">The X value by which to translate
            coordinate system.</param>
            <param name="offsetY">The Y value by which to translate
            coordinate system.</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Scale(System.Drawing.SizeF)">
             <property name="flag" value="Finished" />
            
             <summary>
             Scales coordinates by specified coordinates.
             </summary>
             <param name="scales">Scaling values.</param>
             <remarks>
             Order of transformation sequence is significant.
             </remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Scale(System.Single,System.Single)">
            <summary>
            Scales coordinates by specified coordinates.
            </summary>
            <param name="scaleX">The value by which to scale coordinate
            system in the X axis direction.</param>
            <param name="scaleY">The value by which to scale coordinate
            system in the Y axis direction.</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Rotate(System.Single)">
            <summary>
            Rotates coordinate system in counterclockwise direction.
            </summary>
            <param name="angle">The angle of the rotation (in degrees).</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Skew(System.Drawing.SizeF)">
            <summary>
            Skews coordinate system axes.
            </summary>
            <param name="angles">Skew angles.</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Skew(System.Single,System.Single)">
            <summary>
            Skews coordinate system axes.
            </summary>
            <param name="angleX">Skews the X axis by this angle (in
            degrees).</param>
            <param name="angleY">Skews the Y axis by this angle (in
            degrees).</param>
            <property name="flag" value="Finished"/>
            <remarks>
            Order of transformation sequence is significant.
            </remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Shear(System.Single,System.Single)">
            <summary>
            Applies the specified shear vector to this Matrix
            by prepending the shear transformation.
            </summary>
            <param name="shearX">The shear X factor.</param>
            <param name="shearY">The shear Y factor.</param>
            <remarks>The transformation applied in this method
            is a pure shear only if one of the parameters is 0.
            Applied to a rectangle at the origin, when the shearY
            factor is 0, the transformation moves the bottom edge
            horizontally by shearX times the height of the rectangle.
            When the shearX factor is 0, it moves the right edge
            vertically by shearY times the width of the rectangle.
            Caution is in order when both parameters are nonzero,
            because the results are hard to predict. For example,
            if both factors are 1, the transformation is singular
            (hence noninvertible), squeezing the entire plane to
            a single line.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.RotateAt(System.Single,System.Drawing.PointF)">
            <summary>
            Applies a clockwise rotation about the specified point.
            </summary>
            <param name="angle">The angle.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.ToString">
             <property name="flag" value="Finished" />
            
             <summary>
             Gets PDF representation.
             </summary>
             <returns>
             PDF representation.
             </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.DegressToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degreesX">The degrees X.</param>
            <returns>The value in radians.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.RadiansToDegress(System.Single)">
            <summary>
            Converts radians to degress.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The value in degress.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransformationMatrix.Syncfusion#PdfExport#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTransparency">
            <summary>
            Represents a simple transparency.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTransparency.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTransparency.Stroke">
            <summary>
            Gets the stroke operation alpha value.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTransparency.Fill">
            <summary>
            Gets the fill operation alpha value.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTransparency.Mode">
            <summary>
            Gets the blend mode.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransparency.#ctor(System.Single,System.Single,Syncfusion.PdfExport.PdfBlendMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfTransparency"/> class.
            </summary>
            <param name="stroke">The stroke operation alpha value.</param>
            <param name="fill">The fill operation alpha value.</param>
            <param name="mode">The blend mode.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransparency.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see>
            to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransparency.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            <see cref="M:System.Object.GetHashCode"></see> is suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransparency.GetNumber(System.String)">
            <summary>
            Gets the number value.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>The value of the number specified by the string key.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfTransparency.GetName(System.String)">
            <summary>
            Gets the name value.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>The name value specified by the key.</returns>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfTransparency.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfUnitConverter">
            <summary>
            Class allowing to convert different unit metrics. Converting is 
            based on Graphics object DPI settings that is why for differ
            graphics settings must be created new instance. For example:
            printers often has 300 and greater dpi resolution, for compare
            default display screen dpi is 96.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF bitmap instance.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Create a PDF unit converter instance.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to point.
            float width = converter.ConvertFromPixels(image.Width, PdfGraphicsUnit.Point);
            float height = converter.ConvertFromPixels(image.Height, PdfGraphicsUnit.Point);
            //Draw image to PDF page.
            page.Graphics.DrawImage(image, new RectangleF(0, 0, width, height));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF bitmap instance.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Create a PDF unit converter instance.
            Dim converter As New PdfUnitConvertor()
            'Convert to point.
            Dim width As Single = converter.ConvertFromPixels(image.Width, PdfGraphicsUnit.Point)
            Dim height As Single = converter.ConvertFromPixels(image.Height, PdfGraphicsUnit.Point)
            'Draw image to PDF page.
            page.Graphics.DrawImage(image, New RectangleF(0, 0, width, height))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfUnitConverter.HorizontalResolution">
            <summary>
            Indicates default horizontal resolution.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfUnitConverter.VerticalResolution">
            <summary>
            Indicates default vertical resolution.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfUnitConverter.HorizontalSize">
            <summary>
            Width, in millimeters, of the physical screen.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfUnitConverter.VerticalSize">
            <summary>
            Height, in millimeters, of the physical screen.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfUnitConverter.PxHorizontalResolution">
            <summary>
            Width, in pixels, of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfUnitConverter.PxVerticalResolution">
            <summary>
            Height, in pixels, of the screen.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfUnitConverter.m_proportions">
            <summary>
            Matrix for conversations between different numeric systems
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfUnitConverter"/> class with default DPI value of 96.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF bitmap instance.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Create a PDF unit converter instance.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to point.
            float width = converter.ConvertFromPixels(image.Width, PdfGraphicsUnit.Point);
            float height = converter.ConvertFromPixels(image.Height, PdfGraphicsUnit.Point);
            //Draw image to PDF page.
            page.Graphics.DrawImage(image, new RectangleF(0, 0, width, height));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF bitmap instance.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Create a PDF unit converter instance.
            Dim converter As New PdfUnitConvertor()
            'Convert to point.
            Dim width As Single = converter.ConvertFromPixels(image.Width, PdfGraphicsUnit.Point)
            Dim height As Single = converter.ConvertFromPixels(image.Height, PdfGraphicsUnit.Point)
            'Draw image to PDF page.
            page.Graphics.DrawImage(image, New RectangleF(0, 0, width, height))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the DPI value
            </summary>
            <param name="dpi">The dpi.</param>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF bitmap instance.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Create a PDF unit converter instance.
            PdfUnitConvertor converter = new PdfUnitConvertor(360);
            //Convert to point.
            float width = converter.ConvertFromPixels(image.Width, PdfGraphicsUnit.Point);
            float height = converter.ConvertFromPixels(image.Height, PdfGraphicsUnit.Point);
            //Draw image to PDF page.
            page.Graphics.DrawImage(image, new RectangleF(0, 0, width, height));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF bitmap instance.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Create a PDF unit converter instance.
            Dim converter As New PdfUnitConvertor(360)
            'Convert to point.
            Dim width As Single = converter.ConvertFromPixels(image.Width, PdfGraphicsUnit.Point)
            Dim height As Single = converter.ConvertFromPixels(image.Height, PdfGraphicsUnit.Point)
            'Draw image to PDF page.
            page.Graphics.DrawImage(image, New RectangleF(0, 0, width, height))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.ConvertUnits(System.Single,Syncfusion.PdfExport.PdfGraphicsUnit,Syncfusion.PdfExport.PdfGraphicsUnit)">
            <summary>
            Converts the value, from one graphics unit to another graphics unit.
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.ConvertToPixels(System.Single,Syncfusion.PdfExport.PdfGraphicsUnit)">
            <summary>
            Converts the value to pixel from specified graphics unit.
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <returns>Value stored in pixels</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF unitconverter.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to pixels.
            float pageWidth = converter.ConvertToPixels(doc.PageSettings.Size.Width, PdfGraphicsUnit.Point);
            page.Graphics.DrawString("PDF page width is " + pageWidth + " pixel", new PdfStandardFont(PdfFontFamily.Helvetica,12),PdfBrushes.Red, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF unitconverter.
            Dim converter As New PdfUnitConvertor()
            'Convert to pixels.
            Dim pageWidth As Single = converter.ConvertToPixels(doc.PageSettings.Size.Width, PdfGraphicsUnit.Point)
            page.Graphics.DrawString("PDF page width is " + pageWidth + " pixel", New PdfStandardFont(PdfFontFamily.Helvetica, 12), PdfBrushes.Red, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.ConvertToPixels(System.Drawing.RectangleF,Syncfusion.PdfExport.PdfGraphicsUnit)">
            <summary>
            Converts the rectangle location and size to Pixels from specified 
            measure units
            </summary>
            <param name="rect">source rectangle</param>
            <param name="from">source rectangle measure units</param>
            <returns>Rectangle with Pixels</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF unitconverter.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to pixels.
             RectangleF rect = converter.ConvertToPixels(new RectangleF(100, 100, 200, 100), PdfGraphicsUnit.Point);
             page.Graphics.DrawRectangle(PdfPens.Red, rect);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF unitconverter.
            Dim converter As New PdfUnitConvertor()
            'Convert to pixels.
            Dim rect As RectangleF = converter.ConvertToPixels(New RectangleF(100, 100, 200, 100), PdfGraphicsUnit.Point)
            page.Graphics.DrawRectangle(PdfPens.Red, rect)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.ConvertToPixels(System.Drawing.PointF,Syncfusion.PdfExport.PdfGraphicsUnit)">
            <summary>
            Converts point from specified graphics units to pixels
            </summary>
            <param name="point">source point for convert</param>
            <param name="from">measure units</param>
            <returns>point in pixels coordinates</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF unitconverter.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to pixels.
            PointF location = converter.ConvertToPixels(new PointF(100, 100), PdfGraphicsUnit.Point);
            page.Graphics.DrawRectangle(PdfPens.Red, new RectangleF(location, new SizeF(200, 50));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF unitconverter.
            Dim converter As New PdfUnitConvertor()
            'Convert to pixels.
            Dim location As PointF = converter.ConvertToPixels(New PointF(100, 100), PdfGraphicsUnit.Point)
            page.Graphics.DrawRectangle(PdfPens.Red, new RectangleF(location, new SizeF(200, 50))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.ConvertToPixels(System.Drawing.SizeF,Syncfusion.PdfExport.PdfGraphicsUnit)">
            <summary>
            Converts size from specified graphics units to pixels
            </summary>
            <param name="size">source size</param>
            <param name="from">measure units</param>
            <returns>size in pixels</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF unitconverter.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to pixels.
             SizeF pageSize = converter.ConvertToPixels(doc.PageSettings.Size, PdfGraphicsUnit.Point);
             page.Graphics.DrawString("PDF page size is " + pageSize + " pixel", new PdfStandardFont(PdfFontFamily.Helvetica,12),PdfBrushes.Red, PointF.Empty);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF unitconverter.
            Dim converter As New PdfUnitConvertor()
            'Convert to pixels.
            Dim pageSize As SizeF = converter.ConvertToPixels(doc.PageSettings.Size, PdfGraphicsUnit.Point)
            page.Graphics.DrawString("PDF page size is " + pageSize + " pixel", New PdfStandardFont(PdfFontFamily.Helvetica, 12), PdfBrushes.Red, PointF.Empty)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.ConvertFromPixels(System.Single,Syncfusion.PdfExport.PdfGraphicsUnit)">
            <summary>
            Converts value, to specified graphics unit from Pixel.
            </summary>
            <param name="value">Value to convert</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF bitmap instance.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Create a PDF unit converter instance.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to point.
            float width = converter.ConvertFromPixels(image.Width, PdfGraphicsUnit.Point);
            float height = converter.ConvertFromPixels(image.Height, PdfGraphicsUnit.Point);
            //Draw image to PDF page.
            page.Graphics.DrawImage(image, new RectangleF(0, 0, width, height));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF bitmap instance.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Create a PDF unit converter instance.
            Dim converter As New PdfUnitConvertor()
            'Convert to point.
            Dim width As Single = converter.ConvertFromPixels(image.Width, PdfGraphicsUnit.Point)
            Dim height As Single = converter.ConvertFromPixels(image.Height, PdfGraphicsUnit.Point)
            'Draw image to PDF page.
            page.Graphics.DrawImage(image, New RectangleF(0, 0, width, height))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.ConvertFromPixels(System.Drawing.RectangleF,Syncfusion.PdfExport.PdfGraphicsUnit)">
            <summary>
            Converts rectangle in Pixels into rectangle with specified 
            measure units
            </summary>
            <param name="rect">source rectangle in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Rectangle in specified units</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF bitmap instance.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Create a PDF unit converter instance.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to point.
            RectangleF rect = converter.ConvertFromPixels(new RectangleF(100,100,500, 700), PdfGraphicsUnit.Point);  
            //Draw image to PDF page.
            page.Graphics.DrawImage(image, rect);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF bitmap instance.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Create a PDF unit converter instance.
            Dim converter As New PdfUnitConvertor()
            'Convert to point.
            Dim rect As RectangleF = converter.ConvertFromPixels(New RectangleF(100,100,500, 700), PdfGraphicsUnit.Point)  
            'Draw image to PDF page.
            page.Graphics.DrawImage(image, rect)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.ConvertFromPixels(System.Drawing.PointF,Syncfusion.PdfExport.PdfGraphicsUnit)">
            <summary>
            Converts rectangle from pixels to specified units
            </summary>
            <param name="point">point in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Point in specified units</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF bitmap instance.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Create a PDF unit converter instance.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to point.     
            PointF location = converter.ConvertFromPixels(new PointF(100,100), PdfGraphicsUnit.Point);
            //Draw image to PDF page.
            page.Graphics.DrawImage(image, new RectangleF(location, image.GetBounds().Size));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF bitmap instance.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Create a PDF unit converter instance.
            Dim converter As New PdfUnitConvertor()
            'Convert to point.       
            Dim location As PointF = converter.ConvertFromPixels(New PointF(100,100), PdfGraphicsUnit.Point)
            'Draw image to PDF page.
            page.Graphics.DrawImage(image, New RectangleF(location, image.GetBounds().Size))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.ConvertFromPixels(System.Drawing.SizeF,Syncfusion.PdfExport.PdfGraphicsUnit)">
            <summary>
            Converts Size in pixels to size in specified measure units
            </summary>
            <param name="size">source size</param>
            <param name="to">convert to units</param>
            <returns>output size in specified measure units</returns>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF bitmap instance.
            PdfBitmap image = new PdfBitmap("Autumn Leaves.jpg");
            //Create a PDF unit converter instance.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to point.
            SizeF size = converter.ConvertFromPixels(image.GetBounds().Size, PdfGraphicsUnit.Point);
            //Draw image to PDF page.
            page.Graphics.DrawImage(image, new RectangleF( new PointF(0, 0), size));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF bitmap instance.
            Dim image As New PdfBitmap("Autumn Leaves.jpg")
            'Create a PDF unit converter instance.
            Dim converter As New PdfUnitConvertor()
            'Convert to point.
            Dim size As SizeF = converter.ConvertFromPixels(image.GetBounds().Size, PdfGraphicsUnit.Point)       
            'Draw image to PDF page.
            page.Graphics.DrawImage(image, New RectangleF(New PointF(0, 0), size))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfUnitConverter.UpdateProportions(System.Single)">
            <summary>
            Update proportions matrix according to Graphics settings
            </summary>
            <param name="pixelPerInch">The pixel per inch value.</param>
        </member>
        <member name="F:Syncfusion.PdfExport.ProcedureSets.PDF">
            <summary>
            Represents the Painting and graphics state
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ProcedureSets.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ProcedureSets.ImageB">
            <summary>
            Grayscale images or image masks
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ProcedureSets.ImageC">
            <summary>
            Color images
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ProcedureSets.ImageI">
            <summary>
            Indexed (color-table) images
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfVerticalAlignment">
            <summary>
            Specifies the type of Vertical alignment.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Set the line alignment.
            format.LineAlignment = PdfVerticalAlignment.Middle;
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVerticalAlignment.Top">
            <summary>
            Specifies the element is aligned to Top.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVerticalAlignment.Middle">
            <summary>
            Specifies the element is aligned to Middle.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfVerticalAlignment.Bottom">
            <summary>
            Specifies the element is aligned to Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTextAlignment">
            <summary>
            Specifies the type of horizontal text alignment.
            </summary>
            <example> 
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add a page to the document.
            PdfPage page = document.Pages.Add();
            //Create PDF graphics for the page.
            PdfGraphics graphics = page.Graphics;
            //Create a new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
            //Create a new PDF string format instance.
            PdfStringFormat format = new PdfStringFormat();
            //Set the text alignment.
            format.Alignment = PdfTextAlignment.Center;
            //Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, new RectangleF(0, 0, 200, 100), format);
            //Save the document.
            document.Save("Output.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create PDF graphics for the page.
            Dim graphics As PdfGraphics = page.Graphics
            'Create a new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12)
            'Create a new PDF string format instance.
            Dim format As PdfStringFormat = New PdfStringFormat()
            'Set the text alignment.
            format.Alignment = PdfTextAlignment.Center
            'Draw string to PDF page.
            graphics.DrawString("Hello World!", font, PdfBrushes.Black, New RectangleF(0, 0, 200, 100), format);
            'Save the document.
            document.Save("Output.pdf")
            'Close the document.
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextAlignment.Left">
            <summary>
            Specifies the text is aligned to Left.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextAlignment.Center">
            <summary>
            Specifies the text is aligned to Center.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextAlignment.Right">
            <summary>
            Specifies the text is aligned to Right.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextAlignment.Justify">
            <summary>
            Specifies the text as Justified text.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfTextDirection">
            <summary>
            Represents the text rendering direction.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextDirection.None">
            <summary>
            Specifies the default text order.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextDirection.LeftToRight">
            <summary>
            Specifies the left to right direction.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfTextDirection.RightToLeft">
            <summary>
            Specifies the right to left direction.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.TextRenderingMode">
            <summary>
            Specifies the text rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextRenderingMode.Fill">
            <summary>
            Fill text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextRenderingMode.Stroke">
            <summary>
            Stroke text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextRenderingMode.FillStroke">
            <summary>
            Fill, then stroke text.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextRenderingMode.None">
            <summary>
            Neither fill nor stroke text (invisible).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextRenderingMode.ClipFlag">
            <summary>
            The flag showing that the text should be a part of a clipping path.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextRenderingMode.ClipFill">
            <summary>
            Fill text and add to path for clipping (see above).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextRenderingMode.ClipStroke">
            <summary>
            Stroke text and add to path for clipping.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextRenderingMode.ClipFillStroke">
            <summary>
            Fill, then stroke text and add to path for clipping.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.TextRenderingMode.Clip">
            <summary>
            Add text to path for clipping.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLineJoin">
            <summary>
            Specifies the corner style of the shapes.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set custom dash style.
            pen.DashStyle = PdfDashStyle.Custom;
            //Set line jion.
            pen.LineJoin = PdfLineJoin.Bevel;
            // Create a custom dash pattern.
            pen.DashPattern = new float[] { 4.0f, 2.0f, 1.0f, 3.0f }
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
            'Set custom dash style.
            pen.DashStyle = PdfDashStyle.Custom
            'Set line jion.
            pen.LineJoin = PdfLineJoin.Bevel
            'Create a custom dash pattern.
            pen.DashPattern = New Single() { 4.0F, 2.0F, 1.0F, 3.0F}
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLineJoin.Miter">
            <summary>
            The outer edges for the two segments are extended
            until they meet at an angle.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLineJoin.Round">
            <summary>
            An arc of a circle with a diameter equal to the line width is drawn
            around the point where the two segments meet, connecting the outer edges for the two segments.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLineJoin.Bevel">
            <summary>
            The two segments are finished with caps
            and the resulting notch beyond the ends of the segments is filled
            with a triangle.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfLineCap">
             <summary>
            Specifies the line cap style to be used at the ends of the lines.
             </summary>
             <example>
             <code lang="C#">
             //Create a new PDF document.
             PdfDocument doc = new PdfDocument();
             //Add a page to the document.
             PdfPage page = doc.Pages.Add();
             //Create PDF graphics for the page
             PdfGraphics graphics = page.Graphics;
             //Create new PDF pen instance.
             PdfPen pen = new PdfPen(Color.Red);
             //Set custom dash style.
             pen.DashStyle = PdfDashStyle.Custom;
             //Set line cap.
             pen.LineCap = PdfLineCap.Round;
             // Create a custom dash pattern.
             pen.DashPattern = new float[] { 4.0f, 2.0f, 1.0f, 3.0f }
             //Draw rectangle.
             graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
             //Save the document.
             doc.Save("Output.pdf");
             //Close the document.
             doc.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim doc As New PdfDocument()
             'Add a page to the document.
             Dim page As PdfPage = doc.Pages.Add()
             'Create PDF graphics for the page
             Dim graphics As PdfGraphics = page.Graphics
             'Create new PDF pen instance.
             Dim pen As New PdfPen(Color.Red)
             'Set custom dash style.
             pen.DashStyle = PdfDashStyle.Custom
             'Create a custom dash pattern.
             'Set line cap.
             pen.LineCap = PdfLineCap.Round
              pen.DashPattern = New Single() { 4.0F, 2.0F, 1.0F, 3.0F}
             'Draw rectangle.
             graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
             'Save the document.
             doc.Save("Output.pdf")
             'Close the document.
             doc.Close(True)
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLineCap.Flat">
            <summary>
            The stroke is squared off at the endpoint of the path. There is no
            projection beyond the end of the path.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLineCap.Round">
            <summary>
            A semicircular arc with a diameter equal to the line width is
            drawn around the endpoint and filled in.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfLineCap.Square">
            <summary>
             The stroke continues beyond the endpoint of the path
            for a distance equal to half the line width and is squared off.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDashStyle">
            <summary>
            Possible dash styles of the pen.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create new PDF pen instance.
            PdfPen pen = new PdfPen(Color.Red);
            //Set custom dash style.
            pen.DashStyle = PdfDashStyle.Custom;
            // Create a custom dash pattern.
            pen.DashPattern = new float[] { 4.0f, 2.0f, 1.0f, 3.0f }
            //Draw rectangle.
            graphics.DrawRectangle(pen, new RectangleF(10, 10, 200, 100));
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create new PDF pen instance.
            Dim pen As New PdfPen(Color.Red)
             'Set custom dash style.
             pen.DashStyle = PdfDashStyle.Custom
             'Create a custom dash pattern.
             pen.DashPattern = New Single() { 4.0F, 2.0F, 1.0F, 3.0F}
            'Draw rectangle.
            graphics.DrawRectangle(pen, New RectangleF(10, 10, 200, 100))
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDashStyle.Solid">
            <summary>
            Solid line.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDashStyle.Dash">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDashStyle.Dot">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDashStyle.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDashStyle.DashDotDot">
            <summary>
            Dash-dot-dot line.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDashStyle.Custom">
            <summary>
            User defined dash style.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfFillMode">
             <property name="flag" value="Finished" />
            
             <summary>
             Specifies how the shapes are filled. 
             </summary>
             <example>
             <code lang="C#">
             //Create a document.
             PdfDocument doc = new PdfDocument();
             //Add a new page.
             PdfPage page = doc.Pages.Add();
             //Create new PDF path.
             PdfPath path = new PdfPath();
             //Set the path fill mode.
             path.FillMode = PdfFillMode.Winding;
             //Add line path points.
             path.AddLine(new PointF(10, 100), new PointF(10, 200));
             path.AddLine(new PointF(100, 100), new PointF(100, 200));
             path.AddLine(new PointF(100, 200), new PointF(55, 150));
             //Draw PDF path to page.
             path.Draw(page, PointF.Empty);
             //Save and close the document.
             doc.Save("output.pdf");
             doc.Close(true);
             </code>
             <code lang="VB">
             'Create a document.
             Dim doc As New PdfDocument()
             'Add a new page.
             Dim page As PdfPage = doc.Pages.Add()
             'Create new PDF path.
             Dim path As New PdfPath()
             'Set the path fill mode.
             path.FillMode = PdfFillMode.Winding;
             'Add line path points.
             path.AddLine(New PointF(10, 100), New PointF(10, 200))
             path.AddLine(New PointF(100, 100), New PointF(100, 200))
             path.AddLine(New PointF(100, 200), New PointF(55, 150))
             'Draw PDF path to page.
             path.Draw(page, PointF.Empty)
             'Save and close the document.
             doc.Save("output.pdf")
             doc.Close(True)
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFillMode.Winding">
             <property name="flag" value="Finished" />
            
             <summary>
             Nonzero winding number rule of determining &quot;insideness&quot;
             of point.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfFillMode.Alternate">
             <property name="flag" value="Finished" />
            
             <summary>
             Even odd rule of determining &quot;insideness&quot; of point.
             </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfColorSpace">
             <property name="flag" value="Finished" />
            
             <summary>
             Defines set of color spaces.
             </summary>
             <example>
             <code lang="C#">
             // Create a PDF Document.
             PdfDocument doc = new PdfDocument();
             //Add pages to the document
             PdfPage page = doc.Pages.Add();
             //Create PDF graphics for the page
             PdfGraphics graphics = page.Graphics;
             //Create PDF font.
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
             //Set the color space.
             graphics.ColorSpace = PdfColorSpace.GrayScale;
             //Get the graphics client size.
             SizeF clientSize = graphics.ClientSize;
             //Draw rectangle to PDF graphics.
             graphics.DrawRectangle(PdfBrushes.Red, new RectangleF(PointF.Empty, clientSize));
             //Save the document
             doc.Save("Output.pdf");
             //Close the document
             doc.Close(true);
             </code> 
             <code lang="VB">
             ' Create a PDF Document.
             Dim doc As New PdfDocument()
             'Add pages to the document
             Dim page As PdfPage = doc.Pages.Add()
             'Create PDF graphics for the page
             Dim graphics As PdfGraphics = page.Graphics
             'Create PDF font.
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
             'Set the color space.
             graphics.ColorSpace = PdfColorSpace.GrayScale
             'Get the graphics client size.
             Dim clientSize As SizeF = graphics.ClientSize
             'Draw rectangle to PDF graphics.
             graphics.DrawRectangle(PdfBrushes.Red, New RectangleF(PointF.Empty, clientSize))
             'Save the document
             doc.Save("Output.pdf")
             'Close the document
             doc.Close(True)
             </code> 
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColorSpace.RGB">
             <property name="flag" value="Finished" />
            
             <summary>
             RGB color space.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColorSpace.CMYK">
             <property name="flag" value="Finished" />
            
             <summary>
             CMYK color space.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColorSpace.GrayScale">
             <property name="flag" value="Finished" />
            
             <summary>
             GrayScale color space.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfColorSpace.Indexed">
            <summary>
            Indexed color space used internally.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.ColorIntent">
            <summary>
            Describes the Color intents.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ColorIntent.AbsoluteColorimetric">
            <summary>
            Colors are represented solely with respect to the light source;
            no correction is made for the output mediums white point
            (such as the color of unprinted paper).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ColorIntent.RelativeColorimetric">
            <summary>
            Colors are represented with respect to the combination of
            the light source and the output mediums white point
            (such as the color of unprinted paper).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ColorIntent.Saturation">
            <summary>
            Colors are represented in a manner that preserves
            or emphasizes saturation.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ColorIntent.Perceptual">
            <summary>
            Colors are represented in a manner that provides a pleasing
            perceptual appearance.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfBlendMode">
            <summary>
            Specifies the blend mode for transparency.
            </summary>
            <example>
            <code lang="C#">
            // Create a PDF Document.
            PdfDocument doc = new PdfDocument();
            //Add pages to the document
            PdfPage page = doc.Pages.Add();
            //Create PDF graphics for the page
            PdfGraphics graphics = page.Graphics;
            //Create PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular);
            //Set transparancy.
            graphics.SetTransparency(0.5f, 0.5f, PdfBlendMode.HardLight);
            //Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Black, PdfBrushes.Red, 0, 0);        
            //Save the document
            doc.Save("Output.pdf");
            //Close the document
            doc.Close(true);
            </code> 
            <code lang="VB">
            ' Create a PDF Document.
            Dim doc As New PdfDocument()
            'Add pages to the document
            Dim page As PdfPage = doc.Pages.Add()
            'Create PDF graphics for the page
            Dim graphics As PdfGraphics = page.Graphics
            'Create PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Regular)
            'Set transparancy.
            graphics.SetTransparency(0.5F, 0.5F, PdfBlendMode.HardLight)
            'Draws the String.
            graphics.DrawString("Hello world!", font, PdfPens.Black, PdfBrueshes.Red, 0, 0)        
            'Save the document
            doc.Save("Output.pdf")
            'Close the document
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Normal">
            <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Multiply">
            <summary>
            Multiplies the backdrop and source color values.
            The result color is always at least as dark as either
            of the two constituent colors. Multiplying
            any color with black produces black; multiplying
            with white leaves the original color unchanged.
            Painting successive overlapping objects with a color
            other than black or white produces progressively darker colors.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Screen">
            <summary>
            Multiplies the complements of the backdrop and source
            color values, then complements the result. The result
            color is always at least as light as either of the two
            constituent colors. Screening any color with white
            produces white; screening with black leaves the original
            color unchanged. The effect is similar to projecting
            multiple photographic slides simultaneously onto a single screen.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Overlay">
            <summary>
            Multiplies or screens the colors, depending on
            the backdrop color value. Source colors overlay
            the backdrop while preserving its highlights and
            shadows. The backdrop color is not replaced but
            is mixed with the source color to reflect the
            lightness or darkness of the backdrop.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Darken">
            <summary>
            Selects the darker of the backdrop and source colors.
            The backdrop is replaced with the source where the source
            is darker; otherwise, it is left unchanged.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Lighten">
            <summary>
            Selects the lighter of the backdrop and source colors.
            The backdrop is replaced with the source where the source
            is lighter; otherwise, it is left unchanged.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.ColorDodge">
            <summary>
            Brightens the backdrop color to reflect the source color.
            Painting with black produces no changes.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.ColorBurn">
            <summary>
            Darkens the backdrop color to reflect the source color.
            Painting with white produces no change.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.HardLight">
            <summary>
            Multiplies or screens the colors, depending on the source color value.
            The effect is similar to shining a harsh spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.SoftLight">
            <summary>
            Darkens or lightens the colors, depending on the source color value.
            The effect is similar to shining a diffused spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Difference">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            Painting with white inverts the backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Exclusion">
            <summary>
            Produces an effect similar to that of the Difference mode
            but lower in contrast. Painting with white inverts 
            the backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Hue">
            <summary>
            Creates a color with the hue of the source color and 
            the saturation and luminosity of the backdrop color.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Saturation">
            <summary>
            Creates a color with the saturation of the source color
            and the hue and luminosity of the backdrop color. Painting
            with this mode in an area of the backdrop that is a pure
            gray (no saturation) produces no change.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Color">
            <summary>
            Creates a color with the hue and saturation of
            the source color and the luminosity of the backdrop
            color. This preserves the gray levels of the backdrop
            and is useful for coloring monochrome images or tinting color images.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfBlendMode.Luminosity">
            <summary>
            Creates a color with the luminosity of the source color
            and the hue and saturation of the backdrop color. This
            produces an inverse effect to that of the Color mode.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfGraphicsUnit">
            <summary>
            Specifies the types of the page's logical units.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument doc = new PdfDocument();
            //Add a page to the document.
            PdfPage page = doc.Pages.Add();
            //Create new PDF unitconverter.
            PdfUnitConvertor converter = new PdfUnitConvertor();
            //Convert to pixels.
             RectangleF rect = converter.ConvertToPixels(new RectangleF(100, 100, 200, 100), PdfGraphicsUnit.Point);
             page.Graphics.DrawRectangle(PdfPens.Red, rect);
            //Save the document.
            doc.Save("Output.pdf");
            //Close the document.
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new PDF document.
            Dim doc As New PdfDocument()
            'Add a page to the document.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF unitconverter.
            Dim converter As New PdfUnitConvertor()
            'Convert to pixels.
            Dim rect As RectangleF = converter.ConvertToPixels(New RectangleF(100, 100, 200, 100), PdfGraphicsUnit.Point)
            page.Graphics.DrawRectangle(PdfPens.Red, rect)
            'Save the document.
            doc.Save("Output.pdf")
            'Close the document.
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsUnit.Centimeter">
            <summary>
            Specifies the Measurement is in centimeters.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsUnit.Pica">
            <summary>
            Specifies the Measurement is in picas. A pica represents 12 points.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsUnit.Pixel">
            <summary>
            Specifies the unit of measurement is 1 pixel.
            </summary>
            <remarks>Pixel unit is device dependent unit. The result depends on the default Dpi on the machine.</remarks>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure. 
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsUnit.Inch">
            <summary>
            Specifies the inch as the unit of measure. 
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsUnit.Document">
            <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGraphicsUnit.Millimeter">
            <summary>
            Specifies the Measurement is in millimeters.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfGridImagePosition">
            <summary>
            Specifies the alignment type.
            </summary>
             <example>
             <code lang="C#">
             //Create a new PDF document.
             PdfDocument doc = new PdfDocument();
             //Add a page.
             PdfPage page = doc.Pages.Add();
             //Create a PdfGrid.
             PdfGrid pdfGrid = new PdfGrid();
             //Create a DataTable.
             DataTable dataTable = new DataTable("EmpDetails");
             //Add columns to the DataTable           
             dataTable.Columns.Add("ID");
             dataTable.Columns.Add("Name");
             //Add rows to the DataTable.
             dataTable.Rows.Add(new object[] { "E01", "Clay" });
             dataTable.Rows.Add(new object[] { "E02", "Thomas" });
             //Assign data source.
             pdfGrid.DataSource = dataTable;            
             //PDF grid cell
             PdfGridCell cell = pdfGrid.Rows[0].Cells[0];
             //Set row span
             cell.RowSpan = 2;
             //set column span.
             cell.ColumnSpan = 2;
             //Check whether the text is HTML text?
             bool isHtmlText = cell.IsHtmlText;
             //Set Value.
             cell.Value = "George";
             //Set string format.
             cell.StringFormat.Alignment = PdfTextAlignment.Center;
             //Set image position.
             cell.ImagePosition = PdfGridImagePosition.Fit;
             //Set PDF tag.
             cell.PdfTag = new PdfStructureElement(PdfTagType.TableDataCell);
             //Set cell style.                 
             cell.Style.BackgroundImage = new PdfBitmap("Autumn leaves.jpg");
             //Draw grid to the page of PDF document.
             pdfGrid.Draw(page, new PointF(10, 10));
             //Save the document.
             doc.Save("Output.pdf");
             //close the document
             doc.Close(true);
             </code>
             <code lang="VB">
             'Create a new PDF document.
             Dim doc As New PdfDocument()
             'Add a page.
             Dim page As PdfPage = doc.Pages.Add()
             'Create a PdfGrid.
             Dim pdfGrid As New PdfGrid()
             'Create a DataTable.
             Dim dataTable As New DataTable("EmpDetails")
             'Add columns to the DataTable           
             dataTable.Columns.Add("ID")
             dataTable.Columns.Add("Name")
             'Add rows to the DataTable.
             dataTable.Rows.Add(New Object() { "E01", "Clay"})
             dataTable.Rows.Add(New Object() { "E02", "Thomas"})
             'Assign data source.
             pdfGrid.DataSource = dataTable
             'PDF grid cell
             Dim cell As PdfGridCell = pdfGrid.Rows(0).Cells(0)
             'Set row span
             cell.RowSpan = 2;
             'set column span.
             cell.ColumnSpan = 2;
             'Check whether the text is HTML text?
             Dim isHtmlText As Boolean = cell.IsHtmlText
             'Set Value.
             cell.Value = "George"
             'Set string format.
             cell.StringFormat.Alignment = PdfTextAlignment.Center
             'Set image position.
             cell.ImagePosition = PdfGridImagePosition.Fit
             'Set PDF tag.
             cell.PdfTag = New PdfStructureElement(PdfTagType.TableDataCell)
             'Set cell style.                 
             cell.Style.BackgroundImage = New PdfBitmap("Autumn leaves.jpg")
             'Draw grid to the page of PDF document.
             pdfGrid.Draw(page, New PointF(10, 10))
             'Save the document.
             doc.Save("Output.pdf")
             'close the document
             doc.Close(True)
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGridImagePosition.Fit">
            <summary>
            To fit background image to the cell based on the cell with and height.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGridImagePosition.Center">
            <summary>
            The image is rendered by center of the cell.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGridImagePosition.Stretch">
            <summary>
            The image is stretched by the percentages required to fit the width and height of the cell.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGridImagePosition.Tile">
            <summary>
            The imag is rendered by tile mode.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGridStretchOption.Fill">
            <summary>
            The content is resized to fill the destination dimensions. The aspect ratio is not preserved. 
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGridStretchOption.Uniform">
            <summary>
            The content is resized to fit in the destination dimensions while it preserves its native aspect ratio. 
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGridStretchOption.UniformToFill">
            <summary>
            The content is resized to fill the destination dimensions while it preserves its native aspect ratio. 
            If the aspect ratio of the destination rectangle differs from the source, the source content is clipped to fit in the destination dimensions.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfGridStretchOption.None">
            <summary>
            The content preserves its original size. 
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.BigEndianWriter">
            <summary>
            Writes data in BigEndian order.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.BigEndianWriter.Int32Size">
            <summary>
            Size of Int32 type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.BigEndianWriter.Int16Size">
            <summary>
            Size of Int16 type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.BigEndianWriter.Int64Size">
            <summary>
            Size of long type.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.BigEndianWriter.c_encoding">
            <summary>
            Reader encoding.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.BigEndianWriter.m_buffer">
            <summary>
            Internal buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.BigEndianWriter.m_position">
            <summary>
            Current position.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.BigEndianWriter.Data">
            <summary>
            Gets data written to the writter.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.BigEndianWriter.Position">
            <summary>
            Gets position of the internal buffer.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.BigEndianWriter.#ctor(System.Int32)">
            <summary>
            Creates a new writer.
            </summary>
            <param name="capacity">Capacity of the data.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.BigEndianWriter.Write(System.Int16)">
            <summary>
            Writes short value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.BigEndianWriter.Write(System.UInt16)">
            <summary>
            Writes ushort value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.BigEndianWriter.Write(System.Int32)">
            <summary>
            Writes int value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.BigEndianWriter.Write(System.UInt32)">
            <summary>
            Writes uint value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.BigEndianWriter.Write(System.String)">
            <summary>
            Writes string value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.BigEndianWriter.Write(System.Byte[])">
            <summary>
            Writes byte[] value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.BigEndianWriter.Flush(System.Byte[])">
            <summary>
            Writes array to the buffer.
            </summary>
            <param name="buff">Byte data.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCrossTable">
            <summary>
            PDFCrossTable is responsible for intermediate level parsing
            and savingof a PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_stream">
            <summary>
            The stream the file within.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_objects">
            <summary>
            The modified objects that should be saved.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_count">
            <summary>
            The number of the objects.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_bDisposed">
            <summary>
            Shows if the class have been dicposed.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_trailer">
            <summary>
            The trailer for a new document.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_document">
            <summary>
            The main PdfDocument class instance.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_objNumbers">
            <summary>
            The obj number stack. Holds object numbers
            that are used to decode strings and streams.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_maxGenNumIndex">
            <summary>
            Holds maximal generation number or offset to object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_bEncrypt">
            <summary>
            Internal variable to identify the current object is PdfEncryptor or not.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_pageCorrespondance">
            <summary>
            Internal variable to store pages.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.m_preReference">
            <summary>
            Internal variable to store reference.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.isOpenAndRepair">
            <summary>
            Repair the docuemnt which contains wrong offset values
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.isCompletely">
            <summary>
            Indicates whether the crosstable completely disposed or not.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.isDisposed">
            <summary>
            Indicates whether the base class is disposed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.Encrypted">
            <summary>
            Gets or sets the current object is PdfEncryptor or not. 
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.NextObjNumber">
            <summary>
            Returns next available object number.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.Document">
            <summary>
            Gets or sets the main PdfDocument class instance.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.PdfObjects">
            <summary>
            Gets the chached PDF object main collection.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.Trailer">
            <summary>
            Gets the trailer.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.ObjectCollection">
            <summary>
            Gets the object collection.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.EncryptorDictionary">
            <summary>
            Gets the security dictionary.
            </summary>
            <value>The security dictionary.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.PageCorrespondance">
            <summary>
            Gets or sets page correspondance up on each page import.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.PrevReference">
            <summary>
            Gets or sets the PdfReference of latest processed object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.#ctor">
            <summary>
            A costructor thar initialize a new cross table.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.PdfExport.PdfCrossTable"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.Dereference(Syncfusion.PdfExport.IPdfPrimitive)">
            <summary>
            Dereferences the specified primitive object.
            </summary>
            <param name="obj">The primitive object.</param>
            <returns>Dereferenced object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.RegisterObject(System.Int64,Syncfusion.PdfExport.PdfReference)">
            <summary>
            Registers the object in the cross reference table.
            </summary>
            <param name="offset">The offset of the object within the file</param>
            <param name="reference">The representation of the reference to the object.
            </param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.RegisterObject(System.Int64,Syncfusion.PdfExport.PdfReference,System.Boolean)">
            <summary>
            Registers the object in the cross reference table.
            </summary>
            <param name="offset">The offset of the object within the file</param>
            <param name="reference">The representation of the reference to the object.
            </param>
            <param name="free">True if object is free.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.Save(Syncfusion.PdfExport.PdfWriter)">
            <summary>
            Saves the cross-reference table into the stream.
            </summary>
            <param name="writer">The stream writer to save the cross-reference table into.
            </param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.GetReference(Syncfusion.PdfExport.IPdfPrimitive)">
            <summary>
            Retrieves the reference of the object given.
            </summary>
            <param name="obj">The object.</param>
            <returns>The reference.</returns>
            <remarks>If there is no registered reference, create a new one and register
            it.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.GetReference(Syncfusion.PdfExport.IPdfPrimitive,System.Boolean@)">
            <summary>
            Retrieves the reference of the object given.
            </summary>
            <param name="obj">The object.</param>
            <param name="bNew">The output flag, which shows if the object is new.</param>
            <returns>The reference.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.PageProceed(Syncfusion.PdfExport.IPdfPrimitive)">
            <summary>
            Checks if an object is a page and convert it into a page if necessary.
            </summary>
            <param name="obj">The object, which should be checked.</param>
            <returns>The checked and modified object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.GetSize(System.UInt64)">
            <summary>
            Gets the minimal number of bytes required to save the number.
            </summary>
            <param name="number">The number.</param>
            <returns>How much bytes required.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.SaveObjects(Syncfusion.PdfExport.PdfWriter)">
             <property name="flag" value="Finished" />
            
             <summary>
             Saves all objects in the collection.
             </summary>
             <param name="writer">Writer object.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.SaveIndirectObject(Syncfusion.PdfExport.IPdfPrimitive,Syncfusion.PdfExport.PdfWriter)">
             <property name="flag" value="Finished" />
            
             <summary>
             Saves indirect object.
             </summary>
             <param name="obj">Indirect object that should be saved.</param>
             <param name="writer">Writer object.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.DoSaveObject(Syncfusion.PdfExport.IPdfPrimitive,Syncfusion.PdfExport.PdfReference,Syncfusion.PdfExport.PdfWriter)">
            <summary>
            Performs real saving of the save object.
            </summary>
            <param name="obj">The object.</param>
            <param name="reference">The reference.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.SaveSections(Syncfusion.PdfExport.PdfWriter)">
            <summary>
            Saves the xref section.
            </summary>
            <param name="writer">The stream writer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.PrepareSubsection(System.Int64@)">
            <summary>
            Prepares a subsection of the current section within the cross-reference table.
            </summary>
            <param name="objectNum">The first object in the subsection.</param>
            <returns>The number of the entries in the section.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.SaveSubsection(Syncfusion.PdfExport.PdfWriter,System.Int64,System.Int64)">
            <summary>
            Saves a subsection.
            </summary>
            <param name="writer">A PDF writer.</param>
            <param name="objectNum">The firs object in the subsection.</param>
            <param name="count">The number of the indirect objects in the subsection.
            </param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.GetItem(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Generates string for xref table item.
            </summary>
            <param name="offset">Offset of the object in the file.</param>
            <param name="genNumber">The generation number of the object.</param>
            <param name="isFree">Indicates whether object is free.</param>
            <returns>String representation of the item.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.SaveTrailer(Syncfusion.PdfExport.PdfWriter,System.Int64)">
            <summary>
            Saves the new trailer dictionary.
            </summary>
            <param name="writer">A PDF writer.</param>
            <param name="prevXRef">The PrevXRef value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.ForceIDHex(Syncfusion.PdfExport.PdfDictionary)">
            <summary>
            Forces the ID to be in hex.
            </summary>
            <param name="trailer">The trailer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.SaveTheEndess(Syncfusion.PdfExport.PdfWriter,System.Int64)">
            <summary>
            Saves the endess of the file.
            </summary>
            <param name="writer">A PDF writer.</param>
            <param name="xrefPos">The xref position.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.SaveHead(Syncfusion.PdfExport.PdfWriter)">
            <summary>
            Saves the head.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.GenerateFileVersion(Syncfusion.PdfExport.PdfDocumentBase)">
            <summary>
            Generates the version of the file.
            </summary>
            <param name="document">the parent document.</param>
            <returns>The version of the file.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.Dispose">
            <summary>
            Frees all resources.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.CompleteDispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfCrossTable.RegisteredObject">
            <summary>
            Represents a registered object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.RegisteredObject.m_objectNumber">
            <summary>
            The object number of the indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.RegisteredObject.GenerationNumber">
            <summary>
            The generation number of the indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.RegisteredObject.m_offset">
            <summary>
            The offset of the indirect object within the file.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfCrossTable.RegisteredObject.Type">
            <summary>
            Shows if the object is free.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.RegisteredObject.ObjectNumber">
            <summary>
            Gets the object number.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfCrossTable.RegisteredObject.Offset">
            <summary>
            Gets the offset.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.RegisteredObject.#ctor(System.Int64,Syncfusion.PdfExport.PdfReference)">
            <summary>
            Initialize the structure with the proper values.
            </summary>
            <param name="offset">The offset of the object.</param>
            <param name="reference">The reference representing the object number and
            the generation number of the indirect object.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfCrossTable.RegisteredObject.#ctor(System.Int64,Syncfusion.PdfExport.PdfReference,System.Boolean)">
            <summary>
            Initialize the structure with the proper values.
            </summary>
            <param name="offset">The offset of the object.</param>
            <param name="reference">The reference representing the object number and
            the generation number of the indirect object.</param>
            <param name="free">Shows if the object is free.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.DictionaryProperties">
            <summary>
            PDF dictionary properties.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfMainObjectCollection">
            <summary>
            The collection of all objects within a PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfMainObjectCollection.m_objectCollection">
            <summary>
            The collection of the indirect objects.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfMainObjectCollection.mainObjectCollection">
            <summary>
            The collection of the Indirect objects
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfMainObjectCollection.m_primitiveObjectCollection">
            <summary>
            The collection of primitive objects.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfMainObjectCollection.m_index">
            <summary>
            Holds the index of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfMainObjectCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.ObjectInfo"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfMainObjectCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Syncfusion.PdfExport.PdfMainObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.Add(Syncfusion.PdfExport.IPdfPrimitive)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.Remove(System.Int32)">
            <summary>
            Removes the entry using index.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.ContainsReference(Syncfusion.PdfExport.PdfReference)">
            <summary>
            Determines whether the collection contains the specified reference.
            </summary>
            <param name="reference">The reference.</param>
            <returns>
            	<c>true</c> if there is the specified reference; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.GetReference(System.Int32)">
            <summary>
            Gets the reference of the object.
            </summary>
            <param name="index">The index.</param>
            <returns>The reference of the object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.GetReference(Syncfusion.PdfExport.IPdfPrimitive,System.Boolean@)">
            <summary>
            Gets the reference of the object.
            </summary>
            <param name="obj">The object.</param>
            <param name="isNew">if set to <c>true</c> the object hasn't been found in the collection.</param>
            <returns>The reference of the object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.GetObject(System.Int32)">
            <summary>
            Gets the object specified by the index.
            </summary>
            <param name="index">The index.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.GetObject(Syncfusion.PdfExport.PdfReference)">
            <summary>
            Gets the object specified by the index.
            </summary>
            <param name="reference">The reference.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.GetObjectIndex(Syncfusion.PdfExport.PdfReference)">
            <summary>
            Gets the index of the object.
            </summary>
            <param name="reference">The reference.</param>
            <returns>The index of the object within the general object collection.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.TrySetReference(Syncfusion.PdfExport.IPdfPrimitive,Syncfusion.PdfExport.PdfReference,System.Boolean@)">
            <summary>
            Tries to set the reference to the object.
            </summary>
            <param name="obj">The object.</param>
            <param name="reference">The reference.</param>
            <param name="found">if set to <c>true</c> the object was found.</param>
            <returns>
            True if the reference have been set successfully.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.IndexOf(Syncfusion.PdfExport.IPdfPrimitive)">
            <summary>
            Determines the index of the element within the collection.
            </summary>
            <param name="element">The element.</param>
            <returns>The index of the element.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.ReregisterReference(System.Int32,Syncfusion.PdfExport.IPdfPrimitive)">
            <summary>
            Reregisters the reference.
            </summary>
            <param name="oldObjIndex">Old index of the obj.</param>
            <param name="newObj">The new object.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.ReregisterReference(Syncfusion.PdfExport.IPdfPrimitive,Syncfusion.PdfExport.IPdfPrimitive)">
            <summary>
            Reregisters reference from one object to another.
            </summary>
            <param name="oldObj">The old (primitive) object.</param>
            <param name="newObj">The new (complex) object.</param>
            <remarks>This method is useful when PDF primitives are converted into
            More complex objects.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfMainObjectCollection.LookFor(Syncfusion.PdfExport.IPdfPrimitive)">
            <summary>
            Looks through the collection for the object specified.
            </summary>
            <param name="obj">The object to look for.</param>
            <returns>The index of the object.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.ObjectInfo">
            <summary>
            Stores info about objects in the PDF document.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ObjectInfo.m_object">
            <summary>
            The PDF object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.ObjectInfo.m_reference">
            <summary>
            Object number and generation number of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.ObjectInfo.Reference">
            <summary>
            Gets the reference.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.ObjectInfo.Object">
            <summary>
            Gets the object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.ObjectInfo.#ctor(Syncfusion.PdfExport.IPdfPrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.ObjectInfo"/> class.
            </summary>
            <param name="obj">The PDF object.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.ObjectInfo.#ctor(Syncfusion.PdfExport.IPdfPrimitive,Syncfusion.PdfExport.PdfReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.ObjectInfo"/> class.
            </summary>
            <param name="obj">The PDF object.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.ObjectInfo.SetReference(Syncfusion.PdfExport.PdfReference)">
            <summary>
            Sets the reference.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.ObjectInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.PdfExport.ObjectInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see>
            to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.PdfExport.Operators">
            <summary>
            Class of string PDF common operators.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.obj">
            <summary>
            Operator for starting indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.endobj">
            <summary>
            Operator for ending indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.R">
            <summary>
            Operator for reference on indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.WhiteSpace">
            <summary>
            Whitespace symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.Slash">
            <summary>
            Slash symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.LessThan">
            <summary>
            Less than symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.GreaterThan">
            <summary>
            Greater than symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.NewLine">
            <summary>
            New Line symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.RegexNewLine">
            <summary>
            Regex New Line symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.stream">
            <summary>
            Operator for starting stream object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.endstream">
            <summary>
            Operator for ending indirect object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.xref">
            <summary>
            Operator for starting cross-reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.f">
            <summary>
            Operator in cross-reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.n">
            <summary>
            Operator in cross-reference table.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.trailer">
            <summary>
            Trailer begining.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.startxref">
            <summary>
            Operator in trailer object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.EOF">
            <summary>
            End of File (trailer) operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.header">
            <summary>
            Start of File (trailer) operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.BeginText">
            <summary>
            Begin text operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.EndText">
            <summary>
            End text operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.BeginPath">
            <summary>
            Begin path operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.AppendLineSegment">
            <summary>
            Append line segment operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.Stroke">
            <summary>
            Stroke operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.Fill">
            <summary>
            Fill by nonzero winding rule operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.Fill_EvenOdd">
            <summary>
            Fill by even-odd rule operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.FillStroke">
            <summary>
            Fill &amp;&amp; Stroke operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.FillStroke_EvenOdd">
            <summary>
            Fill &amp;&amp; Stroke operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.AppendBezierCurve">
            <summary>
            Append a cubic Bezier curve to the current path.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.AppendRectangle">
            <summary>
            Append a rectangle to the current path as a complete subpath.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SaveState">
            <summary>
            Save graphics state operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.RestoreState">
            <summary>
            Restore graphics state operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.PaintXObject">
            <summary>
            Paint XObject operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.ModifyCTM">
            <summary>
            Modifies CTM (current transformation matrix).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.ModifyTM">
            <summary>
            Modifies CTM (current transformation matrix).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetLineWidth">
            <summary>
            Sets line width.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetLineCapStyle">
            <summary>
            Sets line cap style.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetLineJoinStyle">
            <summary>
            Sets line join style.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetDashPattern">
            <summary>
            Sets dash pattern.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetFlatnessTolerance">
            <summary>
            Sets flatness tolerance.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.ClosePath">
            <summary>
            Closes path.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.CloseStrokePath">
            <summary>
            Closes and strokes path.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.CloseFillStrokePath">
            <summary>
            Operator for closing then filling and stroking a path.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetCharacterSpace">
            <summary>
            Sets character space.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetWordSpace">
            <summary>
            Sets word space.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetHorizontalScaling">
            <summary>
            Sets horizontal scaling.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetTextLeading">
            <summary>
            Sets text leading.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetFont">
            <summary>
            Sets font operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetRenderingMode">
            <summary>
            Sets rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetTextRise">
            <summary>
            Sets text rise.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetTextScaling">
            <summary>
            Sets text horizontal scaling.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetCoords">
            <summary>
            Set coordinates operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetCoordsAndLeading">
            <summary>
            Operator that sets the start of the new line and leading simultaneously.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.GoToNextLine">
            <summary>
            Sets text pointer to next line.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetText">
            <summary>
            Set text operator
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetTextWithFormatting">
            <summary>
            Operator to set text with formatting.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetTextOnNewLine">
            <summary>
            Operator that writes text on the new line.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetTextOnNewLineWithSpacings">
            <summary>
            Operator that writes text on the new line and set spacings.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SelectColorSpaceForStroking">
            <summary>
            Selects a color space for the stroking color.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SelectColorSpaceForNonStroking">
            <summary>
            Selects a color space for the nonstroking color.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetRGBColorForStroking">
            <summary>
            Sets RGB color for stroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetRGBColorForNonStroking">
            <summary>
            Same as RGB but for nonstroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetCMYKColorForStroking">
            <summary>
            Sets CMYK color for stroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetCMYKColorForNonstroking">
            <summary>
            Same as CMYK but for nonstroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetGrayColorForStroking">
            <summary>
            Sets gray color for stroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetGrayColorForNonstroking">
            <summary>
            Same as RGB but for nonstroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.Pattern">
            <summary>
            Set pattern operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetColorAndPattern">
            <summary>
            Same as SC, but also supports Pattern, Separation, DeviceN, and ICCBased
            color spaces. For non-stroking operations.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetColorAndPatternStroking">
            <summary>
            Same as SC, but also supports Pattern, Separation, DeviceN, and ICCBased
            color spaces. For stroking.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.ClipPath">
            <summary>
            Modify the current clipping path by intersecting it with the current path, using the
            nonzero winding number rule to determine which regions lie inside the clipping path.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.ClipPath_EvenOdd">
            <summary>
            Modify the current clipping path by intersecting it with the current path, using the
            odd-even rule to determine which regions lie inside the clipping path.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.EndPath">
            <summary>
            End the path object without filling or stroking it. This operator is a "path-painting
            no-op," used primarily for the side effect of changing the current clipping path (see
            "Clipping Path Operators").
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetGraphicsState">
            <summary>
            Graphics state operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.Comment">
            <summary>
            Symbol of commenting.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.AnyRegexSymbol">
            <summary>
            Indicates any symbol (regex syntax).
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.BeginMarkedSequence">
            <summary>
            Begins a marked-content sequence.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.EndMarkedSequence">
            <summary>
            Ends a marked-content sequence.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.EvenOdd">
            <summary>
            Even-odd filling method marker.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.AppendBezierCurve2">
            <summary>
            The operator to apped bezier curve with x2 y2 x3 y3 set.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.AppendBezierCurve1">
            <summary>
            The operator to apped bezier curve with x1 y1 x3 y3 set.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetMiterLimit">
            <summary>
            Set miter limit operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetColorRenderingIntent">
            <summary>
            Set color rendering intent operator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetColorStroking">
            <summary>
            Set colour of the current colour space for stroking.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.Operators.SetColorNonStroking">
            <summary>
            Set colour of the current colour space for non-stroking operations.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfStreamWriter">
            <summary>
            Helper class to write PDF graphic streams easily.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfStreamWriter.m_stream">
            <summary>
            The PDF stream where the data should be write into.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.#ctor(Syncfusion.PdfExport.PdfStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfStreamWriter"/> class.
            </summary>
            <param name="stream">The PDF stream.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.ModifyTM(Syncfusion.PdfExport.PdfTransformationMatrix)">
            <summary>
            Modifies TM (text matrix).
            </summary>
            <param name="matrix">Matrix to be inserted.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetFont(Syncfusion.PdfExport.PdfFont,Syncfusion.PdfExport.PdfName,System.Single)">
            <summary>
            Sets font.
            </summary>
            <param name="font">The font.</param>
            <param name="name">The name of the font.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetCharacterSpacing(System.Single)">
            <summary>
            Sets the character spacing.
            </summary>
            <param name="charSpacing">The character spacing value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetWordSpacing(System.Single)">
            <summary>
            Sets the word spacing.
            </summary>
            <param name="wordSpacing">The word spacing value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetLeading(System.Single)">
            <summary>
            Sets text leading.
            </summary>
            <param name="leading">The leading value.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetTextRenderingMode(Syncfusion.PdfExport.TextRenderingMode)">
            <summary>
            Sets the text rendering mode.
            </summary>
            <param name="renderingMode">The rendering mode.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetTextScaling(System.Single)">
            <summary>
            Sets the text scaling.
            </summary>
            <param name="textScaling">The text scaling.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.StartNextLine">
            <summary>
            Starts the next line.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.StartNextLine(System.Single,System.Single)">
            <summary>
            Shifts the text to the point.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.ShowText(Syncfusion.PdfExport.PdfString)">
            <summary>
            Shows the text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.ShowNextLineText(System.Byte[],System.Boolean)">
            <summary>
            Shows the next line text.
            </summary>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text should be in hex.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.ShowNextLineText(Syncfusion.PdfExport.PdfString)">
            <summary>
            Shows the next line text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.BeginText">
            <summary>
            Begins text.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.EndText">
            <summary>
            Ends text.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.WriteComment(System.String)">
            <summary>
            Writes comment to the file.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.BeginPath(System.Drawing.PointF)">
            <summary>
            Begins the path.
            </summary>
            <param name="startPoint">The start point.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.BeginPath(System.Single,System.Single)">
            <summary>
            Begins the path.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.AppendBezierSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Appends bezier segment.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.AppendBezierSegment(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends bezier segment.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="x3">The x3.</param>
            <param name="y3">The y3.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.AppendLineSegment(System.Drawing.PointF)">
            <summary>
            Appends a line segment.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.AppendLineSegment(System.Single,System.Single)">
            <summary>
            Appends a line segment.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.AppendRectangle(System.Drawing.RectangleF)">
            <summary>
            Appends the rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.AppendRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends the rectangle.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.ClosePath">
            <summary>
            Closes path object.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.FillPath(System.Boolean)">
            <summary>
            Fills path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> use even-odd rule.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.StrokePath">
            <summary>
            Strokes path.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.FillStrokePath(System.Boolean)">
            <summary>
            Fills and strokes path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> use even-odd rule.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.CloseStrokePath">
            <summary>
            Closes and strokes the path.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.CloseFillStrokePath(System.Boolean)">
            <summary>
            Closes, then fills and strokes the path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> use even odd rule.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.CloseFillPath(System.Boolean)">
            <summary>
            Closes and fills the path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> [use even odd rule].</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.ClipPath(System.Boolean)">
            <summary>
            Clips the path.
            </summary>
            <param name="useEvenOddRule">if set to <c>true</c> use even odd rule.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.EndPath">
            <summary>
            Ends the path.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SaveGraphicsState">
            <summary>
            Saves the graphics state.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.RestoreGraphicsState">
            <summary>
            Restores the graphics state.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.ModifyCTM(Syncfusion.PdfExport.PdfTransformationMatrix)">
            <summary>
            Modifies current transformation matrix.
            </summary>
            <param name="matrix">Matrix to be inserted.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetLineWidth(System.Single)">
            <summary>
            Sets the width of the line.
            </summary>
            <param name="width">The width.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetLineCap(Syncfusion.PdfExport.PdfLineCap)">
            <summary>
            Sets the line cap.
            </summary>
            <param name="lineCapStyle">The line cap style.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetLineJoin(Syncfusion.PdfExport.PdfLineJoin)">
            <summary>
            Sets the line join.
            </summary>
            <param name="lineJoinStyle">The line join style.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetMiterLimit(System.Single)">
            <summary>
            Sets the miter limit.
            </summary>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetLineDashPattern(System.Single[],System.Single)">
            <summary>
            Sets the line dash pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="patternOffset">The pattern offset.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetLineDashPattern(Syncfusion.PdfExport.PdfArray,Syncfusion.PdfExport.PdfNumber)">
            <summary>
            Sets the line dash pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="patternOffset">The pattern offset.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetGraphicsState(Syncfusion.PdfExport.PdfName)">
            <summary>
            Sets the graphics state.
            </summary>
            <param name="dictionaryName">Name of the graphics state dictionary.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetColorSpace(System.String,System.Boolean)">
            <summary>
            Sets the color space.
            </summary>
            <param name="name">The name of the colour space.</param>
            <param name="forStroking">if set to <c>true</c>
            the space is set for stroking operations.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetColorSpace(Syncfusion.PdfExport.PdfName,System.Boolean)">
            <summary>
            Sets the color space.
            </summary>
            <param name="name">The name of the colour space.</param>
            <param name="forStroking">if set to <c>true</c>
            the space is set for stroking operations.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.SetColorAndSpace(Syncfusion.PdfExport.PdfColor,Syncfusion.PdfExport.PdfColorSpace,System.Boolean)">
            <summary>
            Sets the color and color space.
            </summary>
            <param name="color">The color.</param>
            <param name="colorSpace">The color space.</param>
            <param name="forStroking">if set to <c>true</c>
            the colour is set for stroking operations.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.ExecuteObject(Syncfusion.PdfExport.PdfName)">
            <summary>
            Executes the XObject.
            </summary>
            <param name="name">The name of the XObject.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns>The internal PdfStream object.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.Clear">
            <summary>
            Clears a stream.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.WritePoint(System.Single,System.Single)">
            <summary>
            Writes the point.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.WriteText(System.Byte[],System.Boolean)">
            <summary>
            Writes the text.
            </summary>
            <param name="text">The text.</param>
            <param name="hex">if set to <c>true</c> the text is in hex.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.WriteText(Syncfusion.PdfExport.PdfString)">
            <summary>
            Writes the text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.WriteOperator(System.String)">
            <summary>
            Writes the operator.
            </summary>
            <param name="opcode">The operator code.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.CheckTextParam(System.Byte[])">
            <summary>
            Checks the text param.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.CheckTextParam(Syncfusion.PdfExport.PdfString)">
            <summary>
            Checks the text param.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStreamWriter.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfStreamWriter.Length">
            <summary>
            Gets stream length.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfStreamWriter.Write(System.Byte[])">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfWriter.Stream">
            <summary>
            Gets the stream.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfWriter.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfWriter.Document">
            <summary>
            Gets or Sets the document required for saving process.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfWriter.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfWriter.Length">
            <summary>
            Gets stream length.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfWriter.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfWriter.Write(System.Byte[])">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfWriter.ObtainStream">
            <summary>
            Gets the stream.
            </summary>
            <returns>The stream.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.ObjectStatus">
            <summary>
            Specfies the status of the IPdfPrmitive. Status is registered if it has a reference or else none.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PageAddedEventHandler">
             <summary>
             Represents the method that executes on a <see cref="T:Syncfusion.PdfExport.PdfDocument"/> when a new page is created.
             </summary>
             <param name="sender">The source of the event.</param>
             <param name="args">A <see cref="T:Syncfusion.PdfExport.PageAddedEventArgs"/> that contains the event data.</param>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add the event.
             document.Pages.PageAdded += new PageAddedEventHandler(Pages_PageAdded);
             //Creates a new page and adds it as the last page of the document.
             PdfPage page = document.Pages.Add();
             //Create font with Bold font style.
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
             //Draw text in the new page.
             page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
             page = document.Pages.Add();
             //Save and close the document.
             document.Save("Sample.pdf");
             document.Close(true);
             //Event handler for PageAdded event.
             void Pages_PageAdded(object sender, PageAddedEventArgs args)
             {
             PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 10);
             args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, new PointF(100, 100));
             }
             </code>
             <code lang="VB.NET">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add the event.
             document.Pages.PageAdded += New PageAddedEventHandler(Pages_PageAdded)
             'Creates a new page and adds it as the last page of the document.
             Dim page As PdfPage = document.Pages.Add()
             'Create font with Bold font style.
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F, PdfFontStyle.Bold)
             'Draw text in the new page.
             page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
             page = document.Pages.Add()
             'Save and close the document.
             document.Save("Sample.pdf")
             document.Close(True)
            'Event handler for PageAdded event.
             Private Sub Pages_PageAdded(sender As Object, args As PageAddedEventArgs)
            	Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 10)
            	args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, New PointF(100, 100))
             End Sub
             </code>
             </example>
             <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
             <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="T:Syncfusion.PdfExport.PageAddedEventArgs">
             <summary>
             Provides data for <see cref="T:Syncfusion.PdfExport.PageAddedEventHandler"/> event.
             </summary>
             <remarks>
             This event raises when adding the new <see cref="T:Syncfusion.PdfExport.PdfPage"/> to the <see cref="T:Syncfusion.PdfExport.PdfDocument"/>.
             </remarks> 
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add the event.
             document.Pages.PageAdded += new PageAddedEventHandler(Pages_PageAdded);
             //Creates a new page and adds it as the last page of the document.
             PdfPage page = document.Pages.Add();
             //Create font with Bold font style.
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
             //Draw text in the new page.
             page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
             page = document.Pages.Add();
             //Save and close the document.
             document.Save("Sample.pdf");
             document.Close(true);
             //Event handler for PageAdded event.
             void Pages_PageAdded(object sender, PageAddedEventArgs args)
             {
             PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 10);
             args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, new PointF(100, 100));
             }
             </code>
             <code lang="VB.NET">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add the event.
             document.Pages.PageAdded += New PageAddedEventHandler(Pages_PageAdded)
             'Creates a new page and adds it as the last page of the document.
             Dim page As PdfPage = document.Pages.Add()
             'Create font with Bold font style.
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F, PdfFontStyle.Bold)
             'Draw text in the new page.
             page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
             page = document.Pages.Add()
             'Save and close the document.
             document.Save("Sample.pdf")
             document.Close(True)
            'Event handler for PageAdded event.
             Private Sub Pages_PageAdded(sender As Object, args As PageAddedEventArgs)
            	Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 10)
            	args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, New PointF(100, 100))
             End Sub
             </code>
             </example>
             <seealso cref="T:Syncfusion.PdfExport.PageAddedEventHandler"/> Delegate.
             <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class.
             <seealso cref="T:Syncfusion.PdfExport.PdfGraphics"/> Class.
        </member>
        <member name="P:Syncfusion.PdfExport.PageAddedEventArgs.Page">
            <summary>
            Gets the newly added page.
            </summary>
            <value>A <see cref="T:Syncfusion.PdfExport.PdfPage"/> object representing the page which is added in the document.</value>
            <example>
            <code lang="CS">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add the event.
            document.Pages.PageAdded += new PageAddedEventHandler(Pages_PageAdded);
            //Creates a new page and adds it as the last page of the document.
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            page = document.Pages.Add();
            //Save and close the document.
            document.Save("Sample.pdf");
            document.Close(true);
            //Event handler for PageAdded event
            void Pages_PageAdded(object sender, PageAddedEventArgs args)
            {
            PdfPage page = args.Page;
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 10);
            page.Graphics.DrawString("New Page", font, PdfBrushes.Black, new PointF(100, 100));
            }
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add the event.
            document.Pages.PageAdded += New PageAddedEventHandler(Pages_PageAdded)
            'Creates a new page and adds it as the last page of the document.
            Dim page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            page = document.Pages.Add()
            'Save and close the document.
            document.Save("Sample.pdf")
            document.Close(True)
            'Event handler for PageAdded event.
            Private Sub Pages_PageAdded(sender As Object, args As PageAddedEventArgs)
            Dim page As PdfPage = args.Page
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 10)
            page.Graphics.DrawString("New Page", font, PdfBrushes.Black, New PointF(100, 100))
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class.
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PageAddedEventArgs.#ctor(Syncfusion.PdfExport.PdfPage)">
             <summary>
             Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PageAddedEventArgs"/> class with <see cref="T:Syncfusion.PdfExport.PdfPage"/>.
             </summary>
             <param name="page">A <see cref="T:Syncfusion.PdfExport.PdfPage"/> object representing the page which is added in the document.</param>
             <example>
             <code lang="CS">
             //Create a new PDF document.
             PdfDocument document = new PdfDocument();
             //Add the event.
             document.Pages.PageAdded += new PageAddedEventHandler(Pages_PageAdded);
             //Creates a new page and adds it as the last page of the document.
             PdfPage page = document.Pages.Add();
             //Create font with Bold font style.
             PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
             //Draw text in the new page.
             page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
             page = document.Pages.Add();
             //Save and close the document.
             document.Save("Sample.pdf");
             document.Close(true);
             //Event handler for PageAdded event.
             void Pages_PageAdded(object sender, PageAddedEventArgs args)
             {
             PdfPage page = args.Page;
             PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 10);
             page.Graphics.DrawString("New Page", font, PdfBrushes.Black, new PointF(100, 100));
             }
             </code>
             <code lang="VB.NET">
             'Create a new PDF document.
             Dim document As New PdfDocument()
             'Add the event.
             document.Pages.PageAdded += New PageAddedEventHandler(Pages_PageAdded)
             'Creates a new page and adds it as the last page of the document.
             Dim page As PdfPage = document.Pages.Add()
             'Create font with Bold font style.
             Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F, PdfFontStyle.Bold)
             'Draw text in the new page.
             page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
             page = document.Pages.Add()
             'Save and close the document.
             document.Save("Sample.pdf")
             document.Close(True)
            'Event handler for PageAdded event.
             Private Sub Pages_PageAdded(sender As Object, args As PageAddedEventArgs)
            	Dim page As PdfPage = args.Page
            	Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 10)
            	page.Graphics.DrawString("New Page", font, PdfBrushes.Black, New PointF(100, 100))
             End Sub
             </code>
             </example>
             <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class. 
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPageSize">
            <summary>
            Represents information about various predefined page sizes.
            </summary>
            <example>
            <code lang="C#">
            //Create new document.
            PdfDocument document = new PdfDocument();
            //Set page page for document.
            document.PageSettings.Size = PdfPageSize.A4;
            //Save and close the document.
            document.Save("Output.pdf");
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document.
            Dim document As PdfDocument = New PdfDocument()
            'Set page page for document.
            document.PageSettings.Size = PdfPageSize.A4
            'Save and close the document.
            document.Save("Output.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.Letter">
             <property name="flag" value="Finished" />
            
             <summary>
             Letter format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.Note">
             <property name="flag" value="Finished" />
            
             <summary>
             Note format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.Legal">
             <property name="flag" value="Finished" />
            
             <summary>
             Legal format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A0">
             <property name="flag" value="Finished" />
            
             <summary>
             A0 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A1">
             <property name="flag" value="Finished" />
            
             <summary>
             A1 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A2">
             <property name="flag" value="Finished" />
            
             <summary>
             A2 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A3">
             <property name="flag" value="Finished" />
            
             <summary>
             A3 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A4">
             <property name="flag" value="Finished" />
            
             <summary>
             A4 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A5">
             <property name="flag" value="Finished" />
            
             <summary>
             A5 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A6">
             <property name="flag" value="Finished" />
            
             <summary>
             A6 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A7">
             <property name="flag" value="Finished" />
            
             <summary>
             A7 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A8">
             <property name="flag" value="Finished" />
            
             <summary>
             A8 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A9">
             <property name="flag" value="Finished" />
            
             <summary>
             A9 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.A10">
             <property name="flag" value="Finished" />
            
             <summary>
             A10 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.B0">
             <property name="flag" value="Finished" />
            
             <summary>
             B0 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.B1">
             <property name="flag" value="Finished" />
            
             <summary>
             B1 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.B2">
             <property name="flag" value="Finished" />
            
             <summary>
             B2 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.B3">
             <property name="flag" value="Finished" />
            
             <summary>
             B3 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.B4">
             <property name="flag" value="Finished" />
            
             <summary>
             B4 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.B5">
             <property name="flag" value="Finished" />
            
             <summary>
             B5 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.ArchE">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchE format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.ArchD">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchD format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.ArchC">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchC format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.ArchB">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchB format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.ArchA">
             <property name="flag" value="Finished" />
            
             <summary>
             ArchA format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.Flsa">
             <property name="flag" value="Finished" />
            
             <summary>
             The American Foolscap format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.HalfLetter">
             <property name="flag" value="Finished" />
            
             <summary>
             HalfLetter format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.Letter11x17">
             <property name="flag" value="Finished" />
            
             <summary>
             11x17 format.
             </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageSize.Ledger">
             <property name="flag" value="Finished" />
            
             <summary>
             Ledger format.
             </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageSize.#ctor">
             <property name="flag" value="Finished" />
            
             <summary>
             Private constructor.
             </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDocumentPageCollection">
            <summary>
            Implements a virtual collection of all pages in the document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Get PDF page collection
            PdfDocumentPageCollection pages = doc.pages;
            //Add a new page
            pages.Add();
            //Save and close the document.
            doc.Save("Output.pdf");
            doc.Close(true);
            </code> 
            <code lang="VB.NET">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Get all the pages from new document.
            Dim docPages As PdfDocumentPageCollection = doc.Pages
            'Add a new page.
            docPages.Add();
            'Save and close the document.
            doc.Save("Output.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/>  Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentPageCollection.m_document">
            <summary>
            Parent document.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentPageCollection.m_pageCollectionIndex">
            <summary>
            It holds the page collection with the index
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentPageCollection.count">
            <summary>
            It counts the index of the page
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentPageCollection.Count">
            <summary>
            Gets the total number of the pages.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Add a new page
            PdfPage page = doc.Pages.Add();
            int pageCount = doc.Pages.Count;
            //Save and close the document.
            doc.Save("Output.pdf");
            doc.Close(true);
            </code> 
            <code lang="VB.NET">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Add a new page.
            doc.Pages.Add()
            'Get page count
            Dim count = doc.Pages.Count
            'Save and close the document.
            doc.Save("Output.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/>  Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentPageCollection.Item(System.Int32)">
            <summary>
            Gets a page by its index in the document.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Add a new page
            doc.Pages.Add();
            //Get page instance by index
            PdfPage page = doc.Pages[0];
            //Save and close the document.
            doc.Save("Output.pdf");
            doc.Close(true);
            </code> 
            <code lang="VB.NET">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Add a new page.
            doc.Pages.Add()
            'Get page instance by index
            Dim page As PdfPage = doc.Pages[0];
            'Save and close the document.
            doc.Save("Output.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/>  Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentPageCollection.PageCollectionIndex">
            <summary>
            Gets a page index from the document.
            </summary>
        </member>
        <member name="E:Syncfusion.PdfExport.PdfDocumentPageCollection.PageAdded">
            <summary>
            Represents the  method that executes on a PdfDocument when a new page is created.
            </summary>
            <example>
            <code lang="C#">
            //Create a new PDF document.
            PdfDocument document = new PdfDocument();
            //Add the event
            document.Pages.PageAdded += new PageAddedEventHandler(Pages_PageAdded);
            //Creates a new page and adds it as the last page of the document
            PdfPage page = document.Pages.Add();
            //Create font with Bold font style.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12f, PdfFontStyle.Bold);
            //Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, new PointF(10, 10));
            page = document.Pages.Add();
            //Saves the document
            document.Save("Sample.pdf");
            document.Close(true);
            //Event handler for PageAdded event
            void Pages_PageAdded(object sender, PageAddedEventArgs args)
            {
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 10);
            args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, new PointF(100, 100));
            }
            </code>
            <code lang="VB.NET">
            'Create a new PDF document.
            Dim document As New PdfDocument()
            'Add the event
            document.Pages.PageAdded += New PageAddedEventHandler(Pages_PageAdded)
            'Creates a new page and adds it as the last page of the document
            Dim page As PdfPage = document.Pages.Add()
            'Create font with Bold font style.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 12F, PdfFontStyle.Bold)
            'Draw text in the new page.
            page.Graphics.DrawString("Essential PDF", font, PdfBrushes.Black, New PointF(10, 10))
            page = document.Pages.Add()
            'Saves the document
            document.Save("Sample.pdf")
            document.Close(True)
            'Event handler for PageAdded event
            Private Sub Pages_PageAdded(sender As Object, args As PageAddedEventArgs)
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 10)
            args.Page.Graphics.DrawString("New Page", font, PdfBrushes.Black, New PointF(100, 100))
            End Sub
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.#ctor(Syncfusion.PdfExport.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDocumentPageCollection"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.Add">
            <summary>
            Creates a page and adds it to the last section in the document.
            </summary>
            <returns>Created <see cref="T:Syncfusion.PdfExport.PdfPage"/> object.</returns>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Add a new page
            PdfPage page = doc.Pages.Add();
            //Save and close the document.
            doc.Save("Output.pdf");
            doc.Close(true);
            </code> 
            <code lang="VB.NET">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Save and close the document.
            doc.Save("Output.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/>  Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.Add(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Adds the specified page to the last section.
            </summary>
            <param name="page">The page.</param>i
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.Insert(System.Int32,Syncfusion.PdfExport.PdfPage)">
            <summary>
            Inserts a page at the specified index to the last section in the document.
            </summary>
            <param name="index">The index of the page in the section.</param>
            <param name="page">The <see cref="T:Syncfusion.PdfExport.PdfPage"/>.</param>
            <remarks> 
            Page index start from 0 to (TotalPageCount - 1). 
            Selected index must be within 0 to (TotalPageCount - 1) range.
            </remarks>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Add 3 pages
            doc.Pages.Add();
            doc.Pages.Add();
            doc.Pages.Add();
            //Insert a new page in 2 index
            PdfPage page = new PdfPage();
            doc.Pages.Insert(2, page);
            //Save and close the document.
            doc.Save("Output.pdf");
            doc.Close(true);
            </code> 
            <code lang="VB.NET">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Add 3 pages
            doc.Pages.Add()
            doc.Pages.Add()
            doc.Pages.Add()
            'Insert a new page in 2 index
            Dim page As PdfPage = New PdfPage()
            doc.Pages.Insert(2, page)
            'Save and close the document.
            doc.Save("Output.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.IndexOf(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Gets the index of the page in the document.
            </summary>
            <param name="page">The current page.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Add 3 pages
            doc.Pages.Add();
            doc.Pages.Add();
            PdfPage page = doc.Pages.Add();
            //Get index of a page
            int index = doc.Pages.IndexOf(page);
            //Save and close the document.
            doc.Save("Output.pdf");
            doc.Close(true);
            </code> 
            <code lang="VB.NET">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Add 3 pages
            doc.Pages.Add()
            doc.Pages.Add()
            Dim page As PdfPage = doc.Pages.Add()
            'Get index of a PDF
            Dim index = doc.Pages.IndexOf(page);
            'Save and close the document.
            doc.Save("Output.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.Remove(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Removes the specified page.
            </summary>
            <param name="page">The page.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.Clear">
            <summary>
            Clears the page collection.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.CountPages">
            <summary>
            Counts the pages.
            </summary>
            <returns>The total number of pages.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.GetPageByIndex(System.Int32)">
            <summary>
            Searches a page by its index in the document.
            </summary>
            <param name="index">Zero-based index of the page.</param>
            <returns>Page by its index in the document.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.GetLastSection">
            <summary>
            Returns last section in the document.
            </summary>
            <returns>Returns last section in the document.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.OnPageAdded(Syncfusion.PdfExport.PageAddedEventArgs)">
            <summary>
            Called when new page has been added
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDocumentPageCollection.PdfPageEnumerator">
            <summary>
            Section collection enumerator.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentPageCollection.PdfPageEnumerator.m_pageCollection">
            <summary>
            Parent page collection.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentPageCollection.PdfPageEnumerator.m_currentIndex">
            <summary>
            Current index of the enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.PdfPageEnumerator.#ctor(Syncfusion.PdfExport.PdfDocumentPageCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDocumentPageCollection.PdfPageEnumerator"/> class.
            </summary>
            <param name="pageCollection">The section collection.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentPageCollection.PdfPageEnumerator.Current">
            <summary>
            Gets the current section.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.PdfPageEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.PdfPageEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentPageCollection.PdfPageEnumerator.CheckIndex">
            <summary>
            Checks the index.
            </summary>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfDocumentTemplate">
            <summary>
            Encapsulates a page template for all the pages in the document.
            </summary>
            <example>
            <code lang="C#">
            //Create a PDF document.
            PdfDocument doc = new PdfDocument();
            //Creates a new page and adds it as the last page of the document
            PdfPage page = doc.Pages.Add();
            RectangleF rect = new RectangleF(0, 0, page.GetClientSize().Width, page.GetClientSize().Height);
            //Creates a new page and adds it as the last page of the document template
            PdfPageTemplateElement footer = new PdfPageTemplateElement(rect);
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            PdfSolidBrush brush = new PdfSolidBrush(Color.Gray);
            //Create page number field
            PdfPageNumberField pageNumber = new PdfPageNumberField(font, brush);
            //Create page count field
            PdfPageCountField count = new PdfPageCountField(font, brush);
            PdfCompositeField compositeField = new PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count);
            compositeField.Bounds = footer.Bounds;
            compositeField.Draw(footer.Graphics, new PointF(40, footer.Height - 50));          
            //Add the footer template at the bottom
            doc.Template.Bottom = footer;
            //Save the document
            doc.Save("Template.pdf");
            //Close the document
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a PDF document
            Dim doc As PdfDocument = New PdfDocument()
            'Create a page
            Dim page As PdfPage = doc.Pages.Add()
            Dim rect As RectangleF = New RectangleF(0, 0, page.GetClientSize().Width, page.GetClientSize().Height)
            'Create a page template
            Dim footer As PdfPageTemplateElement = New PdfPageTemplateElement(rect)
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 8)
            Dim brush As PdfSolidBrush = New PdfSolidBrush(Color.Gray)
            'Create page number field
            Dim pageNumber As PdfPageNumberField = New PdfPageNumberField(font, brush)
            'Create page count field
            Dim count As PdfPageCountField = New PdfPageCountField(font, brush)
            Dim compositeField As PdfCompositeField = New PdfCompositeField(font, brush, "Page {0} of {1}", pageNumber, count)
            compositeField.Bounds = footer.Bounds
            compositeField.Draw(footer.Graphics, New PointF(40, footer.Height - 50))
            'Add the footer template at the bottom
            doc.Template.Bottom = footer
            doc.Save("Template.pdf")
            'Close the document
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageNumberField"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageCountField"/>  Class
            <seealso cref="T:Syncfusion.PdfExport.PdfCompositeField"/>  Class
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_left">
            <summary>
            Left page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_top">
            <summary>
            Top page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_right">
            <summary>
            Right page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_bottom">
            <summary>
            Bottom page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_evenLeft">
            <summary>
            Even Left page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_evenTop">
            <summary>
            Even Top page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_evenRight">
            <summary>
            Even Right page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_evenBottom">
            <summary>
            Even Bottom page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_oddLeft">
            <summary>
            Odd Left page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_oddTop">
            <summary>
            Odd Top page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_oddRight">
            <summary>
            Odd Right page template object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfDocumentTemplate.m_oddBottom">
            <summary>
            Odd Bottom page template object.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.Left">
            <summary>
            Gets or sets a left page template.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.Top">
            <summary>
            Gets or sets a top page template.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.Right">
            <summary>
            Gets or sets a right page template.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.Bottom">
            <summary>
            Gets or sets a bottom page template.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.EvenLeft">
            <summary>
            Gets or sets a left page template using on the even pages.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.EvenTop">
            <summary>
            Gets or sets a top page template using on the even pages.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.EvenRight">
            <summary>
            Gets or sets a right page template using on the even pages.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.EvenBottom">
            <summary>
            Gets or sets a bottom page template using on the even pages.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.OddLeft">
            <summary>
            Gets or sets a left page template using on the odd pages.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.OddTop">
            <summary>
            Gets or sets a top page template using on the odd pages.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.OddRight">
            <summary>
            Gets or sets a right page template using on the odd pages.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfDocumentTemplate.OddBottom">
            <summary>
            Gets or sets a bottom page template using on the odd pages.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageTemplateElement"/> to draw into the PDF page</value>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfDocumentTemplate"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentTemplate.GetLeft(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Returns left template.
            </summary>
            <param name="page">Page where the template should be printed.</param>
            <returns>Returns left template.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentTemplate.GetTop(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Returns top template.
            </summary>
            <param name="page">Page where the template should be printed.</param>
            <returns>Returns top template.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentTemplate.GetRight(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Returns right template.
            </summary>
            <param name="page">Page where the template should be printed.</param>
            <returns>Returns right template.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentTemplate.GetBottom(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Returns bottom template.
            </summary>
            <param name="page">Page where the template should be printed.</param>
            <returns>Returns bottom template.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentTemplate.IsEven(Syncfusion.PdfExport.PdfPage)">
            <summary>
            Checks whether the page is even or odd.
            </summary>
            <param name="page">The page object.</param>
            <returns>True if the page is even, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfDocumentTemplate.CheckElement(Syncfusion.PdfExport.PdfPageTemplateElement,Syncfusion.PdfExport.TemplateType)">
            <summary>
            Checks a template element.
            </summary>
            <param name="templateElement">The template element.</param>
            <param name="type">The type that should be assigned to the template element.</param>
            <returns>
            The template element which passed the check.
            </returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPage">
            <summary>Provides methods and properties to create PDF pages and its elements, <see cref="T:Syncfusion.PdfExport.PdfPage">PdfPage</see> class inherited from the <see cref="T:Syncfusion.PdfExport.PdfPageBase">PdfPageBase</see> class</summary>
            <example>
            The following example shows the several properties and methods of PdfPage class
            <code title="Example" description="" lang="CS">
            //Create a PDF document
            PdfDocument document = new PdfDocument();
            //Create a page
            PdfPage page = new PdfPage();
            //Get annotation collection
            PdfAnnotationCollection annotation = page.Annotations;
            //Get Graphics
            PdfGraphics graphics = page.Graphics;
            //Get page Layers
            PdfPageLayerCollection layers = page.Layers;
            //Get actual page size
            SizeF clientSize = page.GetClientSize();
            //Insert page in the document
            document.Pages.Insert(0, page);
            //Save and close the PDF document
            document.Save("output.Pdf");
            document.Close(true);</code><code title="Example2" description="" lang="VB.NET">
            'Create a PDF document
            Dim document As New PdfDocument()
            'Create a page
            Dim page As New PdfPage()
            'Get annotation collection
            Dim annotation As PdfAnnotationCollection = page.Annotations
            'Get Graphics
            Dim graphics As PdfGraphics = page.Graphics
            'Get page Layers
            Dim layers As PdfPageLayerCollection = page.Layers
            'Get actual page size
            Dim clientSize As SizeF = page.GetClientSize()
            'Insert page in the document
            document.Pages.Insert(0, page)
            'Save and close the PDF document
            document.Save("output.Pdf")
            document.Close(True)</code></example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfGraphics"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPage.Section">
            <summary>
            Gets the section of a page- Read only
            </summary>
            <value>
            The PdfSection.
            </value>
            <example>
            <code lang="CS">
            //Create a PDF document
            PdfDocument document = new PdfDocument();
            //Create a page
            PdfPage page = new PdfPage();
            //Insert page in the document
            document.Pages.Insert(0, page);
            //Get Section of a page
            PdfSection section = page.Section;
            //Save and close the PDF document
            document.Save("output.Pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a PDF document
            Dim document As New PdfDocument()
            'Create a page
            Dim page As New PdfPage()
            'Insert page in the document
            document.Pages.Insert(0, page)
            'Get Section of a page
            Dim section As PdfSection = page.Section
            'Save and close the PDF document
            document.Save("output.Pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfSection"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPage.Size">
            <summary>
            Gets size of the PDF page- Read only
            </summary>
            <value>
            A SizeF that represents the size of the page
            </value>
            <example>
            <code lang="CS">
            //Create a PDF document
            PdfDocument document = new PdfDocument();
            //Create a page
            PdfPage page = new PdfPage();
            //Insert page in the document
            document.Pages.Insert(0, page);
            //Get size of a page
            SizeF size = page.Size;
            //Save and close the PDF document
            document.Save("output.Pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a PDF document
            Dim document As New PdfDocument()
            'Create a page
            Dim page As New PdfPage()
            'Insert page in the document
            document.Pages.Insert(0, page)
            'Get size of a page
            Dim size As SizeF = page.Size
            'Save and close the PDF document
            document.Save("output.Pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPage.Origin">
            <summary>
            Gets the origin of the page
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPage.Annotations">
            <summary>
            Gets a collection of the annotations of the page- Read only.
            </summary>
            <value>
            A PdfAnnotationCollection that represents the annotations of the page.
            </value>
            <example>
            <code lang="CS">
            //Create a PDF document
            PdfDocument document = new PdfDocument();
            //Create a page
            PdfPage page = new PdfPage();
            //Insert page in the document
            document.Pages.Insert(0, page);
            //Get annotation collection
            PdfAnnotationCollection annotation = page.Annotations;
            //Save and close the PDF document
            document.Save("output.Pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a PDF document
            Dim document As New PdfDocument()
            'Create a page
            Dim page As New PdfPage()
            'Insert page in the document
            document.Pages.Insert(0, page)
            'Get annotation collection
            Dim annotation As PdfAnnotationCollection = page.Annotations
            'Save and close the PDF document
            document.Save("output.Pdf")
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPage.Document">
            <summary>
            Gets current document.
            </summary>
            <value>The pdf document.</value>
        </member>
        <member name="E:Syncfusion.PdfExport.PdfPage.BeginSave">
            <summary>
            Raises before the page saves.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPage.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPage">PdfPage</see> class.</summary>
            <example>
            The following code example demonstrates how to construct a PdfPage
            <code title="" description="" lang="CS">
            //Create a PDF document
            PdfDocument document = new PdfDocument();
            //Create a page
            PdfPage page = new PdfPage();
            //Insert page in the document
            document.Pages.Insert(0, page);
            //Save and close the PDF document
            document.Save("output.Pdf");
            document.Close(true);</code><code title="" description="" lang="VB.NET">
            'Create a PDF document
             Dim document As New PdfDocument()
             'Create a page
             Dim page As New PdfPage()
             'Insert page in the document
             document.Pages.Insert(0, page)
             'Save and close the PDF document
             document.Save("output.Pdf")
             document.Close(True)</code></example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPage.GetClientSize">
            <summary>
            Get the PDF page size reduced by page margins and page template dimensions.
            </summary>
            <remarks>
            It's the actual size of the page where some output can be performed.
            </remarks>
            <returns>
            <para>Type: <see cref="T:System.Drawing.SizeF">System.Drawing.SizeF</see></para>
            <para>The actual page size reduced by page margins and page template dimensions</para>
            </returns>
            <example>
            <code lang="CS">
             //Create a PDF document
             PdfDocument document = new PdfDocument();
             //Create a page
             PdfPage page = new PdfPage();
             //Insert page in the document
             document.Pages.Insert(0, page);
             //Get size of the page
             SizeF size = page.GetClientSize();
             //Save and close the PDF document
             document.Save("output.Pdf");
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a PDF document
            Dim document As New PdfDocument()
            'Create a page
            Dim page As New PdfPage()
            'Insert page in the document
            document.Pages.Insert(0, page)
            'Get size of the page
            Dim size As SizeF = page.GetClientSize()
            'Save and close the PDF document
            document.Save("output.Pdf")
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPage.OnBeginSave(System.EventArgs)">
            <summary>
            Raises <see cref="E:Syncfusion.PdfExport.PdfPage.BeginSave"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPage.Clear">
            <summary>
            Clears PdfPage.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPage.AssignSection(Syncfusion.PdfExport.PdfSection)">
            <summary>
            Sets parent section to the page.
            </summary>
            <param name="section">The parent section.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPage.Initialize">
            <summary>
            Initializes a page.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPage.DrawPageTemplates(Syncfusion.PdfExport.PdfDocument)">
            <summary>
            Draws page templates.
            </summary>
            <param name="document">Parent document.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPage.PageBeginSave(System.Object,Syncfusion.PdfExport.SavePdfPrimitiveEventArgs)">
            <summary>
            Raises when page dictionary is going to be saved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPageBase">
            <summary>
            The abstract base class for all pages, Provides methods and properties to create PDF pages and its elements
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageBase.m_layers">
            <summary>
            Collection of the layers of the page.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageBase.m_defLayerIndex">
            <summary>
            Index of the default layer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageBase.m_fontReference">
            <summary>
            Local variable to store the Font Refences.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageBase.m_contentTemplate">
            <summary>
            Local variable to store page template.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.Graphics">
             <summary>
             Gets the graphics of the <see cref="P:Syncfusion.PdfExport.PdfPageBase.DefaultLayer"/>.
             </summary>
             <value>
             The <see cref="T:Syncfusion.PdfExport.PdfGraphics"/> that represents a graphics of the page.
             </value>
             ///<example>
            <code lang="CS">
             //Create a PDF document
             PdfDocument document = new PdfDocument();
             //Create a PDF page
             PdfPage page = document.Pages.Add();
             //Get graphics
             PdfGraphics graphics = page.Graphics;
             //Draw a rectangle
             graphics.DrawRectangle(PdfBrushes.Red, new RectangleF(0, 0, 100, 200));
             //Save and close the document
             document.Save("output.pdf");
             document.Close(true);
             </code>
             <code lang="VB.NET">
             'Create a PDF document
             Dim document As New PdfDocument()
             'Create a PDF page
             Dim page As PdfPage = document.Pages.Add()
             'Get graphics
             Dim graphics As PdfGraphics = page.Graphics
             'Draw a rectangle
             graphics.DrawRectangle(PdfBrushes.Red, New RectangleF(0, 0, 100, 200))
             'Save and close the document
             document.Save("output.pdf")
             document.Close(True)
             </code>
             </example>
             <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
             <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
             <seealso cref="T:Syncfusion.PdfExport.PdfGraphics"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.Layers">
            <summary>
            Gets the collection of the page's layers (Read only).
            </summary>
            <value>
            The <see cref="T:Syncfusion.PdfExport.PdfPageLayerCollection"/> that represents the page's layers
            </value>
            <example>
            <code lang="CS">
            //Create a PDF document
            PdfDocument document = new PdfDocument();
            //Add page to the document
            PdfPage page=document.Pages.Add();
            //Get the page layer
            PdfPageLayerCollection angle = page.Layers;
            //Save and close the PDF document
            document.Save("output.Pdf");
            document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a PDF document
            Dim document As New PdfDocument()
            'Add page to the document
            Dim page As PdfPage = document.Pages.Add()
            'Get the page layer
            Dim angle As PdfPageLayerCollection = page.Layers
            'Save and close the PDF document
            document.Save("output.Pdf")
            document.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.DefaultLayerIndex">
            <summary>
            Gets or sets index of the default layer.
            </summary>
            <example>
            <code lang="C#">
            //Create new document.
            PdfDocument document = new PdfDocument();
            //Set page size.
            document.PageSettings = new PdfPageSettings(new SizeF(350, 300));
            //Add new page.
            PdfPage page = document.Pages.Add();
            //Create new instance for PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 16);
            //Draw the text.
            page.Graphics.DrawString("Layers", font, PdfBrushes.DarkBlue, new PointF(150, 10));
            //Add the first layer
            page.Layers.Add();
            //Get default layer graphics.
            PdfGraphics graphics = page.DefaultLayer.Graphics;
            graphics.TranslateTransform(100, 60);
            //Create new instance for PDF pen.
            PdfPen pen = new PdfPen(Color.Red, 50);
            RectangleF rect = new RectangleF(0, 0, 50, 50);
            //Draw arc.
            graphics.DrawArc(pen, rect, 360, 360);
            pen = new PdfPen(Color.Blue, 30);
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360);
            pen = new PdfPen(Color.Yellow, 20);
            graphics.DrawArc(pen, rect, 360, 360);
            pen = new PdfPen(Color.Green, 10);
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360);
            //Add another layer on the page
            page.Layers.Add();
            //Increment the layer
            page.DefaultLayerIndex += 1;
            graphics = page.DefaultLayer.Graphics;
            graphics.TranslateTransform(100, 180);
            graphics.SkewTransform(0, 50);
            //Draw another set of elements
            pen = new PdfPen(Color.Red, 50);
            graphics.DrawArc(pen, rect, 360, 360);
            pen = new PdfPen(Color.Blue, 30);
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360);
            pen = new PdfPen(Color.Yellow, 20);
            graphics.DrawArc(pen, rect, 360, 360);
            pen = new PdfPen(Color.Green, 10);
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360);
            //Save the pdf document.
            document.Save("Layer.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document.
            Dim document As PdfDocument = New PdfDocument()
            'Set page size.
            document.PageSettings = New PdfPageSettings(New SizeF(350, 300))
            'Add new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new instance for PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 16)
            'Draw the text.
            page.Graphics.DrawString("Layers", font, PdfBrushes.DarkBlue, New PointF(150, 10))
            'Add the first layer
            page.Layers.Add()
            'Get default layer graphics.
            Dim graphics As PdfGraphics = page.DefaultLayer.Graphics
            graphics.TranslateTransform(100, 60)
            'Create new instance for PDF pen.
            Dim pen As PdfPen = New PdfPen(Color.Red, 50)
            Dim rect As RectangleF = New RectangleF(0, 0, 50, 50)
            'Draw arc.
            graphics.DrawArc(pen, rect, 360, 360)
            pen = New PdfPen(Color.Blue, 30)
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360)
            pen = New PdfPen(Color.Yellow, 20)
            graphics.DrawArc(pen, rect, 360, 360)
            pen = New PdfPen(Color.Green, 10)
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360)
            'Add another layer on the page
            page.Layers.Add()
            'Increment the layer
            page.DefaultLayerIndex += 1
            graphics = page.DefaultLayer.Graphics
            graphics.TranslateTransform(100, 180)
            graphics.SkewTransform(0, 50)
            'Draw another set of elements
            pen = New PdfPen(Color.Red, 50)
            graphics.DrawArc(pen, rect, 360, 360)
            pen = New PdfPen(Color.Blue, 30)
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360)
            pen = New PdfPen(Color.Yellow, 20)
            graphics.DrawArc(pen, rect, 360, 360)
            pen = New PdfPen(Color.Green, 10)
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360)
            'Save and close the document.
            document.Save("Layer.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageLayer"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.DefaultLayer">
            <summary>
            Gets the default layer of the page (Read only).
            </summary>
            <value>
            The <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> of the Page
            </value>
            <example>
            <code lang="C#">
            //Create new document.
            PdfDocument document = new PdfDocument();
            //Set page size.
            document.PageSettings = new PdfPageSettings(new SizeF(350, 300));
            //Add new page.
            PdfPage page = document.Pages.Add();
            //Create new instance for PDF font.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 16);
            //Draw the text.
            page.Graphics.DrawString("Layers", font, PdfBrushes.DarkBlue, new PointF(150, 10));
            //Add the first layer
            page.Layers.Add();
            //Get default layer graphics.
            PdfGraphics graphics = page.DefaultLayer.Graphics;
            graphics.TranslateTransform(100, 60);
            //Create new instance for PDF pen.
            PdfPen pen = new PdfPen(Color.Red, 50);
            RectangleF rect = new RectangleF(0, 0, 50, 50);
            //Draw arc.
            graphics.DrawArc(pen, rect, 360, 360);
            pen = new PdfPen(Color.Blue, 30);
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360);
            pen = new PdfPen(Color.Yellow, 20);
            graphics.DrawArc(pen, rect, 360, 360);
            pen = new PdfPen(Color.Green, 10);
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360);
            //Add another layer on the page
            page.Layers.Add();
            //Increment the layer
            page.DefaultLayerIndex += 1;
            graphics = page.DefaultLayer.Graphics;
            graphics.TranslateTransform(100, 180);
            graphics.SkewTransform(0, 50);
            //Draw another set of elements
            pen = new PdfPen(Color.Red, 50);
            graphics.DrawArc(pen, rect, 360, 360);
            pen = new PdfPen(Color.Blue, 30);
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360);
            pen = new PdfPen(Color.Yellow, 20);
            graphics.DrawArc(pen, rect, 360, 360);
            pen = new PdfPen(Color.Green, 10);
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360);
            //Save the pdf document.
            document.Save("Layer.pdf");
            //Close the document.
            document.Close(true);
            </code>
            <code lang="VB">
            'Create new document.
            Dim document As PdfDocument = New PdfDocument()
            'Set page size.
            document.PageSettings = New PdfPageSettings(New SizeF(350, 300))
            'Add new page.
            Dim page As PdfPage = document.Pages.Add()
            'Create new instance for PDF font.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Helvetica, 16)
            'Draw the text.
            page.Graphics.DrawString("Layers", font, PdfBrushes.DarkBlue, New PointF(150, 10))
            'Add the first layer
            page.Layers.Add()
            'Get default layer graphics.
            Dim graphics As PdfGraphics = page.DefaultLayer.Graphics
            graphics.TranslateTransform(100, 60)
            'Create new instance for PDF pen.
            Dim pen As PdfPen = New PdfPen(Color.Red, 50)
            Dim rect As RectangleF = New RectangleF(0, 0, 50, 50)
            'Draw arc.
            graphics.DrawArc(pen, rect, 360, 360)
            pen = New PdfPen(Color.Blue, 30)
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360)
            pen = New PdfPen(Color.Yellow, 20)
            graphics.DrawArc(pen, rect, 360, 360)
            pen = New PdfPen(Color.Green, 10)
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360)
            'Add another layer on the page
            page.Layers.Add()
            'Increment the layer
            page.DefaultLayerIndex += 1
            graphics = page.DefaultLayer.Graphics
            graphics.TranslateTransform(100, 180)
            graphics.SkewTransform(0, 50)
            'Draw another set of elements
            pen = New PdfPen(Color.Red, 50)
            graphics.DrawArc(pen, rect, 360, 360)
            pen = New PdfPen(Color.Blue, 30)
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360)
            pen = New PdfPen(Color.Yellow, 20)
            graphics.DrawArc(pen, rect, 360, 360)
            pen = New PdfPen(Color.Green, 10)
            graphics.DrawArc(pen, 0, 0, 50, 50, 360, 360)
            'Save and close the document.
            document.Save("Layer.pdf")
            document.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPageLayer"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.Size">
            <summary>
            Gets the size of the page (Read only).
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Add a new page
            PdfPage page = doc.Pages.Add();
            //Get page size
            SizeF size = page.Size;
            //Save and close the document.
            doc.Save("Output.pdf");
            doc.Close(true);
            </code> 
            <code lang="VB.NET">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Add a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Get page size
            Dim size As SizeF = page.Size;
            'Save and close the document.
            doc.Save("Output.pdf")
            doc.Close(True)
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.Origin">
            <summary>
            Gets the origin of the page
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.Contents">
            <summary>
            Gets array of page's content.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.Dictionary">
            <summary>
            Gets the page dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.Rotation">
            <summary>
            Gets the PDF page rotation (Read only).
            </summary>
            <returns>
            The PdfPageRotateAngle that represents the page rotation
            </returns>
            <example>
            <code lang="CS">
             //Create a PDF document
             PdfDocument document = new PdfDocument();
             //Create a page
             PdfPage page = new PdfPage();
             //Insert page in the document
             document.Pages.Insert(0, page);
             //Get rotation
             PdfPageRotateAngle angle = page.Rotation;
             //Save and close the PDF document
             document.Save("output.Pdf");
             document.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a PDF document
            Dim document As New PdfDocument()
            'Create a page
            Dim page As New PdfPage()
            'Insert page in the document
            document.Pages.Insert(0, page)
            'Get rotation
            Dim angle As PdfPageRotateAngle = page.Rotation
            'Save and close the PDF document
            document.Save("output.Pdf")
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.Orientation">
            <summary>
            Gets the page orientation.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageBase.#ctor(Syncfusion.PdfExport.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageBase"/> class.
            </summary>
            <param name="dic">The page dictionary.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageBase.GetResources">
            <summary>
            Gets the resources and modifies the page dictionary.
            </summary>
            <returns>Pdf resources.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageBase.SetResources(Syncfusion.PdfExport.PdfResources)">
            <summary>
            Sets the resources.
            </summary>
            <param name="res">The resources object.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageBase.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageBase.SetProgress">
            <summary>
            Sets the progress.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageBase.ResetProgress">
            <summary>
            Resets the progress.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageBase.ObtainOrientation">
            <summary>
            Gets the page orientation.
            </summary>
            <returns>The orientation of the page.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageBase.Clear">
            <summary>
            Clears PdfPageBase.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageBase.ObtainRotation">
            <summary>
            Gets the page rotation.
            </summary>
            <returns>The rotation of the page.</returns>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPageLabel">
            <summary>
            The <see cref="T:Syncfusion.PdfExport.PdfPageLabel"/> used to identify each page visually on the screen or in print.
            </summary>
            <remarks>Page labels and page indices need not coincide: the indices are fixed, 
            running consecutively through the document starting from 0 for the first page,
            but the labels can be specified in any way that is appropriate for the particular document.</remarks>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLabel.m_dictionary">
            <summary>
            Internal variable to store dictionary.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLabel.m_startIndex">
            <summary>
            Variable used to hold the start page index  
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLabel.NumberStyle">
            <summary>
            Gets or sets the numbering style to be used for the numeric portion of each page label.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfNumberStyle"/> specifies numbering style of page labels.</value>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLabel.Prefix">
            <summary>
            Gets or sets the label prefix for page labels.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLabel.StartNumber">
            <summary>
            Gets or sets the value of the numeric portion for the first page label in the range
            </summary>
            <remarks>The number must be greater than or equal to 1</remarks>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLabel.StartPageIndex">
            <summary>
            Get or Set the Start page index for page label
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageLabel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLabel.FromStyleToString(Syncfusion.PdfExport.PdfNumberStyle)">
            <summary>
            Converts style to a string.
            </summary>
            <param name="style">The style.</param>
            <returns>The PDF name value representing the specified style.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLabel.FromStringToStyle(System.String)">
            <summary>
            Converts string to numbering style.
            </summary>
            <param name="name">The PDF name of the style.</param>
            <returns>The converted numbering style.</returns>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLabel.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPageLayer">
            <summary>
            The <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> used to create layers in PDF document.
            Layers refers to sections of content in a PDF document that can be selectively viewed or hidden by document authors or consumers
            </summary>
            <example>
            <code lang="CS">
            //Create PDF document.
            PdfDocument document = new PdfDocument();
            PdfPage page = document.Pages.Add();
            //Add the first layer.
            PdfPageLayer layer = page.Layers.Add("Layer1");
            PdfGraphics graphics = layer.Graphics;
            graphics.TranslateTransform(100, 60);
            //Draw arc.
            PdfPen pen = new PdfPen(System.Drawing.Color.Red, 50);
            RectangleF bounds = new RectangleF(0, 0, 50, 50);
            graphics.DrawArc(pen, bounds, 360, 360);
            //Add another layer on the page.
            PdfPageLayer layer2 = page.Layers.Add("Layer2");
            graphics = layer2.Graphics;
            graphics.TranslateTransform(100, 180);
            //Draw ellipse.
            graphics.DrawEllipse(pen, bounds);
            //Save the document.
            document.Save("Sample.pdf");
            //Close the document
            document.Close(true); 
            </code>
            <code lang="VB.NET">
            'Create PDF document.
            Dim document As New PdfDocument()
            Dim page As PdfPage = document.Pages.Add()
            'Add the first layer.
            Dim layer As PdfPageLayer = page.Layers.Add("Layer1")
            Dim graphics As PdfGraphics = layer.Graphics
            graphics.TranslateTransform(100, 60)
            'Draw arc.
            Dim pen As New PdfPen(System.Drawing.Color.Red, 50)
            Dim bounds As New RectangleF(0, 0, 50, 50)
            graphics.DrawArc(pen, bounds, 360, 360)
            'Add another layer on the page.
            Dim layer2 As PdfPageLayer = page.Layers.Add("Layer2")
            graphics = layer2.Graphics
            graphics.TranslateTransform(100, 180)
            'Draw ellipse.
            graphics.DrawEllipse(pen, bounds)
            'Save the document.
            document.Save("Sample.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_page">
            <summary>
            Parent page of the layer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_graphics">
            <summary>
            Graphics context of the layer.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_content">
            <summary>
            Content of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_graphicsState">
            <summary>
            Graphics state of the Graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_clipPageTemplates">
            <summary>
            Indicates whether the layer should clip page template dimensions or not.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_colorspace">
            <summary>
            Local Variable to store the colorspace of the document.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_layerid">
            <summary>
            Local Variable to store the layer id
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_name">
            <summary>
            Local Variable to store the name
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_sublayer">
            <summary>
            Indicates if Sublayer is present.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_contentLength">
            <summary>
            Local variable to store length of the graphics.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_printOption">
            <summary>
            Stores the print Option dictionary
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.m_usage">
            <summary>
            Stores the usage dictionary
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayer.isResourceLayer">
            <summary>
            Indicates layer presented in xObject resources
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLayer.Colorspace">
            <summary>
            Get or set the Colorspace.
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLayer.Page">
            <summary>
            Gets parent page of the layer.
            </summary>
            <example>
            <code lang="CS">
            //Create PDF document.
            PdfDocument document = new PdfDocument();
            PdfPage page = document.Pages.Add();
            //Add the first layer.
            PdfPageLayer layer = page.Layers.Add("Layer1");
            PdfGraphics graphics = layer.Graphics;
            graphics.TranslateTransform(100, 60);
            //Draw arc.
            PdfPen pen = new PdfPen(System.Drawing.Color.Red, 50);
            RectangleF bounds = new RectangleF(0, 0, 50, 50);
            graphics.DrawArc(pen, bounds, 360, 360);
            //Add another layer on the page.
            PdfPageLayer layer2 = page.Layers.Add("Layer2");
            graphics = layer2.Graphics;
            graphics.TranslateTransform(100, 180);
            //Draw ellipse.
            graphics.DrawEllipse(pen, bounds);
            //Save the document.
            document.Save("Sample.pdf");
            //Close the document
            document.Close(true); 
            </code>
            <code lang="VB.NET">
            'Create PDF document.
            Dim document As New PdfDocument()
            Dim page As PdfPage = document.Pages.Add()
            'Add the first layer.
            Dim layer As PdfPageLayer = page.Layers.Add("Layer1")
            Dim graphics As PdfGraphics = layer.Graphics
            graphics.TranslateTransform(100, 60)
            'Draw arc.
            Dim pen As New PdfPen(System.Drawing.Color.Red, 50)
            Dim bounds As New RectangleF(0, 0, 50, 50)
            graphics.DrawArc(pen, bounds, 360, 360)
            'Add another layer on the page.
            Dim layer2 As PdfPageLayer = page.Layers.Add("Layer2")
            graphics = layer2.Graphics
            graphics.TranslateTransform(100, 180)
            'Draw ellipse.
            graphics.DrawEllipse(pen, bounds)
            'Save the document.
            document.Save("Sample.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLayer.Name">
            <summary>
            Gets or sets the name of the layer
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLayer.Graphics">
            <summary>
            Gets Graphics context of the layer, used to draw various graphical content on layer.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfGraphics"/> used to draw various graphical content</value>
            <example>
            <code lang="CS">
            //Create PDF document.
            PdfDocument document = new PdfDocument();
            PdfPage page = document.Pages.Add();
            //Add the first layer.
            PdfPageLayer layer = page.Layers.Add("Layer1");
            PdfGraphics graphics = layer.Graphics;
            graphics.TranslateTransform(100, 60);
            //Draw arc.
            PdfPen pen = new PdfPen(System.Drawing.Color.Red, 50);
            RectangleF bounds = new RectangleF(0, 0, 50, 50);
            graphics.DrawArc(pen, bounds, 360, 360);
            //Add another layer on the page.
            PdfPageLayer layer2 = page.Layers.Add("Layer2");
            graphics = layer2.Graphics;
            graphics.TranslateTransform(100, 180);
            //Draw ellipse.
            graphics.DrawEllipse(pen, bounds);
            //Save the document.
            document.Save("Sample.pdf");
            //Close the document
            document.Close(true); 
            </code>
            <code lang="VB.NET">
            'Create PDF document.
            Dim document As New PdfDocument()
            Dim page As PdfPage = document.Pages.Add()
            'Add the first layer.
            Dim layer As PdfPageLayer = page.Layers.Add("Layer1")
            Dim graphics As PdfGraphics = layer.Graphics
            graphics.TranslateTransform(100, 60)
            'Draw arc.
            Dim pen As New PdfPen(System.Drawing.Color.Red, 50)
            Dim bounds As New RectangleF(0, 0, 50, 50)
            graphics.DrawArc(pen, bounds, 360, 360)
            'Add another layer on the page.
            Dim layer2 As PdfPageLayer = page.Layers.Add("Layer2")
            graphics = layer2.Graphics
            graphics.TranslateTransform(100, 180)
            'Draw ellipse.
            graphics.DrawEllipse(pen, bounds)
            'Save the document.
            document.Save("Sample.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayer.#ctor(Syncfusion.PdfExport.PdfPageBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> class with specified PDF page.
            </summary>
            <param name="page">The <see cref="T:Syncfusion.PdfExport.PdfPageBase"/>,parent page of the layer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayer.#ctor(Syncfusion.PdfExport.PdfPageBase,Syncfusion.PdfExport.PdfStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayer.#ctor(Syncfusion.PdfExport.PdfPageBase,System.Boolean)">
            <summary>
            Creates a new layer.
            </summary>
            <param name="page">Parent page of the layer.</param>
            <param name="clipPageTemplates">Indicates whether the layer should clip page template dimensions or not.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayer.InitializeGraphics(Syncfusion.PdfExport.PdfPageBase)">
            <summary>
            Initializes Graphics context of the layer.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLayer.Syncfusion#PdfExport#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayer.BeginSaveContent(System.Object,Syncfusion.PdfExport.SavePdfPrimitiveEventArgs)">
            <summary>
            Catches BeforeSave of the content event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPageLayerCollection">
             <summary>
             The class provides methods and properties to handle the collections of <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/>
             </summary>
             <example>
             <code lang="CS">
             //Create PDF document.
             PdfDocument document = new PdfDocument();
             PdfPage page = document.Pages.Add();
             //Add the first layer.
             PdfPageLayer layer = page.Layers.Add("Layer1");
             PdfGraphics graphics = layer.Graphics;
             graphics.TranslateTransform(100, 60);
             //Draw arc.
             PdfPen pen = new PdfPen(System.Drawing.Color.Red, 50);
             RectangleF bounds = new RectangleF(0, 0, 50, 50);
             graphics.DrawArc(pen, bounds, 360, 360);
             //Add another layer on the page.
             PdfPageLayer layer2 = page.Layers.Add("Layer2");
             graphics = layer2.Graphics;
             graphics.TranslateTransform(100, 180);
             //Draw ellipse.
             graphics.DrawEllipse(pen, bounds);
             //Save the document.
             document.Save("Sample.pdf");
             //Close the document
             document.Close(true); 
            </code>
            <code lang="VB.NET">
            'Create PDF document.
            Dim document As New PdfDocument()
            Dim page As PdfPage = document.Pages.Add()
            'Add the first layer.
            Dim layer As PdfPageLayer = page.Layers.Add("Layer1")
            Dim graphics As PdfGraphics = layer.Graphics
            graphics.TranslateTransform(100, 60)
            'Draw arc.
            Dim pen As New PdfPen(System.Drawing.Color.Red, 50)
            Dim bounds As New RectangleF(0, 0, 50, 50)
            graphics.DrawArc(pen, bounds, 360, 360)
            'Add another layer on the page.
            Dim layer2 As PdfPageLayer = page.Layers.Add("Layer2")
            graphics = layer2.Graphics
            graphics.TranslateTransform(100, 180)
            'Draw ellipse.
            graphics.DrawEllipse(pen, bounds)
            'Save the document.
            document.Save("Sample.pdf")
            'Close the document
            document.Close(True)
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayerCollection.m_page">
            <summary>
            Parent page.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayerCollection.m_sublayer">
            <summary>
            Indicates if Sublayer is present.
            </summary>
        </member>
        <member name="F:Syncfusion.PdfExport.PdfPageLayerCollection.s_syncLockLayer">
            <summary>
            Helps to lock Adding layers to page in multi threading
            </summary>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageLayerCollection.Item(System.Int32)">
            <summary>
            Gets or sets <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> by its index from <see cref="T:Syncfusion.PdfExport.PdfPageLayerCollection"/>
            </summary>
            <remarks>The layers belonging to the same page can be added to the collection only.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayerCollection.#ctor(Syncfusion.PdfExport.PdfPageBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageLayerCollection"/> class with PDF page
            </summary>
            <param name="page">Parent page for the layers in the collection.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayerCollection.Add">
            <summary>
            Creates a new <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> and adds it to the end of the collection.
            </summary>
            <returns>Created <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/></returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayerCollection.Add(Syncfusion.PdfExport.PdfPageLayer)">
            <summary>
            Adds <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> to the collection.
            </summary>
            <param name="layer">The <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> object.</param>
            <remarks>The layers belonging to the same page can be added to the collection only.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayerCollection.Insert(System.Int32,Syncfusion.PdfExport.PdfPageLayer)">
            <summary>
            Inserts <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> into the collection at specified index
            </summary>
            <param name="index">Index of the layer.</param>
            <param name="layer"><see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> object.</param>
            <remarks>The layers belonging to the same page can be added to the collection only.</remarks>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayerCollection.IndexOf(Syncfusion.PdfExport.PdfPageLayer)">
            <summary>
            Returns index of the <see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> in the collection if exists, -1 otherwise.
            </summary>
            <param name="layer"><see cref="T:Syncfusion.PdfExport.PdfPageLayer"/> object.</param>
            <returns>Returns index of the layer in the collection if exists, -1 otherwise.</returns>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayerCollection.AddLayer(Syncfusion.PdfExport.PdfPageLayer)">
            <summary>
            Registers layer at the page.
            </summary>
            <param name="layer">The new layer.</param>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageLayerCollection.InsertLayer(System.Int32,Syncfusion.PdfExport.PdfPageLayer)">
            <summary>
            Registers layer at the page.
            </summary>
            <param name="index">Index of the layer in the collection.</param>
            <param name="layer">The new layer.</param>
        </member>
        <member name="T:Syncfusion.PdfExport.PdfPageSettings">
            <summary>
            The class provides various setting related with PDF pages
            </summary>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Set page settings.
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape;
            doc.PageSettings.Rotate = PdfPageRotateAngle.RotateAngle180;
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document
            Dim doc As New PdfDocument()
            'Set page settings
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape
            doc.PageSettings.Rotate = PdfPageRotateAngle.RotateAngle180
            'Create a new page
            Dim page As PdfPage = doc.Pages.Add()
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageSettings.Orientation">
            <summary>
            Gets or sets the page orientation.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageOrientation"/>, provides the orientation of the PDF page</value>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Set page settings.
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape;
            doc.PageSettings.Rotate = PdfPageRotateAngle.RotateAngle180;
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document
            Dim doc As New PdfDocument()
            'Set page settings
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape
            doc.PageSettings.Rotate = PdfPageRotateAngle.RotateAngle180
            'Create a new page
            Dim page As PdfPage = doc.Pages.Add()
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageSettings.Size">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <remarks>Default value: 595 * 842 pixels</remarks>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Set page size.
            doc.PageSettings.Size = new SizeF(600, 600);
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document
            Dim doc As New PdfDocument()
            'Set page size
            doc.PageSettings.Size = New SizeF(600, 600)
            'Create a new page
            Dim page As PdfPage = doc.Pages.Add()
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageSettings.Width">
            <summary>
            Gets or sets the width of the page.
            </summary>
            <remarks>Default value: 595 pixels</remarks>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Set page width.
            doc.PageSettings.Width = 300;
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document
            Dim doc As New PdfDocument()
            'Set page width
            doc.PageSettings.Width = 300
            'Create a new page
            Dim page As PdfPage = doc.Pages.Add()
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageSettings.Height">
            <summary>
            Gets or sets the height of the page.
            </summary>
            <remarks>Default value: 842 pixels</remarks>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Set page size.
            doc.PageSettings.Height = 300;
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document
            Dim doc As New PdfDocument()
            'Set page size
            doc.PageSettings.Height = 300
            'Create a new page
            Dim page As PdfPage = doc.Pages.Add()
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageSettings.Margins">
            <summary>
            Gets or sets the margins of the page.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfMargins"/>, provides margins to the PDF page</value>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Create new instance for document margin.
            PdfMargins margin = new PdfMargins();
            margin.All = 20;
            //Set document margin.
            doc.PageSettings.Margins = margin
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12);
            //Draw the text.
            page.Graphics.DrawString("Hello world", font, PdfBrushes.Blue, new PointF(100, 100));
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create new instance for document margin.
            Dim margin As PdfMargins = New PdfMargins()
            margin.All = 20
            'Set document margin.
            doc.PageSettings.Margins = margin
            'Create a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12)
            'Draw the text.
            page.Graphics.DrawString("Hello world", font, PdfBrushes.Blue, New PointF(100, 100))
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageSettings.Rotate">
            <summary>
            Gets or sets the number of degrees by which the page should be rotated clockwise when displayed or printed.
            </summary>
            <value>The <see cref="T:Syncfusion.PdfExport.PdfPageRotateAngle"/>,provides number of degrees by which the page should be rotated clockwise when displayed or printed </value>
            <remarks>Default value: RotateAngle0 </remarks>
            <example>
            <code lang="CS">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Set page settings.
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape;
            //Set rotation angle.
            doc.PageSettings.Rotate = PdfPageRotateAngle.RotateAngle180;
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB.NET">
            'Create a new document
            Dim doc As New PdfDocument()
            'Set page settings
            doc.PageSettings.Orientation = PdfPageOrientation.Landscape
            'Set rotation angle
            doc.PageSettings.Rotate = PdfPageRotateAngle.RotateAngle180
            'Create a new page
            Dim page As PdfPage = doc.Pages.Add()
            doc.Save("output.pdf")
            doc.Close(True)
            </code>
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class 
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageSettings.Unit">
            <summary>
            Gets or sets the type of default user space units.
            </summary>
            <remarks>For PDF 1.6 and later versions.</remarks>
        </member>
        <member name="P:Syncfusion.PdfExport.PdfPageSettings.Origin">
            <summary>
            Gets or sets the origin of the page
            </summary>
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageSettings"/> class.
            </summary>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Create new instance for document margin.
            PdfMargins margin = new PdfMargins();
            margin.All = 20;
            //Create new instance for page settings.
            PdfPageSettings setting = new PdfPageSettings();
            //Set document margin.
            setting.Margins = margin;
            doc.PageSettings = setting;
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12);
            //Draw the text.
            page.Graphics.DrawString("Hello world", font, PdfBrushes.Blue, new PointF(100, 100));
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create new instance for document margin.
            Dim margin As PdfMargins = New PdfMargins()
            margin.All = 20
            'Create new instance for page settings.
            Dim setting As PdfPageSettings = New PdfPageSettings()
            'Set document margin.
            setting.Margins = margin
            doc.PageSettings = setting
            'Create a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12)
            'Draw the text.
            page.Graphics.DrawString("Hello world", font, PdfBrushes.Blue, New PointF(100, 100))
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageSettings.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageSettings"/> class with size.
            </summary>
            <param name="size">The size.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Create new instance for document margin.
            PdfMargins margin = new PdfMargins();
            margin.All = 20;
            //Create new instance for page settings with predefined page size.
            PdfPageSettings setting = new PdfPageSettings(new SizeF(300,300));
            //Set document margin.
            setting.Margins = margin;
            doc.PageSettings = setting;
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12);
            //Draw the text.
            page.Graphics.DrawString("Hello world", font, PdfBrushes.Blue, new PointF(100, 100));
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create new instance for document margin.
            Dim margin As PdfMargins = New PdfMargins()
            margin.All = 20
            'Create new instance for page settings with predefined page size.
            Dim setting As PdfPageSettings = New PdfPageSettings(New SizeF(300, 300))
            'Set document margin.
            setting.Margins = margin
            doc.PageSettings = setting
            'Create a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12)
            'Draw the text.
            page.Graphics.DrawString("Hello world", font, PdfBrushes.Blue, New PointF(100, 100))
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class 
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageSettings.#ctor(Syncfusion.PdfExport.PdfPageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageSettings"/> class with page orientation.
            </summary>
            <param name="pageOrientation">The <see cref="T:Syncfusion.PdfExport.PdfPageOrientation"/>.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Create new instance for document margin.
            PdfMargins margin = new PdfMargins();
            margin.All = 20;
            //Create new instance for page settings with predefined page orientation.
            PdfPageSettings setting = new PdfPageSettings(PdfPageOrientation.Landscape);
            //Set document margin.
            setting.Margins = margin;
            doc.PageSettings = setting;
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            //Create new PDF font instance.
            PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 12);
            //Draw the text.
            page.Graphics.DrawString("Hello world", font, PdfBrushes.Blue, new PointF(100, 100));
            //Save and close the document.
            doc.Save("output.pdf");
            doc.Close(true);
            </code>
            <code lang="VB">
            'Create a new document.
            Dim doc As PdfDocument = New PdfDocument()
            'Create new instance for document margin.
            Dim margin As PdfMargins = New PdfMargins()
            margin.All = 20
            'Create new instance for page settings with predefined page orientation.
            Dim setting As PdfPageSettings = New PdfPageSettings(PdfPageOrientation.Landscape)
            'Set document margin.
            setting.Margins = margin
            doc.PageSettings = setting
            'Create a new page.
            Dim page As PdfPage = doc.Pages.Add()
            'Create new PDF font instance.
            Dim font As PdfFont = New PdfStandardFont(PdfFontFamily.Courier, 12)
            'Draw the text.
            page.Graphics.DrawString("Hello world", font, PdfBrushes.Blue, New PointF(100, 100))
            'Save and close the document.
            doc.Save("output.pdf")
            doc.Close(True)
            </code> 
            </example>
            <seealso cref="T:Syncfusion.PdfExport.PdfDocument"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfPage"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfFont"/> Class
            <seealso cref="T:Syncfusion.PdfExport.PdfBrush"/> Class  
        </member>
        <member name="M:Syncfusion.PdfExport.PdfPageSettings.#ctor(System.Drawing.SizeF,Syncfusion.PdfExport.PdfPageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.PdfExport.PdfPageSettings"/> class with size and page orientation.
            </summary>
            <param name="size">The size.</param>
            <param name="pageOrientation">The page orientation.</param>
            <example>
            <code lang="C#">
            //Create a new document.
            PdfDocument doc = new PdfDocument();
            //Create new instance for document margin.
            PdfMargins margin = new PdfMargins();
            margin.All = 20;
            //Create new instance for page settings with predefined page orientation.
            PdfPageSettings setting = new PdfPageSettings(new SizeF(300, 600), PdfPageOrientation.Landscape);
            //Set document margin.
            setting.Margins = margin;
            doc.PageSettings = setting;
            //Create a new page.
            PdfPage page = doc.Pages.Add();
            //Create new