@page "/"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Web
@using System.IdentityModel.Tokens.Jwt;
@using Ticketing_Client;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Authentication
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

<!DOCTYPE html>
<html lang="en" style="background-color: #f5f6fa;">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="Ticketing_Client.styles.css" rel="stylesheet" />
    <link href="_content/Syncfusion.Blazor/styles/bootstrap5.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <link href="styles/site.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body style="
             background-color: transparent;
         ">
    @{
        var tokens = new InitialApplicationState
            {
                AccessToken = await HttpContext.GetTokenAsync("access_token"),
                RefreshToken = await HttpContext.GetTokenAsync("refresh_token"),
                XsrfToken = Xsrf.GetAndStoreTokens(HttpContext).RequestToken
            };
        //if (!string.IsNullOrEmpty(tokens.AccessToken))
        //{
        //    var jwtToken = new JwtSecurityToken(tokens.AccessToken);

        //    if (string.IsNullOrEmpty(tokens.AccessToken) || jwtToken == null || (jwtToken.ValidFrom > DateTime.UtcNow) || (jwtToken.ValidTo < DateTime.UtcNow))

        //    {
        //        //await HttpContext.SignOutAsync();
        //    }
        //    tokens = new InitialApplicationState
        //        {
        //            AccessToken = await HttpContext.GetTokenAsync("access_token"),
        //            RefreshToken = await HttpContext.GetTokenAsync("refresh_token"),
        //            XsrfToken = Xsrf.GetAndStoreTokens(HttpContext).RequestToken
        //        };
        //}

    }
    <component type="typeof(App)" render-mode="ServerPrerendered" param-InitialState="tokens" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/Syncfusion.Blazor/scripts/syncfusion-blazor.min.js" type="text/javascript"></script>
</body>
</html>

