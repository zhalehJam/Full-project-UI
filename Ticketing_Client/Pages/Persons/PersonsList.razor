@attribute [Authorize]

@page "/PersonsList"
@using Framework.Pagination;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Data;
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications

@using Ticketing.Client.Contracts.Persons;
@using Ticketing.Client.Contracts.Ticket.Queries;
@using Ticketing.Models.Centers.Dto;
@using Ticketing.Models.Centers.Repository;
@using Ticketing.Models.Persons.Command
@using Ticketing.Models.Persons.Dto
@using Ticketing.Models.Persons.Repository
@using Ticketing.Models.Programs.Dto;
@using Ticketing.Models.Programs.Repository;
@using Ticketing_UI.Shared.Classes;

@inject IPersonRepository personRepository
@inject ICenterRepository centerRepository
@inject IProgramRepository programRepository
@inject AuthenticationStateProvider authenticationStateProvider
@inject IHttpClientFactory ClientFactory


<style>
    .hulu {
        background-color: #edf8ff38;
        border: solid 2px #e7e6e6;
        border-radius: 10px;
        height: 130px;
    }

        .hulu:hover {
            background-color: white;
            border: solid 1px gray;
        }

    body {
        font-family: 'Vazir FD';
    }

    .e-card .e-card-horizontal .e-card-stacked {
        justify-content: flex-start;
        margin: initial;
    }

    .property-panel-section .property-panel-content td {
        padding: 0 0 15px 0;
    }

    .tile_layout.card-control-section .e-error {
        height: 100px;
        width: 100px;
    }

        .tile_layout.card-control-section .e-error .e-error-content {
            color: red;
            line-height: 100px;
            text-align: center;
        }

    .e-float-input, .e-float-input.e-control-wrapper {
        line-height: 1.4;
        margin-bottom: 0;
        margin-top: 1px;
        padding-top: 0;
        position: relative;
        width: 150px;
    }

    .tile_layout.card-control-section .e-card .e-card-image {
        height: 180px;
        width: inherit;
    }


    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-header-title {
        font-size: 20px;
        font-family: Helvetica, 'Segoe UI';
        font-weight: bold;
    }

    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-sub-title {
        padding-top: 5px;
    }

    .tile_layout.card-control-section .e-card .e-card-content {
        padding-top: 10px;
        height: 50px;
    }

    #source_link {
        float: right;
    }

    .e-card {
        -webkit-tap-highlight-color: #0d6efd;
        background-color: #edf8ff38;
        border: 2px solid #dee2e6;
        box-shadow: none;
        color: #212529;
        outline: none;
    }

    .e-ddl.e-lib.e-input-group.e-control-container.e-control-wrapper.e-rtl.e-keyboard {
        width: 150px !important;
    }

    span.e-ddl.e-lib.e-input-group.e-control-container.e-control-wrapper.e-rtl {
        width: 150px !important;
    }
</style>

<div class="col-lg-12 " style="padding:10px;  border: solid 2px #e7e6e6;border-radius: 10px; ">

    <div class="col-2" style="width:16%; padding:4px; height: 30px;display:inline-block">
        <label> نقش کاربر:</label>
        <div class="input-icons">
            <i class=" icon">
                @*<img src="Images\svg\Notification-status.svg" />*@
            </i>
            <select class="form-control" @oninput="SetPersonRoleChange">
                <option value="">همه</option>
                @foreach (var type in (RoleType[])Enum.GetValues(typeof(RoleType)))
                {
                    <option class="option-style" value=@type> @EnumExtensions.GetDisplayName((RoleType)type)</option>
                }
            </select>
        </div>
    </div>
    <div class="col-2" style="display:inline-block;">
        <label> کدپرسنلی:</label>
        <SfNumericTextBox Width="100%" style=" height: 36px; "
                          @onkeyup="@(async (e)=>await @OnFilter(e))"
                          @bind-Value="@getPersonInfoByFiltersQuery.PersonCode"
                          Decimals="0"
                          Format="#########"
                          FloatLabelType="FloatLabelType.Always">
        </SfNumericTextBox>
    </div>

    <div class="col-2" style="display:inline-block;">
        <label class="col-12"> نام پرسنل:</label>
        <SfTextBox Width="100%" style=" height: 36px; "
                   @onkeyup="@(async (e)=>await @OnFilter(e))"
                   @bind-Value="@getPersonInfoByFiltersQuery.PersonName"
                   FloatLabelType="FloatLabelType.Always">
        </SfTextBox>

    </div>
    <div class="col-2" style="padding:4px; width:16.5%; display:inline-block">
        <label> دفتر:</label>
        <div class="input-icons">
            <i class=" icon">

            </i>
            <select class="form-control" @oninput="SetCenterChange">
                <option value="@Guid.Empty">همه</option>
                @foreach (var type in centerDtos)
                {
                    <option class="option-style" value=@type.Id> @type.CenterName</option>
                }
            </select>
        </div>
    </div>

    <div class="col-2" style="padding:4px; width:16.5%;display:inline-block">
        <label> واحد:</label>
        <div class="input-icons">
            <i class=" icon">

            </i>
            <select class="form-control" @oninput="SetPartChange">
                <option value="@Guid.Empty">همه</option>
                @foreach (var type in partDtos)
                {
                    <option class="option-style" value=@type.Id> @type.PartName</option>
                }
            </select>
        </div>
    </div>
    <div class="col-2" style="padding:4px; width:16%; display:inline-block">
        <SfButton CssClass=".property-panel-section .property-panel-content col-5 display:inline-block!important "
                  style="padding:4px; background-color: #008b8b2e ; color: #497d7e;    border-color: rgba(0,0,0,0); width:48%;"
                  Disabled="!IsAdmin"
                  @onclick="@(async e => {NewPerson(); })">افزودن</SfButton>

        <SfButton CssClass=".property-panel-section .property-panel-content col-5 display:inline-block!important "
                  style="padding:4px; background-color: #008b8b2e ; color: #497d7e;    border-color: rgba(0,0,0,0); width:48%;"
                  @onclick="@(async e => {await GetData(); })">بروزرسانی</SfButton>
    </div>
</div>

<div class="row">
    <div class="e-card-layout control-section col-lg-12 card-control-section tile_layout" style="display:inline-block!important ; ">

        @if (this.personDtos.Count() == 0)
        {
            <div class="e-error">
                <div class="e-error-content">اطلاعاتی یافت نشد.</div>
            </div>
        }
        else
        {
            @foreach (PersonDto persondto in personDtos)
            {
                string stl = "";
                <div class="card_sample_3 col-lg-2 col-md-2 col-sm-5 "
                     style=" padding: 4px; display:inline-block!important  ;width: 268px;height:138px;"
                     title="@persondto.PersonRole.ToString()">
                    @if (persondto.PersonRole == RoleType.Supporter)
                    {
                        stl = "background-color:#7c00ed14";

                    }@if (persondto.PersonRole == RoleType.Admin)
                    {
                        stl = "background-color:#edfffe";

                    }
                    <div class="p-2 hulu" style="@stl;">
                        <div @ondblclick="(()=>EditButtonClick(persondto))">
                            @{
                                string contentText = persondto.PartName + " " + persondto.CenterName;
                                contentText = contentText.Length > 25 ? contentText.Substring(0, 25) + "..." : contentText;
                                persondto.PersonName = persondto.PersonName.Length > 20 ? persondto.PersonName.Substring(0, 20) + "..." : persondto.PersonName;
                            }
                            <div class="col-sm-10 col-md-10 col-lg-10" style="display:inline-block!important ;">
                                <h6 style="padding-top:8px;font-weight:bold">
                                    @persondto.PersonName
                                </h6>
                                <span style="padding-top:8px;">
                                    @persondto.PersonID.ToString()
                                </span>
                                <p style="padding-top:8px; font-size:14px">
                                    @contentText
                                </p>
                            </div>
                            <div class=" row col-md-2 col-lg-2 col-sm-2" style="display:inline-block!important;">
                                <SfButton CssClass="e-btn e-outline e-primary e-icons e-redaction"
                                          style="border-color:  rgb(0 0 0 / 0%); color: black; "
                                  @onclick="@(async e => {await EditButtonClick(persondto);  })"
                                          title="ویرایش"></SfButton>

                                <SfButton CssClass="e-btn e-outline e-primary  e-icons e-circle-remove"
                                          style="border-color: rgb(0 0 0 / 0%); color: red;"
                                  @onclick="(  e=>{  ClickDeleteButton(persondto);})"
                                          title="حذف"></SfButton>

                                <SfButton CssClass="e-btn e-outline e-primary  e-icons e-list-unordered"
                                          style="border-color:  rgb(0 0 0 / 0%);  "
                                  @onclick="(async e=>{await GetSupporterProgramsList(persondto);})" title="برنامه ها"></SfButton>

                            </div>
                        </div>
                    </div>
                </div>

            }

            <SfDialog @bind-Visible="dialogVisible" Width="350px" IsModal="true">
                <DialogTemplates>
                    <Header>
                        اطلاعات پرسنل
                    </Header>
                    <Content>
                        <div>
                            <img class="thumbnail" src="@image" style="width:70px; " alt="Employee photo" />
                        </div>
                        <div>
                            <SfTextBox @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                   @bind-Value="@selectedPerson.PersonName"
                                   Placeholder="نام"
                                   FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                            <SfNumericTextBox Enabled="isNew"
                                          @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                          @bind-Value="@selectedPerson.PersonID"
                                          Placeholder="کد پرسنلی"
                                          FloatLabelType="FloatLabelType.Always"
                                          Format="#########"
                                          Decimals="0"></SfNumericTextBox>

                            <SfDropDownList @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                        Enabled="true" TValue="Guid"
                                        TItem="CenterDto"
                                        @bind-Value="@selectedCenterDto.Id"
                                        FloatLabelType="FloatLabelType.Auto"
                                        Placeholder="نام دفتر"
                                        PopupHeight="230px"
                                        DataSource="@centerDtos">
                                <DropDownListEvents TItem="CenterDto"
                                                TValue="Guid"
                                                ValueChange="ChangeCenter">
                                </DropDownListEvents>
                                <DropDownListFieldSettings Text="CenterName"
                                                       Value="Id">
                                </DropDownListFieldSettings>
                            </SfDropDownList>

                            <SfDropDownList @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                        Enabled="true" TValue="Guid"
                                        TItem="PartDto"
                                        @bind-Value="@selectedPartdto.Id"
                                        FloatLabelType="FloatLabelType.Auto"
                                        Placeholder="نام واحد"
                                        PopupHeight="230px"
                                        DataSource="@partDtos">
                                <DropDownListFieldSettings Text="PartName"
                                                       Value="Id">
                                </DropDownListFieldSettings>
                            </SfDropDownList>

                            <SfDropDownList @onkeypress="@((e)=>Setkeyboardkeyevent(e))"
                                        Enabled="true"
                                        TValue="RoleType"
                                        TItem="KeyValuePair<RoleType,string>"
                                        @bind-Value="@selectedPerson.PersonRole"
                                        FloatLabelType="FloatLabelType.Auto"
                                        Placeholder="نقش کاربر"
                                        PopupHeight="230px"
                                        DataSource="@roleTypes">
                                <DropDownListFieldSettings Text="Value"
                                                       Value="Key">

                                </DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </Content>
                </DialogTemplates>
                <DialogAnimationSettings Effect="animationEffect"></DialogAnimationSettings>
                <DialogEvents Opened="OnOpen" Closed="OnClose"></DialogEvents>

                <DialogButtons>
                    <DialogButton Content="OK"
                              IsPrimary="true"
                              OnClick="@(async e=> await SaveButtonClick(selectedPerson))"></DialogButton>
                    <DialogButton Content="Cancel" IsPrimary="true" OnClick="OnClose"></DialogButton>
                </DialogButtons>
            </SfDialog>

            <SfDialog @bind-Visible="programListDialogVisiable" Width="50%" ShowCloseIcon="true" IsModal="true">
                <DialogTemplates>
                    <Header>
                        اطلاعات
                    </Header>
                    <Content>
                        <div class="content-wrapper">
                            <div class="row">
                                <SfGrid DataSource="@programDtos"
                                    AllowPaging="true"
                                    AllowSorting="true"
                                        style="width:auto;padding-right: 1px;padding-left: 1px;">
                                    <GridPageSettings @ref="GridPage" PageSize="10"></GridPageSettings>
                                    <GridEvents TValue="ProgramDto"></GridEvents>
                                    <GridEditSettings AllowAdding="true"
                                                  AllowDeleting="true"
                                                  AllowEditing="true"
                                                  Mode="@EditMode.Dialog"
                                                  Dialog="DialogParams"
                                                  ShowConfirmDialog="true">
                                        <HeaderTemplate>
                                            <span>اطلاعات</span>
                                        </HeaderTemplate>
                                    </GridEditSettings>

                                    <GridColumns>
                                        <GridColumn Field=@nameof(ProgramDto.Id) Visible=false></GridColumn>
                                        <GridColumn Field=@nameof(ProgramDto.ProgamName) HeaderText="برنامه"></GridColumn>
                                        <GridColumn Field=@nameof(ProgramDto.ProgramLink) HeaderText="لینک"></GridColumn>
                                        <GridColumn HeaderText="تعداد پشتیبان">
                                            <Template>
                                                @{
                                                    var programddd = (context as ProgramDto) ?? new ProgramDto();
                                                    string supportercount = programddd.Supporters.Count.ToString();
                                                }
                                                <div Enabled="false">@supportercount</div>
                                            </Template>
                                        </GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                        </div>

                        @if (true)
                        { }
                    </Content>
                </DialogTemplates>
                <DialogAnimationSettings Effect="animationEffect"></DialogAnimationSettings>
            </SfDialog>

            <SfDialog @bind-Visible="warningMessageVisiable" Width="20%">
                <DialogTemplates>
                    <Header>
                        حذف
                    </Header>
                    <Content>
                        <div class="content-wrapper">
                            <div style="text-align:center">
                                از حذف این اطلاعات مطمئن هستید؟
                            </div>
                        </div>
                    </Content>
                </DialogTemplates>
                <DialogButtons>
                    <DialogButton Content="OK"
                              IsPrimary="true"
                              OnClick="@(async e=> await DeletePerson(selectedPerson))"></DialogButton>
                    <DialogButton Content="Cancel"
                              IsPrimary="true"
                              OnClick="OnClose"></DialogButton>
                </DialogButtons>
            </SfDialog>
        }

    </div>
</div>

<Syncfusion.Blazor.Navigations.SfPager @ref="Page"
                                       CssClass="card footer"
                                       PageSize="@metaData.PageSize"
                                       CurrentPage="@getPersonInfoByFiltersQuery.PageNumber"
                                       NumericItemsCount=4
                                       TotalItemsCount="@metaData.TotalCount"
                                       PageChanged="GetData">
</Syncfusion.Blazor.Navigations.SfPager>


<div class="col-lg-4 control-section">
    <SfToast @ref="ToastObj" ID="toast_type">
        <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    </SfToast>

</div>

<style>
    .e-pager.e-rtl {
        direction: rtl;
        position: fixed;
        bottom: 4px !important;
        width: 83.5% !important;
    }
</style>

@if (true)
{ }
@code {
    private List<PersonDto> personDtos = new List<PersonDto>();
    private PersonDto personDto = new PersonDto();
    private List<CenterDto> centerDtos = new List<CenterDto>();
    private List<PartDto> partDtos = new List<PartDto>();
    private List<ProgramDto> programDtos = new List<ProgramDto>();
    private CenterDto selectedCenterDto = new CenterDto();
    private PartDto selectedPartdto = new PartDto();
    private PersonDto selectedPerson = new PersonDto();
    private PersonDto filterPersonInfo = new PersonDto();
    private bool warningMessageVisiable = false;
    private GridPageSettings GridPage { get; set; }
    private string image = "data:image/jpeg;base64,";
    bool dialogVisible { get; set; } = false;
    bool programListDialogVisiable { get; set; } = false;
    private bool isNew = true;
    private bool flag = false;
    public SfPager Page { get; set; } = new SfPager();

    public int totalPages { get; set; }
    public int previouspageNo { get; set; }
    public bool DisableBackIcon = false;
    public bool DisableForwardIcon = false;
    public bool DisableFirstIcon = false;
    public bool DisableLastIcon = false;
    public bool IsAdmin = true;
    private RoleType selectedRole { get; set; }
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "750px", Width = "750px" };
    GetPersonInfoByFiltersQuery getPersonInfoByFiltersQuery = new GetPersonInfoByFiltersQuery();

    DialogEffect animationEffect = DialogEffect.None;
    SfToast ToastObj;

    private List<KeyValuePair<RoleType, string>> roleTypes { get; set; } = Enum.GetValues(typeof(RoleType))
                                                                               .Cast<RoleType>()
                                                                               .ToList()
                                                                               .Select(s => new { Key = s, Value = s.ToString() })
                                                                               .ToDictionary(d => d.Key, d => d.Value).ToList();



    protected override async Task OnInitializedAsync()
    {
        centerDtos = await centerRepository.GetAllCenters();
        //await GetAllPersons();

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userInfo = await personRepository.GetPersonInfoByPersonelCode(Convert.ToInt32(user.Identity?.Name));
        if (userInfo.PersonRole == RoleType.Admin)
            IsAdmin = true;
        else IsAdmin = false;
        await GetData();

    }
    public int SkipValue;

    private async Task Click(PagerItemClickEventArgs args)
    {
        //await GetData();
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        getPersonInfoByFiltersQuery.PageNumber = args.CurrentPage;
    }

    private void OnOpen()
    {
        dialogVisible = true;
    }

    private void OnClose()
    {
        dialogVisible = false;
        warningMessageVisiable = false;
    }


    private async Task OnFilter(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await GetData();
        }
    }

    public MetaData metaData { get; set; } = new MetaData();


    private async Task GetData()
    {
        try
        {
            getPersonInfoByFiltersQuery.PageSize = 30;
            getPersonInfoByFiltersQuery.PageNumber = Page == null ? 1 : Page.CurrentPage;
            var response = await personRepository.GetPersonInfoByFilters(getPersonInfoByFiltersQuery);
            personDtos = response.Items.OrderBy(e => e.PersonID).ToList();
            metaData = response.MetaData;
        }
        catch (Exception ex)
        {
            //loadingStatus = LoadingStatus.Failed;
        }
    }

    public void ChangeCenter(Syncfusion.Blazor.DropDowns.ChangeEventArgs<Guid, CenterDto> args)
    {
        partDtos = args.ItemData.parts;
    }



    private async Task SetPersonRoleChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        getPersonInfoByFiltersQuery.userRole = args.Value.ToString();

        await GetData();
    }
    private async Task SetCenterChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        getPersonInfoByFiltersQuery.CenterId = new Guid(args.Value.ToString());
        partDtos.Clear();
        //        partDtos.Add(new PartDto() { Center = Guid.Empty, Id = Guid.Empty, PartID = 0, PartName = "همه" });
        if (getPersonInfoByFiltersQuery.CenterId != Guid.Empty)
        {
            partDtos = centerDtos.Single(c => c.Id.Equals(getPersonInfoByFiltersQuery.CenterId)).parts;
        }
        await GetData();
    }
    private async Task SetPartChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        getPersonInfoByFiltersQuery.PartId = new Guid(args.Value.ToString());
        await GetData();
    }

    private void Setkeyboardkeyevent(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            flag = true;
    }

    private void NewPerson()
    {
        selectedPerson = new PersonDto() { PersonRole = RoleType.User };
        this.dialogVisible = true;
        selectedPartdto = new PartDto();
        selectedCenterDto = new CenterDto();
        isNew = true;

    }

    private async Task EditButtonClick(PersonDto personDto)
    {
        centerDtos = await centerRepository.GetAllCenters();
        selectedPerson = personDto;
        partDtos = centerDtos.Single(c => c.parts.Any(p => p.Id == selectedPerson.PartId)).parts;
        selectedPartdto = partDtos.Single(p => p.Id == selectedPerson.PartId);
        selectedCenterDto = centerDtos.Single(c => c.Id == selectedPartdto.Center);
        await GetUserPhoto(personDto.PersonID);
        this.dialogVisible = true;
        isNew = false;
    }

    private async Task SaveButtonClick(PersonDto personDto)
    {
        if (!flag)
        {
            try
            {
                if (isNew)
                {
                    CreatePersonCommand createPersonCommand = new CreatePersonCommand()
                        {
                            Name = personDto.PersonName,
                            PartId = selectedPartdto.Id,
                            PersonID = personDto.PersonID,
                            PersonRoleType = personDto.PersonRole
                        };
                    await personRepository.CreatePerson(createPersonCommand);
                }
                else
                {
                    UpdatePersonCommand updatePersonCommand = new UpdatePersonCommand()
                        {
                            Id = personDto.Id,
                            PartId = selectedPartdto.Id,
                            Name = personDto.PersonName,
                            personRole = personDto.PersonRole
                        };
                    await personRepository.UpdatePerson(updatePersonCommand);
                }
                var t = new ToastModel { Title = "Success!", Content = "اطلاعات پرسنل مورد نظر ثبت شد", CssClass = "e-toast-success", Icon = "e-success toast-icons" };
                await this.ToastObj.ShowAsync(t);

            }
            catch (Exception ex)
            {
                var t = new ToastModel { Title = "خطا!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
                await this.ToastObj.ShowAsync(t);
                dialogVisible = false;
            }
            finally
            {
                OnClose();
                selectedPartdto = new PartDto();
                // await GetAllPersons();
                //await GetData();
                StateHasChanged();
            }
        }
        else
        {
            flag = false;
        }
    }

    private void ClickDeleteButton(PersonDto personDto)
    {
        warningMessageVisiable = true;
        selectedPerson = personDto;
    }

    private async Task DeletePerson(PersonDto personDto)
    {
        try
        {
            DeletePersonCommand deletePersonCommand = new DeletePersonCommand()
                {
                    Id = personDto.Id
                };
            await personRepository.DeletePerson(deletePersonCommand);
            var t = new ToastModel { Title = "Success!", Content = "پرسنل مورد نظر با موفقیت حذف شد", CssClass = "e-toast-success", Icon = "e-success toast-icons" };
            await this.ToastObj.ShowAsync(t);
            //await GetAllPersons();
            await GetData();
            //StateHasChanged();
            warningMessageVisiable = false;

        }
        catch (Exception ex)
        {
            var t = new ToastModel { Title = "خطا!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
            await this.ToastObj.ShowAsync(t);
            warningMessageVisiable = false;
        }

    }

    private async Task GetSupporterProgramsList(PersonDto personId)
    {
        programDtos = await programRepository.GetSupporterProgramsList(personId.PersonID);
        programListDialogVisiable = true;
    }

    private async Task GetUserPhoto(int personnelCode)
    {
        try
        {
            string personPhoto = await personRepository.GetUserPhoto(personnelCode);
            image = "";
            if (!String.IsNullOrWhiteSpace(personPhoto))
                image = "data:image/jpeg;base64," + personPhoto;
        }
        catch (Exception ex)
        {

        }

    }
}
