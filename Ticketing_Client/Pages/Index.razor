@attribute [Authorize]
@page "/"
@using Framework.Pagination;
@using Microsoft.AspNetCore.Authorization;
@using Syncfusion.Blazor.Cards;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Layouts;
@using Syncfusion.Blazor.LinearGauge;
@using Syncfusion.Blazor.DropDowns;
@using Ticketing.Client.Contracts.Ticket;
@using Ticketing.Models.Tickets.Dto;
@using Ticketing.Models.Tickets.Query;
@using Ticketing.Models.Tickets.Repository;
@using Ticketing_UI.Shared.Classes
@using Orientation = Syncfusion.Blazor.LinearGauge.Orientation
@using Placement = Syncfusion.Blazor.LinearGauge.Placement
@using Position = Syncfusion.Blazor.LinearGauge.Position

@inject AuthenticationStateProvider authenticationStateProvider
@inject ITicketRepository ticketRepository
<style>
    .ChartPanelClass {
        border-radius: 26px;
        min-height: 468px !important;
        max-height: 530px !important;
    }

    .e-input-group:not(.e-success):not(.e-warning):not(.e-error), .e-input-group.e-control-wrapper:not(.e-success):not(.e-warning):not(.e-error) {
        border-color: #e1e1e1;
        direction: ltr;
        padding: 2px;
    }

    .e-input-group.e-rtl input ~ .e-input-group-icon, .e-input-group.e-control-wrapper.e-rtl input ~ .e-input-group-icon, .e-rtl .e-input-group input ~ .e-input-group-icon, .e-rtl .e-input-group.e-control-wrapper input ~ .e-input-group-icon {
        border-left-width: 1px;
        border-right: 0px solid #ced4da;
        border: 1px solid #ced4da;
    }



    .form-label {
        margin-bottom: 0;
        font-size: 12px;
        line-height: 1.5;
        font-size: 13px;
        font-weight: 500;
    }

    .bootstrap5 .e-panel .e-header-text,
    .bootstrap5-dark .e-panel .e-header-text {
        padding: 0;
    }


    .panel-content {
        vertical-align: middle;
        font-size: 15px;
        font-size: 15px;
        font-weight: 500;
        color: rgba(0, 0, 0, 0.61);
        text-align: center;
    }

    body.tailwind-dark .e-dashboardlayout.e-control .e-panel {
        border: 1px solid #d7d7d7;
        border-radius: 0px;
    }

    .e-panel-header {
        padding: 5px;
        margin-bottom: 0;
        background-color: rgba(0, 0, 0, .03);
    }

    .e-panel-content {
        /*height: auto;*/
        width: 100%;
        display: block;
        direction: ltr;
        padding-right: 4px;
        padding-left: 4px;
        padding-bottom: 0px;
        padding-top: 0px;
        background-color: #f0f4f900;
        border-bottom-left-radius: 23px;
        border-bottom-right-radius: 23px;
        overflow-x: hidden;
    }

    .e-panel .e-header-text {
        padding: 6px 0 13px 0;
    }




    .e-control.e-lib.e-dashboardlayout.e-responsive {
        z-index: 0;
    }

    .mobile .e-control.e-lib.e-dashboardlayout.e-responsive {
        z-index: 0;
        overflow: scroll;
    }



    body.tailwind-dark .e-dashboardlayout.e-control .e-panel {
        border: transparent !important;
    }

    .e-dashboardlayout {
        padding: 10px;
    }

        .e-dashboardlayout.e-control .e-panel {
            background: #652b9d00;
            box-sizing: border-box;
            position: absolute;
            border: transparent !important;
            box-shadow: 0 2px 4px rgb(0 0 0 / 0%);
        }

            .e-dashboardlayout.e-control .e-panel .e-panel-container .e-grid.sf-grid .e-gridcontent .e-content.e-yscroll {
                overflow: auto;
            }

            .e-dashboardlayout.e-control .e-panel.e-panel-transition {
                transition: top .5s,left .5s;
                /*height: fit-content !important;*/
                position: absolute;
            }

            .e-dashboardlayout.e-control .e-panel .e-panel-header {
                font-size: 16px;
                font-weight: 500;
                height: 60px;
                padding-right: 11px;
                padding-bottom: 0px;
                vertical-align: top;
                border-bottom: 0.5px solid #e3e3e3;
            }

            .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {
                line-height: 10px !important;
                height: 40px;
                color: #212529;
                background: transparent;
                border-color: transparent;
                border-radius: 12px;
            }

            .e-dashboardlayout.e-control .e-panel .e-panel-container {
                /*height: auto !important; */
                width: 100%;
                background-color: #ffffff;
                border-radius: 12px;
                min-height: 124px;
            }

            .e-dashboardlayout.e-control .e-panel.e-panel-transition {
                border-radius: 12px;
                min-width: 200px;
                min-height: 124px;
                max-height: max-content;
                /*height: auto !important; */
            }

            .e-dashboardlayout.e-control .e-panel:hover {
                border: transparent !important;
                box-shadow: transparent !important;
            }

    .row {
        margin-left: 0px;
        margin-right: 0px;
    }

    .row-header {
        font-size: 15px;
        font-weight: 500;
    }


    .e-primary, .e-danger {
        width: 125px;
    }

    .mobile .e-primary, .mobile .e-danger {
        width: 150px;
    }

    .tailwind-dark .e-primary, .tailwind-dark .e-danger,
    .highcontrast .e-primary, .highcontrast .e-danger {
        width: 170px;
    }



    .root-container {
        height: 100%;
    }


    .title {
        font-size: 15px;
        font-weight: bold;
        color: #737373;
    }

    .category-text {
        float: left;
        line-height: 30px;
    }


    .item-container {
        display: flex;
        text-align: center;
        height: 70%;
        padding: 2rem;
        font-size: 22px;
        font-weight: 400;
    }

    .bottom-container {
        text-align: center;
        font-weight: 400;
        font-size: 16px;
    }

    .mobile .bottom-container {
        font-size: 30px;
    }

    .material .bottom-container,
    .fabric .bottom-container,
    .bootstrap .bottom-container,
    .bootstrap4 .bottom-container,
    .tailwind .bottom-container,
    .bootstrap5 .bottom-container {
        color: #4c5258;
    }

    .auto-left {
        margin-left: auto;
    }

    font-face {
        font-family: 'e-sb-icons';
        font-weight: normal;
        font-style: normal;
    }



    .e-headercelldiv span.e-headertext {
        font-size: 14px;
        font-weight: 500;
    }

    .e-grid .e-rowcell {
        font-size: 13px;
    }


    .mobile .item-container {
        padding: 40px;
        font-size: 40px;
    }



    .e-gridheader {
        padding-right: 0px !important;
    }

    .e-card {
        -webkit-tap-highlight-color: #0d6efd;
        background-color: transparent;
        border-bottom: transparent; /*1px solid #3f65ef;*/
        border-top: transparent;
        border-right: transparent;
        border-left: transparent;
        box-shadow: none;
        color: #212529;
        outline: none;
        display: inline-block;
        /*width: auto;*/
        margin: 4px;
        text-align: center;
    }

        .e-card .e-card-header {
            box-sizing: border-box;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-direction: row;
            /*flex-direction: row-reverse;*/
            -ms-flex-pack: center;
            justify-content: center;
            line-height: normal;
            min-height: 22.5px;
            padding: 2px;
            width: inherit; 
        }



            .e-card .e-card-header .e-card-header-image {
                background-repeat: no-repeat;
                background-size: cover;
                height: 32px;
                width: 32px;
                margin: 12px;
            }

            .e-card .e-card-header .e-card-header-caption {
                -ms-flex-item-align: center;
                align-self: center;
                display: -ms-flexbox;
                display: flex;
                -ms-flex: 1;
                flex: 1;
                -ms-flex-direction: column;
                flex-direction: row;
                overflow: hidden;
                padding: 0 0 0 12px;
                /*max-width: fit-content;*/
            }

                .e-card .e-card-header .e-card-header-caption .e-card-header-title {
                    font-family: Helvetica-Bold;
                    color: gray;
                    font-weight: bold;
                    font-size: 12px;
                }

                .e-card .e-card-header .e-card-header-caption .e-card-sub-title {
                    padding-top: 0px;
                    font-family: Helvetica;
                    color: black;
                    font-size: 16px;
                    position: absolute;
                    left: 0;
                }

        .e-card .e-card-content {
            color: #838383;
        }

        .e-card .e-card-content {
            font-size: 12px;
            line-height: 1.5;
            padding-right: 8px;
            padding-bottom: 2px;
            padding-left: 1px;
            padding-top: 0px;
        }
    /* width */
    ::-webkit-scrollbar {
        width: 10px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
        background: #f1f1f1; 
    }
 
    /* Handle */
    ::-webkit-scrollbar-thumb {
        background: #dfdada;
    }

    /* Handle on hover */
    ::-webkit-scrollbar-thumb:hover {
            background: #dfdada;
        }
</style>

<div class="col-lg-12 control-section content-wrapper" style="width: 1610px;">
    <div class="row  col-lg-12">
        <SfDashboardLayout @ref="dashboardObject"
                           Columns="12"
                           AllowFloating="false"
                           AllowDragging="false"
                           CellSpacing="@(new double[]{20 ,20 })">

            <DashboardLayoutPanels>
                <DashboardLayoutPanel CssClass="ChartPanelClass" Id="AddedTickets" Row="1" Column="4" SizeX="8" SizeY="4">
                    <HeaderTemplate>
                        <div class="e-header-text">تیکت های ثبت شده</div>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <div dir="ltr" class="col-lg-2 control-section sb-property-border" style="margin-left: 48px;">
                            <div class="control-wrapper">
                                <label class="example-label">بازه زمانی</label>
                                <SfComboBox ShowClearButton="false" TValue="string" TItem="string" PopupHeight="230px" @bind-Value="@comboBoxValue" DataSource="@comboBoxDataSource">
                                    <ComboBoxEvents TValue="string" TItem="string" ValueChange="OnChange" />
                                    <ComboBoxFieldSettings Text="Text" Value="ID" />
                                </SfComboBox>
                            </div>
                        </div>
                        <div dir="rtl">
                            <SfChart @ref="sfChart" Height="90%" Width="98%" Background="transparent">
                                <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"
                                                   Interval="1"
                                                   IntervalType="IntervalType.Days"
                                                   EdgeLabelPlacement="EdgeLabelPlacement.Shift"
                                                   LabelRotation=-45>
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    <ChartAxisLabelStyle TextAlignment="Alignment.Near"></ChartAxisLabelStyle>
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis Title="تعداد" Interval="5">
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                </ChartPrimaryYAxis>
                                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                <ChartSeriesCollection>

                                    <ChartSeries DataSource="@finishedTickets"
                                                 Name="تیکتهای تمام شده"
                                                 XName="Item1"
                                                 Width="2"
                                                 Opacity="1"
                                                 YName="Item2"
                                                 Type="ChartSeriesType.Column"
                                                 ColumnWidth="0.2"
                                                 Fill="#3ad496">
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartSeriesCollection>
                                    <ChartSeries DataSource="@ongoingTickets"
                                                 Name="تیکتهای  در حال انجام"
                                                 XName="Item1"
                                                 Width="1"
                                                 Opacity="1"
                                                 YName="Item2"
                                                 ColumnWidth="0.2"
                                                 Type="ChartSeriesType.Column"
                                                 Fill="#3358E0">
                                    </ChartSeries>

                                </ChartSeriesCollection>
                            </SfChart>
                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>

                <DashboardLayoutPanel Id="TicketsOfPrograms" Row="0" Column="0" SizeX="4" SizeY="3">
                    <HeaderTemplate>
                        <div class="e-header-text">آمار تیکت برنامه ها</div>
                    </HeaderTemplate>
                    <ContentTemplate>
                        @{
                            foreach (var programTicket in programsTickets.GroupBy(t => t.ProgramName).Select(e => new { ProgramName = e.Key, ProgramTicketsCounts = e.Sum(r => r.ProgramTicketsCount) }))
                            {
                                <SfLinearGauge Orientation="Orientation.Horizontal" Background="transparent" Height="60px" Width="400px">
                                    <LinearGaugeContainer Width="6" RoundedCornerRadius="4" BackgroundColor="#eff2f7" Type="ContainerType.RoundedRectangle">
                                        <LinearGaugeContainerBorder Width="0" />
                                        <LinearGaugeAxes>
                                            <LinearGaugeAxis OpposedPosition="true" Minimum="0" Maximum="100">
                                                <LinearGaugeLine Width="0" />
                                                <LinearGaugeMajorTicks Interval="6" Height="0" />
                                                <LinearGaugeMinorTicks Interval="1" Height="0" />
                                                <LinearGaugeAxisLabelStyle>
                                                    <LinearGaugeAxisLabelFont Size="0"></LinearGaugeAxisLabelFont>
                                                </LinearGaugeAxisLabelStyle>
                                                <LinearGaugePointers>
                                                    <LinearGaugePointer PointerValue="@(100 * programTicket.ProgramTicketsCounts/allTicketscount)" Height="6" Width="10" Type="Point.Bar" Color="#1c1b20" />
                                                </LinearGaugePointers>
                                                <LinearGaugeAnnotations>
                                                    <LinearGaugeAnnotation AxisIndex="0" AxisValue="0" X="300" Y="-0" ZIndex="1">
                                                        <ContentTemplate>
                                                            <div style="width: 10px;">
                                                                <p align="center" style="font-size: 10px; margin-top: -16px; color: black; font-weight: 600;">@((100 * programTicket.ProgramTicketsCounts / allTicketscount) + "%")</p>
                                                            </div>
                                                        </ContentTemplate>
                                                    </LinearGaugeAnnotation>
                                                    <LinearGaugeAnnotation AxisIndex="0" AxisValue="0" X="0" Y="-30" ZIndex="1">
                                                        <ContentTemplate>
                                                            <div style="width: 14px; font-size: 12px;">
                                                                @programTicket.ProgramName
                                                            </div>
                                                        </ContentTemplate>
                                                    </LinearGaugeAnnotation>
                                                </LinearGaugeAnnotations>
                                            </LinearGaugeAxis>
                                        </LinearGaugeAxes>
                                    </LinearGaugeContainer>
                                </SfLinearGauge>
                            }
                        }
                    </ContentTemplate>
                </DashboardLayoutPanel>

                <DashboardLayoutPanel Id="TicketsOfCenters" Row="3" Column="0" SizeX="4" SizeY="3">
                    <HeaderTemplate>
                        <div class="e-header-text">آمار تیکت دفاتر</div>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <SfChart @ref="sfChart" Height="100%" Width="100%" Background="transparent">
                            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                               Interval="1"
                                               EdgeLabelPlacement="EdgeLabelPlacement.Shift"
                                               LabelRotation=-45>
                                <ChartAxisLabelStyle>
                                </ChartAxisLabelStyle>
                                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                <ChartAxisLabelStyle TextAlignment="Alignment.Near"></ChartAxisLabelStyle>
                            </ChartPrimaryXAxis>

                            <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double"
                                               Minimum="0"
                                               Interval="10">
                                <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
                                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                <ChartAxisLineStyle Width="0.5"></ChartAxisLineStyle>
                            </ChartPrimaryYAxis>
                            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                            <ChartSeriesCollection>

                                <ChartSeries DataSource="@centersTickets"
                                             Name="دفاتر"
                                             XName="Item1"
                                             Width="2"
                                             Opacity="1"
                                             YName="Item2"
                                             Type="ChartSeriesType.Column"
                                             ColumnWidth="0.2"
                                             Fill="#f78434">
                                </ChartSeries>
                            </ChartSeriesCollection>

                        </SfChart>

                    </ContentTemplate>
                </DashboardLayoutPanel>

                @{
                    int i = 0;
                    int j = 4;
                    foreach (var programName in programsTickets.Select(w => w.ProgramName).Distinct())
                    {
                        <DashboardLayoutPanel Row="@(i % 2)" Column="@j" SizeX="2" SizeY="1">
                            <HeaderTemplate>
                                <div class="e-header-text"> @(programsTickets.FirstOrDefault(t => t.ProgramName == programName).ProgramName)</div>
                            </HeaderTemplate>
                            <ContentTemplate>
                                <div class="col-lg-12 col-md-12 col-sm-12" style="padding: 0px;">
                                    <SfCard>
                                        <CardContent>
                                            <table style="line-height: 2.75em; width: 100%; text-align: start;">
                                                <tr>
                                                    <td>
                                                        <div class="card-text-value"><b>تیکهای در حال اجرا</b></div>
                                                    </td>
                                                    <td>
                                                        <div class="card-text-value" style="font-size: 16px; font-weight: 500; color: black;">
                                                             @(programsTickets.Where(t => t.ProgramName == programName && t.TicketConditionTypeName == TicketCondition.OnGoing.ToString() ).FirstOrDefault().ProgramTicketsCount)
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>
                                                        <div class="card-text-value"><b>تیکت های پایان یافته</b></div>
                                                    </td>
                                                    <td>
                                                        <div class="card-text-value" style="font-size: 16px; font-weight: 500;color: black;">
                                                             @(programsTickets.Where(t => t.ProgramName == programName && t.TicketConditionTypeName == TicketCondition.Finish.ToString()).FirstOrDefault().ProgramTicketsCount)
                                                        </div>
                                                    </td>
                                                </tr>
                                            </table>

                                        </CardContent>
                                    </SfCard>
                                </div>
                            </ContentTemplate>
                        </DashboardLayoutPanel>
                        i++;
                        j = 4 + 2 * (i / 2);
                        if (i > 5)
                            break;
                    }
                }


                <DashboardLayoutPanel Id="UserTicketsInfo" Row="0" Column="10" SizeX="2" SizeY="2">
                    <HeaderTemplate>
                        <div class="e-header-text">تیکت های کاربر</div>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <div class="col-lg-12 col-md-12 col-sm-12" style="padding: 0px;">
                            <SfCard style="margin-top: 1px; padding-bottom: 1px;">
                                <CardHeader Title="@("در حال انجام")"
                                            SubTitle="@(ticketDtos.Where(t => t.SupporterPersonID == userName).Count(t => t.TicketConditionid == (int)TicketCondition.OnGoing).ToString())"
                                            ImageUrl="@("../images/icons/supporter-ongoing-tickets-icon.png")" />
                            </SfCard>

                            <SfCard style="margin-top: 1px; padding-bottom: 1px;">
                                <CardHeader Title="@("تمام شده")"
                                            SubTitle="@(ticketDtos.Where(t => t.SupporterPersonID == userName).Count(t => t.TicketConditionid == (int)TicketCondition.Finish).ToString())"
                                            ImageUrl="@("../images/icons/supporter-finished-tickets-icon.png")" />
                            </SfCard>
                            <SfCard style="margin-top: 1px; padding-bottom: 1px;">
                                <CardHeader Title="@("کل تیکت های ثبت شده")"
                                            SubTitle="@(ticketDtos.Where(t => t.SupporterPersonID == userName).Count().ToString())"
                                            ImageUrl="@("../images/icons/supporter-finished-tickets-icon.png")" />
                            </SfCard>
                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>
            </DashboardLayoutPanels>
        </SfDashboardLayout>
    </div>
</div>

@code {
    SfDashboardLayout dashboardObject;
    private SfChart sfChart { get; set; } = new SfChart();

    List<TicketDto> ticketDtos = new List<TicketDto>();
    List<Tuple<DateTime, int>> allTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now.Date, 0) };
    List<Tuple<DateTime, int>> finishedTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now, 0) };
    List<Tuple<DateTime, int>> ongoingTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now, 0) };
    List<(string ProgramName, string TicketConditionTypeName, int ProgramTicketsCount)> programsTickets = new System.Collections.Generic.List<(string ProgramName, string TicketConditionTypeName, int ProgramTicketsCount)>();
    List<Tuple<string, int>> centersTickets = new System.Collections.Generic.List<Tuple<string, int>>() { new Tuple<string, int>("", 0) };
    private string Content { get; set; } = "";
    public TicketQueryParameters parameters { get; set; } = new TicketQueryParameters();
    public MetaData metaData { get; set; } = new MetaData();
    public DateTime FromDate { get; set; } = DateTime.Now.AddMonths(-1).Date;
    public DateTime ToDate { get; set; } = DateTime.Now.Date.AddDays(1);
    private string[] palettes = new string[] { "#61EFCD", "#CDDE1F", "#FEC200", "#CA765A", "#2485FA", "#F57D7D", "#C152D2",
                                               "#8854D9", "#3D4EB8", "#00BCD7","#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e", "#997300" };

    int allTicketscount = 1;
    private int userName = 0;

    private async Task ChangeDiv(EventArgs args)
    {

    }

    string comboBoxValue = "ماه";

    List<string> comboBoxDataSource = new List<string>() { "هفته", "ماه", "سال" };

    public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args)
    {
        this.comboBoxValue = args.ItemData?.ToString();
        if (comboBoxValue == "هفته")
        {
            ongoingTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.OnGoing)
                                       .GroupBy(t => t.TicketTime.Date)
                                       .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count())).Where(t => t.Item1.Date >= DateTime.Now.AddDays(-7)).ToList();
            finishedTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.Finish)
                                        .GroupBy(t => t.TicketTime.Date)
                                        .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count())).Where(t => t.Item1.Date >= DateTime.Now.AddDays(-7)).ToList();
        }
        else if (comboBoxValue == "ماه")
        {
            ongoingTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.OnGoing)
                                       .GroupBy(t => t.TicketTime.Date)
                                       .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count())).Where(t => t.Item1.Date >= DateTime.Now.AddMonths(-1)).ToList();
            finishedTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.Finish)
                                        .GroupBy(t => t.TicketTime.Date)
                                        .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count())).Where(t => t.Item1.Date >= DateTime.Now.AddMonths(-1)).ToList();
        }
        else if (comboBoxValue == "سال")
        {
            ongoingTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.OnGoing)
                                       .GroupBy(t => t.TicketTime.Date)
                                       .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count())).Where(t => t.Item1.Date >= DateTime.Now.AddYears(-1)).ToList();
            finishedTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.Finish)
                                        .GroupBy(t => t.TicketTime.Date)
                                        .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count())).Where(t => t.Item1.Date >= DateTime.Now.AddYears(-1)).ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = System.Convert.ToInt32(((System.Security.Claims.ClaimsIdentity)user.Identity).Claims.Where(c => c.Type == "name").First().Value);

        await GetData(FromDate, ToDate);

    }

    public async Task ValueChangeHandler(RangePickerEventArgs<DateTime> args)
    {
        await GetData(args.StartDate, args.EndDate);
    }

    private async Task GetData(DateTime fromDate, DateTime toDate)
    {
        var response = await ticketRepository.GetAllTickets();
        allTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now.Date, 0) };
        finishedTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now, 0) };
        ongoingTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now, 0) };
        programsTickets = new System.Collections.Generic.List<(string ProgramName, string TicketConditionTypeName, int ProgramTicketsCount)>();
        centersTickets = new System.Collections.Generic.List<Tuple<string, int>>() { new Tuple<string, int>("", 0) };

        ticketDtos = new List<TicketDto>();

        if (response.Count != 0)
        {
            ticketDtos = response;

            allTickets = ticketDtos.GroupBy(t => t.TicketTime.Date)
                                   .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count()))
                                   .ToList();
            ongoingTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.OnGoing)
                                       .GroupBy(t => t.TicketTime.Date)
                                       .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count()))
                                       .Where(t => t.Item1.Date >= DateTime.Now.AddMonths(-1))
                                       .ToList();
            finishedTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.Finish)
                                        .GroupBy(t => t.TicketTime.Date)
                                        .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count()))
                                        .Where(t => t.Item1.Date >= DateTime.Now.AddMonths(-1))
                                        .ToList();

            programsTickets = ticketDtos.GroupBy(t => new { t.ProgramId, t.ProgramName, t.TicketConditionTypeName })
                                        .Select(t => (t.Key.ProgramName, t.Key.TicketConditionTypeName, t.Count()))
                                        .OrderByDescending(t => t.Item2)
                                        .ToList();
            centersTickets = ticketDtos.GroupBy(t => new { t.PersonCenterId, t.PersonCenterName })
                                       .Select(t => new Tuple<string, int>(t.Key.PersonCenterName, t.Count()))
                                       .ToList();

            allTicketscount = ticketDtos.Count();
        }
        //await sfChart.RefreshAsync();

        StateHasChanged();
        ShouldRender();
    }
}
