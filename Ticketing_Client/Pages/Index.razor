@attribute [Authorize]
@page "/"
@using Framework.Pagination;
@using Microsoft.AspNetCore.Authorization;
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Layouts;
@using Ticketing.Client.Contracts.Ticket;
@using Ticketing.Models.Tickets.Dto;
@using Ticketing.Models.Tickets.Query;
@using Ticketing.Models.Tickets.Repository;

@inject AuthenticationStateProvider authenticationStateProvider
@inject ITicketRepository ticketRepository
<style>



    .ChartPanelClass {
        border-radius: 26px;
        min-height: 468px !important;
        max-height: 530px !important;
    }

    .e-input-group:not(.e-success):not(.e-warning):not(.e-error), .e-input-group.e-control-wrapper:not(.e-success):not(.e-warning):not(.e-error) {
        border-color: #e1e1e1;
        direction: ltr;
        padding: 2px;
    }

    .e-input-group.e-rtl input ~ .e-input-group-icon, .e-input-group.e-control-wrapper.e-rtl input ~ .e-input-group-icon, .e-rtl .e-input-group input ~ .e-input-group-icon, .e-rtl .e-input-group.e-control-wrapper input ~ .e-input-group-icon {
        border-left-width: 1px;
        border-right: 0px solid #ced4da;
        border: 1px solid #ced4da;
    }



    .form-label {
        margin-bottom: 0;
        font-size: 12px;
        line-height: 1.5;
        font-size: 13px;
        font-weight: 500;
    }

    .bootstrap5 .e-panel .e-header-text,
    .bootstrap5-dark .e-panel .e-header-text {
        padding: 0;
    }


    .panel-content {
        vertical-align: middle;
        font-size: 15px;
        font-size: 15px;
        font-weight: 500;
        color: rgba(0, 0, 0, 0.61);
        text-align: center;
    }

    body.tailwind-dark .e-dashboardlayout.e-control .e-panel {
        border: 1px solid #d7d7d7;
        border-radius: 0px;
    }

    .e-panel-header {
        padding: 5px;
        margin-bottom: 0;
        background-color: rgba(0, 0, 0, .03);
    }

    .e-panel-content {
        /*height: auto;*/
        width: 100%;
        display: block;
        direction: ltr;
        padding: 6px;
        background-color: #f0f4f900;
        border-bottom-left-radius: 23px;
        border-bottom-right-radius: 23px;
    }

    .e-panel .e-header-text {
        padding: 6px 0 13px 0;
    }




    .e-control.e-lib.e-dashboardlayout.e-responsive {
        z-index: 0;
    }

    .mobile .e-control.e-lib.e-dashboardlayout.e-responsive {
        z-index: 0;
        overflow: scroll;
    }



    body.tailwind-dark .e-dashboardlayout.e-control .e-panel {
        border: transparent !important;
    }

    .e-dashboardlayout {
        padding: 10px;
    }

        .e-dashboardlayout.e-control .e-panel {
            background: #652b9d00;
            box-sizing: border-box;
            position: absolute;
            border: transparent !important;
            box-shadow: 0 2px 4px rgb(0 0 0 / 0%);
        }

            .e-dashboardlayout.e-control .e-panel .e-panel-container .e-grid.sf-grid .e-gridcontent .e-content.e-yscroll {
                overflow: auto;
            }

            .e-dashboardlayout.e-control .e-panel.e-panel-transition {
                transition: top .5s,left .5s;
                /*height: fit-content !important;*/
                position: absolute;
            }

            .e-dashboardlayout.e-control .e-panel .e-panel-header {
                font-size: 16px;
                font-weight: 500;
                height: 60px;
                padding: 13px;
                vertical-align: top;
                border-bottom: 0.5px solid #e3e3e3;
            }

            .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {
                line-height: 10px !important;
                height: 40px;
                color: #212529;
                background: transparent;
                border-color: transparent;
                border-radius: 12px;
            }

            .e-dashboardlayout.e-control .e-panel .e-panel-container {
                /*height: auto !important; */
                width: 100%;
                background-color: #ffffff;
                border-radius: 12px;
                min-height: 124px;
            }

            .e-dashboardlayout.e-control .e-panel.e-panel-transition {
                border-radius: 12px;
                min-width: 200px;
                min-height: 124px;
                max-height: max-content;
                /*height: auto !important; */
            }

            .e-dashboardlayout.e-control .e-panel:hover {
                border: transparent !important;
                box-shadow: transparent !important;
            }

    .row {
        margin-left: 0px;
        margin-right: 0px;
    }

    .row-header {
        font-size: 15px;
        font-weight: 500;
    }


    .e-primary, .e-danger {
        width: 125px;
    }

    .mobile .e-primary, .mobile .e-danger {
        width: 150px;
    }

    .tailwind-dark .e-primary, .tailwind-dark .e-danger,
    .highcontrast .e-primary, .highcontrast .e-danger {
        width: 170px;
    }



    .root-container {
        height: 100%;
    }


    .title {
        font-size: 15px;
        font-weight: bold;
        color: #737373;
    }

    .category-text {
        float: left;
        line-height: 30px;
    }


    .item-container {
        display: flex;
        text-align: center;
        height: 70%;
        padding: 2rem;
        font-size: 22px;
        font-weight: 400;
    }

    .bottom-container {
        text-align: center;
        font-weight: 400;
        font-size: 16px;
    }

    .mobile .bottom-container {
        font-size: 30px;
    }

    .material .bottom-container,
    .fabric .bottom-container,
    .bootstrap .bottom-container,
    .bootstrap4 .bottom-container,
    .tailwind .bottom-container,
    .bootstrap5 .bottom-container {
        color: #4c5258;
    }

    .auto-left {
        margin-left: auto;
    }

    font-face {
        font-family: 'e-sb-icons';
        font-weight: normal;
        font-style: normal;
    }



    .e-headercelldiv span.e-headertext {
        font-size: 14px;
        font-weight: 500;
    }

    .e-grid .e-rowcell {
        font-size: 13px;
    }


    .mobile .item-container {
        padding: 40px;
        font-size: 40px;
    }



    .e-gridheader {
        padding-right: 0px !important;
    }

    .e-card {
        -webkit-tap-highlight-color: #0d6efd;
        background-color: transparent;
        border-bottom: transparent; /*1px solid #3f65ef;*/
        border-top: transparent;
        border-right: transparent;
        border-left: transparent;
        box-shadow: none;
        color: #212529;
        outline: none;
        display: inline-block;
        /*width: auto;*/
        margin: 4px;
        text-align: center;
    }



        .e-card .e-card-header {
            box-sizing: border-box;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-direction: row;
            /*flex-direction: row-reverse;*/
            -ms-flex-pack: center;
            justify-content: center;
            line-height: normal;
            min-height: 22.5px;
            padding: 6px;
            width: inherit;
            padding-bottom: 6px;
        }



            .e-card .e-card-header .e-card-header-image {
                background-repeat: no-repeat;
                background-size: cover;
                height: 32px;
                width: 32px;
                margin: 12px;
            }

            .e-card .e-card-header .e-card-header-caption {
                -ms-flex-item-align: center;
                align-self: center;
                display: -ms-flexbox;
                display: flex;
                -ms-flex: 1;
                flex: 1;
                -ms-flex-direction: column;
                flex-direction: row;
                overflow: hidden;
                padding: 0 0 0 12px;
                /*max-width: fit-content;*/
            }

                .e-card .e-card-header .e-card-header-caption .e-card-header-title {
                    font-family: Helvetica-Bold;
                    color: gray;
                    font-weight: bold;
                    font-size: 12px;
                }

                .e-card .e-card-header .e-card-header-caption .e-card-sub-title {
                    padding-top: 0px;
                    font-family: Helvetica;
                    color: black;
                    font-size: 16px;
                    position: absolute;
                    left: 0;
                }

</style>

<div class="col-lg-12 control-section content-wrapper" style="width: 1610px;">
    <div class="row col-lg-12" style="direction:ltr;">
        <div class="col-lg-3 col-md-3 col-sm-3" style="display:inline-block;padding-left: 1px;padding-right: 7px; padding-bottom:3px;">
            <SfDateRangePicker TValue="DateTime"
                               Placeholder="انتخاب تاریخ"
                               @bind-StartDate="@FromDate"
                               @bind-EndDate="@ToDate"
                               ShowClearButton="true">
                <DateRangePickerEvents TValue="DateTime"
                                       ValueChange="ValueChangeHandler"></DateRangePickerEvents>
            </SfDateRangePicker>
        </div>
    </div>
    <div class="row  col-lg-12">
        <SfDashboardLayout @ref="dashboardObject"
                           Columns="12"
                           AllowFloating="false"
                           AllowDragging="false"
                           CellSpacing="@(new double[]{20 ,20 })">

            <DashboardLayoutPanels>

                <DashboardLayoutPanel CssClass="ChartPanelClass" Id="AddedTickets" Row="1" Column="4" SizeX="8" SizeY="4">
                    <HeaderTemplate><div class="e-header-text">تیکت های ثبت شده</div></HeaderTemplate>
                    <ContentTemplate>
                        <div dir="rtl">
                            <SfChart @ref="sfChart" Height="100%" Width="100%" Background="transparent">
                                <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"
                                                   Interval="1"
                                                   IntervalType="IntervalType.Days"
                                                   EdgeLabelPlacement="EdgeLabelPlacement.Shift"
                                                   LabelRotation=-45>  
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    <ChartAxisLabelStyle TextAlignment="Alignment.Near"></ChartAxisLabelStyle>
                                    @*<ChartAxisMajorTickLines Height="0" ></ChartAxisMajorTickLines>*@
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis Title="تعداد" Interval="5">
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                </ChartPrimaryYAxis>
                                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                <ChartSeriesCollection>

                                    <ChartSeries DataSource="@finishedTickets"
                                                 Name="تیکتهای تمام شده"
                                                 XName="Item1"
                                                 Width="2"
                                                 Opacity="1"
                                                 YName="Item2"
                                                 Type="ChartSeriesType.Column"
                                                 ColumnWidth="0.2"
                                                 Fill="#3ad496">
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartSeriesCollection>
                                    <ChartSeries DataSource="@ongoingTickets"
                                                 Name="تیکتهای  در حال انجام"
                                                 XName="Item1"
                                                 Width="1"
                                                 Opacity="1"
                                                 YName="Item2"
                                                 ColumnWidth="0.2"
                                                 Type="ChartSeriesType.Column"
                                                 Fill="#3358E0">
                                    </ChartSeries>

                                </ChartSeriesCollection>
                            </SfChart>
                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>

                <DashboardLayoutPanel Id="TicketsOfPrograms" Row="0" Column="0" SizeX="4" SizeY="3">
                    <HeaderTemplate><div class="e-header-text">آمار تیکت برنامه ها</div></HeaderTemplate>
                    <ContentTemplate>
                        <SfAccumulationChart @ref="@sfAccumulationChart1" Background="transparent">
                            <AccumulationChartBorder Color="transparent">

                            </AccumulationChartBorder>

                            <AccumulationChartSeriesCollection>
                                <AccumulationChartSeries DataSource="@programsTickets" XName="Item1" YName="Item2" InnerRadius="40%" Palettes="@palettes">
                                    <AccumulationChartSeriesBorder Color="white" Width="3"></AccumulationChartSeriesBorder>
                                </AccumulationChartSeries>
                            </AccumulationChartSeriesCollection>
                            <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                            <AccumulationChartLegendSettings Alignment="Alignment.Near" Position="LegendPosition.Bottom">
                            </AccumulationChartLegendSettings>
                        </SfAccumulationChart>
                    </ContentTemplate>
                </DashboardLayoutPanel>

                <DashboardLayoutPanel Id="TicketsOfCenters" Row="3" Column="0" SizeX="4" SizeY="3">
                    <HeaderTemplate><div class="e-header-text">آمار تیکت دفاتر</div></HeaderTemplate>
                    <ContentTemplate>
                        <SfChart @ref="sfChart" Height="100%" Width="100%" Background="transparent">
                            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"
                                               Interval="1"
                                               EdgeLabelPlacement="EdgeLabelPlacement.Shift"
                                               LabelRotation=-45>
                                <ChartAxisLabelStyle>
                                </ChartAxisLabelStyle>
                                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                <ChartAxisLabelStyle TextAlignment="Alignment.Near"></ChartAxisLabelStyle>
                            </ChartPrimaryXAxis>

                            <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double"
                                               Minimum="0"
                                               Interval="10">
                                <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
                                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                <ChartAxisLineStyle Width="0.5"></ChartAxisLineStyle>
                            </ChartPrimaryYAxis>
                            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                            <ChartSeriesCollection>

                                <ChartSeries DataSource="@centersTickets"
                                             Name="دفاتر"
                                             XName="Item1"
                                             Width="2"
                                             Opacity="1"
                                             YName="Item2"
                                             Type="ChartSeriesType.Column"
                                             ColumnWidth="0.2"
                                             Fill="#f78434">
                                </ChartSeries>
                            </ChartSeriesCollection>

                        </SfChart>

                    </ContentTemplate>
                </DashboardLayoutPanel>

                <DashboardLayoutPanel Id="TicketCondition" Row="0" Column="4" SizeX="2" SizeY="2">
                    <HeaderTemplate>
                        <div class="e-header-text">وضعیت تیکت ها</div>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <div class="col-lg-12 col-md-12 col-sm-12" style="padding: 0px; ">
                            <SfCard ID="FirstCard">
                                <CardHeader Title="@( "تیکتهای در حال انجام")"
                                            SubTitle="@(ticketDtos.Count(t=>t.TicketConditionid==(int)TicketCondition.OnGoing).ToString())"
                                            ImageUrl="@("../images/icons/prograss-icon.png")" />
                            </SfCard>

                            <SfCard ID="SecondCard">
                                <CardHeader Title="@( "تیکتهای پایان یافته")"
                                            SubTitle="@(ticketDtos.Count(t=>t.TicketConditionid==(int)TicketCondition.Finish).ToString())"
                                            ImageUrl="@("../images/icons/done-icon.png")" />
                            </SfCard>

                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>

                <DashboardLayoutPanel Id="TicketType" Row="0" Column="6" SizeX="2" SizeY="2">
                    <HeaderTemplate>
                        <div class="e-header-text">نوع تیکت ها</div>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <div class="col-lg-12 col-md-12 col-sm-12" style="padding: 0px; ">
                            <SfCard ID="FirstCard">
                                <CardHeader Title="@( "تیکتهای پشتیبانی")"
                                            SubTitle="@(ticketDtos.Count(t=>t.Typeid==(int)TicketType.Supporting).ToString())"
                                            ImageUrl="@("../images/icons/supporting-icon.svg")" />
                            </SfCard>

                            <SfCard ID="SecondCard">
                                <CardHeader Title="@( "تیکتهای توسعه")"
                                            SubTitle="@(ticketDtos.Count(t=>t.Typeid==(int)TicketType.Developing).ToString())"
                                            ImageUrl="@("../images/icons/developing-icon.png")" />
                            </SfCard>

                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>

            <DashboardLayoutPanel Id="ErrorTypeCard" Row="0" Column="8" SizeX="2" SizeY="2">
                <HeaderTemplate>
                    <div class="e-header-text">نوع خطاها</div>
                </HeaderTemplate>
                <ContentTemplate>
                    <div class="col-lg-12 col-md-12 col-sm-12" style="padding: 0px; ">
                        <SfCard ID="FirstCard">
                            <CardHeader Title="@( "خطای کاربر")"
                                        SubTitle="@(ticketDtos.Count(t=>t.ErrorTypeid==(int)ErrorType.UserError).ToString())"
                                        ImageUrl="@("../images/icons/usererror-icon.png")" />
                        </SfCard>

                        <SfCard ID="SecondCard" style="margin-top: 2px;   padding-bottom: 1px;">
                            <CardHeader Title="@( "خطای سیستمی")"
                                        SubTitle="@(ticketDtos.Count(t=>t.ErrorTypeid==(int)ErrorType.SystemError).ToString())"
                                        ImageUrl="@("../images/icons/systemerror-icon.png")" />
                        </SfCard>
                    </div>
                </ContentTemplate>
            </DashboardLayoutPanel>

                <DashboardLayoutPanel Id="7" Row="0" Column="10" SizeX="2" SizeY="2">
                    <HeaderTemplate>
                        <div class="e-header-text">تیکت های کاربر</div>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <div class="col-lg-12 col-md-12 col-sm-12" style="padding: 0px; ">
                            <SfCard ID="FirstCard">
                                <CardHeader Title="@( "در حال انجام")"
                                            SubTitle="@(ticketDtos.Where(t=>t.SupporterPersonID==userName).Count(t=>t.TicketConditionid==(int)TicketCondition.OnGoing).ToString())"
                                            ImageUrl="@("../images/icons/supporter-ongoing-tickets-icon.png")" />
                            </SfCard>

                            <SfCard ID="SecondCard" style="margin-top: 2px;   padding-bottom: 1px;">
                                <CardHeader Title="@( "تمام شده")"
                                            SubTitle="@(ticketDtos.Where(t=>t.SupporterPersonID==userName).Count(t=>t.TicketConditionid==(int)TicketCondition.Finish).ToString())"
                                            ImageUrl="@("../images/icons/supporter-finished-tickets-icon.png")" />
                            </SfCard>
                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>
            </DashboardLayoutPanels>
        </SfDashboardLayout>
    </div>
</div>

@code {
    SfDashboardLayout dashboardObject;
    private SfChart sfChart { get; set; } = new SfChart();
    SfAccumulationChart sfAccumulationChart1 { get; set; } = new SfAccumulationChart();
    SfAccumulationChart sfAccumulationChart2 { get; set; } = new SfAccumulationChart();

    List<TicketDto> ticketDtos = new List<TicketDto>();
    List<Tuple<DateTime, int>> allTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now.Date, 0) };
    List<Tuple<DateTime, int>> finishedTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now, 0) };
    List<Tuple<DateTime, int>> ongoingTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now, 0) };
    List<Tuple<string, int>> programsTickets = new System.Collections.Generic.List<Tuple<string, int>>() { new Tuple<string, int>("", 0) };
    List<Tuple<string, int>> centersTickets = new System.Collections.Generic.List<Tuple<string, int>>() { new Tuple<string, int>("", 0) };
    private string Content { get; set; } = "";
    public TicketQueryParameters parameters { get; set; } = new TicketQueryParameters();
    public MetaData metaData { get; set; } = new MetaData();
    public DateTime FromDate { get; set; } = DateTime.Now.AddMonths(-1).Date;
    public DateTime ToDate { get; set; } = DateTime.Now.Date.AddDays(1);
    private string[] palettes = new string[] { "#61EFCD", "#CDDE1F", "#FEC200", "#CA765A", "#2485FA", "#F57D7D", "#C152D2",
                                               "#8854D9", "#3D4EB8", "#00BCD7","#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e", "#997300" };

    private int userName = 0;

    private async Task ChangeDiv(EventArgs args)
    {

    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = System.Convert.ToInt32(((System.Security.Claims.ClaimsIdentity)user.Identity).Claims.Where(c => c.Type == "name").First().Value);

        await GetData(FromDate, ToDate);

    }
    public async Task ValueChangeHandler(RangePickerEventArgs<DateTime> args)
    {
        await GetData(args.StartDate, args.EndDate);
    }

    private async Task GetData(DateTime fromDate, DateTime toDate)
    {
        var response = await ticketRepository.GetAllTickets();
        allTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now.Date, 0) };
        finishedTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now, 0) };
        ongoingTickets = new System.Collections.Generic.List<Tuple<DateTime, int>>() { new Tuple<DateTime, int>(DateTime.Now, 0) };
        programsTickets = new System.Collections.Generic.List<Tuple<string, int>>() { new Tuple<string, int>("", 0) };
        centersTickets = new System.Collections.Generic.List<Tuple<string, int>>() { new Tuple<string, int>("", 0) };
        sfAccumulationChart1 = new SfAccumulationChart();
        sfAccumulationChart2 = new SfAccumulationChart();
        ticketDtos = new List<TicketDto>();

        if (response.Count != 0)
        {
            ticketDtos = response;

            allTickets = ticketDtos.GroupBy(t => t.TicketTime.Date)
                                   .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count()))
                                   .ToList();
            ongoingTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.OnGoing)
                                       .GroupBy(t => t.TicketTime.Date)
                                       .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count()))
                                       .ToList();
            finishedTickets = ticketDtos.Where(t => t.TicketConditionid == (int)TicketCondition.Finish)
                                        .GroupBy(t => t.TicketTime.Date)
                                        .Select(t => new Tuple<DateTime, int>(t.Key.Date, t.Select(e => e.Id).Count()))
                                        .ToList();
            programsTickets = ticketDtos.GroupBy(t => new { t.ProgramId, t.ProgramName })
                                        .Select(t => new Tuple<string, int>(t.Key.ProgramName.ToString(), t.Select(e => e.Id).Count()))
                                        .ToList();
            centersTickets = ticketDtos.GroupBy(t => new { t.PersonCenterId, t.PersonCenterName })
                                       .Select(t => new Tuple<string, int>(t.Key.PersonCenterName.ToString(), t.Select(e => e.Id).Count()))
                                       .ToList();
            sfAccumulationChart1.DataSource = programsTickets;
            //sfAccumulationChart2.DataSource = centersTickets;
            //sfAccumulationChart1.Refresh();
            //sfAccumulationChart2.Refresh();

        }
        //await sfChart.RefreshAsync();

        StateHasChanged();
        ShouldRender();
    }
}
