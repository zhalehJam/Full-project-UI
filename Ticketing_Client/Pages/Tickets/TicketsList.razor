@attribute [Authorize]

@page "/ticketsList"
@using Framework.Pagination;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using Newtonsoft.Json;

@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Action = Syncfusion.Blazor.Grids.Action
@using Syncfusion.Blazor.Popups
@using Ticketing.Client.Contracts.Ticket;
@using Ticketing.Client.Contracts.Persons;
@using Ticketing.Client.Contracts.Ticket.Queries;
@using Ticketing.Models.Centers.Dto;
@using Ticketing.Models.Centers.Repository;
@using Ticketing.Models.Persons.Dto;
@using Ticketing.Models.Persons.Repository;
@using Ticketing.Models.Programs.Dto;
@using Ticketing.Models.Programs.Repository;
@using Ticketing.Models.Tickets.Command
@using Ticketing.Models.Tickets.Dto
@using Ticketing.Models.Tickets.Query;
@using Ticketing.Models.Tickets.Repository
@using Ticketing_UI.Shared.Classes;
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject ITicketRepository ticketRepository
@inject IPersonRepository personRepository
@inject IProgramRepository programRepository
@inject ICenterRepository centerRepository
@inject AuthenticationStateProvider authenticationStateProvider 
@inject SyncfusionBlazorService syncfusionBlazorService

<div class="col-lg-12 control-section">
    <div class="e-panel-header row col-lg-12 col-md-3 col-sm-3" style="  margin-bottom:6px;align-items: baseline;">
        <div style="display:inline-block!important ;width: auto;  font-size: 13px;">نمایش تیکتهای ثبت شده در بازه زمانی:</div>
        <div style="display:inline-block!important;width: auto;">
            <SfDateRangePicker TValue="DateTime" @bind-StartDate="@fromDate" @bind-EndDate="@toDate" ShowClearButton="true">
                <DateRangePickerEvents TValue="DateTime" ValueChange="ValueChangeHandler"></DateRangePickerEvents>
            </SfDateRangePicker>
        </div>
    </div>
    <div class="content-wrapper">
        <div class="row">
            <EditForm Model="@ticketDtos">
                <DataAnnotationsValidator />
                <SfGrid @ref="Grid"
                        AllowGrouping="true"
                        DataSource="@ticketDtos"
                        AllowSorting="true"
                        AllowFiltering="true"
                        Toolbar="@(new string[] { "Add", "Edit", "Delete", "Search","ColumnChooser" })"
                        ShowColumnChooser="true"
                        style="width: auto; padding-right: 1px; padding-left: 1px;"
                        Height="600px" Width="auto">

                <GridEvents TValue="TicketDto"
                            OnActionBegin="ActionBeginHandler"
                            OnActionFailure="ActionFailureHandler"
                >
                </GridEvents>
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu" ></GridFilterSettings>
                    <GridEditSettings AllowAdding="true"
                                      AllowDeleting="true"
                                      AllowEditing="true" Mode="@EditMode.Dialog"
                                      Dialog="DialogParams"
                                      ShowConfirmDialog="true">
                        <HeaderTemplate Context="another_name3">
                            @{
                                var text = "اطلاعات تیکت";
                                <span>@text</span>
                            }
                        </HeaderTemplate>

                        <Template Context="another_name">
                            @{
                                var ticket = (another_name as TicketDto);
                                if (ticket?.SupporterPersonID == 0)
                                {
                                    ticket.SupporterPersonID = supporterInfo.PersonID;
                                    ticket.SupporterPersonName = supporterInfo.PersonName ?? "";
                                    ticket.ProgramId = programDtos.First().Id;
                                    ticket.ErrorTypeid = errorTypes.First().Key;
                                    ticket.Typeid = TicketTypes.First().Key;
                                    ticket.TicketConditionid = TicketConditions.First().Key;
                                }
                            }

                            <div class="row col-md-12">
                                <div class="row col-md-5" style="display: inline-block !important; margin-right: 2px">
                                    <SfTextBox ID="SupporterPersonName"
                                               @onkeypress="@((e) => Setkeyboardkeyevent(e))"
                                               @bind-Value="@(ticket.SupporterPersonName)"
                                               Enabled="false"
                                               FloatLabelType="FloatLabelType.Auto"
                                               Placeholder="نام پشتیبان"></SfTextBox>
                                </div>
                                <div class="row col-md-5" style="display: inline-block !important; margin-right: 2px">
                                    <SfDropDownList ID="ProgramName"
                                                    TItem="ProgramDto"
                                                    @onkeypress="@((e) => Setkeyboardkeyevent(e))"
                                                    @bind-Value="@(ticket.ProgramId)"
                                                    Enabled="@Check"
                                                    IndexChanged="((e) =>{ ticket.ProgramName = programDtos.Single(t => t.Id == ticket.ProgramId).ProgamName; Grid.PreventRender(false);})"
                                                    TValue="Guid"
                                                    DataSource="@programDtos"
                                                    FloatLabelType="FloatLabelType.Auto"
                                                    PopupHeight="230px"
                                                    Placeholder="نام برنامه">
                                        <DropDownListFieldSettings Value="Id" Text="ProgamName">
                                        </DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>

                            <hr />
                            <div class="col-md-12">
                                <div class="col-md-5" style="display: inline-block !important">
                                    <SfNumericTextBox @onkeypress="@(Setkeyboardkeyevent)"
                                                      OnChange="@(async (e) =>{var t = await SetpersonInfo(e); ticket.PersonName = t.PersonName ?? ""; ticket.PersonCenterName = t.CenterName ?? ""; ticket.PersonPartId = t.PartId; ticket.PersonPartName = t.PartName ?? ""; })"
                                                      @bind-Value="@ticket.PersonID"
                                                      Placeholder="کدپرسنلی تماس گیرنده "
                                                      Decimals="0"
                                                      Format="#########"
                                                      FloatLabelType="FloatLabelType.Auto"
                                                      CssClass="e-corner"></SfNumericTextBox>
                                    <ValidationMessage For="@(() => ticket.PersonID)" />
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="col-md-5" style="display: inline-block !important">
                                    <SfTextBox ID="ticketpersonName" @onkeypress="@(Setkeyboardkeyevent)" Enabled="false" @bind-Value="@ticket.PersonName" FloatLabelType="FloatLabelType.Auto" Placeholder="نام"></SfTextBox>
                                </div>

                                <div class="col-md-2" style="display: inline-block !important">
                                    <SfTextBox ID="PersonCenterName" @onkeypress="@(Setkeyboardkeyevent)" Enabled="false" @bind-Value="@(ticket.PersonCenterName)" FloatLabelType="FloatLabelType.Auto" Placeholder="دفتر"></SfTextBox>
                                </div>
                                <div class="col-md-2" style="display: inline-block !important">
                                    <SfTextBox ID="PersonPartName" @onkeypress="@(Setkeyboardkeyevent)" Enabled="false" @bind-Value="@(ticket.PersonPartName)" FloatLabelType="FloatLabelType.Auto" Placeholder="واحد"></SfTextBox>
                                </div>

                            </div>
                            <hr />
                            <div class="col-md-12">
                                <div class="col-md-5" style="display: inline-block !important">
                                    <SfDropDownList ID="ErrorTypeName"
                                                    @onkeypress="@(Setkeyboardkeyevent)"
                                                    TItem="KeyValuePair<int, string>"
                                                    IndexChanged="((e) =>{ ticket.ErrorTypeName = errorTypes.Single(t => t.Key == ticket.ErrorTypeid).Value; Grid.PreventRender(false);})"
                                                    @bind-Value="@(ticket.ErrorTypeid)"
                                                    TValue="int"
                                                    DataSource="@errorTypes"
                                                    FloatLabelType="FloatLabelType.Auto"
                                                    PopupHeight="230px"
                                                    Placeholder="نوع خطا">
                                        <DropDownListFieldSettings Value="Key" Text="Value"></DropDownListFieldSettings>
                                    </SfDropDownList>

                                </div>
                            </div>

                            <div class="row col-md-12">
                                <div class="col-md-6" style="display: inline-block !important">
                                    <SfTextBox ID="ErrorDiscription"
                                               @onkeypress="@(Setkeyboardkeyevent)"
                                               @bind-Value="@(ticket.ErrorDiscription)"
                                               FloatLabelType="FloatLabelType.Auto"
                                               Format="0"
                                               Multiline="true"
                                               style="height: 210px;"
                                               Placeholder="شرح خطا"></SfTextBox>
                                </div>
                                <div class="col-md-6" style="display: inline-block !important">
                                    <SfTextBox ID="SolutionDescription"
                                               @onkeypress="@(Setkeyboardkeyevent)"
                                               @bind-Value="@(ticket.SolutionDescription)"
                                               FloatLabelType="FloatLabelType.Auto"
                                               Multiline="true"
                                               style="height: 210px;"
                                               Placeholder="شرح راهکار"></SfTextBox>
                                </div>
                            </div>
                            <hr />

                            <div class="col-md-5" style="display: inline-block !important;">
                                <SfDateTimePicker TValue="DateTime"
                                                  @bind-Value="@ticket.TicketTime"
                                                  ShowClearButton="false"
                                                  FloatLabelType="FloatLabelType.Auto"
                                                  Placeholder="زمان"
                                                  Format="yyyy/MM/dd HH:mm">


                                </SfDateTimePicker>

                            </div>


                            <div>
                                <div class="col-md-5" style="display: inline-block !important">
                                    <SfDropDownList ID="TicketTypeName"
                                                    @onkeypress="@(Setkeyboardkeyevent)"
                                                    TItem="KeyValuePair<int, string>"
                                                    IndexChanged="((e) =>{ ticket.TicketTypeName = TicketTypes.Single(t => t.Key == ticket.Typeid).Value; Grid.PreventRender(false);})"
                                                    @bind-Value="@(ticket.Typeid)"
                                                    TValue="int"
                                                    DataSource="@TicketTypes"
                                                    FloatLabelType="FloatLabelType.Auto"
                                                    PopupHeight="230px"
                                                    Placeholder="نوع تیکت">
                                        <DropDownListFieldSettings Value="Key" Text="Value">
                                        </DropDownListFieldSettings>
                                    </SfDropDownList>

                                </div>

                                <div class="col-md-5" style="display: inline-block !important">
                                    <SfDropDownList ID="TicketConditionTypeName"
                                                    @onkeypress="@(Setkeyboardkeyevent)"
                                                    TItem="KeyValuePair<int, string>"
                                                    IndexChanged="((e) =>{ ticket.TicketConditionTypeName = TicketConditions.Single(t => t.Key == ticket.TicketConditionid).Value; Grid.PreventRender(false);})"
                                                    @bind-Value="@(ticket.TicketConditionid)"
                                                    TValue="int"
                                                    DataSource="@TicketConditions"
                                                    PopupHeight="230px"
                                                    FloatLabelType="FloatLabelType.Auto" Placeholder="وضعیت">
                                        <DropDownListFieldSettings Value="Key" Text="Value">
                                        </DropDownListFieldSettings>
                                    </SfDropDownList>

                                </div>
                            </div>
                        </Template>

                    </GridEditSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(TicketDto.Id) Visible=true HeaderText="ID" IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="160"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.PersonID) Visible=false HeaderText="PersonID" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.PersonName) Visible=true HeaderText="نام" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.PersonCenterName) HeaderText="مرکز" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.PersonPartName) Visible=false HeaderText="واحد" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.SupporterPersonName) Visible=true HeaderText="پشتیبان" ValidationRules="@(new ValidationRules { Required = true })" Width="100"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.ProgramName) Visible=true HeaderText="برنامه" ValidationRules="@(new ValidationRules { Required = true })" Width="80"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.ErrorTypeName) Visible=false HeaderText="نوع خطا" EditType="EditType.DropDownEdit" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.ErrorDiscription) Visible=true HeaderText="شرح خطا" EditType="EditType.DropDownEdit" TextAlign="TextAlign.Right" Width="210"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.TicketTypeName) Visible=true HeaderText="نوع تیکت" EditType="EditType.DropDownEdit" Width="100"></GridColumn>
                        <GridColumn Field=@nameof(TicketDto.TicketConditionTypeName) HeaderText="وضعیت" EditType="EditType.DropDownEdit" Width="100">
                            <Template Context="another_name2">
                                @{
                                    var category = (another_name2 as TicketDto);
                                    @if (category.TicketConditionTypeName == "OnGoing")
                                    {
                                        <div class="title-temp2 inprogress">
                                            <span class="inprogress-font">@category.TicketConditionTypeName</span>
                                        </div>
                                    }
                                    @if (category.TicketConditionTypeName == "Finish")
                                    {
                                        <div class="title-temp2 completed">
                                            <span class="completed-font">@category.TicketConditionTypeName</span>
                                        </div>
                                    }
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn HeaderText="عملیات" Width="80">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>

                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
                <SfPager @ref="@pager" PageSizes="@pagesizes" PageSize="@pager.PageSize" NumericItemsCount=4 TotalItemsCount="@metaData.TotalCount" ItemClick="Click" PageSizeChanged="@ChangePageSizeEvent" CurrentPage="pageNo2">
                </SfPager>
            </EditForm>

        </div>
    </div>

    <SfDialog @bind-Visible="warningMessageVisiable" Width="20%">
        <DialogTemplates>
            <Header>
                حذف
            </Header>
            <Content>
                <div class="content-wrapper">
                    <div class="row">
                        از حذف این اطلاعات مطمئن هستید؟
                    </div>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" OnClick="@(async e=> await DeleteTicket(supporterInfo.PersonID,selectedTicketDto.Id))"></DialogButton>
            <DialogButton Content="Cancel" IsPrimary="true" OnClick="OnClose"></DialogButton>
        </DialogButtons>
    </SfDialog>

    <div class="col-lg-4 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="right" Y="Bottom"></ToastPosition>
        </SfToast>
    </div>

</div>
<style>

    .e-toolbar .e-tbar-btn.e-btn .e-icons {
        color: #018294 !important;
    }
    .PagerTemplate {
        width: 1000px;
        height: 64px;
        left: 183px;
        top: 615px;
        border-radius: 0px;
    }

    .textbox {
        margin-top: 9px;
        margin-bottom: 9px;
        margin-right: 2px;
        text-align: center;
    }

    .textboxfontcolor {
        color: #000000;
    }

    .add-border {
        border: #ddd 1px solid;
    }

    .textAlign .e-numerictextbox {
        text-align: center;
    }

    .align-icons {
        margin-top: 9px;
        margin-bottom: 9px;
        margin-right: 16px;
        cursor: pointer;
    }

    .e-firstpage {
        margin-left: 6px;
    }

    .e-next {
        margin-left: 16px;
    }

    .disableFirst, .disableLast, .disableFront, .disableBack {
        pointer-events: none;
        opacity: 0.3;
    }

    .title-temp1, .title-temp2 {
        border-radius: 2px;
        padding: 2px 0px 3px 0px;
        margin: 10px 0px;
    }

    .col-md-6 {
        width: 50% !important;
    }

    .title-temp1 {
        width: 64px;
        text-align: left;
    }

    .title-temp2 {
        width: 95px;
        text-align: center;
    }

    .font {
        font-size: 11px;
        font-weight: 400;
        font-style: normal;
        height: 9px;
    }

    .priority {
        height: 16px;
        width: 16px;
    }

    .inprogress {
        background: #7fddeb9e;
    }

    .inprogress-font {
        color: #03659C;
    }

    .completed {
        background: #fee07f;
    }

    .completed-font {
        color: #067939;
    }

    .blocked {
        background: #FFF1F1;
    }

    .blocked-font {
        color: #B40000;
    }

    .wontfix {
        background: #FFEFE9;
    }

    .wontfix-font {
        color: #993105;
    }

    .notreproduced {
        background: #FFF8E1;
    }

    .notreproduced-font {
        color: #926A04;
    }

    .bydesign {
        background: #ECFEFF;
    }

    .bydesign-font {
        color: #027C85;
    }
</style>

@code {
    SfPager pager = new SfPager();
    public List<int> pagesizes = new List<int> { 5, 10, 12, 20,50,100,150,200 };
    private List<CenterDto> centerDtos = new List<CenterDto>();
    private List<PartDto> partDtos = new List<PartDto>();
    private List<PersonDto> personDtos = new List<PersonDto>();
    private List<PersonDto> AllpersonDtos = new List<PersonDto>();
    private List<TicketDto>? ticketDtos { get; set; } = new List<TicketDto>();
    private List<ProgramDto> programDtos { get; set; } = new List<ProgramDto>();
    private TicketDto selectedTicketDto { get; set; } = new TicketDto();

    private DialogSettings DialogParams = new DialogSettings { MinHeight = "450px", Width = "750px" };
    private PersonDto supporterInfo = new PersonDto();

    private SfGrid<TicketDto> Grid { get; set; }
    private GridPageSettings GridPage { get; set; } = new GridPageSettings();

    private int pageNo2 = 1;

    public int totalPages { get; set; }
    public bool DisableBackIcon = false;
    public bool DisableForwardIcon = false;

    private bool messageVisiable = false;
    private bool Check = false;
    private bool flag = false;
    private bool alertVisible = false;
    private bool warningMessageVisiable = false;
    private SfToast ToastObj;
    private ToastModel toastModel = new ToastModel();
    private bool UserIsAdmin = false;

    private TicketQueryParameters parameters { get; set; } = new TicketQueryParameters();
    private MetaData metaData { get; set; } = new MetaData();
    public DateTime fromDate { get; set; } = DateTime.Now.AddMonths(-1).AddDays(-1).Date;
    public DateTime toDate { get; set; } = DateTime.Now.AddDays(1).Date;
    GetPersonInfoByFiltersQuery getPersonInfoByFiltersQuery = new GetPersonInfoByFiltersQuery();

    private List<KeyValuePair<int, string>> errorTypes { get; set; } = Enum.GetValues(typeof(ErrorType)).Cast<ErrorType>().ToList()
                                                                           .Select(s => new { Key = (int)s, Value = @EnumExtensions.GetDisplayName((ErrorType)s) })
                                                                           .ToDictionary(d => d.Key, d => d.Value).ToList();
    private List<KeyValuePair<int, string>> TicketTypes { get; set; } = Enum.GetValues(typeof(TicketType)).Cast<TicketType>().ToList()
                                                                            .Select(s => new { Key = (int)s, Value = @EnumExtensions.GetDisplayName((TicketType)s) })
                                                                            .ToDictionary(d => d.Key, d => d.Value).ToList();
    private List<KeyValuePair<int, string>> TicketConditions { get; set; } = Enum.GetValues(typeof(TicketCondition)).Cast<TicketCondition>().ToList()
                                                                           .Select(s => new { Key = (int)s, Value = @EnumExtensions.GetDisplayName((TicketCondition)s) })
                                                                           .ToDictionary(d => d.Key, d => d.Value).ToList();


    protected override async Task OnInitializedAsync()
    {
        syncfusionBlazorService.EnableRtl(enable: true);
        pageNo2 = 1;
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string userName = ((System.Security.Claims.ClaimsIdentity)user.Identity).Claims.Where(c => c.Type == "name").First().Value;
        supporterInfo = await GetPersonInfo(Convert.ToInt32(userName));
        programDtos = await programRepository.GetSupporterProgramsList(supporterInfo.PersonID);
        if (supporterInfo.PersonRole == RoleType.Admin)
        {
            UserIsAdmin = true;
        }
        centerDtos = await centerRepository.GetAllCenters();
        await GetAllTickets();
        await GetPersonData();
    }

    private async Task ChangePageSizeEvent(PageSizeChangedArgs args)
    {
        await GetAllTickets();
    }

   
    private async Task SetCenterChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        getPersonInfoByFiltersQuery.CenterId = new Guid(args.Value.ToString());
        partDtos.Clear();
        AllpersonDtos = personDtos;
        if (getPersonInfoByFiltersQuery.CenterId != Guid.Empty)
        {
            var selectedCenter = centerDtos.Single(c => c.Id.Equals(getPersonInfoByFiltersQuery.CenterId));
            AllpersonDtos = personDtos.Where(p => getPersonInfoByFiltersQuery.CenterId == Guid.Empty ? true : p.CenterName == selectedCenter.CenterName).ToList();


            partDtos = selectedCenter.parts;
        }
    }

    private async Task SetPartChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        getPersonInfoByFiltersQuery.PartId = new Guid(args.Value.ToString());
        await GetPersonData();
    }
    public async Task Click(PagerItemClickEventArgs args)
    {
        pageNo2 = args.CurrentPage;
        parameters.PageSize = pager.PageSize;
        await GetAllTickets();
        Grid.PreventRender(false);
        await Grid.Refresh();

    }
    private async Task OnFilter(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await GetPersonData();
        }
    }

    private async Task SetPersonRoleChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        getPersonInfoByFiltersQuery.userRole = args.Value.ToString();
        await GetPersonData();
    }

    private async Task GetPersonData()
    {
        try
        { 
            var response = await personRepository.GetAllPersons();
            personDtos = response.OrderBy(e => e.PersonID).ToList();
            AllpersonDtos = personDtos;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            //loadingStatus = LoadingStatus.Failed;
        }
    }

    public async Task ValueChangeHandler(RangePickerEventArgs<DateTime> args)
    {
        fromDate = args.StartDate;
        toDate = args.EndDate;
        await GetAllTickets();
    }


    public async Task ShowNextPage()
    {
        ++pageNo2;
        await GetAllTickets();
        Grid.PreventRender(false);
        await Grid.Refresh();
    }
    public async Task ShowPreviousPage()
    {
        --pageNo2;
        await GetAllTickets();
        Grid.PreventRender(false);
        await Grid.Refresh();
    }
    public async Task ShowFirstPage()
    {
        pageNo2 = 1;
        await GetAllTickets();
        Grid.PreventRender(false);
        await Grid.Refresh();
    }

    public async Task ShowLastPage()
    {
        pageNo2 = metaData.TotalPages;
        await GetAllTickets();
    }
    public void ActionFailureHandler(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {
        var s = JsonConvert.DeserializeObject<Dictionary<string, object>>(JsonConvert.SerializeObject(args.Error));
    }

    private async Task<PersonDto> GetPersonInfo(int personCode)
    {
        return await personRepository.GetPersonInfoByPersonelCode(personCode);
    }

    public async Task ActionBeginHandler(ActionEventArgs<TicketDto> Args)
    {
        string rType = Args.RequestType.ToString();
        if (flag)
        {
            Args.Cancel = true;
            flag = false;
        }
        else
        {
            if (rType == "Save")
            {
                try
                {
                    switch (Args.Action)
                    {
                        case "Add":
                            await CreateTicket(Args.Data);
                            break;

                        case "Edit":
                            await EditTicket(Args.Data);
                            break;
                    }
                    await GetAllTickets();
                }
                catch (Exception ex)
                {
                    toastModel = new ToastModel { Title = "Error!", Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
                    Args.Cancel = true;

                }
                finally
                {
                    Args.Cancel = true;
                    await this.ToastObj.ShowAsync(toastModel);
                    ticketDtos = await GetAllTickets();
                    Grid.PreventRender(false);
                    await Grid.Refresh();

                }
            }
            else if (rType == "Delete")
            {
                try
                {
                    ClickDeleteButton(Args.RowData);

                }
                catch (Exception ex)
                {
                    var t = new ToastModel { Title = "خطا!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
                    await this.ToastObj.ShowAsync(t);
                    Args.Cancel = true;
                }
                finally
                {
                    await GetAllTickets();
                    StateHasChanged();
                }

            }
            else if (rType == "Refresh")
            {
                Grid.PreventRender(false);
            }
            else if (rType == "Add")
            {
                Check = true;
            }

        }
    }
    private async Task<PersonDto> SetPersonnfo(int personID)
    {
        return personDtos.Single(p => p.PersonID == personID);

    }
    private async Task<List<TicketDto>> GetAllTickets()
    {
        parameters.fromDate = fromDate;
        parameters.toDate = toDate;
        parameters.PageNumber = pageNo2;
        parameters.PageSize = pager.PageSize;
        GridPage.CurrentPage = pageNo2;
        var response = await ticketRepository.GetUserTicketsByDateRage(parameters);
        ticketDtos = response.Items;
        metaData = response.MetaData;

        DisableBackIcon = false;
        DisableForwardIcon = false;

        if (pageNo2 <= 1)
            DisableBackIcon = true;
        if (pageNo2 >= metaData.TotalPages)
            DisableForwardIcon = true;


        StateHasChanged();
        return ticketDtos;
    }

    private void ClickDeleteButton(TicketDto ticketDto)
    {
        selectedTicketDto = ticketDto;
        warningMessageVisiable = true;
    }

    private void Setkeyboardkeyevent(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            flag = true;
    }

    private async Task<PersonDto> SetpersonInfo(ChangeEventArgs args)
    {
        var personInfos = new PersonDto();
        try
        {
            personInfos = await personRepository.GetPersonInfoByPersonelCode(Convert.ToInt32(args.Value));
            Grid.PreventRender(false);
            return personInfos;
        }
        catch (Exception ex)
        {
            toastModel = new ToastModel { Title = "Error!", Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
        }
        return personInfos;
    }

    private async Task CreateTicket(TicketDto ticketDto)
    {
        CreateTicketCommand createTicketCommand = new CreateTicketCommand()
            {
                TicketTime = ticketDto.TicketTime,
                TicketCondition = (TicketCondition)ticketDto.TicketConditionid,
                ErrorDiscription = ticketDto.ErrorDiscription ?? "",
                ErrorType = (ErrorType)ticketDto.ErrorTypeid,
                SolutionDiscription = ticketDto.SolutionDescription ?? "",
                SupporterPersonID = ticketDto.SupporterPersonID,
                ProgramId = ticketDto.ProgramId,
                PersonID = ticketDto.PersonID,
                Type = (TicketType)ticketDto.Typeid
            };
        await ticketRepository.CreateNewTicket(createTicketCommand);
        toastModel = new ToastModel { Title = "Success!", Content = "تیکت مورد نظر ثبت شد", CssClass = "e-toast-success", Icon = "e-success toast-icons" };
    }

    private async Task EditTicket(TicketDto seletedticket)
    {
        UpdateTicketCommand updateTicketCommand = new UpdateTicketCommand()
            {
                Id = seletedticket.Id,
                TicketTime = seletedticket.TicketTime,
                TicketCondition = (TicketCondition)seletedticket.TicketConditionid,
                ErrorDiscription = seletedticket.ErrorDiscription ?? "",
                ErrorType = (ErrorType)errorTypes.Where(b => b.Value == seletedticket.ErrorTypeName).Select(t => t.Key).First(),
                SolutionDiscription = seletedticket.SolutionDescription ?? "",
                ProgramId = seletedticket.ProgramId,
                PersonID = seletedticket.PersonID,
                Type = (TicketType)seletedticket.Typeid,
                EditorPersonID = supporterInfo.PersonID
            };
        await ticketRepository.UpdateTicket(updateTicketCommand);

        toastModel = new ToastModel { Title = "Success!", Content = "تیکت مورد نظر با موفقیت ویرایش شد", CssClass = "e-toast-success", Icon = "e-success toast-icons" };

        await GetAllTickets();
    }

    private async Task DeleteTicket(int userId, Guid Id)
    {

        try
        {
            DeleteTicketCommand deleteTicketCommand = new DeleteTicketCommand();
            deleteTicketCommand.SupporterUser = userId;
            deleteTicketCommand.Id = Id;
            await ticketRepository.DeleteTicket(deleteTicketCommand);
            toastModel = new ToastModel { Title = "Success!", Content = " تیکت مورد نظر حذف شد", CssClass = "e-toast-success", Icon = "e-success toast-icons" };
        }
        catch (Exception ex)
        {
            toastModel = new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" };
        }
        finally
        {
            await this.ToastObj.ShowAsync(toastModel);
            warningMessageVisiable = false;
            await GetAllTickets();
            StateHasChanged();
            Grid.PreventRender(false);
            await Grid.Refresh();
        }
    }

    private void OnClose()
    {
        warningMessageVisiable = false;
    }


} 